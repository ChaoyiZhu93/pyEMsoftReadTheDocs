from __future__ import print_function, absolute_import, division
import _pyEMsoft
import f90wrap.runtime
import logging

class Stringconstants(f90wrap.runtime.FortranModule):
    """
    Module stringconstants
    
    
    Defined at stringconstants.f90 lines 46-1318
    
    """
    @property
    def sc_axialsymmetry(self):
        """
        Element sc_axialsymmetry ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 51
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_axialsymmetry()
    
    @property
    def sc_h5copy(self):
        """
        Element sc_h5copy ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 53
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_h5copy()
    
    @property
    def sc_h5copypath(self):
        """
        Element sc_h5copypath ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 55
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_h5copypath()
    
    @property
    def sc_testing(self):
        """
        Element sc_testing ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 57
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_testing()
    
    @property
    def sc_temporary(self):
        """
        Element sc_temporary ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 59
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_temporary()
    
    @property
    def sc_windows(self):
        """
        Element sc_windows ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 61
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_windows()
    
    @property
    def sc_config(self):
        """
        Element sc_config ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 63
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_config()
    
    @property
    def sc_emsoft(self):
        """
        Element sc_emsoft ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 65
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emsoft()
    
    @property
    def sc_tmp(self):
        """
        Element sc_tmp ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 67
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_tmp()
    
    @property
    def sc_emsoftpathname(self):
        """
        Element sc_emsoftpathname ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 69
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emsoftpathname()
    
    @property
    def sc_emsoftlibrarylocation(self):
        """
        Element sc_emsoftlibrarylocation ftype=character(21) pytype=str
        
        
        Defined at stringconstants.f90 line 71
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emsoftlibrarylocation()
    
    @property
    def sc_emxtalfolderpathname(self):
        """
        Element sc_emxtalfolderpathname ftype=character(20) pytype=str
        
        
        Defined at stringconstants.f90 line 73
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emxtalfolderpathname()
    
    @property
    def sc_emdatapathname(self):
        """
        Element sc_emdatapathname ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 75
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emdatapathname()
    
    @property
    def sc_emtmppathname(self):
        """
        Element sc_emtmppathname ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 77
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emtmppathname()
    
    @property
    def sc_emsoftplatform(self):
        """
        Element sc_emsoftplatform ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 79
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emsoftplatform()
    
    @property
    def sc_emsofttestpath(self):
        """
        Element sc_emsofttestpath ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 81
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emsofttestpath()
    
    @property
    def sc_emsofttestingpath(self):
        """
        Element sc_emsofttestingpath ftype=character(17) pytype=str
        
        
        Defined at stringconstants.f90 line 83
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emsofttestingpath()
    
    @property
    def sc_emsoftversion(self):
        """
        Element sc_emsoftversion ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 85
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emsoftversion()
    
    @property
    def sc_configpath(self):
        """
        Element sc_configpath ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 87
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_configpath()
    
    @property
    def sc_templatepathname(self):
        """
        Element sc_templatepathname ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 89
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_templatepathname()
    
    @property
    def sc_resourcepathname(self):
        """
        Element sc_resourcepathname ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 91
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_resourcepathname()
    
    @property
    def sc_readmefirst(self):
        """
        Element sc_readmefirst ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 93
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_readmefirst()
    
    @property
    def sc_homepathname(self):
        """
        Element sc_homepathname ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 95
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_homepathname()
    
    @property
    def sc_openclpathname(self):
        """
        Element sc_openclpathname ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 97
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_openclpathname()
    
    @property
    def sc_source(self):
        """
        Element sc_source ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 99
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_source()
    
    @property
    def sc_templatecodefilename(self):
        """
        Element sc_templatecodefilename ftype=character(20) pytype=str
        
        
        Defined at stringconstants.f90 line 101
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_templatecodefilename()
    
    @property
    def sc_wyckoffpositionsfilename(self):
        """
        Element sc_wyckoffpositionsfilename ftype=character(23) pytype=str
        
        
        Defined at stringconstants.f90 line 103
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_wyckoffpositionsfilename()
    
    @property
    def sc_randomseedfilename(self):
        """
        Element sc_randomseedfilename ftype=character(18) pytype=str
        
        
        Defined at stringconstants.f90 line 105
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_randomseedfilename()
    
    @property
    def sc_emsoftnativedelimiter(self):
        """
        Element sc_emsoftnativedelimiter ftype=character(21) pytype=str
        
        
        Defined at stringconstants.f90 line 107
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emsoftnativedelimiter()
    
    @property
    def sc_username(self):
        """
        Element sc_username ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 109
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_username()
    
    @property
    def sc_userlocation(self):
        """
        Element sc_userlocation ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 111
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_userlocation()
    
    @property
    def sc_useremail(self):
        """
        Element sc_useremail ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 113
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_useremail()
    
    @property
    def sc_develop(self):
        """
        Element sc_develop ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 115
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_develop()
    
    @property
    def sc_release(self):
        """
        Element sc_release ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 117
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_release()
    
    @property
    def sc_jsonfilename(self):
        """
        Element sc_jsonfilename ftype=character(17) pytype=str
        
        
        Defined at stringconstants.f90 line 119
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_jsonfilename()
    
    @property
    def sc_jsontemplates(self):
        """
        Element sc_jsontemplates ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 121
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_jsontemplates()
    
    @property
    def sc_namelisttemplates(self):
        """
        Element sc_namelisttemplates ftype=character(17) pytype=str
        
        
        Defined at stringconstants.f90 line 123
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_namelisttemplates()
    
    @property
    def sc_resources(self):
        """
        Element sc_resources ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 125
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_resources()
    
    @property
    def sc_opencl(self):
        """
        Element sc_opencl ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 127
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_opencl()
    
    @property
    def sc_fftwwisdomtxt(self):
        """
        Element sc_fftwwisdomtxt ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 129
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_fftwwisdomtxt()
    
    @property
    def sc_wikicodestxt(self):
        """
        Element sc_wikicodestxt ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 131
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_wikicodestxt()
    
    @property
    def sc_templatecodestxt(self):
        """
        Element sc_templatecodestxt ftype=character(17) pytype=str
        
        
        Defined at stringconstants.f90 line 133
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_templatecodestxt()
    
    @property
    def sc_wiki(self):
        """
        Element sc_wiki ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 135
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_wiki()
    
    @property
    def sc_wyckoffpositionstxt(self):
        """
        Element sc_wyckoffpositionstxt ftype=character(20) pytype=str
        
        
        Defined at stringconstants.f90 line 137
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_wyckoffpositionstxt()
    
    @property
    def sc_randomseedsdata(self):
        """
        Element sc_randomseedsdata ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 139
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_randomseedsdata()
    
    @property
    def sc_atomdata(self):
        """
        Element sc_atomdata ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 144
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_atomdata()
    
    @property
    def sc_atomtypes(self):
        """
        Element sc_atomtypes ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 146
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_atomtypes()
    
    @property
    def sc_avdotproductmap(self):
        """
        Element sc_avdotproductmap ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 148
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_avdotproductmap()
    
    @property
    def sc_averageorientations(self):
        """
        Element sc_averageorientations ftype=character(19) pytype=str
        
        
        Defined at stringconstants.f90 line 150
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_averageorientations()
    
    @property
    def sc_bfimage(self):
        """
        Element sc_bfimage ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 152
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_bfimage()
    
    @property
    def sc_betheparameters(self):
        """
        Element sc_betheparameters ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 154
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_betheparameters()
    
    @property
    def sc_betheparametersfile(self):
        """
        Element sc_betheparametersfile ftype=character(19) pytype=str
        
        
        Defined at stringconstants.f90 line 156
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_betheparametersfile()
    
    @property
    def sc_braggangle(self):
        """
        Element sc_braggangle ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 158
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_braggangle()
    
    @property
    def sc_braggga(self):
        """
        Element sc_braggga ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 160
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_braggga()
    
    @property
    def sc_bzero(self):
        """
        Element sc_bzero ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 162
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_bzero()
    
    @property
    def sc_cbedqc(self):
        """
        Element sc_cbedqc ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 164
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cbedqc()
    
    @property
    def sc_cbedqcnamelist(self):
        """
        Element sc_cbedqcnamelist ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 166
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cbedqcnamelist()
    
    @property
    def sc_ci(self):
        """
        Element sc_ci ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 168
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ci()
    
    @property
    def sc_cimap(self):
        """
        Element sc_cimap ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 170
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cimap()
    
    @property
    def sc_clarray(self):
        """
        Element sc_clarray ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 172
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_clarray()
    
    @property
    def sc_cameraazimuthalangle(self):
        """
        Element sc_cameraazimuthalangle ftype=character(22) pytype=str
        
        
        Defined at stringconstants.f90 line 174
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cameraazimuthalangle()
    
    @property
    def sc_cameraelevationangle(self):
        """
        Element sc_cameraelevationangle ftype=character(22) pytype=str
        
        
        Defined at stringconstants.f90 line 176
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cameraelevationangle()
    
    @property
    def sc_correctedeulerangles(self):
        """
        Element sc_correctedeulerangles ftype=character(20) pytype=str
        
        
        Defined at stringconstants.f90 line 178
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_correctedeulerangles()
    
    @property
    def sc_creationdate(self):
        """
        Element sc_creationdate ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 180
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_creationdate()
    
    @property
    def sc_creationtime(self):
        """
        Element sc_creationtime ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 182
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_creationtime()
    
    @property
    def sc_creator(self):
        """
        Element sc_creator ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 184
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_creator()
    
    @property
    def sc_crystalsystem(self):
        """
        Element sc_crystalsystem ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 186
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_crystalsystem()
    
    @property
    def sc_cubochoricstepsize(self):
        """
        Element sc_cubochoricstepsize ftype=character(18) pytype=str
        
        
        Defined at stringconstants.f90 line 188
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cubochoricstepsize()
    
    @property
    def sc_date(self):
        """
        Element sc_date ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 190
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_date()
    
    @property
    def sc_detparms(self):
        """
        Element sc_detparms ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 192
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_detparms()
    
    @property
    def sc_detparmstepsize(self):
        """
        Element sc_detparmstepsize ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 194
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_detparmstepsize()
    
    @property
    def sc_diffractionpattern(self):
        """
        Element sc_diffractionpattern ftype=character(18) pytype=str
        
        
        Defined at stringconstants.f90 line 196
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_diffractionpattern()
    
    @property
    def sc_dispfield(self):
        """
        Element sc_dispfield ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 198
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_dispfield()
    
    @property
    def sc_dotproducts(self):
        """
        Element sc_dotproducts ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 200
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_dotproducts()
    
    @property
    def sc_duration(self):
        """
        Element sc_duration ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 202
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_duration()
    
    @property
    def sc_d2or3(self):
        """
        Element sc_d2or3 ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 204
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_d2or3()
    
    @property
    def sc_ebsdpatterns(self):
        """
        Element sc_ebsdpatterns ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 206
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsdpatterns()
    
    @property
    def sc_ebsdviewreferenceframe(self):
        """
        Element sc_ebsdviewreferenceframe ftype=character(22) pytype=str
        
        
        Defined at stringconstants.f90 line 208
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsdviewreferenceframe()
    
    @property
    def sc_ebsdmasterjson(self):
        """
        Element sc_ebsdmasterjson ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 210
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsdmasterjson()
    
    @property
    def sc_ebsdmasternml(self):
        """
        Element sc_ebsdmasternml ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 212
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsdmasternml()
    
    @property
    def sc_ebsdmastervars(self):
        """
        Element sc_ebsdmastervars ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 214
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsdmastervars()
    
    @property
    def sc_ebsdenergy(self):
        """
        Element sc_ebsdenergy ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 216
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsdenergy()
    
    @property
    def sc_ebsdoverlapnml(self):
        """
        Element sc_ebsdoverlapnml ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 218
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsdoverlapnml()
    
    @property
    def sc_ebsdoverlapnamelist(self):
        """
        Element sc_ebsdoverlapnamelist ftype=character(19) pytype=str
        
        
        Defined at stringconstants.f90 line 220
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsdoverlapnamelist()
    
    @property
    def sc_eccidefectjson(self):
        """
        Element sc_eccidefectjson ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 222
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_eccidefectjson()
    
    @property
    def sc_eccifoiljson(self):
        """
        Element sc_eccifoiljson ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 224
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_eccifoiljson()
    
    @property
    def sc_ecciimages(self):
        """
        Element sc_ecciimages ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 226
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ecciimages()
    
    @property
    def sc_eccimasternml(self):
        """
        Element sc_eccimasternml ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 228
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_eccimasternml()
    
    @property
    def sc_ecp(self):
        """
        Element sc_ecp ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 230
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ecp()
    
    @property
    def sc_ecpkinematic(self):
        """
        Element sc_ecpkinematic ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 232
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ecpkinematic()
    
    @property
    def sc_ecpzanml(self):
        """
        Element sc_ecpzanml ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 234
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ecpzanml()
    
    @property
    def sc_ecpmaster(self):
        """
        Element sc_ecpmaster ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 236
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ecpmaster()
    
    @property
    def sc_ecpmasternml(self):
        """
        Element sc_ecpmasternml ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 238
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ecpmasternml()
    
    @property
    def sc_ecpname(self):
        """
        Element sc_ecpname ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 240
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ecpname()
    
    @property
    def sc_ecpatterns(self):
        """
        Element sc_ecpatterns ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 242
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ecpatterns()
    
    @property
    def sc_emdata(self):
        """
        Element sc_emdata ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 244
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emdata()
    
    @property
    def sc_emebsdfullnml(self):
        """
        Element sc_emebsdfullnml ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 246
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emebsdfullnml()
    
    @property
    def sc_emebsdnml(self):
        """
        Element sc_emebsdnml ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 248
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emebsdnml()
    
    @property
    def sc_emebsddefectnml(self):
        """
        Element sc_emebsddefectnml ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 250
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emebsddefectnml()
    
    @property
    def sc_ebsddefectnamelist(self):
        """
        Element sc_ebsddefectnamelist ftype=character(18) pytype=str
        
        
        Defined at stringconstants.f90 line 252
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsddefectnamelist()
    
    @property
    def sc_emebsdscannml(self):
        """
        Element sc_emebsdscannml ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 254
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emebsdscannml()
    
    @property
    def sc_emecpnml(self):
        """
        Element sc_emecpnml ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 256
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emecpnml()
    
    @property
    def sc_empedza(self):
        """
        Element sc_empedza ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 258
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_empedza()
    
    @property
    def sc_emtkdnml(self):
        """
        Element sc_emtkdnml ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 260
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emtkdnml()
    
    @property
    def sc_emkinematical(self):
        """
        Element sc_emkinematical ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 262
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emkinematical()
    
    @property
    def sc_ebinsize(self):
        """
        Element sc_ebinsize ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 264
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebinsize()
    
    @property
    def sc_ehistmin(self):
        """
        Element sc_ehistmin ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 266
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ehistmin()
    
    @property
    def sc_ekev(self):
        """
        Element sc_ekev ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 268
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ekev()
    
    @property
    def sc_ekevs(self):
        """
        Element sc_ekevs ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 270
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ekevs()
    
    @property
    def sc_esel(self):
        """
        Element sc_esel ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 272
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_esel()
    
    @property
    def sc_dictionaryeulerangles(self):
        """
        Element sc_dictionaryeulerangles ftype=character(21) pytype=str
        
        
        Defined at stringconstants.f90 line 274
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_dictionaryeulerangles()
    
    @property
    def sc_eulerangles(self):
        """
        Element sc_eulerangles ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 276
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_eulerangles()
    
    @property
    def sc_eulertriplet(self):
        """
        Element sc_eulertriplet ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 278
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_eulertriplet()
    
    @property
    def sc_fzcnt(self):
        """
        Element sc_fzcnt ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 280
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_fzcnt()
    
    @property
    def sc_fit(self):
        """
        Element sc_fit ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 282
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_fit()
    
    @property
    def sc_formula(self):
        """
        Element sc_formula ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 284
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_formula()
    
    @property
    def sc_ftensor(self):
        """
        Element sc_ftensor ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 286
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ftensor()
    
    @property
    def sc_gridtype(self):
        """
        Element sc_gridtype ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 288
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_gridtype()
    
    @property
    def sc_hdfname(self):
        """
        Element sc_hdfname ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 290
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hdfname()
    
    @property
    def sc_hdfstrings(self):
        """
        Element sc_hdfstrings ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 292
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hdfstrings()
    
    @property
    def sc_hdffileversion(self):
        """
        Element sc_hdffileversion ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 294
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hdffileversion()
    
    @property
    def sc_hostname(self):
        """
        Element sc_hostname ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 296
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hostname()
    
    @property
    def sc_horizontalaxisa(self):
        """
        Element sc_horizontalaxisa ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 298
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_horizontalaxisa()
    
    @property
    def sc_id(self):
        """
        Element sc_id ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 300
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_id()
    
    @property
    def sc_intfactor(self):
        """
        Element sc_intfactor ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 302
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_intfactor()
    
    @property
    def sc_iq(self):
        """
        Element sc_iq ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 304
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_iq()
    
    @property
    def sc_iqmap(self):
        """
        Element sc_iqmap ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 306
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_iqmap()
    
    @property
    def sc_ism(self):
        """
        Element sc_ism ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 308
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ism()
    
    @property
    def sc_ismap(self):
        """
        Element sc_ismap ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 310
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ismap()
    
    @property
    def sc_isr(self):
        """
        Element sc_isr ftype=character(19) pytype=str
        
        
        Defined at stringconstants.f90 line 312
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_isr()
    
    @property
    def sc_indices(self):
        """
        Element sc_indices ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 314
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_indices()
    
    @property
    def sc_info(self):
        """
        Element sc_info ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 316
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_info()
    
    @property
    def sc_kappavmf(self):
        """
        Element sc_kappavmf ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 318
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_kappavmf()
    
    @property
    def sc_kam(self):
        """
        Element sc_kam ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 320
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_kam()
    
    @property
    def sc_kosselmasterlist(self):
        """
        Element sc_kosselmasterlist ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 322
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_kosselmasterlist()
    
    @property
    def sc_kosselmode(self):
        """
        Element sc_kosselmode ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 324
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_kosselmode()
    
    @property
    def sc_l(self):
        """
        Element sc_l ftype=character(1) pytype=str
        
        
        Defined at stringconstants.f90 line 326
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_l()
    
    @property
    def sc_lambdas(self):
        """
        Element sc_lambdas ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 328
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_lambdas()
    
    @property
    def sc_lambdamax(self):
        """
        Element sc_lambdamax ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 330
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_lambdamax()
    
    @property
    def sc_lambdamin(self):
        """
        Element sc_lambdamin ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 332
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_lambdamin()
    
    @property
    def sc_latticeconstanta(self):
        """
        Element sc_latticeconstanta ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 334
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_latticeconstanta()
    
    @property
    def sc_latticeconstantalpha(self):
        """
        Element sc_latticeconstantalpha ftype=character(20) pytype=str
        
        
        Defined at stringconstants.f90 line 336
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_latticeconstantalpha()
    
    @property
    def sc_latticeconstantb(self):
        """
        Element sc_latticeconstantb ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 338
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_latticeconstantb()
    
    @property
    def sc_latticeconstantbeta(self):
        """
        Element sc_latticeconstantbeta ftype=character(19) pytype=str
        
        
        Defined at stringconstants.f90 line 340
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_latticeconstantbeta()
    
    @property
    def sc_latticeconstantc(self):
        """
        Element sc_latticeconstantc ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 342
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_latticeconstantc()
    
    @property
    def sc_latticeconstantgamma(self):
        """
        Element sc_latticeconstantgamma ftype=character(20) pytype=str
        
        
        Defined at stringconstants.f90 line 344
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_latticeconstantgamma()
    
    @property
    def sc_latticeparameters(self):
        """
        Element sc_latticeparameters ftype=character(17) pytype=str
        
        
        Defined at stringconstants.f90 line 346
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_latticeparameters()
    
    @property
    def sc_lauemaster(self):
        """
        Element sc_lauemaster ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 348
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_lauemaster()
    
    @property
    def sc_lauenml(self):
        """
        Element sc_lauenml ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 350
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_lauenml()
    
    @property
    def sc_lauemasternml(self):
        """
        Element sc_lauemasternml ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 352
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_lauemasternml()
    
    @property
    def sc_lauenamelist(self):
        """
        Element sc_lauenamelist ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 354
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_lauenamelist()
    
    @property
    def sc_lauemasternamelist(self):
        """
        Element sc_lauemasternamelist ftype=character(18) pytype=str
        
        
        Defined at stringconstants.f90 line 356
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_lauemasternamelist()
    
    @property
    def sc_lauegroup(self):
        """
        Element sc_lauegroup ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 358
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_lauegroup()
    
    @property
    def sc_mccldata(self):
        """
        Element sc_mccldata ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 360
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mccldata()
    
    @property
    def sc_mcopencljson(self):
        """
        Element sc_mcopencljson ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 362
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mcopencljson()
    
    @property
    def sc_mcopenclnml(self):
        """
        Element sc_mcopenclnml ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 364
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mcopenclnml()
    
    @property
    def sc_mcfoilnml(self):
        """
        Element sc_mcfoilnml ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 366
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mcfoilnml()
    
    @property
    def sc_mcmode(self):
        """
        Element sc_mcmode ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 368
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mcmode()
    
    @property
    def sc_mcspherenml(self):
        """
        Element sc_mcspherenml ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 370
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mcspherenml()
    
    @property
    def sc_manufacturer(self):
        """
        Element sc_manufacturer ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 372
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_manufacturer()
    
    @property
    def sc_materialname(self):
        """
        Element sc_materialname ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 374
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_materialname()
    
    @property
    def sc_meansubtraction(self):
        """
        Element sc_meansubtraction ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 376
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_meansubtraction()
    
    @property
    def sc_microstructure(self):
        """
        Element sc_microstructure ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 378
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_microstructure()
    
    @property
    def sc_miso(self):
        """
        Element sc_miso ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 380
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_miso()
    
    @property
    def sc_mutualinformation(self):
        """
        Element sc_mutualinformation ftype=character(17) pytype=str
        
        
        Defined at stringconstants.f90 line 382
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mutualinformation()
    
    @property
    def sc_natomtypes(self):
        """
        Element sc_natomtypes ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 384
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_natomtypes()
    
    @property
    def sc_ncubochoric(self):
        """
        Element sc_ncubochoric ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 386
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ncubochoric()
    
    @property
    def sc_notes(self):
        """
        Element sc_notes ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 388
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_notes()
    
    @property
    def sc_numexptpatterns(self):
        """
        Element sc_numexptpatterns ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 390
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numexptpatterns()
    
    @property
    def sc_numberfamilies(self):
        """
        Element sc_numberfamilies ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 392
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numberfamilies()
    
    @property
    def sc_odf(self):
        """
        Element sc_odf ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 394
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_odf()
    
    @property
    def sc_osm(self):
        """
        Element sc_osm ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 396
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_osm()
    
    @property
    def sc_operator(self):
        """
        Element sc_operator ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 398
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_operator()
    
    @property
    def sc_pedkinnamelist(self):
        """
        Element sc_pedkinnamelist ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 400
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_pedkinnamelist()
    
    @property
    def sc_pedpatterns(self):
        """
        Element sc_pedpatterns ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 402
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_pedpatterns()
    
    @property
    def sc_path(self):
        """
        Element sc_path ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 404
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_path()
    
    @property
    def sc_patternheight(self):
        """
        Element sc_patternheight ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 406
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_patternheight()
    
    @property
    def sc_patternwidth(self):
        """
        Element sc_patternwidth ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 408
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_patternwidth()
    
    @property
    def sc_patternaxisa(self):
        """
        Element sc_patternaxisa ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 410
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_patternaxisa()
    
    @property
    def sc_phase(self):
        """
        Element sc_phase ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 412
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_phase()
    
    @property
    def sc_phi(self):
        """
        Element sc_phi ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 414
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_phi()
    
    @property
    def sc_phi1(self):
        """
        Element sc_phi1 ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 416
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_phi1()
    
    @property
    def sc_phi2(self):
        """
        Element sc_phi2 ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 418
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_phi2()
    
    @property
    def sc_pixellocation(self):
        """
        Element sc_pixellocation ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 420
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_pixellocation()
    
    @property
    def sc_pointgroup(self):
        """
        Element sc_pointgroup ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 422
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_pointgroup()
    
    @property
    def sc_pointgroupnumber(self):
        """
        Element sc_pointgroupnumber ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 424
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_pointgroupnumber()
    
    @property
    def sc_programname(self):
        """
        Element sc_programname ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 426
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_programname()
    
    @property
    def sc_qctype(self):
        """
        Element sc_qctype ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 428
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_qctype()
    
    @property
    def sc_refinedcorrecteddotproducts(self):
        """
        Element sc_refinedcorrecteddotproducts ftype=character(27) pytype=str
        
        
        Defined at stringconstants.f90 line 430
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_refinedcorrecteddotproducts()
    
    @property
    def sc_refinedcorrectedeulerangles(self):
        """
        Element sc_refinedcorrectedeulerangles ftype=character(27) pytype=str
        
        
        Defined at stringconstants.f90 line 432
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_refinedcorrectedeulerangles()
    
    @property
    def sc_refineddotproducts(self):
        """
        Element sc_refineddotproducts ftype=character(18) pytype=str
        
        
        Defined at stringconstants.f90 line 434
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_refineddotproducts()
    
    @property
    def sc_refinedeulerangles(self):
        """
        Element sc_refinedeulerangles ftype=character(18) pytype=str
        
        
        Defined at stringconstants.f90 line 436
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_refinedeulerangles()
    
    @property
    def sc_rin(self):
        """
        Element sc_rin ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 438
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_rin()
    
    @property
    def sc_rout(self):
        """
        Element sc_rout ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 440
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_rout()
    
    @property
    def sc_stemnmlfile(self):
        """
        Element sc_stemnmlfile ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 442
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_stemnmlfile()
    
    @property
    def sc_sampleid(self):
        """
        Element sc_sampleid ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 444
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_sampleid()
    
    @property
    def sc_sampletilt(self):
        """
        Element sc_sampletilt ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 446
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_sampletilt()
    
    @property
    def sc_scanid(self):
        """
        Element sc_scanid ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 448
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_scanid()
    
    @property
    def sc_schematic1(self):
        """
        Element sc_schematic1 ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 450
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_schematic1()
    
    @property
    def sc_schematic2(self):
        """
        Element sc_schematic2 ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 452
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_schematic2()
    
    @property
    def sc_schematic3(self):
        """
        Element sc_schematic3 ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 454
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_schematic3()
    
    @property
    def sc_schematic4(self):
        """
        Element sc_schematic4 ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 456
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_schematic4()
    
    @property
    def sc_semsignal(self):
        """
        Element sc_semsignal ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 458
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_semsignal()
    
    @property
    def sc_spacegroupnumber(self):
        """
        Element sc_spacegroupnumber ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 460
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_spacegroupnumber()
    
    @property
    def sc_spacegroupsetting(self):
        """
        Element sc_spacegroupsetting ftype=character(17) pytype=str
        
        
        Defined at stringconstants.f90 line 462
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_spacegroupsetting()
    
    @property
    def sc_sphinxnamelist(self):
        """
        Element sc_sphinxnamelist ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 464
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_sphinxnamelist()
    
    @property
    def sc_starttime(self):
        """
        Element sc_starttime ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 466
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_starttime()
    
    @property
    def sc_stdout(self):
        """
        Element sc_stdout ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 468
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_stdout()
    
    @property
    def sc_stepx(self):
        """
        Element sc_stepx ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 470
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_stepx()
    
    @property
    def sc_stepy(self):
        """
        Element sc_stepy ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 472
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_stepy()
    
    @property
    def sc_stoptime(self):
        """
        Element sc_stoptime ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 474
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_stoptime()
    
    @property
    def sc_symmetry(self):
        """
        Element sc_symmetry ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 476
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_symmetry()
    
    @property
    def sc_tkdmasternml(self):
        """
        Element sc_tkdmasternml ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 478
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_tkdmasternml()
    
    @property
    def sc_tkdpatterns(self):
        """
        Element sc_tkdpatterns ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 480
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_tkdpatterns()
    
    @property
    def sc_tkdspotsnml(self):
        """
        Element sc_tkdspotsnml ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 482
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_tkdspotsnml()
    
    @property
    def sc_tkdspots(self):
        """
        Element sc_tkdspots ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 484
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_tkdspots()
    
    @property
    def sc_topdotproductlist(self):
        """
        Element sc_topdotproductlist ftype=character(17) pytype=str
        
        
        Defined at stringconstants.f90 line 486
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_topdotproductlist()
    
    @property
    def sc_topmatchindices(self):
        """
        Element sc_topmatchindices ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 488
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_topmatchindices()
    
    @property
    def sc_valid(self):
        """
        Element sc_valid ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 490
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_valid()
    
    @property
    def sc_variants(self):
        """
        Element sc_variants ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 492
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_variants()
    
    @property
    def sc_version(self):
        """
        Element sc_version ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 494
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_version()
    
    @property
    def sc_workingdistance(self):
        """
        Element sc_workingdistance ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 496
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_workingdistance()
    
    @property
    def sc_xposition(self):
        """
        Element sc_xposition ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 498
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_xposition()
    
    @property
    def sc_xpos(self):
        """
        Element sc_xpos ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 500
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_xpos()
    
    @property
    def sc_xyarray(self):
        """
        Element sc_xyarray ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 502
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_xyarray()
    
    @property
    def sc_yposition(self):
        """
        Element sc_yposition ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 504
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_yposition()
    
    @property
    def sc_ypos(self):
        """
        Element sc_ypos ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 506
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ypos()
    
    @property
    def sc_zaimages(self):
        """
        Element sc_zaimages ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 508
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_zaimages()
    
    @property
    def sc_accume(self):
        """
        Element sc_accume ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 510
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_accume()
    
    @property
    def sc_accumsp(self):
        """
        Element sc_accumsp ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 512
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_accumsp()
    
    @property
    def sc_accumenh(self):
        """
        Element sc_accumenh ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 514
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_accumenh()
    
    @property
    def sc_accumesh(self):
        """
        Element sc_accumesh ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 516
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_accumesh()
    
    @property
    def sc_accumesp(self):
        """
        Element sc_accumesp ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 518
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_accumesp()
    
    @property
    def sc_accumedetector(self):
        """
        Element sc_accumedetector ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 520
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_accumedetector()
    
    @property
    def sc_accumt(self):
        """
        Element sc_accumt ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 522
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_accumt()
    
    @property
    def sc_accumt1(self):
        """
        Element sc_accumt1 ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 524
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_accumt1()
    
    @property
    def sc_accumt2(self):
        """
        Element sc_accumt2 ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 526
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_accumt2()
    
    @property
    def sc_accumt3(self):
        """
        Element sc_accumt3 ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 528
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_accumt3()
    
    @property
    def sc_accumxyz(self):
        """
        Element sc_accumxyz ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 530
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_accumxyz()
    
    @property
    def sc_accumz(self):
        """
        Element sc_accumz ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 532
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_accumz()
    
    @property
    def sc_accumznh(self):
        """
        Element sc_accumznh ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 534
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_accumznh()
    
    @property
    def sc_accumzsh(self):
        """
        Element sc_accumzsh ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 536
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_accumzsh()
    
    @property
    def sc_angab(self):
        """
        Element sc_angab ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 538
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_angab()
    
    @property
    def sc_angfile(self):
        """
        Element sc_angfile ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 540
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_angfile()
    
    @property
    def sc_anglefile(self):
        """
        Element sc_anglefile ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 542
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_anglefile()
    
    @property
    def sc_anglefiletype(self):
        """
        Element sc_anglefiletype ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 544
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_anglefiletype()
    
    @property
    def sc_apertureposition(self):
        """
        Element sc_apertureposition ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 546
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_apertureposition()
    
    @property
    def sc_applydeformation(self):
        """
        Element sc_applydeformation ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 548
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_applydeformation()
    
    @property
    def sc_includebackground(self):
        """
        Element sc_includebackground ftype=character(17) pytype=str
        
        
        Defined at stringconstants.f90 line 550
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_includebackground()
    
    @property
    def sc_astigmatism(self):
        """
        Element sc_astigmatism ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 552
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_astigmatism()
    
    @property
    def sc_avctffile(self):
        """
        Element sc_avctffile ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 554
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_avctffile()
    
    @property
    def sc_axisangle(self):
        """
        Element sc_axisangle ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 556
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_axisangle()
    
    @property
    def sc_axoutname(self):
        """
        Element sc_axoutname ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 558
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_axoutname()
    
    @property
    def sc_beamcurrent(self):
        """
        Element sc_beamcurrent ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 560
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_beamcurrent()
    
    @property
    def sc_beamdc(self):
        """
        Element sc_beamdc ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 562
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_beamdc()
    
    @property
    def sc_binning(self):
        """
        Element sc_binning ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 564
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_binning()
    
    @property
    def sc_binx(self):
        """
        Element sc_binx ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 566
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_binx()
    
    @property
    def sc_biny(self):
        """
        Element sc_biny ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 568
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_biny()
    
    @property
    def sc_bitdepth(self):
        """
        Element sc_bitdepth ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 570
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_bitdepth()
    
    @property
    def sc_bse1(self):
        """
        Element sc_bse1 ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 572
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_bse1()
    
    @property
    def sc_cellatomtype(self):
        """
        Element sc_cellatomtype ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 574
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cellatomtype()
    
    @property
    def sc_c1(self):
        """
        Element sc_c1 ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 576
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_c1()
    
    @property
    def sc_c2(self):
        """
        Element sc_c2 ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 578
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_c2()
    
    @property
    def sc_c3(self):
        """
        Element sc_c3 ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 580
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_c3()
    
    @property
    def sc_centering(self):
        """
        Element sc_centering ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 582
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_centering()
    
    @property
    def sc_char1d(self):
        """
        Element sc_char1d ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 584
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_char1d()
    
    @property
    def sc_char2d(self):
        """
        Element sc_char2d ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 586
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_char2d()
    
    @property
    def sc_char3d(self):
        """
        Element sc_char3d ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 588
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_char3d()
    
    @property
    def sc_char4d(self):
        """
        Element sc_char4d ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 590
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_char4d()
    
    @property
    def sc_chararray2d(self):
        """
        Element sc_chararray2d ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 592
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_chararray2d()
    
    @property
    def sc_colormapfile(self):
        """
        Element sc_colormapfile ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 594
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_colormapfile()
    
    @property
    def sc_combinesites(self):
        """
        Element sc_combinesites ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 596
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_combinesites()
    
    @property
    def sc_compgridtype(self):
        """
        Element sc_compgridtype ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 598
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_compgridtype()
    
    @property
    def sc_compmode(self):
        """
        Element sc_compmode ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 600
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_compmode()
    
    @property
    def sc_compnsteps(self):
        """
        Element sc_compnsteps ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 602
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_compnsteps()
    
    @property
    def sc_ctffile(self):
        """
        Element sc_ctffile ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 604
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ctffile()
    
    @property
    def sc_cuoutname(self):
        """
        Element sc_cuoutname ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 606
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cuoutname()
    
    @property
    def sc_datafile(self):
        """
        Element sc_datafile ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 608
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_datafile()
    
    @property
    def sc_dataname(self):
        """
        Element sc_dataname ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 610
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_dataname()
    
    @property
    def sc_str(self):
        """
        Element sc_str ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 612
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_str()
    
    @property
    def sc_datasetname(self):
        """
        Element sc_datasetname ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 614
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_datasetname()
    
    @property
    def sc_defectfilename(self):
        """
        Element sc_defectfilename ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 616
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_defectfilename()
    
    @property
    def sc_deformationfile(self):
        """
        Element sc_deformationfile ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 618
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_deformationfile()
    
    @property
    def sc_delta(self):
        """
        Element sc_delta ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 620
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_delta()
    
    @property
    def sc_depthmax(self):
        """
        Element sc_depthmax ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 622
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_depthmax()
    
    @property
    def sc_depthstep(self):
        """
        Element sc_depthstep ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 624
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_depthstep()
    
    @property
    def sc_devid(self):
        """
        Element sc_devid ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 626
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_devid()
    
    @property
    def sc_dictfile(self):
        """
        Element sc_dictfile ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 628
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_dictfile()
    
    @property
    def sc_dismaxvals(self):
        """
        Element sc_dismaxvals ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 630
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_dismaxvals()
    
    @property
    def sc_disminvals(self):
        """
        Element sc_disminvals ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 632
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_disminvals()
    
    @property
    def sc_dispfile(self):
        """
        Element sc_dispfile ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 634
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_dispfile()
    
    @property
    def sc_dispmode(self):
        """
        Element sc_dispmode ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 636
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_dispmode()
    
    @property
    def sc_disvals(self):
        """
        Element sc_disvals ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 638
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_disvals()
    
    @property
    def sc_dmin(self):
        """
        Element sc_dmin ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 640
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_dmin()
    
    @property
    def sc_doubletype(self):
        """
        Element sc_doubletype ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 642
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_doubletype()
    
    @property
    def sc_double1d(self):
        """
        Element sc_double1d ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 644
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_double1d()
    
    @property
    def sc_double2d(self):
        """
        Element sc_double2d ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 646
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_double2d()
    
    @property
    def sc_double3d(self):
        """
        Element sc_double3d ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 648
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_double3d()
    
    @property
    def sc_double4d(self):
        """
        Element sc_double4d ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 650
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_double4d()
    
    @property
    def sc_dt(self):
        """
        Element sc_dt ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 652
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_dt()
    
    @property
    def sc_dwelltime(self):
        """
        Element sc_dwelltime ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 654
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_dwelltime()
    
    @property
    def sc_energyaverage(self):
        """
        Element sc_energyaverage ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 656
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_energyaverage()
    
    @property
    def sc_copyfromenergyfile(self):
        """
        Element sc_copyfromenergyfile ftype=character(18) pytype=str
        
        
        Defined at stringconstants.f90 line 658
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_copyfromenergyfile()
    
    @property
    def sc_energyfile(self):
        """
        Element sc_energyfile ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 660
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_energyfile()
    
    @property
    def sc_energymax(self):
        """
        Element sc_energymax ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 662
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_energymax()
    
    @property
    def sc_energymin(self):
        """
        Element sc_energymin ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 664
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_energymin()
    
    @property
    def sc_eulerconvention(self):
        """
        Element sc_eulerconvention ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 666
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_eulerconvention()
    
    @property
    def sc_eulerfile(self):
        """
        Element sc_eulerfile ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 668
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_eulerfile()
    
    @property
    def sc_euoutname(self):
        """
        Element sc_euoutname ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 670
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_euoutname()
    
    @property
    def sc_exptfile(self):
        """
        Element sc_exptfile ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 672
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_exptfile()
    
    @property
    def sc_filemode(self):
        """
        Element sc_filemode ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 674
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_filemode()
    
    @property
    def sc_filmfile(self):
        """
        Element sc_filmfile ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 676
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_filmfile()
    
    @property
    def sc_filterpattern(self):
        """
        Element sc_filterpattern ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 678
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_filterpattern()
    
    @property
    def sc_floattype(self):
        """
        Element sc_floattype ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 680
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_floattype()
    
    @property
    def sc_float1d(self):
        """
        Element sc_float1d ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 682
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_float1d()
    
    @property
    def sc_float2d(self):
        """
        Element sc_float2d ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 684
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_float2d()
    
    @property
    def sc_float3d(self):
        """
        Element sc_float3d ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 686
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_float3d()
    
    @property
    def sc_float4d(self):
        """
        Element sc_float4d ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 688
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_float4d()
    
    @property
    def sc_fn(self):
        """
        Element sc_fn ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 690
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_fn()
    
    @property
    def sc_fnf(self):
        """
        Element sc_fnf ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 692
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_fnf()
    
    @property
    def sc_fns(self):
        """
        Element sc_fns ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 694
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_fns()
    
    @property
    def sc_full(self):
        """
        Element sc_full ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 696
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_full()
    
    @property
    def sc_frfo(self):
        """
        Element sc_frfo ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 698
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_frfo()
    
    @property
    def sc_gf(self):
        """
        Element sc_gf ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 700
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_gf()
    
    @property
    def sc_gs(self):
        """
        Element sc_gs ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 702
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_gs()
    
    @property
    def sc_ga(self):
        """
        Element sc_ga ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 704
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ga()
    
    @property
    def sc_gammavalue(self):
        """
        Element sc_gammavalue ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 706
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_gammavalue()
    
    @property
    def sc_gb(self):
        """
        Element sc_gb ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 708
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_gb()
    
    @property
    def sc_geometry(self):
        """
        Element sc_geometry ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 710
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_geometry()
    
    @property
    def sc_globalworkgrpsz(self):
        """
        Element sc_globalworkgrpsz ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 712
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_globalworkgrpsz()
    
    @property
    def sc_groupname(self):
        """
        Element sc_groupname ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 714
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_groupname()
    
    @property
    def sc_hipassw(self):
        """
        Element sc_hipassw ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 716
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hipassw()
    
    @property
    def sc_hipasswmax(self):
        """
        Element sc_hipasswmax ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 718
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hipasswmax()
    
    @property
    def sc_hipasswnsteps(self):
        """
        Element sc_hipasswnsteps ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 720
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hipasswnsteps()
    
    @property
    def sc_hkl(self):
        """
        Element sc_hkl ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 722
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hkl()
    
    @property
    def sc_hklfamilies(self):
        """
        Element sc_hklfamilies ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 724
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hklfamilies()
    
    @property
    def sc_hklarray(self):
        """
        Element sc_hklarray ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 726
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hklarray()
    
    @property
    def sc_hklmax(self):
        """
        Element sc_hklmax ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 728
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hklmax()
    
    @property
    def sc_hooutname(self):
        """
        Element sc_hooutname ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 730
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hooutname()
    
    @property
    def sc_hypercarr2(self):
        """
        Element sc_hypercarr2 ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 732
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hypercarr2()
    
    @property
    def sc_hypercarr3(self):
        """
        Element sc_hypercarr3 ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 734
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hypercarr3()
    
    @property
    def sc_hypercarr4(self):
        """
        Element sc_hypercarr4 ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 736
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hypercarr4()
    
    @property
    def sc_hyperdarr2(self):
        """
        Element sc_hyperdarr2 ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 738
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hyperdarr2()
    
    @property
    def sc_hyperdarr3(self):
        """
        Element sc_hyperdarr3 ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 740
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hyperdarr3()
    
    @property
    def sc_hyperdarr4(self):
        """
        Element sc_hyperdarr4 ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 742
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hyperdarr4()
    
    @property
    def sc_hyperfarr2(self):
        """
        Element sc_hyperfarr2 ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 744
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hyperfarr2()
    
    @property
    def sc_hyperfarr3(self):
        """
        Element sc_hyperfarr3 ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 746
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hyperfarr3()
    
    @property
    def sc_hyperfarr4(self):
        """
        Element sc_hyperfarr4 ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 748
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hyperfarr4()
    
    @property
    def sc_hyperiarr2(self):
        """
        Element sc_hyperiarr2 ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 750
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hyperiarr2()
    
    @property
    def sc_hyperiarr3(self):
        """
        Element sc_hyperiarr3 ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 752
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hyperiarr3()
    
    @property
    def sc_hyperiarr4(self):
        """
        Element sc_hyperiarr4 ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 754
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hyperiarr4()
    
    @property
    def sc_indexingmode(self):
        """
        Element sc_indexingmode ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 756
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_indexingmode()
    
    @property
    def sc_inputfilename(self):
        """
        Element sc_inputfilename ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 758
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_inputfilename()
    
    @property
    def sc_inputtype(self):
        """
        Element sc_inputtype ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 760
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_inputtype()
    
    @property
    def sc_intarr3d(self):
        """
        Element sc_intarr3d ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 762
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_intarr3d()
    
    @property
    def sc_intarray(self):
        """
        Element sc_intarray ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 764
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_intarray()
    
    @property
    def sc_intarray1d(self):
        """
        Element sc_intarray1d ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 766
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_intarray1d()
    
    @property
    def sc_intarray2d(self):
        """
        Element sc_intarray2d ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 768
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_intarray2d()
    
    @property
    def sc_intarray3d(self):
        """
        Element sc_intarray3d ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 770
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_intarray3d()
    
    @property
    def sc_intbxfile(self):
        """
        Element sc_intbxfile ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 772
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_intbxfile()
    
    @property
    def sc_intbyfile(self):
        """
        Element sc_intbyfile ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 774
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_intbyfile()
    
    @property
    def sc_integer(self):
        """
        Element sc_integer ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 776
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_integer()
    
    @property
    def sc_integer1d(self):
        """
        Element sc_integer1d ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 778
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_integer1d()
    
    @property
    def sc_integer2d(self):
        """
        Element sc_integer2d ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 780
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_integer2d()
    
    @property
    def sc_integer3d(self):
        """
        Element sc_integer3d ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 782
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_integer3d()
    
    @property
    def sc_integer4d(self):
        """
        Element sc_integer4d ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 784
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_integer4d()
    
    @property
    def sc_ipfht(self):
        """
        Element sc_ipfht ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 786
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ipfht()
    
    @property
    def sc_ipfwd(self):
        """
        Element sc_ipfwd ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 788
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ipfwd()
    
    @property
    def sc_isangle(self):
        """
        Element sc_isangle ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 790
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_isangle()
    
    @property
    def sc_k(self):
        """
        Element sc_k ftype=character(1) pytype=str
        
        
        Defined at stringconstants.f90 line 792
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_k()
    
    @property
    def sc_keeptmpfile(self):
        """
        Element sc_keeptmpfile ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 794
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_keeptmpfile()
    
    @property
    def sc_kevs(self):
        """
        Element sc_kevs ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 796
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_kevs()
    
    @property
    def sc_kv(self):
        """
        Element sc_kv ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 798
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_kv()
    
    @property
    def sc_kij(self):
        """
        Element sc_kij ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 800
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_kij()
    
    @property
    def sc_kk(self):
        """
        Element sc_kk ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 802
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_kk()
    
    @property
    def sc_lastenergy(self):
        """
        Element sc_lastenergy ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 804
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_lastenergy()
    
    @property
    def sc_lauec(self):
        """
        Element sc_lauec ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 806
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_lauec()
    
    @property
    def sc_lauec2(self):
        """
        Element sc_lauec2 ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 808
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_lauec2()
    
    @property
    def sc_lenga(self):
        """
        Element sc_lenga ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 810
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_lenga()
    
    @property
    def sc_lengb(self):
        """
        Element sc_lengb ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 812
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_lengb()
    
    @property
    def sc_latgridtype(self):
        """
        Element sc_latgridtype ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 814
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_latgridtype()
    
    @property
    def sc_magnetization2d(self):
        """
        Element sc_magnetization2d ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 816
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_magnetization2d()
    
    @property
    def sc_magnetization(self):
        """
        Element sc_magnetization ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 818
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_magnetization()
    
    @property
    def sc_makedictionary(self):
        """
        Element sc_makedictionary ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 820
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_makedictionary()
    
    @property
    def sc_mlpnh(self):
        """
        Element sc_mlpnh ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 822
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mlpnh()
    
    @property
    def sc_mlpsh(self):
        """
        Element sc_mlpsh ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 824
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mlpsh()
    
    @property
    def sc_maskfile(self):
        """
        Element sc_maskfile ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 826
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_maskfile()
    
    @property
    def sc_maskpattern(self):
        """
        Element sc_maskpattern ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 828
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_maskpattern()
    
    @property
    def sc_maskradius(self):
        """
        Element sc_maskradius ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 830
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_maskradius()
    
    @property
    def sc_masternh(self):
        """
        Element sc_masternh ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 832
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_masternh()
    
    @property
    def sc_mastersh(self):
        """
        Element sc_mastersh ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 834
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mastersh()
    
    @property
    def sc_masterspnh(self):
        """
        Element sc_masterspnh ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 836
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_masterspnh()
    
    @property
    def sc_masterspsh(self):
        """
        Element sc_masterspsh ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 838
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_masterspsh()
    
    @property
    def sc_masterfile(self):
        """
        Element sc_masterfile ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 840
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_masterfile()
    
    @property
    def sc_meanvals(self):
        """
        Element sc_meanvals ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 842
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_meanvals()
    
    @property
    def sc_modfsquared(self):
        """
        Element sc_modfsquared ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 844
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_modfsquared()
    
    @property
    def sc_mode(self):
        """
        Element sc_mode ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 846
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mode()
    
    @property
    def sc_montagename(self):
        """
        Element sc_montagename ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 848
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_montagename()
    
    @property
    def sc_mpfile(self):
        """
        Element sc_mpfile ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 850
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mpfile()
    
    @property
    def sc_mrcfile(self):
        """
        Element sc_mrcfile ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 852
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mrcfile()
    
    @property
    def sc_multiplier(self):
        """
        Element sc_multiplier ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 854
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_multiplier()
    
    @property
    def sc_ncolumns(self):
        """
        Element sc_ncolumns ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 856
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ncolumns()
    
    @property
    def sc_nregionsmin(self):
        """
        Element sc_nregionsmin ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 858
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_nregionsmin()
    
    @property
    def sc_nregionsmax(self):
        """
        Element sc_nregionsmax ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 860
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_nregionsmax()
    
    @property
    def sc_nregionsstepsize(self):
        """
        Element sc_nregionsstepsize ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 862
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_nregionsstepsize()
    
    @property
    def sc_nrows(self):
        """
        Element sc_nrows ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 864
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_nrows()
    
    @property
    def sc_nnav(self):
        """
        Element sc_nnav ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 866
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_nnav()
    
    @property
    def sc_nism(self):
        """
        Element sc_nism ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 868
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_nism()
    
    @property
    def sc_nnk(self):
        """
        Element sc_nnk ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 870
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_nnk()
    
    @property
    def sc_nosm(self):
        """
        Element sc_nosm ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 872
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_nosm()
    
    @property
    def sc_npix(self):
        """
        Element sc_npix ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 874
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_npix()
    
    @property
    def sc_npiy(self):
        """
        Element sc_npiy ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 876
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_npiy()
    
    @property
    def sc_npx(self):
        """
        Element sc_npx ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 878
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_npx()
    
    @property
    def sc_nx(self):
        """
        Element sc_nx ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 880
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_nx()
    
    @property
    def sc_ny(self):
        """
        Element sc_ny ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 882
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ny()
    
    @property
    def sc_nz(self):
        """
        Element sc_nz ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 884
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_nz()
    
    @property
    def sc_nref(self):
        """
        Element sc_nref ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 886
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_nref()
    
    @property
    def sc_nregions(self):
        """
        Element sc_nregions ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 888
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_nregions()
    
    @property
    def sc_nsteps(self):
        """
        Element sc_nsteps ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 890
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_nsteps()
    
    @property
    def sc_nthreads(self):
        """
        Element sc_nthreads ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 892
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_nthreads()
    
    @property
    def sc_ivolx(self):
        """
        Element sc_ivolx ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 894
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ivolx()
    
    @property
    def sc_ivoly(self):
        """
        Element sc_ivoly ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 896
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ivoly()
    
    @property
    def sc_ivolz(self):
        """
        Element sc_ivolz ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 898
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ivolz()
    
    @property
    def sc_ivolstepx(self):
        """
        Element sc_ivolstepx ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 900
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ivolstepx()
    
    @property
    def sc_ivolstepy(self):
        """
        Element sc_ivolstepy ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 902
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ivolstepy()
    
    @property
    def sc_ivolstepz(self):
        """
        Element sc_ivolstepz ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 904
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ivolstepz()
    
    @property
    def sc_multidevid(self):
        """
        Element sc_multidevid ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 906
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_multidevid()
    
    @property
    def sc_ncubochoricvariable(self):
        """
        Element sc_ncubochoricvariable ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 908
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ncubochoricvariable()
    
    @property
    def sc_num_el(self):
        """
        Element sc_num_el ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 910
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_num_el()
    
    @property
    def sc_numebins(self):
        """
        Element sc_numebins ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 912
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numebins()
    
    @property
    def sc_numangle(self):
        """
        Element sc_numangle ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 914
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numangle()
    
    @property
    def sc_numangledictionary(self):
        """
        Element sc_numangledictionary ftype=character(19) pytype=str
        
        
        Defined at stringconstants.f90 line 916
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numangledictionary()
    
    @property
    def sc_numangles(self):
        """
        Element sc_numangles ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 918
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numangles()
    
    @property
    def sc_numdetparm(self):
        """
        Element sc_numdetparm ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 920
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numdetparm()
    
    @property
    def sc_numdictsingle(self):
        """
        Element sc_numdictsingle ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 922
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numdictsingle()
    
    @property
    def sc_numeuler(self):
        """
        Element sc_numeuler ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 924
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numeuler()
    
    @property
    def sc_numexptsingle(self):
        """
        Element sc_numexptsingle ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 926
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numexptsingle()
    
    @property
    def sc_numg(self):
        """
        Element sc_numg ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 928
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numg()
    
    @property
    def sc_numk(self):
        """
        Element sc_numk ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 930
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numk()
    
    @property
    def sc_numreflections(self):
        """
        Element sc_numreflections ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 932
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numreflections()
    
    @property
    def sc_numset(self):
        """
        Element sc_numset ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 934
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numset()
    
    @property
    def sc_numsx(self):
        """
        Element sc_numsx ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 936
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numsx()
    
    @property
    def sc_numsy(self):
        """
        Element sc_numsy ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 938
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numsy()
    
    @property
    def sc_numthick(self):
        """
        Element sc_numthick ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 940
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numthick()
    
    @property
    def sc_numzbins(self):
        """
        Element sc_numzbins ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 942
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_numzbins()
    
    @property
    def sc_omega(self):
        """
        Element sc_omega ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 944
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_omega()
    
    @property
    def sc_omoutname(self):
        """
        Element sc_omoutname ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 946
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_omoutname()
    
    @property
    def sc_outname(self):
        """
        Element sc_outname ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 948
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_outname()
    
    @property
    def sc_outputformat(self):
        """
        Element sc_outputformat ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 950
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_outputformat()
    
    @property
    def sc_outputfile(self):
        """
        Element sc_outputfile ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 952
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_outputfile()
    
    @property
    def sc_patchw(self):
        """
        Element sc_patchw ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 954
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_patchw()
    
    @property
    def sc_patternfile(self):
        """
        Element sc_patternfile ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 956
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_patternfile()
    
    @property
    def sc_patx(self):
        """
        Element sc_patx ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 958
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_patx()
    
    @property
    def sc_paty(self):
        """
        Element sc_paty ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 960
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_paty()
    
    @property
    def sc_pedpattern(self):
        """
        Element sc_pedpattern ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 962
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_pedpattern()
    
    @property
    def sc_phasemethod(self):
        """
        Element sc_phasemethod ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 964
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_phasemethod()
    
    @property
    def sc_phiefile(self):
        """
        Element sc_phiefile ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 966
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_phiefile()
    
    @property
    def sc_phimfile(self):
        """
        Element sc_phimfile ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 968
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_phimfile()
    
    @property
    def sc_phinum(self):
        """
        Element sc_phinum ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 970
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_phinum()
    
    @property
    def sc_pixelsize(self):
        """
        Element sc_pixelsize ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 972
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_pixelsize()
    
    @property
    def sc_platid(self):
        """
        Element sc_platid ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 974
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_platid()
    
    @property
    def sc_poisson(self):
        """
        Element sc_poisson ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 976
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_poisson()
    
    @property
    def sc_positions(self):
        """
        Element sc_positions ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 978
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_positions()
    
    @property
    def sc_progmode(self):
        """
        Element sc_progmode ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 980
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_progmode()
    
    @property
    def sc_quoutname(self):
        """
        Element sc_quoutname ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 982
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_quoutname()
    
    @property
    def sc_qxy(self):
        """
        Element sc_qxy ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 984
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_qxy()
    
    @property
    def sc_refcnt(self):
        """
        Element sc_refcnt ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 986
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_refcnt()
    
    @property
    def sc_restart(self):
        """
        Element sc_restart ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 988
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_restart()
    
    @property
    def sc_rooutname(self):
        """
        Element sc_rooutname ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 990
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_rooutname()
    
    @property
    def sc_sampling(self):
        """
        Element sc_sampling ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 992
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_sampling()
    
    @property
    def sc_scalingmode(self):
        """
        Element sc_scalingmode ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 994
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_scalingmode()
    
    @property
    def sc_section(self):
        """
        Element sc_section ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 996
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_section()
    
    @property
    def sc_sele(self):
        """
        Element sc_sele ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 998
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_sele()
    
    @property
    def sc_sgname(self):
        """
        Element sc_sgname ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 1000
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_sgname()
    
    @property
    def sc_sgdbdiff(self):
        """
        Element sc_sgdbdiff ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 1002
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_sgdbdiff()
    
    @property
    def sc_sig(self):
        """
        Element sc_sig ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 1004
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_sig()
    
    @property
    def sc_sigend(self):
        """
        Element sc_sigend ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 1006
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_sigend()
    
    @property
    def sc_sigstart(self):
        """
        Element sc_sigstart ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 1008
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_sigstart()
    
    @property
    def sc_sigstep(self):
        """
        Element sc_sigstep ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 1010
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_sigstep()
    
    @property
    def sc_spatialaverage(self):
        """
        Element sc_spatialaverage ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 1012
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_spatialaverage()
    
    @property
    def sc_squhex(self):
        """
        Element sc_squhex ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 1014
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_squhex()
    
    @property
    def sc_startthick(self):
        """
        Element sc_startthick ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 1016
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_startthick()
    
    @property
    def sc_stepxvariable(self):
        """
        Element sc_stepxvariable ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 1018
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_stepxvariable()
    
    @property
    def sc_stepyvariable(self):
        """
        Element sc_stepyvariable ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 1020
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_stepyvariable()
    
    @property
    def sc_stereonh(self):
        """
        Element sc_stereonh ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 1022
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_stereonh()
    
    @property
    def sc_stereosh(self):
        """
        Element sc_stereosh ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 1024
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_stereosh()
    
    @property
    def sc_subsfile(self):
        """
        Element sc_subsfile ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 1026
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_subsfile()
    
    @property
    def sc_summode(self):
        """
        Element sc_summode ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 1028
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_summode()
    
    @property
    def sc_tf(self):
        """
        Element sc_tf ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 1030
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_tf()
    
    @property
    def sc_ts(self):
        """
        Element sc_ts ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 1032
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ts()
    
    @property
    def sc_testnml(self):
        """
        Element sc_testnml ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 1034
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_testnml()
    
    @property
    def sc_thetac(self):
        """
        Element sc_thetac ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 1036
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_thetac()
    
    @property
    def sc_thickinc(self):
        """
        Element sc_thickinc ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 1038
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_thickinc()
    
    @property
    def sc_tifffile(self):
        """
        Element sc_tifffile ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 1040
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_tifffile()
    
    @property
    def sc_tiffname(self):
        """
        Element sc_tiffname ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 1042
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_tiffname()
    
    @property
    def sc_tiffprefix(self):
        """
        Element sc_tiffprefix ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 1044
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_tiffprefix()
    
    @property
    def sc_tiltaxis(self):
        """
        Element sc_tiltaxis ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 1046
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_tiltaxis()
    
    @property
    def sc_tmpfile(self):
        """
        Element sc_tmpfile ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 1048
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_tmpfile()
    
    @property
    def sc_totnumel(self):
        """
        Element sc_totnumel ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 1050
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_totnumel()
    
    @property
    def sc_totnumexpt(self):
        """
        Element sc_totnumexpt ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 1052
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_totnumexpt()
    
    @property
    def sc_trange(self):
        """
        Element sc_trange ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 1054
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_trange()
    
    @property
    def sc_uniform(self):
        """
        Element sc_uniform ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 1056
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_uniform()
    
    @property
    def sc_unitgvectors(self):
        """
        Element sc_unitgvectors ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 1058
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_unitgvectors()
    
    @property
    def sc_useenergyweighting(self):
        """
        Element sc_useenergyweighting ftype=character(18) pytype=str
        
        
        Defined at stringconstants.f90 line 1060
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_useenergyweighting()
    
    @property
    def sc_usetmpfile(self):
        """
        Element sc_usetmpfile ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 1062
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_usetmpfile()
    
    @property
    def sc_usenumd(self):
        """
        Element sc_usenumd ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 1064
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_usenumd()
    
    @property
    def sc_vmean(self):
        """
        Element sc_vmean ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 1066
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_vmean()
    
    @property
    def sc_voltage(self):
        """
        Element sc_voltage ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 1068
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_voltage()
    
    @property
    def sc_wavelength(self):
        """
        Element sc_wavelength ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 1070
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_wavelength()
    
    @property
    def sc_xstar(self):
        """
        Element sc_xstar ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 1072
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_xstar()
    
    @property
    def sc_xpc(self):
        """
        Element sc_xpc ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 1074
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_xpc()
    
    @property
    def sc_xtalname(self):
        """
        Element sc_xtalname ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 1076
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_xtalname()
    
    @property
    def sc_xtalname2(self):
        """
        Element sc_xtalname2 ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 1078
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_xtalname2()
    
    @property
    def sc_xtalnamefilm(self):
        """
        Element sc_xtalnamefilm ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 1080
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_xtalnamefilm()
    
    @property
    def sc_xtalnamesubs(self):
        """
        Element sc_xtalnamesubs ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 1082
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_xtalnamesubs()
    
    @property
    def sc_xtalname_gamma(self):
        """
        Element sc_xtalname_gamma ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 1084
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_xtalname_gamma()
    
    @property
    def sc_xtalname_gammap(self):
        """
        Element sc_xtalname_gammap ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 1086
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_xtalname_gammap()
    
    @property
    def sc_ystar(self):
        """
        Element sc_ystar ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 1088
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ystar()
    
    @property
    def sc_ypc(self):
        """
        Element sc_ypc ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 1090
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ypc()
    
    @property
    def sc_zstar(self):
        """
        Element sc_zstar ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 1092
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_zstar()
    
    @property
    def sc_bethelist(self):
        """
        Element sc_bethelist ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 1097
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_bethelist()
    
    @property
    def sc_brightfield(self):
        """
        Element sc_brightfield ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 1099
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_brightfield()
    
    @property
    def sc_cbednamelist(self):
        """
        Element sc_cbednamelist ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 1101
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cbednamelist()
    
    @property
    def sc_coordinatesystem(self):
        """
        Element sc_coordinatesystem ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 1103
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_coordinatesystem()
    
    @property
    def sc_crystaldata(self):
        """
        Element sc_crystaldata ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 1105
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_crystaldata()
    
    @property
    def sc_data(self):
        """
        Element sc_data ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 1107
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_data()
    
    @property
    def sc_detparmscan(self):
        """
        Element sc_detparmscan ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 1109
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_detparmscan()
    
    @property
    def sc_dictindxopenclnamelist(self):
        """
        Element sc_dictindxopenclnamelist ftype=character(22) pytype=str
        
        
        Defined at stringconstants.f90 line 1111
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_dictindxopenclnamelist()
    
    @property
    def sc_displacementfield(self):
        """
        Element sc_displacementfield ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 1113
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_displacementfield()
    
    @property
    def sc_dispx(self):
        """
        Element sc_dispx ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 1115
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_dispx()
    
    @property
    def sc_dispy(self):
        """
        Element sc_dispy ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 1117
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_dispy()
    
    @property
    def sc_ebsd(self):
        """
        Element sc_ebsd ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 1119
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsd()
    
    @property
    def sc_ebsdindexingnamelisttype(self):
        """
        Element sc_ebsdindexingnamelisttype ftype=character(24) pytype=str
        
        
        Defined at stringconstants.f90 line 1121
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsdindexingnamelisttype()
    
    @property
    def sc_eecmaster(self):
        """
        Element sc_eecmaster ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 1123
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_eecmaster()
    
    @property
    def sc_eecmasternml(self):
        """
        Element sc_eecmasternml ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 1125
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_eecmasternml()
    
    @property
    def sc_eecmasternamelist(self):
        """
        Element sc_eecmasternamelist ftype=character(17) pytype=str
        
        
        Defined at stringconstants.f90 line 1127
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_eecmasternamelist()
    
    @property
    def sc_ebsdmasternamelist(self):
        """
        Element sc_ebsdmasternamelist ftype=character(18) pytype=str
        
        
        Defined at stringconstants.f90 line 1129
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsdmasternamelist()
    
    @property
    def sc_ebsdmasteropenclnamelist(self):
        """
        Element sc_ebsdmasteropenclnamelist ftype=character(24) pytype=str
        
        
        Defined at stringconstants.f90 line 1131
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsdmasteropenclnamelist()
    
    @property
    def sc_ebsdnamelist(self):
        """
        Element sc_ebsdnamelist ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 1133
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsdnamelist()
    
    @property
    def sc_ebsdclusternamelist(self):
        """
        Element sc_ebsdclusternamelist ftype=character(19) pytype=str
        
        
        Defined at stringconstants.f90 line 1135
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsdclusternamelist()
    
    @property
    def sc_ebsdmaster(self):
        """
        Element sc_ebsdmaster ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 1137
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsdmaster()
    
    @property
    def sc_ebsddefectmaster(self):
        """
        Element sc_ebsddefectmaster ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 1139
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsddefectmaster()
    
    @property
    def sc_ebsdsinglemasternamelist(self):
        """
        Element sc_ebsdsinglemasternamelist ftype=character(24) pytype=str
        
        
        Defined at stringconstants.f90 line 1141
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsdsinglemasternamelist()
    
    @property
    def sc_ebsdscannamelist(self):
        """
        Element sc_ebsdscannamelist ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 1143
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ebsdscannamelist()
    
    @property
    def sc_ecci(self):
        """
        Element sc_ecci ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 1145
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ecci()
    
    @property
    def sc_eccinamelist(self):
        """
        Element sc_eccinamelist ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 1147
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_eccinamelist()
    
    @property
    def sc_ecpindexingnamelisttype(self):
        """
        Element sc_ecpindexingnamelisttype ftype=character(23) pytype=str
        
        
        Defined at stringconstants.f90 line 1149
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ecpindexingnamelisttype()
    
    @property
    def sc_ecpmasternamelist(self):
        """
        Element sc_ecpmasternamelist ftype=character(17) pytype=str
        
        
        Defined at stringconstants.f90 line 1151
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ecpmasternamelist()
    
    @property
    def sc_ecpnamelist(self):
        """
        Element sc_ecpnamelist ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 1153
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ecpnamelist()
    
    @property
    def sc_ecpza(self):
        """
        Element sc_ecpza ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 1155
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ecpza()
    
    @property
    def sc_ecpzanamelist(self):
        """
        Element sc_ecpzanamelist ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 1157
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ecpzanamelist()
    
    @property
    def sc_ecppatternnamelist(self):
        """
        Element sc_ecppatternnamelist ftype=character(18) pytype=str
        
        
        Defined at stringconstants.f90 line 1159
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ecppatternnamelist()
    
    @property
    def sc_ecpsingle(self):
        """
        Element sc_ecpsingle ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 1161
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_ecpsingle()
    
    @property
    def sc_emecp(self):
        """
        Element sc_emecp ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 1163
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emecp()
    
    @property
    def sc_emheader(self):
        """
        Element sc_emheader ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 1165
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emheader()
    
    @property
    def sc_emkinematicalnamelist(self):
        """
        Element sc_emkinematicalnamelist ftype=character(21) pytype=str
        
        
        Defined at stringconstants.f90 line 1167
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emkinematicalnamelist()
    
    @property
    def sc_fixedlength(self):
        """
        Element sc_fixedlength ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 1169
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_fixedlength()
    
    @property
    def sc_header(self):
        """
        Element sc_header ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 1171
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_header()
    
    @property
    def sc_inputpolefigures(self):
        """
        Element sc_inputpolefigures ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 1173
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_inputpolefigures()
    
    @property
    def sc_intensities(self):
        """
        Element sc_intensities ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 1175
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_intensities()
    
    @property
    def sc_jsonfiles(self):
        """
        Element sc_jsonfiles ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 1177
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_jsonfiles()
    
    @property
    def sc_kosselmasternamelist(self):
        """
        Element sc_kosselmasternamelist ftype=character(20) pytype=str
        
        
        Defined at stringconstants.f90 line 1179
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_kosselmasternamelist()
    
    @property
    def sc_kosselnamelist(self):
        """
        Element sc_kosselnamelist ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 1181
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_kosselnamelist()
    
    @property
    def sc_kosselmaster(self):
        """
        Element sc_kosselmaster ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 1183
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_kosselmaster()
    
    @property
    def sc_klist(self):
        """
        Element sc_klist ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 1185
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_klist()
    
    @property
    def sc_lacbednamelist(self):
        """
        Element sc_lacbednamelist ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 1187
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_lacbednamelist()
    
    @property
    def sc_lorentznamelist(self):
        """
        Element sc_lorentznamelist ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 1189
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_lorentznamelist()
    
    @property
    def sc_magfile(self):
        """
        Element sc_magfile ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 1191
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_magfile()
    
    @property
    def sc_magnetizationdata(self):
        """
        Element sc_magnetizationdata ftype=character(17) pytype=str
        
        
        Defined at stringconstants.f90 line 1193
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_magnetizationdata()
    
    @property
    def sc_mcclmultilayernamelist(self):
        """
        Element sc_mcclmultilayernamelist ftype=character(22) pytype=str
        
        
        Defined at stringconstants.f90 line 1195
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mcclmultilayernamelist()
    
    @property
    def sc_mcclnamelist(self):
        """
        Element sc_mcclnamelist ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 1197
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mcclnamelist()
    
    @property
    def sc_mcclfoilnamelist(self):
        """
        Element sc_mcclfoilnamelist ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 1199
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mcclfoilnamelist()
    
    @property
    def sc_mclipss(self):
        """
        Element sc_mclipss ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 1201
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mclipss()
    
    @property
    def sc_mclipssnamelist(self):
        """
        Element sc_mclipssnamelist ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 1203
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mclipssnamelist()
    
    @property
    def sc_mcnamelist(self):
        """
        Element sc_mcnamelist ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 1205
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mcnamelist()
    
    @property
    def sc_mcopencl(self):
        """
        Element sc_mcopencl ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 1207
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mcopencl()
    
    @property
    def sc_mcfoil(self):
        """
        Element sc_mcfoil ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 1209
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_mcfoil()
    
    @property
    def sc_microstructuredata(self):
        """
        Element sc_microstructuredata ftype=character(18) pytype=str
        
        
        Defined at stringconstants.f90 line 1211
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_microstructuredata()
    
    @property
    def sc_microstructurefile(self):
        """
        Element sc_microstructurefile ftype=character(18) pytype=str
        
        
        Defined at stringconstants.f90 line 1213
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_microstructurefile()
    
    @property
    def sc_nmlfiles(self):
        """
        Element sc_nmlfiles ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 1215
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_nmlfiles()
    
    @property
    def sc_nmlparameters(self):
        """
        Element sc_nmlparameters ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 1217
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_nmlparameters()
    
    @property
    def sc_cplm(self):
        """
        Element sc_cplm ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 1219
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cplm()
    
    @property
    def sc_cplmimages(self):
        """
        Element sc_cplmimages ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 1221
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cplmimages()
    
    @property
    def sc_cplmintensities(self):
        """
        Element sc_cplmintensities ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 1223
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cplmintensities()
    
    @property
    def sc_cplmmasternamelist(self):
        """
        Element sc_cplmmasternamelist ftype=character(18) pytype=str
        
        
        Defined at stringconstants.f90 line 1225
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cplmmasternamelist()
    
    @property
    def sc_cplmnamelist(self):
        """
        Element sc_cplmnamelist ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 1227
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cplmnamelist()
    
    @property
    def sc_cplmmaster(self):
        """
        Element sc_cplmmaster ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 1229
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cplmmaster()
    
    @property
    def sc_cplmmasternml(self):
        """
        Element sc_cplmmasternml ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 1231
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cplmmasternml()
    
    @property
    def sc_cplmmasterlpnh(self):
        """
        Element sc_cplmmasterlpnh ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 1233
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cplmmasterlpnh()
    
    @property
    def sc_cplmmasterspnh(self):
        """
        Element sc_cplmmasterspnh ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 1235
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_cplmmasterspnh()
    
    @property
    def sc_orderparameter(self):
        """
        Element sc_orderparameter ftype=character(4) pytype=str
        
        
        Defined at stringconstants.f90 line 1237
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_orderparameter()
    
    @property
    def sc_pedza(self):
        """
        Element sc_pedza ftype=character(5) pytype=str
        
        
        Defined at stringconstants.f90 line 1239
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_pedza()
    
    @property
    def sc_pedzanamelist(self):
        """
        Element sc_pedzanamelist ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 1241
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_pedzanamelist()
    
    @property
    def sc_pedkin(self):
        """
        Element sc_pedkin ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 1243
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_pedkin()
    
    @property
    def sc_pfinversiondata(self):
        """
        Element sc_pfinversiondata ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 1245
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_pfinversiondata()
    
    @property
    def sc_pfinversionnamelist(self):
        """
        Element sc_pfinversionnamelist ftype=character(19) pytype=str
        
        
        Defined at stringconstants.f90 line 1247
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_pfinversionnamelist()
    
    @property
    def sc_patterncentercalibration(self):
        """
        Element sc_patterncentercalibration ftype=character(24) pytype=str
        
        
        Defined at stringconstants.f90 line 1249
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_patterncentercalibration()
    
    @property
    def sc_rfznamelist(self):
        """
        Element sc_rfznamelist ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 1251
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_rfznamelist()
    
    @property
    def sc_reconstructed(self):
        """
        Element sc_reconstructed ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 1253
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_reconstructed()
    
    @property
    def sc_roi(self):
        """
        Element sc_roi ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 1255
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_roi()
    
    @property
    def sc_stemdci(self):
        """
        Element sc_stemdci ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 1257
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_stemdci()
    
    @property
    def sc_stemdcinamelist(self):
        """
        Element sc_stemdcinamelist ftype=character(15) pytype=str
        
        
        Defined at stringconstants.f90 line 1259
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_stemdcinamelist()
    
    @property
    def sc_stemdcinml(self):
        """
        Element sc_stemdcinml ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 1261
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_stemdcinml()
    
    @property
    def sc_stemgeometrynamelist(self):
        """
        Element sc_stemgeometrynamelist ftype=character(20) pytype=str
        
        
        Defined at stringconstants.f90 line 1263
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_stemgeometrynamelist()
    
    @property
    def sc_scan1(self):
        """
        Element sc_scan1 ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 1265
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_scan1()
    
    @property
    def sc_tkd(self):
        """
        Element sc_tkd ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 1267
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_tkd()
    
    @property
    def sc_tkdindexingnamelisttype(self):
        """
        Element sc_tkdindexingnamelisttype ftype=character(23) pytype=str
        
        
        Defined at stringconstants.f90 line 1269
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_tkdindexingnamelisttype()
    
    @property
    def sc_tkdmasternamelist(self):
        """
        Element sc_tkdmasternamelist ftype=character(17) pytype=str
        
        
        Defined at stringconstants.f90 line 1271
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_tkdmasternamelist()
    
    @property
    def sc_tkdnamelist(self):
        """
        Element sc_tkdnamelist ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 1273
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_tkdnamelist()
    
    @property
    def sc_tkdmaster(self):
        """
        Element sc_tkdmaster ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 1275
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_tkdmaster()
    
    @property
    def sc_testdata(self):
        """
        Element sc_testdata ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 1277
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_testdata()
    
    @property
    def sc_defecttest(self):
        """
        Element sc_defecttest ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 1279
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_defecttest()
    
    @property
    def sc_h5ebsd(self):
        """
        Element sc_h5ebsd ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 1281
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_h5ebsd()
    
    @property
    def sc_h5pfinversion(self):
        """
        Element sc_h5pfinversion ftype=character(13) pytype=str
        
        
        Defined at stringconstants.f90 line 1283
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_h5pfinversion()
    
    @property
    def sc_test2group(self):
        """
        Element sc_test2group ftype=character(10) pytype=str
        
        
        Defined at stringconstants.f90 line 1285
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_test2group()
    
    @property
    def sc_testgroup(self):
        """
        Element sc_testgroup ftype=character(9) pytype=str
        
        
        Defined at stringconstants.f90 line 1287
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_testgroup()
    
    @property
    def sc_scalefactor(self):
        """
        Element sc_scalefactor ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 1289
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_scalefactor()
    
    @property
    def sc_discsize(self):
        """
        Element sc_discsize ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 1291
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_discsize()
    
    @property
    def sc_convergenceangle(self):
        """
        Element sc_convergenceangle ftype=character(16) pytype=str
        
        
        Defined at stringconstants.f90 line 1293
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_convergenceangle()
    
    @property
    def sc_orientation(self):
        """
        Element sc_orientation ftype=character(11) pytype=str
        
        
        Defined at stringconstants.f90 line 1295
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_orientation()
    
    @property
    def sc_maxnumincell(self):
        """
        Element sc_maxnumincell ftype=character(12) pytype=str
        
        
        Defined at stringconstants.f90 line 1297
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_maxnumincell()
    
    @property
    def sc_hypslab(self):
        """
        Element sc_hypslab ftype=character(7) pytype=str
        
        
        Defined at stringconstants.f90 line 1299
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_hypslab()
    
    @property
    def sc_dwflag(self):
        """
        Element sc_dwflag ftype=character(6) pytype=str
        
        
        Defined at stringconstants.f90 line 1301
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_dwflag()
    
    @property
    def sc_thk(self):
        """
        Element sc_thk ftype=character(3) pytype=str
        
        
        Defined at stringconstants.f90 line 1303
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_thk()
    
    @property
    def sc_sg(self):
        """
        Element sc_sg ftype=character(2) pytype=str
        
        
        Defined at stringconstants.f90 line 1305
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_sg()
    
    @property
    def sc_emslackwebhookurl(self):
        """
        Element sc_emslackwebhookurl ftype=character(17) pytype=str
        
        
        Defined at stringconstants.f90 line 1310
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emslackwebhookurl()
    
    @property
    def sc_emslackchannel(self):
        """
        Element sc_emslackchannel ftype=character(14) pytype=str
        
        
        Defined at stringconstants.f90 line 1312
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emslackchannel()
    
    @property
    def sc_emnotify(self):
        """
        Element sc_emnotify ftype=character(8) pytype=str
        
        
        Defined at stringconstants.f90 line 1314
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emnotify()
    
    @property
    def sc_emshtdoi(self):
        """
        Element sc_emshtdoi ftype=character(34) pytype=str
        
        
        Defined at stringconstants.f90 line 1316
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_emshtdoi()
    
    @property
    def sc_zenododoi(self):
        """
        Element sc_zenododoi ftype=character(38) pytype=str
        
        
        Defined at stringconstants.f90 line 1318
        
        """
        return _pyEMsoft.f90wrap_stringconstants__get__sc_zenododoi()
    
    def __str__(self):
        ret = ['<stringconstants>{\n']
        ret.append('    sc_axialsymmetry : ')
        ret.append(repr(self.sc_axialsymmetry))
        ret.append(',\n    sc_h5copy : ')
        ret.append(repr(self.sc_h5copy))
        ret.append(',\n    sc_h5copypath : ')
        ret.append(repr(self.sc_h5copypath))
        ret.append(',\n    sc_testing : ')
        ret.append(repr(self.sc_testing))
        ret.append(',\n    sc_temporary : ')
        ret.append(repr(self.sc_temporary))
        ret.append(',\n    sc_windows : ')
        ret.append(repr(self.sc_windows))
        ret.append(',\n    sc_config : ')
        ret.append(repr(self.sc_config))
        ret.append(',\n    sc_emsoft : ')
        ret.append(repr(self.sc_emsoft))
        ret.append(',\n    sc_tmp : ')
        ret.append(repr(self.sc_tmp))
        ret.append(',\n    sc_emsoftpathname : ')
        ret.append(repr(self.sc_emsoftpathname))
        ret.append(',\n    sc_emsoftlibrarylocation : ')
        ret.append(repr(self.sc_emsoftlibrarylocation))
        ret.append(',\n    sc_emxtalfolderpathname : ')
        ret.append(repr(self.sc_emxtalfolderpathname))
        ret.append(',\n    sc_emdatapathname : ')
        ret.append(repr(self.sc_emdatapathname))
        ret.append(',\n    sc_emtmppathname : ')
        ret.append(repr(self.sc_emtmppathname))
        ret.append(',\n    sc_emsoftplatform : ')
        ret.append(repr(self.sc_emsoftplatform))
        ret.append(',\n    sc_emsofttestpath : ')
        ret.append(repr(self.sc_emsofttestpath))
        ret.append(',\n    sc_emsofttestingpath : ')
        ret.append(repr(self.sc_emsofttestingpath))
        ret.append(',\n    sc_emsoftversion : ')
        ret.append(repr(self.sc_emsoftversion))
        ret.append(',\n    sc_configpath : ')
        ret.append(repr(self.sc_configpath))
        ret.append(',\n    sc_templatepathname : ')
        ret.append(repr(self.sc_templatepathname))
        ret.append(',\n    sc_resourcepathname : ')
        ret.append(repr(self.sc_resourcepathname))
        ret.append(',\n    sc_readmefirst : ')
        ret.append(repr(self.sc_readmefirst))
        ret.append(',\n    sc_homepathname : ')
        ret.append(repr(self.sc_homepathname))
        ret.append(',\n    sc_openclpathname : ')
        ret.append(repr(self.sc_openclpathname))
        ret.append(',\n    sc_source : ')
        ret.append(repr(self.sc_source))
        ret.append(',\n    sc_templatecodefilename : ')
        ret.append(repr(self.sc_templatecodefilename))
        ret.append(',\n    sc_wyckoffpositionsfilename : ')
        ret.append(repr(self.sc_wyckoffpositionsfilename))
        ret.append(',\n    sc_randomseedfilename : ')
        ret.append(repr(self.sc_randomseedfilename))
        ret.append(',\n    sc_emsoftnativedelimiter : ')
        ret.append(repr(self.sc_emsoftnativedelimiter))
        ret.append(',\n    sc_username : ')
        ret.append(repr(self.sc_username))
        ret.append(',\n    sc_userlocation : ')
        ret.append(repr(self.sc_userlocation))
        ret.append(',\n    sc_useremail : ')
        ret.append(repr(self.sc_useremail))
        ret.append(',\n    sc_develop : ')
        ret.append(repr(self.sc_develop))
        ret.append(',\n    sc_release : ')
        ret.append(repr(self.sc_release))
        ret.append(',\n    sc_jsonfilename : ')
        ret.append(repr(self.sc_jsonfilename))
        ret.append(',\n    sc_jsontemplates : ')
        ret.append(repr(self.sc_jsontemplates))
        ret.append(',\n    sc_namelisttemplates : ')
        ret.append(repr(self.sc_namelisttemplates))
        ret.append(',\n    sc_resources : ')
        ret.append(repr(self.sc_resources))
        ret.append(',\n    sc_opencl : ')
        ret.append(repr(self.sc_opencl))
        ret.append(',\n    sc_fftwwisdomtxt : ')
        ret.append(repr(self.sc_fftwwisdomtxt))
        ret.append(',\n    sc_wikicodestxt : ')
        ret.append(repr(self.sc_wikicodestxt))
        ret.append(',\n    sc_templatecodestxt : ')
        ret.append(repr(self.sc_templatecodestxt))
        ret.append(',\n    sc_wiki : ')
        ret.append(repr(self.sc_wiki))
        ret.append(',\n    sc_wyckoffpositionstxt : ')
        ret.append(repr(self.sc_wyckoffpositionstxt))
        ret.append(',\n    sc_randomseedsdata : ')
        ret.append(repr(self.sc_randomseedsdata))
        ret.append(',\n    sc_atomdata : ')
        ret.append(repr(self.sc_atomdata))
        ret.append(',\n    sc_atomtypes : ')
        ret.append(repr(self.sc_atomtypes))
        ret.append(',\n    sc_avdotproductmap : ')
        ret.append(repr(self.sc_avdotproductmap))
        ret.append(',\n    sc_averageorientations : ')
        ret.append(repr(self.sc_averageorientations))
        ret.append(',\n    sc_bfimage : ')
        ret.append(repr(self.sc_bfimage))
        ret.append(',\n    sc_betheparameters : ')
        ret.append(repr(self.sc_betheparameters))
        ret.append(',\n    sc_betheparametersfile : ')
        ret.append(repr(self.sc_betheparametersfile))
        ret.append(',\n    sc_braggangle : ')
        ret.append(repr(self.sc_braggangle))
        ret.append(',\n    sc_braggga : ')
        ret.append(repr(self.sc_braggga))
        ret.append(',\n    sc_bzero : ')
        ret.append(repr(self.sc_bzero))
        ret.append(',\n    sc_cbedqc : ')
        ret.append(repr(self.sc_cbedqc))
        ret.append(',\n    sc_cbedqcnamelist : ')
        ret.append(repr(self.sc_cbedqcnamelist))
        ret.append(',\n    sc_ci : ')
        ret.append(repr(self.sc_ci))
        ret.append(',\n    sc_cimap : ')
        ret.append(repr(self.sc_cimap))
        ret.append(',\n    sc_clarray : ')
        ret.append(repr(self.sc_clarray))
        ret.append(',\n    sc_cameraazimuthalangle : ')
        ret.append(repr(self.sc_cameraazimuthalangle))
        ret.append(',\n    sc_cameraelevationangle : ')
        ret.append(repr(self.sc_cameraelevationangle))
        ret.append(',\n    sc_correctedeulerangles : ')
        ret.append(repr(self.sc_correctedeulerangles))
        ret.append(',\n    sc_creationdate : ')
        ret.append(repr(self.sc_creationdate))
        ret.append(',\n    sc_creationtime : ')
        ret.append(repr(self.sc_creationtime))
        ret.append(',\n    sc_creator : ')
        ret.append(repr(self.sc_creator))
        ret.append(',\n    sc_crystalsystem : ')
        ret.append(repr(self.sc_crystalsystem))
        ret.append(',\n    sc_cubochoricstepsize : ')
        ret.append(repr(self.sc_cubochoricstepsize))
        ret.append(',\n    sc_date : ')
        ret.append(repr(self.sc_date))
        ret.append(',\n    sc_detparms : ')
        ret.append(repr(self.sc_detparms))
        ret.append(',\n    sc_detparmstepsize : ')
        ret.append(repr(self.sc_detparmstepsize))
        ret.append(',\n    sc_diffractionpattern : ')
        ret.append(repr(self.sc_diffractionpattern))
        ret.append(',\n    sc_dispfield : ')
        ret.append(repr(self.sc_dispfield))
        ret.append(',\n    sc_dotproducts : ')
        ret.append(repr(self.sc_dotproducts))
        ret.append(',\n    sc_duration : ')
        ret.append(repr(self.sc_duration))
        ret.append(',\n    sc_d2or3 : ')
        ret.append(repr(self.sc_d2or3))
        ret.append(',\n    sc_ebsdpatterns : ')
        ret.append(repr(self.sc_ebsdpatterns))
        ret.append(',\n    sc_ebsdviewreferenceframe : ')
        ret.append(repr(self.sc_ebsdviewreferenceframe))
        ret.append(',\n    sc_ebsdmasterjson : ')
        ret.append(repr(self.sc_ebsdmasterjson))
        ret.append(',\n    sc_ebsdmasternml : ')
        ret.append(repr(self.sc_ebsdmasternml))
        ret.append(',\n    sc_ebsdmastervars : ')
        ret.append(repr(self.sc_ebsdmastervars))
        ret.append(',\n    sc_ebsdenergy : ')
        ret.append(repr(self.sc_ebsdenergy))
        ret.append(',\n    sc_ebsdoverlapnml : ')
        ret.append(repr(self.sc_ebsdoverlapnml))
        ret.append(',\n    sc_ebsdoverlapnamelist : ')
        ret.append(repr(self.sc_ebsdoverlapnamelist))
        ret.append(',\n    sc_eccidefectjson : ')
        ret.append(repr(self.sc_eccidefectjson))
        ret.append(',\n    sc_eccifoiljson : ')
        ret.append(repr(self.sc_eccifoiljson))
        ret.append(',\n    sc_ecciimages : ')
        ret.append(repr(self.sc_ecciimages))
        ret.append(',\n    sc_eccimasternml : ')
        ret.append(repr(self.sc_eccimasternml))
        ret.append(',\n    sc_ecp : ')
        ret.append(repr(self.sc_ecp))
        ret.append(',\n    sc_ecpkinematic : ')
        ret.append(repr(self.sc_ecpkinematic))
        ret.append(',\n    sc_ecpzanml : ')
        ret.append(repr(self.sc_ecpzanml))
        ret.append(',\n    sc_ecpmaster : ')
        ret.append(repr(self.sc_ecpmaster))
        ret.append(',\n    sc_ecpmasternml : ')
        ret.append(repr(self.sc_ecpmasternml))
        ret.append(',\n    sc_ecpname : ')
        ret.append(repr(self.sc_ecpname))
        ret.append(',\n    sc_ecpatterns : ')
        ret.append(repr(self.sc_ecpatterns))
        ret.append(',\n    sc_emdata : ')
        ret.append(repr(self.sc_emdata))
        ret.append(',\n    sc_emebsdfullnml : ')
        ret.append(repr(self.sc_emebsdfullnml))
        ret.append(',\n    sc_emebsdnml : ')
        ret.append(repr(self.sc_emebsdnml))
        ret.append(',\n    sc_emebsddefectnml : ')
        ret.append(repr(self.sc_emebsddefectnml))
        ret.append(',\n    sc_ebsddefectnamelist : ')
        ret.append(repr(self.sc_ebsddefectnamelist))
        ret.append(',\n    sc_emebsdscannml : ')
        ret.append(repr(self.sc_emebsdscannml))
        ret.append(',\n    sc_emecpnml : ')
        ret.append(repr(self.sc_emecpnml))
        ret.append(',\n    sc_empedza : ')
        ret.append(repr(self.sc_empedza))
        ret.append(',\n    sc_emtkdnml : ')
        ret.append(repr(self.sc_emtkdnml))
        ret.append(',\n    sc_emkinematical : ')
        ret.append(repr(self.sc_emkinematical))
        ret.append(',\n    sc_ebinsize : ')
        ret.append(repr(self.sc_ebinsize))
        ret.append(',\n    sc_ehistmin : ')
        ret.append(repr(self.sc_ehistmin))
        ret.append(',\n    sc_ekev : ')
        ret.append(repr(self.sc_ekev))
        ret.append(',\n    sc_ekevs : ')
        ret.append(repr(self.sc_ekevs))
        ret.append(',\n    sc_esel : ')
        ret.append(repr(self.sc_esel))
        ret.append(',\n    sc_dictionaryeulerangles : ')
        ret.append(repr(self.sc_dictionaryeulerangles))
        ret.append(',\n    sc_eulerangles : ')
        ret.append(repr(self.sc_eulerangles))
        ret.append(',\n    sc_eulertriplet : ')
        ret.append(repr(self.sc_eulertriplet))
        ret.append(',\n    sc_fzcnt : ')
        ret.append(repr(self.sc_fzcnt))
        ret.append(',\n    sc_fit : ')
        ret.append(repr(self.sc_fit))
        ret.append(',\n    sc_formula : ')
        ret.append(repr(self.sc_formula))
        ret.append(',\n    sc_ftensor : ')
        ret.append(repr(self.sc_ftensor))
        ret.append(',\n    sc_gridtype : ')
        ret.append(repr(self.sc_gridtype))
        ret.append(',\n    sc_hdfname : ')
        ret.append(repr(self.sc_hdfname))
        ret.append(',\n    sc_hdfstrings : ')
        ret.append(repr(self.sc_hdfstrings))
        ret.append(',\n    sc_hdffileversion : ')
        ret.append(repr(self.sc_hdffileversion))
        ret.append(',\n    sc_hostname : ')
        ret.append(repr(self.sc_hostname))
        ret.append(',\n    sc_horizontalaxisa : ')
        ret.append(repr(self.sc_horizontalaxisa))
        ret.append(',\n    sc_id : ')
        ret.append(repr(self.sc_id))
        ret.append(',\n    sc_intfactor : ')
        ret.append(repr(self.sc_intfactor))
        ret.append(',\n    sc_iq : ')
        ret.append(repr(self.sc_iq))
        ret.append(',\n    sc_iqmap : ')
        ret.append(repr(self.sc_iqmap))
        ret.append(',\n    sc_ism : ')
        ret.append(repr(self.sc_ism))
        ret.append(',\n    sc_ismap : ')
        ret.append(repr(self.sc_ismap))
        ret.append(',\n    sc_isr : ')
        ret.append(repr(self.sc_isr))
        ret.append(',\n    sc_indices : ')
        ret.append(repr(self.sc_indices))
        ret.append(',\n    sc_info : ')
        ret.append(repr(self.sc_info))
        ret.append(',\n    sc_kappavmf : ')
        ret.append(repr(self.sc_kappavmf))
        ret.append(',\n    sc_kam : ')
        ret.append(repr(self.sc_kam))
        ret.append(',\n    sc_kosselmasterlist : ')
        ret.append(repr(self.sc_kosselmasterlist))
        ret.append(',\n    sc_kosselmode : ')
        ret.append(repr(self.sc_kosselmode))
        ret.append(',\n    sc_l : ')
        ret.append(repr(self.sc_l))
        ret.append(',\n    sc_lambdas : ')
        ret.append(repr(self.sc_lambdas))
        ret.append(',\n    sc_lambdamax : ')
        ret.append(repr(self.sc_lambdamax))
        ret.append(',\n    sc_lambdamin : ')
        ret.append(repr(self.sc_lambdamin))
        ret.append(',\n    sc_latticeconstanta : ')
        ret.append(repr(self.sc_latticeconstanta))
        ret.append(',\n    sc_latticeconstantalpha : ')
        ret.append(repr(self.sc_latticeconstantalpha))
        ret.append(',\n    sc_latticeconstantb : ')
        ret.append(repr(self.sc_latticeconstantb))
        ret.append(',\n    sc_latticeconstantbeta : ')
        ret.append(repr(self.sc_latticeconstantbeta))
        ret.append(',\n    sc_latticeconstantc : ')
        ret.append(repr(self.sc_latticeconstantc))
        ret.append(',\n    sc_latticeconstantgamma : ')
        ret.append(repr(self.sc_latticeconstantgamma))
        ret.append(',\n    sc_latticeparameters : ')
        ret.append(repr(self.sc_latticeparameters))
        ret.append(',\n    sc_lauemaster : ')
        ret.append(repr(self.sc_lauemaster))
        ret.append(',\n    sc_lauenml : ')
        ret.append(repr(self.sc_lauenml))
        ret.append(',\n    sc_lauemasternml : ')
        ret.append(repr(self.sc_lauemasternml))
        ret.append(',\n    sc_lauenamelist : ')
        ret.append(repr(self.sc_lauenamelist))
        ret.append(',\n    sc_lauemasternamelist : ')
        ret.append(repr(self.sc_lauemasternamelist))
        ret.append(',\n    sc_lauegroup : ')
        ret.append(repr(self.sc_lauegroup))
        ret.append(',\n    sc_mccldata : ')
        ret.append(repr(self.sc_mccldata))
        ret.append(',\n    sc_mcopencljson : ')
        ret.append(repr(self.sc_mcopencljson))
        ret.append(',\n    sc_mcopenclnml : ')
        ret.append(repr(self.sc_mcopenclnml))
        ret.append(',\n    sc_mcfoilnml : ')
        ret.append(repr(self.sc_mcfoilnml))
        ret.append(',\n    sc_mcmode : ')
        ret.append(repr(self.sc_mcmode))
        ret.append(',\n    sc_mcspherenml : ')
        ret.append(repr(self.sc_mcspherenml))
        ret.append(',\n    sc_manufacturer : ')
        ret.append(repr(self.sc_manufacturer))
        ret.append(',\n    sc_materialname : ')
        ret.append(repr(self.sc_materialname))
        ret.append(',\n    sc_meansubtraction : ')
        ret.append(repr(self.sc_meansubtraction))
        ret.append(',\n    sc_microstructure : ')
        ret.append(repr(self.sc_microstructure))
        ret.append(',\n    sc_miso : ')
        ret.append(repr(self.sc_miso))
        ret.append(',\n    sc_mutualinformation : ')
        ret.append(repr(self.sc_mutualinformation))
        ret.append(',\n    sc_natomtypes : ')
        ret.append(repr(self.sc_natomtypes))
        ret.append(',\n    sc_ncubochoric : ')
        ret.append(repr(self.sc_ncubochoric))
        ret.append(',\n    sc_notes : ')
        ret.append(repr(self.sc_notes))
        ret.append(',\n    sc_numexptpatterns : ')
        ret.append(repr(self.sc_numexptpatterns))
        ret.append(',\n    sc_numberfamilies : ')
        ret.append(repr(self.sc_numberfamilies))
        ret.append(',\n    sc_odf : ')
        ret.append(repr(self.sc_odf))
        ret.append(',\n    sc_osm : ')
        ret.append(repr(self.sc_osm))
        ret.append(',\n    sc_operator : ')
        ret.append(repr(self.sc_operator))
        ret.append(',\n    sc_pedkinnamelist : ')
        ret.append(repr(self.sc_pedkinnamelist))
        ret.append(',\n    sc_pedpatterns : ')
        ret.append(repr(self.sc_pedpatterns))
        ret.append(',\n    sc_path : ')
        ret.append(repr(self.sc_path))
        ret.append(',\n    sc_patternheight : ')
        ret.append(repr(self.sc_patternheight))
        ret.append(',\n    sc_patternwidth : ')
        ret.append(repr(self.sc_patternwidth))
        ret.append(',\n    sc_patternaxisa : ')
        ret.append(repr(self.sc_patternaxisa))
        ret.append(',\n    sc_phase : ')
        ret.append(repr(self.sc_phase))
        ret.append(',\n    sc_phi : ')
        ret.append(repr(self.sc_phi))
        ret.append(',\n    sc_phi1 : ')
        ret.append(repr(self.sc_phi1))
        ret.append(',\n    sc_phi2 : ')
        ret.append(repr(self.sc_phi2))
        ret.append(',\n    sc_pixellocation : ')
        ret.append(repr(self.sc_pixellocation))
        ret.append(',\n    sc_pointgroup : ')
        ret.append(repr(self.sc_pointgroup))
        ret.append(',\n    sc_pointgroupnumber : ')
        ret.append(repr(self.sc_pointgroupnumber))
        ret.append(',\n    sc_programname : ')
        ret.append(repr(self.sc_programname))
        ret.append(',\n    sc_qctype : ')
        ret.append(repr(self.sc_qctype))
        ret.append(',\n    sc_refinedcorrecteddotproducts : ')
        ret.append(repr(self.sc_refinedcorrecteddotproducts))
        ret.append(',\n    sc_refinedcorrectedeulerangles : ')
        ret.append(repr(self.sc_refinedcorrectedeulerangles))
        ret.append(',\n    sc_refineddotproducts : ')
        ret.append(repr(self.sc_refineddotproducts))
        ret.append(',\n    sc_refinedeulerangles : ')
        ret.append(repr(self.sc_refinedeulerangles))
        ret.append(',\n    sc_rin : ')
        ret.append(repr(self.sc_rin))
        ret.append(',\n    sc_rout : ')
        ret.append(repr(self.sc_rout))
        ret.append(',\n    sc_stemnmlfile : ')
        ret.append(repr(self.sc_stemnmlfile))
        ret.append(',\n    sc_sampleid : ')
        ret.append(repr(self.sc_sampleid))
        ret.append(',\n    sc_sampletilt : ')
        ret.append(repr(self.sc_sampletilt))
        ret.append(',\n    sc_scanid : ')
        ret.append(repr(self.sc_scanid))
        ret.append(',\n    sc_schematic1 : ')
        ret.append(repr(self.sc_schematic1))
        ret.append(',\n    sc_schematic2 : ')
        ret.append(repr(self.sc_schematic2))
        ret.append(',\n    sc_schematic3 : ')
        ret.append(repr(self.sc_schematic3))
        ret.append(',\n    sc_schematic4 : ')
        ret.append(repr(self.sc_schematic4))
        ret.append(',\n    sc_semsignal : ')
        ret.append(repr(self.sc_semsignal))
        ret.append(',\n    sc_spacegroupnumber : ')
        ret.append(repr(self.sc_spacegroupnumber))
        ret.append(',\n    sc_spacegroupsetting : ')
        ret.append(repr(self.sc_spacegroupsetting))
        ret.append(',\n    sc_sphinxnamelist : ')
        ret.append(repr(self.sc_sphinxnamelist))
        ret.append(',\n    sc_starttime : ')
        ret.append(repr(self.sc_starttime))
        ret.append(',\n    sc_stdout : ')
        ret.append(repr(self.sc_stdout))
        ret.append(',\n    sc_stepx : ')
        ret.append(repr(self.sc_stepx))
        ret.append(',\n    sc_stepy : ')
        ret.append(repr(self.sc_stepy))
        ret.append(',\n    sc_stoptime : ')
        ret.append(repr(self.sc_stoptime))
        ret.append(',\n    sc_symmetry : ')
        ret.append(repr(self.sc_symmetry))
        ret.append(',\n    sc_tkdmasternml : ')
        ret.append(repr(self.sc_tkdmasternml))
        ret.append(',\n    sc_tkdpatterns : ')
        ret.append(repr(self.sc_tkdpatterns))
        ret.append(',\n    sc_tkdspotsnml : ')
        ret.append(repr(self.sc_tkdspotsnml))
        ret.append(',\n    sc_tkdspots : ')
        ret.append(repr(self.sc_tkdspots))
        ret.append(',\n    sc_topdotproductlist : ')
        ret.append(repr(self.sc_topdotproductlist))
        ret.append(',\n    sc_topmatchindices : ')
        ret.append(repr(self.sc_topmatchindices))
        ret.append(',\n    sc_valid : ')
        ret.append(repr(self.sc_valid))
        ret.append(',\n    sc_variants : ')
        ret.append(repr(self.sc_variants))
        ret.append(',\n    sc_version : ')
        ret.append(repr(self.sc_version))
        ret.append(',\n    sc_workingdistance : ')
        ret.append(repr(self.sc_workingdistance))
        ret.append(',\n    sc_xposition : ')
        ret.append(repr(self.sc_xposition))
        ret.append(',\n    sc_xpos : ')
        ret.append(repr(self.sc_xpos))
        ret.append(',\n    sc_xyarray : ')
        ret.append(repr(self.sc_xyarray))
        ret.append(',\n    sc_yposition : ')
        ret.append(repr(self.sc_yposition))
        ret.append(',\n    sc_ypos : ')
        ret.append(repr(self.sc_ypos))
        ret.append(',\n    sc_zaimages : ')
        ret.append(repr(self.sc_zaimages))
        ret.append(',\n    sc_accume : ')
        ret.append(repr(self.sc_accume))
        ret.append(',\n    sc_accumsp : ')
        ret.append(repr(self.sc_accumsp))
        ret.append(',\n    sc_accumenh : ')
        ret.append(repr(self.sc_accumenh))
        ret.append(',\n    sc_accumesh : ')
        ret.append(repr(self.sc_accumesh))
        ret.append(',\n    sc_accumesp : ')
        ret.append(repr(self.sc_accumesp))
        ret.append(',\n    sc_accumedetector : ')
        ret.append(repr(self.sc_accumedetector))
        ret.append(',\n    sc_accumt : ')
        ret.append(repr(self.sc_accumt))
        ret.append(',\n    sc_accumt1 : ')
        ret.append(repr(self.sc_accumt1))
        ret.append(',\n    sc_accumt2 : ')
        ret.append(repr(self.sc_accumt2))
        ret.append(',\n    sc_accumt3 : ')
        ret.append(repr(self.sc_accumt3))
        ret.append(',\n    sc_accumxyz : ')
        ret.append(repr(self.sc_accumxyz))
        ret.append(',\n    sc_accumz : ')
        ret.append(repr(self.sc_accumz))
        ret.append(',\n    sc_accumznh : ')
        ret.append(repr(self.sc_accumznh))
        ret.append(',\n    sc_accumzsh : ')
        ret.append(repr(self.sc_accumzsh))
        ret.append(',\n    sc_angab : ')
        ret.append(repr(self.sc_angab))
        ret.append(',\n    sc_angfile : ')
        ret.append(repr(self.sc_angfile))
        ret.append(',\n    sc_anglefile : ')
        ret.append(repr(self.sc_anglefile))
        ret.append(',\n    sc_anglefiletype : ')
        ret.append(repr(self.sc_anglefiletype))
        ret.append(',\n    sc_apertureposition : ')
        ret.append(repr(self.sc_apertureposition))
        ret.append(',\n    sc_applydeformation : ')
        ret.append(repr(self.sc_applydeformation))
        ret.append(',\n    sc_includebackground : ')
        ret.append(repr(self.sc_includebackground))
        ret.append(',\n    sc_astigmatism : ')
        ret.append(repr(self.sc_astigmatism))
        ret.append(',\n    sc_avctffile : ')
        ret.append(repr(self.sc_avctffile))
        ret.append(',\n    sc_axisangle : ')
        ret.append(repr(self.sc_axisangle))
        ret.append(',\n    sc_axoutname : ')
        ret.append(repr(self.sc_axoutname))
        ret.append(',\n    sc_beamcurrent : ')
        ret.append(repr(self.sc_beamcurrent))
        ret.append(',\n    sc_beamdc : ')
        ret.append(repr(self.sc_beamdc))
        ret.append(',\n    sc_binning : ')
        ret.append(repr(self.sc_binning))
        ret.append(',\n    sc_binx : ')
        ret.append(repr(self.sc_binx))
        ret.append(',\n    sc_biny : ')
        ret.append(repr(self.sc_biny))
        ret.append(',\n    sc_bitdepth : ')
        ret.append(repr(self.sc_bitdepth))
        ret.append(',\n    sc_bse1 : ')
        ret.append(repr(self.sc_bse1))
        ret.append(',\n    sc_cellatomtype : ')
        ret.append(repr(self.sc_cellatomtype))
        ret.append(',\n    sc_c1 : ')
        ret.append(repr(self.sc_c1))
        ret.append(',\n    sc_c2 : ')
        ret.append(repr(self.sc_c2))
        ret.append(',\n    sc_c3 : ')
        ret.append(repr(self.sc_c3))
        ret.append(',\n    sc_centering : ')
        ret.append(repr(self.sc_centering))
        ret.append(',\n    sc_char1d : ')
        ret.append(repr(self.sc_char1d))
        ret.append(',\n    sc_char2d : ')
        ret.append(repr(self.sc_char2d))
        ret.append(',\n    sc_char3d : ')
        ret.append(repr(self.sc_char3d))
        ret.append(',\n    sc_char4d : ')
        ret.append(repr(self.sc_char4d))
        ret.append(',\n    sc_chararray2d : ')
        ret.append(repr(self.sc_chararray2d))
        ret.append(',\n    sc_colormapfile : ')
        ret.append(repr(self.sc_colormapfile))
        ret.append(',\n    sc_combinesites : ')
        ret.append(repr(self.sc_combinesites))
        ret.append(',\n    sc_compgridtype : ')
        ret.append(repr(self.sc_compgridtype))
        ret.append(',\n    sc_compmode : ')
        ret.append(repr(self.sc_compmode))
        ret.append(',\n    sc_compnsteps : ')
        ret.append(repr(self.sc_compnsteps))
        ret.append(',\n    sc_ctffile : ')
        ret.append(repr(self.sc_ctffile))
        ret.append(',\n    sc_cuoutname : ')
        ret.append(repr(self.sc_cuoutname))
        ret.append(',\n    sc_datafile : ')
        ret.append(repr(self.sc_datafile))
        ret.append(',\n    sc_dataname : ')
        ret.append(repr(self.sc_dataname))
        ret.append(',\n    sc_str : ')
        ret.append(repr(self.sc_str))
        ret.append(',\n    sc_datasetname : ')
        ret.append(repr(self.sc_datasetname))
        ret.append(',\n    sc_defectfilename : ')
        ret.append(repr(self.sc_defectfilename))
        ret.append(',\n    sc_deformationfile : ')
        ret.append(repr(self.sc_deformationfile))
        ret.append(',\n    sc_delta : ')
        ret.append(repr(self.sc_delta))
        ret.append(',\n    sc_depthmax : ')
        ret.append(repr(self.sc_depthmax))
        ret.append(',\n    sc_depthstep : ')
        ret.append(repr(self.sc_depthstep))
        ret.append(',\n    sc_devid : ')
        ret.append(repr(self.sc_devid))
        ret.append(',\n    sc_dictfile : ')
        ret.append(repr(self.sc_dictfile))
        ret.append(',\n    sc_dismaxvals : ')
        ret.append(repr(self.sc_dismaxvals))
        ret.append(',\n    sc_disminvals : ')
        ret.append(repr(self.sc_disminvals))
        ret.append(',\n    sc_dispfile : ')
        ret.append(repr(self.sc_dispfile))
        ret.append(',\n    sc_dispmode : ')
        ret.append(repr(self.sc_dispmode))
        ret.append(',\n    sc_disvals : ')
        ret.append(repr(self.sc_disvals))
        ret.append(',\n    sc_dmin : ')
        ret.append(repr(self.sc_dmin))
        ret.append(',\n    sc_doubletype : ')
        ret.append(repr(self.sc_doubletype))
        ret.append(',\n    sc_double1d : ')
        ret.append(repr(self.sc_double1d))
        ret.append(',\n    sc_double2d : ')
        ret.append(repr(self.sc_double2d))
        ret.append(',\n    sc_double3d : ')
        ret.append(repr(self.sc_double3d))
        ret.append(',\n    sc_double4d : ')
        ret.append(repr(self.sc_double4d))
        ret.append(',\n    sc_dt : ')
        ret.append(repr(self.sc_dt))
        ret.append(',\n    sc_dwelltime : ')
        ret.append(repr(self.sc_dwelltime))
        ret.append(',\n    sc_energyaverage : ')
        ret.append(repr(self.sc_energyaverage))
        ret.append(',\n    sc_copyfromenergyfile : ')
        ret.append(repr(self.sc_copyfromenergyfile))
        ret.append(',\n    sc_energyfile : ')
        ret.append(repr(self.sc_energyfile))
        ret.append(',\n    sc_energymax : ')
        ret.append(repr(self.sc_energymax))
        ret.append(',\n    sc_energymin : ')
        ret.append(repr(self.sc_energymin))
        ret.append(',\n    sc_eulerconvention : ')
        ret.append(repr(self.sc_eulerconvention))
        ret.append(',\n    sc_eulerfile : ')
        ret.append(repr(self.sc_eulerfile))
        ret.append(',\n    sc_euoutname : ')
        ret.append(repr(self.sc_euoutname))
        ret.append(',\n    sc_exptfile : ')
        ret.append(repr(self.sc_exptfile))
        ret.append(',\n    sc_filemode : ')
        ret.append(repr(self.sc_filemode))
        ret.append(',\n    sc_filmfile : ')
        ret.append(repr(self.sc_filmfile))
        ret.append(',\n    sc_filterpattern : ')
        ret.append(repr(self.sc_filterpattern))
        ret.append(',\n    sc_floattype : ')
        ret.append(repr(self.sc_floattype))
        ret.append(',\n    sc_float1d : ')
        ret.append(repr(self.sc_float1d))
        ret.append(',\n    sc_float2d : ')
        ret.append(repr(self.sc_float2d))
        ret.append(',\n    sc_float3d : ')
        ret.append(repr(self.sc_float3d))
        ret.append(',\n    sc_float4d : ')
        ret.append(repr(self.sc_float4d))
        ret.append(',\n    sc_fn : ')
        ret.append(repr(self.sc_fn))
        ret.append(',\n    sc_fnf : ')
        ret.append(repr(self.sc_fnf))
        ret.append(',\n    sc_fns : ')
        ret.append(repr(self.sc_fns))
        ret.append(',\n    sc_full : ')
        ret.append(repr(self.sc_full))
        ret.append(',\n    sc_frfo : ')
        ret.append(repr(self.sc_frfo))
        ret.append(',\n    sc_gf : ')
        ret.append(repr(self.sc_gf))
        ret.append(',\n    sc_gs : ')
        ret.append(repr(self.sc_gs))
        ret.append(',\n    sc_ga : ')
        ret.append(repr(self.sc_ga))
        ret.append(',\n    sc_gammavalue : ')
        ret.append(repr(self.sc_gammavalue))
        ret.append(',\n    sc_gb : ')
        ret.append(repr(self.sc_gb))
        ret.append(',\n    sc_geometry : ')
        ret.append(repr(self.sc_geometry))
        ret.append(',\n    sc_globalworkgrpsz : ')
        ret.append(repr(self.sc_globalworkgrpsz))
        ret.append(',\n    sc_groupname : ')
        ret.append(repr(self.sc_groupname))
        ret.append(',\n    sc_hipassw : ')
        ret.append(repr(self.sc_hipassw))
        ret.append(',\n    sc_hipasswmax : ')
        ret.append(repr(self.sc_hipasswmax))
        ret.append(',\n    sc_hipasswnsteps : ')
        ret.append(repr(self.sc_hipasswnsteps))
        ret.append(',\n    sc_hkl : ')
        ret.append(repr(self.sc_hkl))
        ret.append(',\n    sc_hklfamilies : ')
        ret.append(repr(self.sc_hklfamilies))
        ret.append(',\n    sc_hklarray : ')
        ret.append(repr(self.sc_hklarray))
        ret.append(',\n    sc_hklmax : ')
        ret.append(repr(self.sc_hklmax))
        ret.append(',\n    sc_hooutname : ')
        ret.append(repr(self.sc_hooutname))
        ret.append(',\n    sc_hypercarr2 : ')
        ret.append(repr(self.sc_hypercarr2))
        ret.append(',\n    sc_hypercarr3 : ')
        ret.append(repr(self.sc_hypercarr3))
        ret.append(',\n    sc_hypercarr4 : ')
        ret.append(repr(self.sc_hypercarr4))
        ret.append(',\n    sc_hyperdarr2 : ')
        ret.append(repr(self.sc_hyperdarr2))
        ret.append(',\n    sc_hyperdarr3 : ')
        ret.append(repr(self.sc_hyperdarr3))
        ret.append(',\n    sc_hyperdarr4 : ')
        ret.append(repr(self.sc_hyperdarr4))
        ret.append(',\n    sc_hyperfarr2 : ')
        ret.append(repr(self.sc_hyperfarr2))
        ret.append(',\n    sc_hyperfarr3 : ')
        ret.append(repr(self.sc_hyperfarr3))
        ret.append(',\n    sc_hyperfarr4 : ')
        ret.append(repr(self.sc_hyperfarr4))
        ret.append(',\n    sc_hyperiarr2 : ')
        ret.append(repr(self.sc_hyperiarr2))
        ret.append(',\n    sc_hyperiarr3 : ')
        ret.append(repr(self.sc_hyperiarr3))
        ret.append(',\n    sc_hyperiarr4 : ')
        ret.append(repr(self.sc_hyperiarr4))
        ret.append(',\n    sc_indexingmode : ')
        ret.append(repr(self.sc_indexingmode))
        ret.append(',\n    sc_inputfilename : ')
        ret.append(repr(self.sc_inputfilename))
        ret.append(',\n    sc_inputtype : ')
        ret.append(repr(self.sc_inputtype))
        ret.append(',\n    sc_intarr3d : ')
        ret.append(repr(self.sc_intarr3d))
        ret.append(',\n    sc_intarray : ')
        ret.append(repr(self.sc_intarray))
        ret.append(',\n    sc_intarray1d : ')
        ret.append(repr(self.sc_intarray1d))
        ret.append(',\n    sc_intarray2d : ')
        ret.append(repr(self.sc_intarray2d))
        ret.append(',\n    sc_intarray3d : ')
        ret.append(repr(self.sc_intarray3d))
        ret.append(',\n    sc_intbxfile : ')
        ret.append(repr(self.sc_intbxfile))
        ret.append(',\n    sc_intbyfile : ')
        ret.append(repr(self.sc_intbyfile))
        ret.append(',\n    sc_integer : ')
        ret.append(repr(self.sc_integer))
        ret.append(',\n    sc_integer1d : ')
        ret.append(repr(self.sc_integer1d))
        ret.append(',\n    sc_integer2d : ')
        ret.append(repr(self.sc_integer2d))
        ret.append(',\n    sc_integer3d : ')
        ret.append(repr(self.sc_integer3d))
        ret.append(',\n    sc_integer4d : ')
        ret.append(repr(self.sc_integer4d))
        ret.append(',\n    sc_ipfht : ')
        ret.append(repr(self.sc_ipfht))
        ret.append(',\n    sc_ipfwd : ')
        ret.append(repr(self.sc_ipfwd))
        ret.append(',\n    sc_isangle : ')
        ret.append(repr(self.sc_isangle))
        ret.append(',\n    sc_k : ')
        ret.append(repr(self.sc_k))
        ret.append(',\n    sc_keeptmpfile : ')
        ret.append(repr(self.sc_keeptmpfile))
        ret.append(',\n    sc_kevs : ')
        ret.append(repr(self.sc_kevs))
        ret.append(',\n    sc_kv : ')
        ret.append(repr(self.sc_kv))
        ret.append(',\n    sc_kij : ')
        ret.append(repr(self.sc_kij))
        ret.append(',\n    sc_kk : ')
        ret.append(repr(self.sc_kk))
        ret.append(',\n    sc_lastenergy : ')
        ret.append(repr(self.sc_lastenergy))
        ret.append(',\n    sc_lauec : ')
        ret.append(repr(self.sc_lauec))
        ret.append(',\n    sc_lauec2 : ')
        ret.append(repr(self.sc_lauec2))
        ret.append(',\n    sc_lenga : ')
        ret.append(repr(self.sc_lenga))
        ret.append(',\n    sc_lengb : ')
        ret.append(repr(self.sc_lengb))
        ret.append(',\n    sc_latgridtype : ')
        ret.append(repr(self.sc_latgridtype))
        ret.append(',\n    sc_magnetization2d : ')
        ret.append(repr(self.sc_magnetization2d))
        ret.append(',\n    sc_magnetization : ')
        ret.append(repr(self.sc_magnetization))
        ret.append(',\n    sc_makedictionary : ')
        ret.append(repr(self.sc_makedictionary))
        ret.append(',\n    sc_mlpnh : ')
        ret.append(repr(self.sc_mlpnh))
        ret.append(',\n    sc_mlpsh : ')
        ret.append(repr(self.sc_mlpsh))
        ret.append(',\n    sc_maskfile : ')
        ret.append(repr(self.sc_maskfile))
        ret.append(',\n    sc_maskpattern : ')
        ret.append(repr(self.sc_maskpattern))
        ret.append(',\n    sc_maskradius : ')
        ret.append(repr(self.sc_maskradius))
        ret.append(',\n    sc_masternh : ')
        ret.append(repr(self.sc_masternh))
        ret.append(',\n    sc_mastersh : ')
        ret.append(repr(self.sc_mastersh))
        ret.append(',\n    sc_masterspnh : ')
        ret.append(repr(self.sc_masterspnh))
        ret.append(',\n    sc_masterspsh : ')
        ret.append(repr(self.sc_masterspsh))
        ret.append(',\n    sc_masterfile : ')
        ret.append(repr(self.sc_masterfile))
        ret.append(',\n    sc_meanvals : ')
        ret.append(repr(self.sc_meanvals))
        ret.append(',\n    sc_modfsquared : ')
        ret.append(repr(self.sc_modfsquared))
        ret.append(',\n    sc_mode : ')
        ret.append(repr(self.sc_mode))
        ret.append(',\n    sc_montagename : ')
        ret.append(repr(self.sc_montagename))
        ret.append(',\n    sc_mpfile : ')
        ret.append(repr(self.sc_mpfile))
        ret.append(',\n    sc_mrcfile : ')
        ret.append(repr(self.sc_mrcfile))
        ret.append(',\n    sc_multiplier : ')
        ret.append(repr(self.sc_multiplier))
        ret.append(',\n    sc_ncolumns : ')
        ret.append(repr(self.sc_ncolumns))
        ret.append(',\n    sc_nregionsmin : ')
        ret.append(repr(self.sc_nregionsmin))
        ret.append(',\n    sc_nregionsmax : ')
        ret.append(repr(self.sc_nregionsmax))
        ret.append(',\n    sc_nregionsstepsize : ')
        ret.append(repr(self.sc_nregionsstepsize))
        ret.append(',\n    sc_nrows : ')
        ret.append(repr(self.sc_nrows))
        ret.append(',\n    sc_nnav : ')
        ret.append(repr(self.sc_nnav))
        ret.append(',\n    sc_nism : ')
        ret.append(repr(self.sc_nism))
        ret.append(',\n    sc_nnk : ')
        ret.append(repr(self.sc_nnk))
        ret.append(',\n    sc_nosm : ')
        ret.append(repr(self.sc_nosm))
        ret.append(',\n    sc_npix : ')
        ret.append(repr(self.sc_npix))
        ret.append(',\n    sc_npiy : ')
        ret.append(repr(self.sc_npiy))
        ret.append(',\n    sc_npx : ')
        ret.append(repr(self.sc_npx))
        ret.append(',\n    sc_nx : ')
        ret.append(repr(self.sc_nx))
        ret.append(',\n    sc_ny : ')
        ret.append(repr(self.sc_ny))
        ret.append(',\n    sc_nz : ')
        ret.append(repr(self.sc_nz))
        ret.append(',\n    sc_nref : ')
        ret.append(repr(self.sc_nref))
        ret.append(',\n    sc_nregions : ')
        ret.append(repr(self.sc_nregions))
        ret.append(',\n    sc_nsteps : ')
        ret.append(repr(self.sc_nsteps))
        ret.append(',\n    sc_nthreads : ')
        ret.append(repr(self.sc_nthreads))
        ret.append(',\n    sc_ivolx : ')
        ret.append(repr(self.sc_ivolx))
        ret.append(',\n    sc_ivoly : ')
        ret.append(repr(self.sc_ivoly))
        ret.append(',\n    sc_ivolz : ')
        ret.append(repr(self.sc_ivolz))
        ret.append(',\n    sc_ivolstepx : ')
        ret.append(repr(self.sc_ivolstepx))
        ret.append(',\n    sc_ivolstepy : ')
        ret.append(repr(self.sc_ivolstepy))
        ret.append(',\n    sc_ivolstepz : ')
        ret.append(repr(self.sc_ivolstepz))
        ret.append(',\n    sc_multidevid : ')
        ret.append(repr(self.sc_multidevid))
        ret.append(',\n    sc_ncubochoricvariable : ')
        ret.append(repr(self.sc_ncubochoricvariable))
        ret.append(',\n    sc_num_el : ')
        ret.append(repr(self.sc_num_el))
        ret.append(',\n    sc_numebins : ')
        ret.append(repr(self.sc_numebins))
        ret.append(',\n    sc_numangle : ')
        ret.append(repr(self.sc_numangle))
        ret.append(',\n    sc_numangledictionary : ')
        ret.append(repr(self.sc_numangledictionary))
        ret.append(',\n    sc_numangles : ')
        ret.append(repr(self.sc_numangles))
        ret.append(',\n    sc_numdetparm : ')
        ret.append(repr(self.sc_numdetparm))
        ret.append(',\n    sc_numdictsingle : ')
        ret.append(repr(self.sc_numdictsingle))
        ret.append(',\n    sc_numeuler : ')
        ret.append(repr(self.sc_numeuler))
        ret.append(',\n    sc_numexptsingle : ')
        ret.append(repr(self.sc_numexptsingle))
        ret.append(',\n    sc_numg : ')
        ret.append(repr(self.sc_numg))
        ret.append(',\n    sc_numk : ')
        ret.append(repr(self.sc_numk))
        ret.append(',\n    sc_numreflections : ')
        ret.append(repr(self.sc_numreflections))
        ret.append(',\n    sc_numset : ')
        ret.append(repr(self.sc_numset))
        ret.append(',\n    sc_numsx : ')
        ret.append(repr(self.sc_numsx))
        ret.append(',\n    sc_numsy : ')
        ret.append(repr(self.sc_numsy))
        ret.append(',\n    sc_numthick : ')
        ret.append(repr(self.sc_numthick))
        ret.append(',\n    sc_numzbins : ')
        ret.append(repr(self.sc_numzbins))
        ret.append(',\n    sc_omega : ')
        ret.append(repr(self.sc_omega))
        ret.append(',\n    sc_omoutname : ')
        ret.append(repr(self.sc_omoutname))
        ret.append(',\n    sc_outname : ')
        ret.append(repr(self.sc_outname))
        ret.append(',\n    sc_outputformat : ')
        ret.append(repr(self.sc_outputformat))
        ret.append(',\n    sc_outputfile : ')
        ret.append(repr(self.sc_outputfile))
        ret.append(',\n    sc_patchw : ')
        ret.append(repr(self.sc_patchw))
        ret.append(',\n    sc_patternfile : ')
        ret.append(repr(self.sc_patternfile))
        ret.append(',\n    sc_patx : ')
        ret.append(repr(self.sc_patx))
        ret.append(',\n    sc_paty : ')
        ret.append(repr(self.sc_paty))
        ret.append(',\n    sc_pedpattern : ')
        ret.append(repr(self.sc_pedpattern))
        ret.append(',\n    sc_phasemethod : ')
        ret.append(repr(self.sc_phasemethod))
        ret.append(',\n    sc_phiefile : ')
        ret.append(repr(self.sc_phiefile))
        ret.append(',\n    sc_phimfile : ')
        ret.append(repr(self.sc_phimfile))
        ret.append(',\n    sc_phinum : ')
        ret.append(repr(self.sc_phinum))
        ret.append(',\n    sc_pixelsize : ')
        ret.append(repr(self.sc_pixelsize))
        ret.append(',\n    sc_platid : ')
        ret.append(repr(self.sc_platid))
        ret.append(',\n    sc_poisson : ')
        ret.append(repr(self.sc_poisson))
        ret.append(',\n    sc_positions : ')
        ret.append(repr(self.sc_positions))
        ret.append(',\n    sc_progmode : ')
        ret.append(repr(self.sc_progmode))
        ret.append(',\n    sc_quoutname : ')
        ret.append(repr(self.sc_quoutname))
        ret.append(',\n    sc_qxy : ')
        ret.append(repr(self.sc_qxy))
        ret.append(',\n    sc_refcnt : ')
        ret.append(repr(self.sc_refcnt))
        ret.append(',\n    sc_restart : ')
        ret.append(repr(self.sc_restart))
        ret.append(',\n    sc_rooutname : ')
        ret.append(repr(self.sc_rooutname))
        ret.append(',\n    sc_sampling : ')
        ret.append(repr(self.sc_sampling))
        ret.append(',\n    sc_scalingmode : ')
        ret.append(repr(self.sc_scalingmode))
        ret.append(',\n    sc_section : ')
        ret.append(repr(self.sc_section))
        ret.append(',\n    sc_sele : ')
        ret.append(repr(self.sc_sele))
        ret.append(',\n    sc_sgname : ')
        ret.append(repr(self.sc_sgname))
        ret.append(',\n    sc_sgdbdiff : ')
        ret.append(repr(self.sc_sgdbdiff))
        ret.append(',\n    sc_sig : ')
        ret.append(repr(self.sc_sig))
        ret.append(',\n    sc_sigend : ')
        ret.append(repr(self.sc_sigend))
        ret.append(',\n    sc_sigstart : ')
        ret.append(repr(self.sc_sigstart))
        ret.append(',\n    sc_sigstep : ')
        ret.append(repr(self.sc_sigstep))
        ret.append(',\n    sc_spatialaverage : ')
        ret.append(repr(self.sc_spatialaverage))
        ret.append(',\n    sc_squhex : ')
        ret.append(repr(self.sc_squhex))
        ret.append(',\n    sc_startthick : ')
        ret.append(repr(self.sc_startthick))
        ret.append(',\n    sc_stepxvariable : ')
        ret.append(repr(self.sc_stepxvariable))
        ret.append(',\n    sc_stepyvariable : ')
        ret.append(repr(self.sc_stepyvariable))
        ret.append(',\n    sc_stereonh : ')
        ret.append(repr(self.sc_stereonh))
        ret.append(',\n    sc_stereosh : ')
        ret.append(repr(self.sc_stereosh))
        ret.append(',\n    sc_subsfile : ')
        ret.append(repr(self.sc_subsfile))
        ret.append(',\n    sc_summode : ')
        ret.append(repr(self.sc_summode))
        ret.append(',\n    sc_tf : ')
        ret.append(repr(self.sc_tf))
        ret.append(',\n    sc_ts : ')
        ret.append(repr(self.sc_ts))
        ret.append(',\n    sc_testnml : ')
        ret.append(repr(self.sc_testnml))
        ret.append(',\n    sc_thetac : ')
        ret.append(repr(self.sc_thetac))
        ret.append(',\n    sc_thickinc : ')
        ret.append(repr(self.sc_thickinc))
        ret.append(',\n    sc_tifffile : ')
        ret.append(repr(self.sc_tifffile))
        ret.append(',\n    sc_tiffname : ')
        ret.append(repr(self.sc_tiffname))
        ret.append(',\n    sc_tiffprefix : ')
        ret.append(repr(self.sc_tiffprefix))
        ret.append(',\n    sc_tiltaxis : ')
        ret.append(repr(self.sc_tiltaxis))
        ret.append(',\n    sc_tmpfile : ')
        ret.append(repr(self.sc_tmpfile))
        ret.append(',\n    sc_totnumel : ')
        ret.append(repr(self.sc_totnumel))
        ret.append(',\n    sc_totnumexpt : ')
        ret.append(repr(self.sc_totnumexpt))
        ret.append(',\n    sc_trange : ')
        ret.append(repr(self.sc_trange))
        ret.append(',\n    sc_uniform : ')
        ret.append(repr(self.sc_uniform))
        ret.append(',\n    sc_unitgvectors : ')
        ret.append(repr(self.sc_unitgvectors))
        ret.append(',\n    sc_useenergyweighting : ')
        ret.append(repr(self.sc_useenergyweighting))
        ret.append(',\n    sc_usetmpfile : ')
        ret.append(repr(self.sc_usetmpfile))
        ret.append(',\n    sc_usenumd : ')
        ret.append(repr(self.sc_usenumd))
        ret.append(',\n    sc_vmean : ')
        ret.append(repr(self.sc_vmean))
        ret.append(',\n    sc_voltage : ')
        ret.append(repr(self.sc_voltage))
        ret.append(',\n    sc_wavelength : ')
        ret.append(repr(self.sc_wavelength))
        ret.append(',\n    sc_xstar : ')
        ret.append(repr(self.sc_xstar))
        ret.append(',\n    sc_xpc : ')
        ret.append(repr(self.sc_xpc))
        ret.append(',\n    sc_xtalname : ')
        ret.append(repr(self.sc_xtalname))
        ret.append(',\n    sc_xtalname2 : ')
        ret.append(repr(self.sc_xtalname2))
        ret.append(',\n    sc_xtalnamefilm : ')
        ret.append(repr(self.sc_xtalnamefilm))
        ret.append(',\n    sc_xtalnamesubs : ')
        ret.append(repr(self.sc_xtalnamesubs))
        ret.append(',\n    sc_xtalname_gamma : ')
        ret.append(repr(self.sc_xtalname_gamma))
        ret.append(',\n    sc_xtalname_gammap : ')
        ret.append(repr(self.sc_xtalname_gammap))
        ret.append(',\n    sc_ystar : ')
        ret.append(repr(self.sc_ystar))
        ret.append(',\n    sc_ypc : ')
        ret.append(repr(self.sc_ypc))
        ret.append(',\n    sc_zstar : ')
        ret.append(repr(self.sc_zstar))
        ret.append(',\n    sc_bethelist : ')
        ret.append(repr(self.sc_bethelist))
        ret.append(',\n    sc_brightfield : ')
        ret.append(repr(self.sc_brightfield))
        ret.append(',\n    sc_cbednamelist : ')
        ret.append(repr(self.sc_cbednamelist))
        ret.append(',\n    sc_coordinatesystem : ')
        ret.append(repr(self.sc_coordinatesystem))
        ret.append(',\n    sc_crystaldata : ')
        ret.append(repr(self.sc_crystaldata))
        ret.append(',\n    sc_data : ')
        ret.append(repr(self.sc_data))
        ret.append(',\n    sc_detparmscan : ')
        ret.append(repr(self.sc_detparmscan))
        ret.append(',\n    sc_dictindxopenclnamelist : ')
        ret.append(repr(self.sc_dictindxopenclnamelist))
        ret.append(',\n    sc_displacementfield : ')
        ret.append(repr(self.sc_displacementfield))
        ret.append(',\n    sc_dispx : ')
        ret.append(repr(self.sc_dispx))
        ret.append(',\n    sc_dispy : ')
        ret.append(repr(self.sc_dispy))
        ret.append(',\n    sc_ebsd : ')
        ret.append(repr(self.sc_ebsd))
        ret.append(',\n    sc_ebsdindexingnamelisttype : ')
        ret.append(repr(self.sc_ebsdindexingnamelisttype))
        ret.append(',\n    sc_eecmaster : ')
        ret.append(repr(self.sc_eecmaster))
        ret.append(',\n    sc_eecmasternml : ')
        ret.append(repr(self.sc_eecmasternml))
        ret.append(',\n    sc_eecmasternamelist : ')
        ret.append(repr(self.sc_eecmasternamelist))
        ret.append(',\n    sc_ebsdmasternamelist : ')
        ret.append(repr(self.sc_ebsdmasternamelist))
        ret.append(',\n    sc_ebsdmasteropenclnamelist : ')
        ret.append(repr(self.sc_ebsdmasteropenclnamelist))
        ret.append(',\n    sc_ebsdnamelist : ')
        ret.append(repr(self.sc_ebsdnamelist))
        ret.append(',\n    sc_ebsdclusternamelist : ')
        ret.append(repr(self.sc_ebsdclusternamelist))
        ret.append(',\n    sc_ebsdmaster : ')
        ret.append(repr(self.sc_ebsdmaster))
        ret.append(',\n    sc_ebsddefectmaster : ')
        ret.append(repr(self.sc_ebsddefectmaster))
        ret.append(',\n    sc_ebsdsinglemasternamelist : ')
        ret.append(repr(self.sc_ebsdsinglemasternamelist))
        ret.append(',\n    sc_ebsdscannamelist : ')
        ret.append(repr(self.sc_ebsdscannamelist))
        ret.append(',\n    sc_ecci : ')
        ret.append(repr(self.sc_ecci))
        ret.append(',\n    sc_eccinamelist : ')
        ret.append(repr(self.sc_eccinamelist))
        ret.append(',\n    sc_ecpindexingnamelisttype : ')
        ret.append(repr(self.sc_ecpindexingnamelisttype))
        ret.append(',\n    sc_ecpmasternamelist : ')
        ret.append(repr(self.sc_ecpmasternamelist))
        ret.append(',\n    sc_ecpnamelist : ')
        ret.append(repr(self.sc_ecpnamelist))
        ret.append(',\n    sc_ecpza : ')
        ret.append(repr(self.sc_ecpza))
        ret.append(',\n    sc_ecpzanamelist : ')
        ret.append(repr(self.sc_ecpzanamelist))
        ret.append(',\n    sc_ecppatternnamelist : ')
        ret.append(repr(self.sc_ecppatternnamelist))
        ret.append(',\n    sc_ecpsingle : ')
        ret.append(repr(self.sc_ecpsingle))
        ret.append(',\n    sc_emecp : ')
        ret.append(repr(self.sc_emecp))
        ret.append(',\n    sc_emheader : ')
        ret.append(repr(self.sc_emheader))
        ret.append(',\n    sc_emkinematicalnamelist : ')
        ret.append(repr(self.sc_emkinematicalnamelist))
        ret.append(',\n    sc_fixedlength : ')
        ret.append(repr(self.sc_fixedlength))
        ret.append(',\n    sc_header : ')
        ret.append(repr(self.sc_header))
        ret.append(',\n    sc_inputpolefigures : ')
        ret.append(repr(self.sc_inputpolefigures))
        ret.append(',\n    sc_intensities : ')
        ret.append(repr(self.sc_intensities))
        ret.append(',\n    sc_jsonfiles : ')
        ret.append(repr(self.sc_jsonfiles))
        ret.append(',\n    sc_kosselmasternamelist : ')
        ret.append(repr(self.sc_kosselmasternamelist))
        ret.append(',\n    sc_kosselnamelist : ')
        ret.append(repr(self.sc_kosselnamelist))
        ret.append(',\n    sc_kosselmaster : ')
        ret.append(repr(self.sc_kosselmaster))
        ret.append(',\n    sc_klist : ')
        ret.append(repr(self.sc_klist))
        ret.append(',\n    sc_lacbednamelist : ')
        ret.append(repr(self.sc_lacbednamelist))
        ret.append(',\n    sc_lorentznamelist : ')
        ret.append(repr(self.sc_lorentznamelist))
        ret.append(',\n    sc_magfile : ')
        ret.append(repr(self.sc_magfile))
        ret.append(',\n    sc_magnetizationdata : ')
        ret.append(repr(self.sc_magnetizationdata))
        ret.append(',\n    sc_mcclmultilayernamelist : ')
        ret.append(repr(self.sc_mcclmultilayernamelist))
        ret.append(',\n    sc_mcclnamelist : ')
        ret.append(repr(self.sc_mcclnamelist))
        ret.append(',\n    sc_mcclfoilnamelist : ')
        ret.append(repr(self.sc_mcclfoilnamelist))
        ret.append(',\n    sc_mclipss : ')
        ret.append(repr(self.sc_mclipss))
        ret.append(',\n    sc_mclipssnamelist : ')
        ret.append(repr(self.sc_mclipssnamelist))
        ret.append(',\n    sc_mcnamelist : ')
        ret.append(repr(self.sc_mcnamelist))
        ret.append(',\n    sc_mcopencl : ')
        ret.append(repr(self.sc_mcopencl))
        ret.append(',\n    sc_mcfoil : ')
        ret.append(repr(self.sc_mcfoil))
        ret.append(',\n    sc_microstructuredata : ')
        ret.append(repr(self.sc_microstructuredata))
        ret.append(',\n    sc_microstructurefile : ')
        ret.append(repr(self.sc_microstructurefile))
        ret.append(',\n    sc_nmlfiles : ')
        ret.append(repr(self.sc_nmlfiles))
        ret.append(',\n    sc_nmlparameters : ')
        ret.append(repr(self.sc_nmlparameters))
        ret.append(',\n    sc_cplm : ')
        ret.append(repr(self.sc_cplm))
        ret.append(',\n    sc_cplmimages : ')
        ret.append(repr(self.sc_cplmimages))
        ret.append(',\n    sc_cplmintensities : ')
        ret.append(repr(self.sc_cplmintensities))
        ret.append(',\n    sc_cplmmasternamelist : ')
        ret.append(repr(self.sc_cplmmasternamelist))
        ret.append(',\n    sc_cplmnamelist : ')
        ret.append(repr(self.sc_cplmnamelist))
        ret.append(',\n    sc_cplmmaster : ')
        ret.append(repr(self.sc_cplmmaster))
        ret.append(',\n    sc_cplmmasternml : ')
        ret.append(repr(self.sc_cplmmasternml))
        ret.append(',\n    sc_cplmmasterlpnh : ')
        ret.append(repr(self.sc_cplmmasterlpnh))
        ret.append(',\n    sc_cplmmasterspnh : ')
        ret.append(repr(self.sc_cplmmasterspnh))
        ret.append(',\n    sc_orderparameter : ')
        ret.append(repr(self.sc_orderparameter))
        ret.append(',\n    sc_pedza : ')
        ret.append(repr(self.sc_pedza))
        ret.append(',\n    sc_pedzanamelist : ')
        ret.append(repr(self.sc_pedzanamelist))
        ret.append(',\n    sc_pedkin : ')
        ret.append(repr(self.sc_pedkin))
        ret.append(',\n    sc_pfinversiondata : ')
        ret.append(repr(self.sc_pfinversiondata))
        ret.append(',\n    sc_pfinversionnamelist : ')
        ret.append(repr(self.sc_pfinversionnamelist))
        ret.append(',\n    sc_patterncentercalibration : ')
        ret.append(repr(self.sc_patterncentercalibration))
        ret.append(',\n    sc_rfznamelist : ')
        ret.append(repr(self.sc_rfznamelist))
        ret.append(',\n    sc_reconstructed : ')
        ret.append(repr(self.sc_reconstructed))
        ret.append(',\n    sc_roi : ')
        ret.append(repr(self.sc_roi))
        ret.append(',\n    sc_stemdci : ')
        ret.append(repr(self.sc_stemdci))
        ret.append(',\n    sc_stemdcinamelist : ')
        ret.append(repr(self.sc_stemdcinamelist))
        ret.append(',\n    sc_stemdcinml : ')
        ret.append(repr(self.sc_stemdcinml))
        ret.append(',\n    sc_stemgeometrynamelist : ')
        ret.append(repr(self.sc_stemgeometrynamelist))
        ret.append(',\n    sc_scan1 : ')
        ret.append(repr(self.sc_scan1))
        ret.append(',\n    sc_tkd : ')
        ret.append(repr(self.sc_tkd))
        ret.append(',\n    sc_tkdindexingnamelisttype : ')
        ret.append(repr(self.sc_tkdindexingnamelisttype))
        ret.append(',\n    sc_tkdmasternamelist : ')
        ret.append(repr(self.sc_tkdmasternamelist))
        ret.append(',\n    sc_tkdnamelist : ')
        ret.append(repr(self.sc_tkdnamelist))
        ret.append(',\n    sc_tkdmaster : ')
        ret.append(repr(self.sc_tkdmaster))
        ret.append(',\n    sc_testdata : ')
        ret.append(repr(self.sc_testdata))
        ret.append(',\n    sc_defecttest : ')
        ret.append(repr(self.sc_defecttest))
        ret.append(',\n    sc_h5ebsd : ')
        ret.append(repr(self.sc_h5ebsd))
        ret.append(',\n    sc_h5pfinversion : ')
        ret.append(repr(self.sc_h5pfinversion))
        ret.append(',\n    sc_test2group : ')
        ret.append(repr(self.sc_test2group))
        ret.append(',\n    sc_testgroup : ')
        ret.append(repr(self.sc_testgroup))
        ret.append(',\n    sc_scalefactor : ')
        ret.append(repr(self.sc_scalefactor))
        ret.append(',\n    sc_discsize : ')
        ret.append(repr(self.sc_discsize))
        ret.append(',\n    sc_convergenceangle : ')
        ret.append(repr(self.sc_convergenceangle))
        ret.append(',\n    sc_orientation : ')
        ret.append(repr(self.sc_orientation))
        ret.append(',\n    sc_maxnumincell : ')
        ret.append(repr(self.sc_maxnumincell))
        ret.append(',\n    sc_hypslab : ')
        ret.append(repr(self.sc_hypslab))
        ret.append(',\n    sc_dwflag : ')
        ret.append(repr(self.sc_dwflag))
        ret.append(',\n    sc_thk : ')
        ret.append(repr(self.sc_thk))
        ret.append(',\n    sc_sg : ')
        ret.append(repr(self.sc_sg))
        ret.append(',\n    sc_emslackwebhookurl : ')
        ret.append(repr(self.sc_emslackwebhookurl))
        ret.append(',\n    sc_emslackchannel : ')
        ret.append(repr(self.sc_emslackchannel))
        ret.append(',\n    sc_emnotify : ')
        ret.append(repr(self.sc_emnotify))
        ret.append(',\n    sc_emshtdoi : ')
        ret.append(repr(self.sc_emshtdoi))
        ret.append(',\n    sc_zenododoi : ')
        ret.append(repr(self.sc_zenododoi))
        ret.append('}')
        return ''.join(ret)
    
    _dt_array_initialisers = []
    

stringconstants = Stringconstants()

class Local(f90wrap.runtime.FortranModule):
    """
    Module local
    
    
    Defined at local.f90 lines 68-1478
    
    """
    @f90wrap.runtime.register_class("pyEMsoft.ConfigStructureType")
    class ConfigStructureType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=configstructuretype)
        
        
        Defined at local.f90 lines 124-180
        
        """
        def __init__(self, handle=None):
            """
            self = Configstructuretype()
            
            
            Defined at local.f90 lines 124-180
            
            
            Returns
            -------
            this : Configstructuretype
            	Object to be constructed
            
            
            Automatically generated constructor for configstructuretype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_configstructuretype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Configstructuretype
            
            
            Defined at local.f90 lines 124-180
            
            Parameters
            ----------
            this : Configstructuretype
            	Object to be destructed
            
            
            Automatically generated destructor for configstructuretype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_configstructuretype_finalise(this=self._handle)
        
        @property
        def emsoftpathname(self):
            """
            Element emsoftpathname ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 126
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__emsoftpathname(self._handle)
        
        @emsoftpathname.setter
        def emsoftpathname(self, emsoftpathname):
            _pyEMsoft.f90wrap_configstructuretype__set__emsoftpathname(self._handle, \
                emsoftpathname)
        
        @property
        def emxtalfolderpathname(self):
            """
            Element emxtalfolderpathname ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 127
            
            """
            return \
                _pyEMsoft.f90wrap_configstructuretype__get__emxtalfolderpathname(self._handle)
        
        @emxtalfolderpathname.setter
        def emxtalfolderpathname(self, emxtalfolderpathname):
            _pyEMsoft.f90wrap_configstructuretype__set__emxtalfolderpathname(self._handle, \
                emxtalfolderpathname)
        
        @property
        def emdatapathname(self):
            """
            Element emdatapathname ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 128
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__emdatapathname(self._handle)
        
        @emdatapathname.setter
        def emdatapathname(self, emdatapathname):
            _pyEMsoft.f90wrap_configstructuretype__set__emdatapathname(self._handle, \
                emdatapathname)
        
        @property
        def emtmppathname(self):
            """
            Element emtmppathname ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 129
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__emtmppathname(self._handle)
        
        @emtmppathname.setter
        def emtmppathname(self, emtmppathname):
            _pyEMsoft.f90wrap_configstructuretype__set__emtmppathname(self._handle, \
                emtmppathname)
        
        @property
        def emsoftlibrarylocation(self):
            """
            Element emsoftlibrarylocation ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 130
            
            """
            return \
                _pyEMsoft.f90wrap_configstructuretype__get__emsoftlibrarylocation(self._handle)
        
        @emsoftlibrarylocation.setter
        def emsoftlibrarylocation(self, emsoftlibrarylocation):
            _pyEMsoft.f90wrap_configstructuretype__set__emsoftlibrarylocation(self._handle, \
                emsoftlibrarylocation)
        
        @property
        def emslackwebhookurl(self):
            """
            Element emslackwebhookurl ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 131
            
            """
            return \
                _pyEMsoft.f90wrap_configstructuretype__get__emslackwebhookurl(self._handle)
        
        @emslackwebhookurl.setter
        def emslackwebhookurl(self, emslackwebhookurl):
            _pyEMsoft.f90wrap_configstructuretype__set__emslackwebhookurl(self._handle, \
                emslackwebhookurl)
        
        @property
        def emslackchannel(self):
            """
            Element emslackchannel ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 132
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__emslackchannel(self._handle)
        
        @emslackchannel.setter
        def emslackchannel(self, emslackchannel):
            _pyEMsoft.f90wrap_configstructuretype__set__emslackchannel(self._handle, \
                emslackchannel)
        
        @property
        def username(self):
            """
            Element username ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 133
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__username(self._handle)
        
        @username.setter
        def username(self, username):
            _pyEMsoft.f90wrap_configstructuretype__set__username(self._handle, username)
        
        @property
        def userlocation(self):
            """
            Element userlocation ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 134
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__userlocation(self._handle)
        
        @userlocation.setter
        def userlocation(self, userlocation):
            _pyEMsoft.f90wrap_configstructuretype__set__userlocation(self._handle, \
                userlocation)
        
        @property
        def useremail(self):
            """
            Element useremail ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 135
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__useremail(self._handle)
        
        @useremail.setter
        def useremail(self, useremail):
            _pyEMsoft.f90wrap_configstructuretype__set__useremail(self._handle, useremail)
        
        @property
        def emnotify(self):
            """
            Element emnotify ftype=character(5) pytype=str
            
            
            Defined at local.f90 line 136
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__emnotify(self._handle)
        
        @emnotify.setter
        def emnotify(self, emnotify):
            _pyEMsoft.f90wrap_configstructuretype__set__emnotify(self._handle, emnotify)
        
        @property
        def develop(self):
            """
            Element develop ftype=character(3) pytype=str
            
            
            Defined at local.f90 line 137
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__develop(self._handle)
        
        @develop.setter
        def develop(self, develop):
            _pyEMsoft.f90wrap_configstructuretype__set__develop(self._handle, develop)
        
        @property
        def release(self):
            """
            Element release ftype=character(3) pytype=str
            
            
            Defined at local.f90 line 138
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__release(self._handle)
        
        @release.setter
        def release(self, release):
            _pyEMsoft.f90wrap_configstructuretype__set__release(self._handle, release)
        
        @property
        def h5copypath(self):
            """
            Element h5copypath ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 140
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__h5copypath(self._handle)
        
        @h5copypath.setter
        def h5copypath(self, h5copypath):
            _pyEMsoft.f90wrap_configstructuretype__set__h5copypath(self._handle, h5copypath)
        
        @property
        def emsoftplatform(self):
            """
            Element emsoftplatform ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 141
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__emsoftplatform(self._handle)
        
        @emsoftplatform.setter
        def emsoftplatform(self, emsoftplatform):
            _pyEMsoft.f90wrap_configstructuretype__set__emsoftplatform(self._handle, \
                emsoftplatform)
        
        @property
        def emsofttestpath(self):
            """
            Element emsofttestpath ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 142
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__emsofttestpath(self._handle)
        
        @emsofttestpath.setter
        def emsofttestpath(self, emsofttestpath):
            _pyEMsoft.f90wrap_configstructuretype__set__emsofttestpath(self._handle, \
                emsofttestpath)
        
        @property
        def emsofttestingpath(self):
            """
            Element emsofttestingpath ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 143
            
            """
            return \
                _pyEMsoft.f90wrap_configstructuretype__get__emsofttestingpath(self._handle)
        
        @emsofttestingpath.setter
        def emsofttestingpath(self, emsofttestingpath):
            _pyEMsoft.f90wrap_configstructuretype__set__emsofttestingpath(self._handle, \
                emsofttestingpath)
        
        @property
        def emsoftversion(self):
            """
            Element emsoftversion ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 144
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__emsoftversion(self._handle)
        
        @emsoftversion.setter
        def emsoftversion(self, emsoftversion):
            _pyEMsoft.f90wrap_configstructuretype__set__emsoftversion(self._handle, \
                emsoftversion)
        
        @property
        def configpath(self):
            """
            Element configpath ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 145
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__configpath(self._handle)
        
        @configpath.setter
        def configpath(self, configpath):
            _pyEMsoft.f90wrap_configstructuretype__set__configpath(self._handle, configpath)
        
        @property
        def templatepathname(self):
            """
            Element templatepathname ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 146
            
            """
            return \
                _pyEMsoft.f90wrap_configstructuretype__get__templatepathname(self._handle)
        
        @templatepathname.setter
        def templatepathname(self, templatepathname):
            _pyEMsoft.f90wrap_configstructuretype__set__templatepathname(self._handle, \
                templatepathname)
        
        @property
        def resourcepathname(self):
            """
            Element resourcepathname ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 147
            
            """
            return \
                _pyEMsoft.f90wrap_configstructuretype__get__resourcepathname(self._handle)
        
        @resourcepathname.setter
        def resourcepathname(self, resourcepathname):
            _pyEMsoft.f90wrap_configstructuretype__set__resourcepathname(self._handle, \
                resourcepathname)
        
        @property
        def homepathname(self):
            """
            Element homepathname ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 148
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__homepathname(self._handle)
        
        @homepathname.setter
        def homepathname(self, homepathname):
            _pyEMsoft.f90wrap_configstructuretype__set__homepathname(self._handle, \
                homepathname)
        
        @property
        def openclpathname(self):
            """
            Element openclpathname ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 149
            
            """
            return _pyEMsoft.f90wrap_configstructuretype__get__openclpathname(self._handle)
        
        @openclpathname.setter
        def openclpathname(self, openclpathname):
            _pyEMsoft.f90wrap_configstructuretype__set__openclpathname(self._handle, \
                openclpathname)
        
        @property
        def templatecodefilename(self):
            """
            Element templatecodefilename ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 150
            
            """
            return \
                _pyEMsoft.f90wrap_configstructuretype__get__templatecodefilename(self._handle)
        
        @templatecodefilename.setter
        def templatecodefilename(self, templatecodefilename):
            _pyEMsoft.f90wrap_configstructuretype__set__templatecodefilename(self._handle, \
                templatecodefilename)
        
        @property
        def wyckoffpositionsfilename(self):
            """
            Element wyckoffpositionsfilename ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 151
            
            """
            return \
                _pyEMsoft.f90wrap_configstructuretype__get__wyckoffpositionsfilename(self._handle)
        
        @wyckoffpositionsfilename.setter
        def wyckoffpositionsfilename(self, wyckoffpositionsfilename):
            \
                _pyEMsoft.f90wrap_configstructuretype__set__wyckoffpositionsfilename(self._handle, \
                wyckoffpositionsfilename)
        
        @property
        def randomseedfilename(self):
            """
            Element randomseedfilename ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 152
            
            """
            return \
                _pyEMsoft.f90wrap_configstructuretype__get__randomseedfilename(self._handle)
        
        @randomseedfilename.setter
        def randomseedfilename(self, randomseedfilename):
            _pyEMsoft.f90wrap_configstructuretype__set__randomseedfilename(self._handle, \
                randomseedfilename)
        
        @property
        def emsoftnativedelimiter(self):
            """
            Element emsoftnativedelimiter ftype=character(1) pytype=str
            
            
            Defined at local.f90 line 153
            
            """
            return \
                _pyEMsoft.f90wrap_configstructuretype__get__emsoftnativedelimiter(self._handle)
        
        @emsoftnativedelimiter.setter
        def emsoftnativedelimiter(self, emsoftnativedelimiter):
            _pyEMsoft.f90wrap_configstructuretype__set__emsoftnativedelimiter(self._handle, \
                emsoftnativedelimiter)
        
        @property
        def strvals(self):
            """
            Element strvals ftype=character(fnlen) pytype=str
            
            
            Defined at local.f90 line 154
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_configstructuretype__array__strvals(self._handle)
            if array_handle in self._arrays:
                strvals = self._arrays[array_handle]
            else:
                strvals = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_configstructuretype__array__strvals)
                self._arrays[array_handle] = strvals
            return strvals
        
        @strvals.setter
        def strvals(self, strvals):
            self.strvals[...] = strvals
        
        def __str__(self):
            ret = ['<configstructuretype>{\n']
            ret.append('    emsoftpathname : ')
            ret.append(repr(self.emsoftpathname))
            ret.append(',\n    emxtalfolderpathname : ')
            ret.append(repr(self.emxtalfolderpathname))
            ret.append(',\n    emdatapathname : ')
            ret.append(repr(self.emdatapathname))
            ret.append(',\n    emtmppathname : ')
            ret.append(repr(self.emtmppathname))
            ret.append(',\n    emsoftlibrarylocation : ')
            ret.append(repr(self.emsoftlibrarylocation))
            ret.append(',\n    emslackwebhookurl : ')
            ret.append(repr(self.emslackwebhookurl))
            ret.append(',\n    emslackchannel : ')
            ret.append(repr(self.emslackchannel))
            ret.append(',\n    username : ')
            ret.append(repr(self.username))
            ret.append(',\n    userlocation : ')
            ret.append(repr(self.userlocation))
            ret.append(',\n    useremail : ')
            ret.append(repr(self.useremail))
            ret.append(',\n    emnotify : ')
            ret.append(repr(self.emnotify))
            ret.append(',\n    develop : ')
            ret.append(repr(self.develop))
            ret.append(',\n    release : ')
            ret.append(repr(self.release))
            ret.append(',\n    h5copypath : ')
            ret.append(repr(self.h5copypath))
            ret.append(',\n    emsoftplatform : ')
            ret.append(repr(self.emsoftplatform))
            ret.append(',\n    emsofttestpath : ')
            ret.append(repr(self.emsofttestpath))
            ret.append(',\n    emsofttestingpath : ')
            ret.append(repr(self.emsofttestingpath))
            ret.append(',\n    emsoftversion : ')
            ret.append(repr(self.emsoftversion))
            ret.append(',\n    configpath : ')
            ret.append(repr(self.configpath))
            ret.append(',\n    templatepathname : ')
            ret.append(repr(self.templatepathname))
            ret.append(',\n    resourcepathname : ')
            ret.append(repr(self.resourcepathname))
            ret.append(',\n    homepathname : ')
            ret.append(repr(self.homepathname))
            ret.append(',\n    openclpathname : ')
            ret.append(repr(self.openclpathname))
            ret.append(',\n    templatecodefilename : ')
            ret.append(repr(self.templatecodefilename))
            ret.append(',\n    wyckoffpositionsfilename : ')
            ret.append(repr(self.wyckoffpositionsfilename))
            ret.append(',\n    randomseedfilename : ')
            ret.append(repr(self.randomseedfilename))
            ret.append(',\n    emsoftnativedelimiter : ')
            ret.append(repr(self.emsoftnativedelimiter))
            ret.append(',\n    strvals : ')
            ret.append(repr(self.strvals))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @staticmethod
    def emsoft_getnotify():
        """
        notify = emsoft_getnotify()
        
        
        Defined at local.f90 lines 197-202
        
        
        Returns
        -------
        notify : str
        
        """
        notify = _pyEMsoft.f90wrap_emsoft_getnotify()
        return notify
    
    @staticmethod
    def emsoft_getslackwebhookurl():
        """
        slackwebhookurl = emsoft_getslackwebhookurl()
        
        
        Defined at local.f90 lines 216-221
        
        
        Returns
        -------
        slackwebhookurl : str
        
        """
        slackwebhookurl = _pyEMsoft.f90wrap_emsoft_getslackwebhookurl()
        return slackwebhookurl
    
    @staticmethod
    def emsoft_getslackchannel():
        """
        slackchannel = emsoft_getslackchannel()
        
        
        Defined at local.f90 lines 235-240
        
        
        Returns
        -------
        slackchannel : str
        
        """
        slackchannel = _pyEMsoft.f90wrap_emsoft_getslackchannel()
        return slackchannel
    
    @staticmethod
    def emsoft_getemsoftplatform():
        """
        platform = emsoft_getemsoftplatform()
        
        
        Defined at local.f90 lines 254-258
        
        
        Returns
        -------
        platform : str
        
        """
        platform = _pyEMsoft.f90wrap_emsoft_getemsoftplatform()
        return platform
    
    @staticmethod
    def emsoft_geth5copypath():
        """
        h5copypath = emsoft_geth5copypath()
        
        
        Defined at local.f90 lines 272-280
        
        
        Returns
        -------
        h5copypath : str
        
        """
        h5copypath = _pyEMsoft.f90wrap_emsoft_geth5copypath()
        return h5copypath
    
    @staticmethod
    def emsoft_getemsofttestpath():
        """
        testpath = emsoft_getemsofttestpath()
        
        
        Defined at local.f90 lines 294-303
        
        
        Returns
        -------
        testpath : str
        
        """
        testpath = _pyEMsoft.f90wrap_emsoft_getemsofttestpath()
        return testpath
    
    @staticmethod
    def emsoft_getemsofthdftest():
        """
        dohdftest = emsoft_getemsofthdftest()
        
        
        Defined at local.f90 lines 318-329
        
        
        Returns
        -------
        dohdftest : bool
        
        """
        dohdftest = _pyEMsoft.f90wrap_emsoft_getemsofthdftest()
        return dohdftest
    
    @staticmethod
    def emsoft_getemsofttestingpath():
        """
        buildpath = emsoft_getemsofttestingpath()
        
        
        Defined at local.f90 lines 339-344
        
        
        Returns
        -------
        buildpath : str
        
        """
        buildpath = _pyEMsoft.f90wrap_emsoft_getemsofttestingpath()
        return buildpath
    
    @staticmethod
    def emsoft_getemsoftversion():
        """
        version = emsoft_getemsoftversion()
        
        
        Defined at local.f90 lines 358-362
        
        
        Returns
        -------
        version : str
        
        """
        version = _pyEMsoft.f90wrap_emsoft_getemsoftversion()
        return version
    
    @staticmethod
    def emsoft_getemsoftrevision():
        """
        revision = emsoft_getemsoftrevision()
        
        
        Defined at local.f90 lines 376-380
        
        
        Returns
        -------
        revision : str
        
        """
        revision = _pyEMsoft.f90wrap_emsoft_getemsoftrevision()
        return revision
    
    @staticmethod
    def emsoft_getemsoftbuilddate():
        """
        builddate = emsoft_getemsoftbuilddate()
        
        
        Defined at local.f90 lines 394-398
        
        
        Returns
        -------
        builddate : str
        
        """
        builddate = _pyEMsoft.f90wrap_emsoft_getemsoftbuilddate()
        return builddate
    
    @staticmethod
    def emsoft_getemsoftnativedelimiter():
        """
        emsoftnativedelimiter = emsoft_getemsoftnativedelimiter()
        
        
        Defined at local.f90 lines 412-420
        
        
        Returns
        -------
        emsoftnativedelimiter : str
        
        """
        emsoftnativedelimiter = _pyEMsoft.f90wrap_emsoft_getemsoftnativedelimiter()
        return emsoftnativedelimiter
    
    @staticmethod
    def emsoft_getconfigpath():
        """
        configpath = emsoft_getconfigpath()
        
        
        Defined at local.f90 lines 434-444
        
        
        Returns
        -------
        configpath : str
        
        """
        configpath = _pyEMsoft.f90wrap_emsoft_getconfigpath()
        return configpath
    
    @staticmethod
    def emsoft_getemsoftpathname():
        """
        emsoftpathname = emsoft_getemsoftpathname()
        
        
        Defined at local.f90 lines 460-488
        
        
        Returns
        -------
        emsoftpathname : str
        
        """
        emsoftpathname = _pyEMsoft.f90wrap_emsoft_getemsoftpathname()
        return emsoftpathname
    
    @staticmethod
    def emsoft_getemdatapathname():
        """
        emdatapathname = emsoft_getemdatapathname()
        
        
        Defined at local.f90 lines 504-531
        
        
        Returns
        -------
        emdatapathname : str
        
        """
        emdatapathname = _pyEMsoft.f90wrap_emsoft_getemdatapathname()
        return emdatapathname
    
    @staticmethod
    def emsoft_getemxtalfolderpathname():
        """
        emxtalfolderpathname = emsoft_getemxtalfolderpathname()
        
        
        Defined at local.f90 lines 546-573
        
        
        Returns
        -------
        emxtalfolderpathname : str
        
        """
        emxtalfolderpathname = _pyEMsoft.f90wrap_emsoft_getemxtalfolderpathname()
        return emxtalfolderpathname
    
    @staticmethod
    def emsoft_getemtmppathname():
        """
        emtmppathname = emsoft_getemtmppathname()
        
        
        Defined at local.f90 lines 588-615
        
        
        Returns
        -------
        emtmppathname : str
        
        """
        emtmppathname = _pyEMsoft.f90wrap_emsoft_getemtmppathname()
        return emtmppathname
    
    @staticmethod
    def emsoft_getusername():
        """
        username = emsoft_getusername()
        
        
        Defined at local.f90 lines 630-645
        
        
        Returns
        -------
        username : str
        
        """
        username = _pyEMsoft.f90wrap_emsoft_getusername()
        return username
    
    @staticmethod
    def emsoft_getuserlocation():
        """
        userlocation = emsoft_getuserlocation()
        
        
        Defined at local.f90 lines 660-675
        
        
        Returns
        -------
        userlocation : str
        
        """
        userlocation = _pyEMsoft.f90wrap_emsoft_getuserlocation()
        return userlocation
    
    @staticmethod
    def emsoft_getuseremail():
        """
        useremail = emsoft_getuseremail()
        
        
        Defined at local.f90 lines 690-698
        
        
        Returns
        -------
        useremail : str
        
        """
        useremail = _pyEMsoft.f90wrap_emsoft_getuseremail()
        return useremail
    
    @staticmethod
    def emsoft_getemdevelop():
        """
        emdevelop = emsoft_getemdevelop()
        
        
        Defined at local.f90 lines 713-728
        
        
        Returns
        -------
        emdevelop : bool
        
        """
        emdevelop = _pyEMsoft.f90wrap_emsoft_getemdevelop()
        return emdevelop
    
    @staticmethod
    def emsoft_getrelease():
        """
        release = emsoft_getrelease()
        
        
        Defined at local.f90 lines 742-750
        
        
        Returns
        -------
        release : bool
        
        """
        release = _pyEMsoft.f90wrap_emsoft_getrelease()
        return release
    
    @staticmethod
    def emsoft_getjsonparameter(ep, nobackslash=None):
        """
        param = emsoft_getjsonparameter(ep[, nobackslash])
        
        
        Defined at local.f90 lines 768-838
        
        Parameters
        ----------
        ep : str
        nobackslash : bool
        
        Returns
        -------
        param : str
        
        """
        param = _pyEMsoft.f90wrap_emsoft_getjsonparameter(ep=ep, \
            nobackslash=nobackslash)
        return param
    
    @staticmethod
    def emsoft_gettemplatepathname(json=None):
        """
        templatepathname = emsoft_gettemplatepathname([json])
        
        
        Defined at local.f90 lines 853-866
        
        Parameters
        ----------
        json : bool
        
        Returns
        -------
        templatepathname : str
        
        """
        templatepathname = _pyEMsoft.f90wrap_emsoft_gettemplatepathname(json=json)
        return templatepathname
    
    @staticmethod
    def emsoft_getwikipathname():
        """
        wikipathname = emsoft_getwikipathname()
        
        
        Defined at local.f90 lines 881-885
        
        
        Returns
        -------
        wikipathname : str
        
        """
        wikipathname = _pyEMsoft.f90wrap_emsoft_getwikipathname()
        return wikipathname
    
    @staticmethod
    def emsoft_getresourcepathname():
        """
        resourcepathname = emsoft_getresourcepathname()
        
        
        Defined at local.f90 lines 899-903
        
        
        Returns
        -------
        resourcepathname : str
        
        """
        resourcepathname = _pyEMsoft.f90wrap_emsoft_getresourcepathname()
        return resourcepathname
    
    @staticmethod
    def emsoft_getuserhomepath():
        """
        userhomepathname = emsoft_getuserhomepath()
        
        
        Defined at local.f90 lines 917-930
        
        
        Returns
        -------
        userhomepathname : str
        
        """
        userhomepathname = _pyEMsoft.f90wrap_emsoft_getuserhomepath()
        return userhomepathname
    
    @staticmethod
    def emsoft_getuser():
        """
        username = emsoft_getuser()
        
        
        Defined at local.f90 lines 944-950
        
        
        Returns
        -------
        username : str
        
        """
        username = _pyEMsoft.f90wrap_emsoft_getuser()
        return username
    
    @staticmethod
    def emsoft_getopenclpathname():
        """
        openclpathname = emsoft_getopenclpathname()
        
        
        Defined at local.f90 lines 964-968
        
        
        Returns
        -------
        openclpathname : str
        
        """
        openclpathname = _pyEMsoft.f90wrap_emsoft_getopenclpathname()
        return openclpathname
    
    @staticmethod
    def emsoft_getxtalpathname():
        """
        xtalpathname = emsoft_getxtalpathname()
        
        
        Defined at local.f90 lines 983-987
        
        
        Returns
        -------
        xtalpathname : str
        
        """
        xtalpathname = _pyEMsoft.f90wrap_emsoft_getxtalpathname()
        return xtalpathname
    
    @staticmethod
    def emsoft_getfftwwisdomfilename():
        """
        fftwwisdomfilename = emsoft_getfftwwisdomfilename()
        
        
        Defined at local.f90 lines 1001-1005
        
        
        Returns
        -------
        fftwwisdomfilename : str
        
        """
        fftwwisdomfilename = _pyEMsoft.f90wrap_emsoft_getfftwwisdomfilename()
        return fftwwisdomfilename
    
    @staticmethod
    def emsoft_gettemplatecodefilename():
        """
        templatecodefilename = emsoft_gettemplatecodefilename()
        
        
        Defined at local.f90 lines 1019-1023
        
        
        Returns
        -------
        templatecodefilename : str
        
        """
        templatecodefilename = _pyEMsoft.f90wrap_emsoft_gettemplatecodefilename()
        return templatecodefilename
    
    @staticmethod
    def emsoft_getwikicodefilename():
        """
        wikicodefilename = emsoft_getwikicodefilename()
        
        
        Defined at local.f90 lines 1037-1041
        
        
        Returns
        -------
        wikicodefilename : str
        
        """
        wikicodefilename = _pyEMsoft.f90wrap_emsoft_getwikicodefilename()
        return wikicodefilename
    
    @staticmethod
    def emsoft_getwyckoffpositionsfilename():
        """
        wpfilename = emsoft_getwyckoffpositionsfilename()
        
        
        Defined at local.f90 lines 1055-1059
        
        
        Returns
        -------
        wpfilename : str
        
        """
        wpfilename = _pyEMsoft.f90wrap_emsoft_getwyckoffpositionsfilename()
        return wpfilename
    
    @staticmethod
    def emsoft_getrandomseedfilename():
        """
        randomseedfilename = emsoft_getrandomseedfilename()
        
        
        Defined at local.f90 lines 1073-1077
        
        
        Returns
        -------
        randomseedfilename : str
        
        """
        randomseedfilename = _pyEMsoft.f90wrap_emsoft_getrandomseedfilename()
        return randomseedfilename
    
    @staticmethod
    def emsoft(progname, progdesc, emconfig=None, stdout=None, makeconfig=None):
        """
        emsoft(progname, progdesc[, emconfig, stdout, makeconfig])
        
        
        Defined at local.f90 lines 1104-1171
        
        Parameters
        ----------
        progname : str
        progdesc : str
        emconfig : Configstructuretype
        stdout : int
        makeconfig : bool
        
        """
        _pyEMsoft.f90wrap_emsoft(progname=progname, progdesc=progdesc, emconfig=None if \
            emconfig is None else emconfig._handle, stdout=stdout, \
            makeconfig=makeconfig)
    
    @staticmethod
    def emsoft_tonativepath(inpath):
        """
        outpath = emsoft_tonativepath(inpath)
        
        
        Defined at local.f90 lines 1187-1206
        
        Parameters
        ----------
        inpath : str
        
        Returns
        -------
        outpath : str
        
        """
        outpath = _pyEMsoft.f90wrap_emsoft_tonativepath(inpath=inpath)
        return outpath
    
    @staticmethod
    def emsoft_fromnativepath(inpath):
        """
        outpath = emsoft_fromnativepath(inpath)
        
        
        Defined at local.f90 lines 1222-1241
        
        Parameters
        ----------
        inpath : str
        
        Returns
        -------
        outpath : str
        
        """
        outpath = _pyEMsoft.f90wrap_emsoft_fromnativepath(inpath=inpath)
        return outpath
    
    @staticmethod
    def emsoft_path_init(config=None):
        """
        emsoft_path_init([config])
        
        
        Defined at local.f90 lines 1269-1400
        
        Parameters
        ----------
        config : bool
        
        """
        _pyEMsoft.f90wrap_emsoft_path_init(config=config)
    
    @staticmethod
    def timestamp(stdout=None, timestring=None, datestring=None):
        """
        timestamp([stdout, timestring, datestring])
        
        
        Defined at local.f90 lines 1423-1478
        
        Parameters
        ----------
        stdout : int
        timestring : str
        datestring : str
        
        """
        _pyEMsoft.f90wrap_timestamp(stdout=stdout, timestring=timestring, \
            datestring=datestring)
    
    @property
    def sgl(self):
        """
        Element sgl ftype=integer pytype=int
        
        
        Defined at local.f90 line 77
        
        """
        return _pyEMsoft.f90wrap_local__get__sgl()
    
    @property
    def dbl(self):
        """
        Element dbl ftype=integer pytype=int
        
        
        Defined at local.f90 line 79
        
        """
        return _pyEMsoft.f90wrap_local__get__dbl()
    
    @property
    def ish(self):
        """
        Element ish ftype=integer pytype=int
        
        
        Defined at local.f90 line 84
        
        """
        return _pyEMsoft.f90wrap_local__get__ish()
    
    @property
    def irg(self):
        """
        Element irg ftype=integer pytype=int
        
        
        Defined at local.f90 line 86
        
        """
        return _pyEMsoft.f90wrap_local__get__irg()
    
    @property
    def ill(self):
        """
        Element ill ftype=integer pytype=int
        
        
        Defined at local.f90 line 88
        
        """
        return _pyEMsoft.f90wrap_local__get__ill()
    
    @property
    def fortran_real_4(self):
        """
        Element fortran_real_4 ftype=integer pytype=int
        
        
        Defined at local.f90 line 94
        
        """
        return _pyEMsoft.f90wrap_local__get__fortran_real_4()
    
    @property
    def fortran_real_8(self):
        """
        Element fortran_real_8 ftype=integer pytype=int
        
        
        Defined at local.f90 line 96
        
        """
        return _pyEMsoft.f90wrap_local__get__fortran_real_8()
    
    @property
    def jsonck(self):
        """
        Element jsonck ftype=integer pytype=int
        
        
        Defined at local.f90 line 98
        
        """
        return _pyEMsoft.f90wrap_local__get__jsonck()
    
    @property
    def fnlen(self):
        """
        Element fnlen ftype=integer(kind=irg) pytype=int
        
        
        Defined at local.f90 line 101
        
        """
        return _pyEMsoft.f90wrap_local__get__fnlen()
    
    @property
    def displayemsoftwarningmessages(self):
        """
        Element displayemsoftwarningmessages ftype=integer(kind=irg) pytype=int
        
        
        Defined at local.f90 line 105
        
        """
        return _pyEMsoft.f90wrap_local__get__displayemsoftwarningmessages()
    
    @displayemsoftwarningmessages.setter
    def displayemsoftwarningmessages(self, displayemsoftwarningmessages):
        \
            _pyEMsoft.f90wrap_local__set__displayemsoftwarningmessages(displayemsoftwarningmessages)
    
    @property
    def displayconfigfilemissingmessage(self):
        """
        Element displayconfigfilemissingmessage ftype=integer(kind=irg) pytype=int
        
        
        Defined at local.f90 line 106
        
        """
        return _pyEMsoft.f90wrap_local__get__displayconfigfilemissingmessage()
    
    @displayconfigfilemissingmessage.setter
    def displayconfigfilemissingmessage(self, displayconfigfilemissingmessage):
        \
            _pyEMsoft.f90wrap_local__set__displayconfigfilemissingmessage(displayconfigfilemissingmessage)
    
    @property
    def wraparraysize(self):
        """
        Element wraparraysize ftype=integer(c_int32_t) pytype=int
        
        
        Defined at local.f90 line 110
        
        """
        return _pyEMsoft.f90wrap_local__get__wraparraysize()
    
    @property
    def psunit(self):
        """
        Element psunit ftype=integer(kind=irg) pytype=int
        
        
        Defined at local.f90 line 113
        
        """
        return _pyEMsoft.f90wrap_local__get__psunit()
    
    @property
    def dataunit(self):
        """
        Element dataunit ftype=integer(kind=irg) pytype=int
        
        
        Defined at local.f90 line 113
        
        """
        return _pyEMsoft.f90wrap_local__get__dataunit()
    
    @property
    def dataunit2(self):
        """
        Element dataunit2 ftype=integer(kind=irg) pytype=int
        
        
        Defined at local.f90 line 113
        
        """
        return _pyEMsoft.f90wrap_local__get__dataunit2()
    
    @property
    def dataunit3(self):
        """
        Element dataunit3 ftype=integer(kind=irg) pytype=int
        
        
        Defined at local.f90 line 113
        
        """
        return _pyEMsoft.f90wrap_local__get__dataunit3()
    
    @property
    def configstructurenames(self):
        """
        Element configstructurenames ftype=character(30) pytype=str
        
        
        Defined at local.f90 line 182
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_local__array__configstructurenames(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            configstructurenames = self._arrays[array_handle]
        else:
            configstructurenames = \
                f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_local__array__configstructurenames)
            self._arrays[array_handle] = configstructurenames
        return configstructurenames
    
    @configstructurenames.setter
    def configstructurenames(self, configstructurenames):
        self.configstructurenames[...] = configstructurenames
    
    def __str__(self):
        ret = ['<local>{\n']
        ret.append('    sgl : ')
        ret.append(repr(self.sgl))
        ret.append(',\n    dbl : ')
        ret.append(repr(self.dbl))
        ret.append(',\n    ish : ')
        ret.append(repr(self.ish))
        ret.append(',\n    irg : ')
        ret.append(repr(self.irg))
        ret.append(',\n    ill : ')
        ret.append(repr(self.ill))
        ret.append(',\n    fortran_real_4 : ')
        ret.append(repr(self.fortran_real_4))
        ret.append(',\n    fortran_real_8 : ')
        ret.append(repr(self.fortran_real_8))
        ret.append(',\n    jsonck : ')
        ret.append(repr(self.jsonck))
        ret.append(',\n    fnlen : ')
        ret.append(repr(self.fnlen))
        ret.append(',\n    displayemsoftwarningmessages : ')
        ret.append(repr(self.displayemsoftwarningmessages))
        ret.append(',\n    displayconfigfilemissingmessage : ')
        ret.append(repr(self.displayconfigfilemissingmessage))
        ret.append(',\n    wraparraysize : ')
        ret.append(repr(self.wraparraysize))
        ret.append(',\n    psunit : ')
        ret.append(repr(self.psunit))
        ret.append(',\n    dataunit : ')
        ret.append(repr(self.dataunit))
        ret.append(',\n    dataunit2 : ')
        ret.append(repr(self.dataunit2))
        ret.append(',\n    dataunit3 : ')
        ret.append(repr(self.dataunit3))
        ret.append(',\n    configstructurenames : ')
        ret.append(repr(self.configstructurenames))
        ret.append('}')
        return ''.join(ret)
    
    _dt_array_initialisers = []
    

local = Local()

class Io(f90wrap.runtime.FortranModule):
    """
    Module io
    
    
    Defined at io.f90 lines 52-649
    
    """
    @staticmethod
    def message(mess, frm=None, advance=None):
        """
        message(mess[, frm, advance])
        
        
        Defined at io.f90 lines 101-115
        
        Parameters
        ----------
        mess : str
        frm : str
        advance : str
        
        """
        _pyEMsoft.f90wrap_message(mess=mess, frm=frm, advance=advance)
    
    @staticmethod
    def printmatrixd(s, a):
        """
        printmatrixd(s, a)
        
        
        Defined at io.f90 lines 624-635
        
        Parameters
        ----------
        s : str
        a : float array
        
        """
        _pyEMsoft.f90wrap_printmatrixd(s=s, a=a)
    
    @staticmethod
    def printmatrixcd(s, a):
        """
        printmatrixcd(s, a)
        
        
        Defined at io.f90 lines 637-648
        
        Parameters
        ----------
        s : str
        a : complex array
        
        """
        _pyEMsoft.f90wrap_printmatrixcd(s=s, a=a)
    
    @staticmethod
    def _readvalueintshort(qstring, rd_int, num=None):
        """
        _readvalueintshort(qstring, rd_int[, num])
        
        
        Defined at io.f90 lines 196-208
        
        Parameters
        ----------
        qstring : str
        rd_int : int array
        num : int
        
        """
        _pyEMsoft.f90wrap_readvalueintshort(qstring=qstring, rd_int=rd_int, num=num)
    
    @staticmethod
    def _readvalueintlong(qstring, rd_int, num=None):
        """
        _readvalueintlong(qstring, rd_int[, num])
        
        
        Defined at io.f90 lines 225-237
        
        Parameters
        ----------
        qstring : str
        rd_int : int array
        num : int
        
        """
        _pyEMsoft.f90wrap_readvalueintlong(qstring=qstring, rd_int=rd_int, num=num)
    
    @staticmethod
    def _readvaluerealsingle(qstring, rd_real, num=None):
        """
        _readvaluerealsingle(qstring, rd_real[, num])
        
        
        Defined at io.f90 lines 254-266
        
        Parameters
        ----------
        qstring : str
        rd_real : float array
        num : int
        
        """
        _pyEMsoft.f90wrap_readvaluerealsingle(qstring=qstring, rd_real=rd_real, num=num)
    
    @staticmethod
    def _readvaluerealdouble(qstring, rd_real, num=None):
        """
        _readvaluerealdouble(qstring, rd_real[, num])
        
        
        Defined at io.f90 lines 284-296
        
        Parameters
        ----------
        qstring : str
        rd_real : float array
        num : int
        
        """
        _pyEMsoft.f90wrap_readvaluerealdouble(qstring=qstring, rd_real=rd_real, num=num)
    
    @staticmethod
    def _readvaluestring(qstring, frm=None):
        """
        rd_string = _readvaluestring(qstring[, frm])
        
        
        Defined at io.f90 lines 135-145
        
        Parameters
        ----------
        qstring : str
        frm : str
        
        Returns
        -------
        rd_string : str
        
        """
        rd_string = _pyEMsoft.f90wrap_readvaluestring(qstring=qstring, frm=frm)
        return rd_string
    
    @staticmethod
    def _readvaluestringarray(qstring, rd_string, num, frm=None):
        """
        _readvaluestringarray(qstring, rd_string, num[, frm])
        
        
        Defined at io.f90 lines 163-179
        
        Parameters
        ----------
        qstring : str
        rd_string : str array
        num : int
        frm : str
        
        """
        _pyEMsoft.f90wrap_readvaluestringarray(qstring=qstring, rd_string=rd_string, \
            num=num, frm=frm)
    
    @staticmethod
    def readvalue(*args, **kwargs):
        """
        readvalue(*args, **kwargs)
        
        
        Defined at io.f90 lines 58-64
        
        Overloaded interface containing the following procedures:
          _readvalueintshort
          _readvalueintlong
          _readvaluerealsingle
          _readvaluerealdouble
          _readvaluestring
          _readvaluestringarray
        
        """
        for proc in [Io._readvalueintshort, Io._readvalueintlong, \
            Io._readvaluerealsingle, Io._readvaluerealdouble, Io._readvaluestring, \
            Io._readvaluestringarray]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _writevalueintshort(qstring, out_int, num=None, frm=None, advance=None):
        """
        _writevalueintshort(qstring, out_int[, num, frm, advance])
        
        
        Defined at io.f90 lines 352-381
        
        Parameters
        ----------
        qstring : str
        out_int : int array
        num : int
        frm : str
        advance : str
        
        """
        _pyEMsoft.f90wrap_writevalueintshort(qstring=qstring, out_int=out_int, num=num, \
            frm=frm, advance=advance)
    
    @staticmethod
    def _writevalueintlong(qstring, out_int, num=None, frm=None, advance=None):
        """
        _writevalueintlong(qstring, out_int[, num, frm, advance])
        
        
        Defined at io.f90 lines 400-429
        
        Parameters
        ----------
        qstring : str
        out_int : int array
        num : int
        frm : str
        advance : str
        
        """
        _pyEMsoft.f90wrap_writevalueintlong(qstring=qstring, out_int=out_int, num=num, \
            frm=frm, advance=advance)
    
    @staticmethod
    def _writevalueintlonglong(qstring, out_int, num=None, frm=None, advance=None):
        """
        _writevalueintlonglong(qstring, out_int[, num, frm, advance])
        
        
        Defined at io.f90 lines 448-477
        
        Parameters
        ----------
        qstring : str
        out_int : int array
        num : int
        frm : str
        advance : str
        
        """
        _pyEMsoft.f90wrap_writevalueintlonglong(qstring=qstring, out_int=out_int, \
            num=num, frm=frm, advance=advance)
    
    @staticmethod
    def _writevaluerealsingle(qstring, out_real, num=None, frm=None, advance=None):
        """
        _writevaluerealsingle(qstring, out_real[, num, frm, advance])
        
        
        Defined at io.f90 lines 497-526
        
        Parameters
        ----------
        qstring : str
        out_real : float array
        num : int
        frm : str
        advance : str
        
        """
        _pyEMsoft.f90wrap_writevaluerealsingle(qstring=qstring, out_real=out_real, \
            num=num, frm=frm, advance=advance)
    
    @staticmethod
    def _writevaluerealdouble(qstring, out_real, num=None, frm=None, advance=None):
        """
        _writevaluerealdouble(qstring, out_real[, num, frm, advance])
        
        
        Defined at io.f90 lines 545-574
        
        Parameters
        ----------
        qstring : str
        out_real : float array
        num : int
        frm : str
        advance : str
        
        """
        _pyEMsoft.f90wrap_writevaluerealdouble(qstring=qstring, out_real=out_real, \
            num=num, frm=frm, advance=advance)
    
    @staticmethod
    def _writevaluerealcomplex(qstring, out_cmplx, num=None, frm=None, \
        advance=None):
        """
        _writevaluerealcomplex(qstring, out_cmplx[, num, frm, advance])
        
        
        Defined at io.f90 lines 593-622
        
        Parameters
        ----------
        qstring : str
        out_cmplx : complex array
        num : int
        frm : str
        advance : str
        
        """
        _pyEMsoft.f90wrap_writevaluerealcomplex(qstring=qstring, out_cmplx=out_cmplx, \
            num=num, frm=frm, advance=advance)
    
    @staticmethod
    def _writevaluestring(qstring, out_string, frm=None, advance=None):
        """
        _writevaluestring(qstring, out_string[, frm, advance])
        
        
        Defined at io.f90 lines 317-333
        
        Parameters
        ----------
        qstring : str
        out_string : str
        frm : str
        advance : str
        
        """
        _pyEMsoft.f90wrap_writevaluestring(qstring=qstring, out_string=out_string, \
            frm=frm, advance=advance)
    
    @staticmethod
    def writevalue(*args, **kwargs):
        """
        writevalue(*args, **kwargs)
        
        
        Defined at io.f90 lines 66-73
        
        Overloaded interface containing the following procedures:
          _writevalueintshort
          _writevalueintlong
          _writevalueintlonglong
          _writevaluerealsingle
          _writevaluerealdouble
          _writevaluerealcomplex
          _writevaluestring
        
        """
        for proc in [Io._writevalueintshort, Io._writevalueintlong, \
            Io._writevalueintlonglong, Io._writevaluerealsingle, \
            Io._writevaluerealdouble, Io._writevaluerealcomplex, Io._writevaluestring]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    _dt_array_initialisers = []
    

io = Io()

class Error(f90wrap.runtime.FortranModule):
    """
    Module error
    
    
    Defined at error.f90 lines 46-76
    
    """
    @staticmethod
    def fatalerror(var1, var2):
        """
        fatalerror(var1, var2)
        
        
        Defined at error.f90 lines 68-75
        
        Parameters
        ----------
        var1 : str
        var2 : str
        
        """
        _pyEMsoft.f90wrap_fatalerror(var1=var1, var2=var2)
    
    _dt_array_initialisers = []
    

error = Error()

class Constants(f90wrap.runtime.FortranModule):
    """
    Module constants
    
    
    Defined at constants.f90 lines 63-412
    
    """
    @f90wrap.runtime.register_class("pyEMsoft.LambertParametersType")
    class LambertParametersType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=lambertparameterstype)
        
        
        Defined at constants.f90 lines 302-353
        
        """
        def __init__(self, handle=None):
            """
            self = Lambertparameterstype()
            
            
            Defined at constants.f90 lines 302-353
            
            
            Returns
            -------
            this : Lambertparameterstype
            	Object to be constructed
            
            
            Automatically generated constructor for lambertparameterstype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_lambertparameterstype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Lambertparameterstype
            
            
            Defined at constants.f90 lines 302-353
            
            Parameters
            ----------
            this : Lambertparameterstype
            	Object to be destructed
            
            
            Automatically generated destructor for lambertparameterstype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_lambertparameterstype_finalise(this=self._handle)
        
        @property
        def pi(self):
            """
            Element pi ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 303
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__pi(self._handle)
        
        @pi.setter
        def pi(self, pi):
            _pyEMsoft.f90wrap_lambertparameterstype__set__pi(self._handle, pi)
        
        @property
        def ipi(self):
            """
            Element ipi ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 304
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__ipi(self._handle)
        
        @ipi.setter
        def ipi(self, ipi):
            _pyEMsoft.f90wrap_lambertparameterstype__set__ipi(self._handle, ipi)
        
        @property
        def spi(self):
            """
            Element spi ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 305
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__spi(self._handle)
        
        @spi.setter
        def spi(self, spi):
            _pyEMsoft.f90wrap_lambertparameterstype__set__spi(self._handle, spi)
        
        @property
        def spio2(self):
            """
            Element spio2 ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 306
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__spio2(self._handle)
        
        @spio2.setter
        def spio2(self, spio2):
            _pyEMsoft.f90wrap_lambertparameterstype__set__spio2(self._handle, spio2)
        
        @property
        def spi2(self):
            """
            Element spi2 ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 307
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__spi2(self._handle)
        
        @spi2.setter
        def spi2(self, spi2):
            _pyEMsoft.f90wrap_lambertparameterstype__set__spi2(self._handle, spi2)
        
        @property
        def srt(self):
            """
            Element srt ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 308
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__srt(self._handle)
        
        @srt.setter
        def srt(self, srt):
            _pyEMsoft.f90wrap_lambertparameterstype__set__srt(self._handle, srt)
        
        @property
        def isrt(self):
            """
            Element isrt ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 309
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__isrt(self._handle)
        
        @isrt.setter
        def isrt(self, isrt):
            _pyEMsoft.f90wrap_lambertparameterstype__set__isrt(self._handle, isrt)
        
        @property
        def alpha(self):
            """
            Element alpha ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 310
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__alpha(self._handle)
        
        @alpha.setter
        def alpha(self, alpha):
            _pyEMsoft.f90wrap_lambertparameterstype__set__alpha(self._handle, alpha)
        
        @property
        def rtt(self):
            """
            Element rtt ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 311
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__rtt(self._handle)
        
        @rtt.setter
        def rtt(self, rtt):
            _pyEMsoft.f90wrap_lambertparameterstype__set__rtt(self._handle, rtt)
        
        @property
        def prea(self):
            """
            Element prea ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 312
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__prea(self._handle)
        
        @prea.setter
        def prea(self, prea):
            _pyEMsoft.f90wrap_lambertparameterstype__set__prea(self._handle, prea)
        
        @property
        def preb(self):
            """
            Element preb ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 313
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__preb(self._handle)
        
        @preb.setter
        def preb(self, preb):
            _pyEMsoft.f90wrap_lambertparameterstype__set__preb(self._handle, preb)
        
        @property
        def prec(self):
            """
            Element prec ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 314
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__prec(self._handle)
        
        @prec.setter
        def prec(self, prec):
            _pyEMsoft.f90wrap_lambertparameterstype__set__prec(self._handle, prec)
        
        @property
        def pred(self):
            """
            Element pred ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 315
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__pred(self._handle)
        
        @pred.setter
        def pred(self, pred):
            _pyEMsoft.f90wrap_lambertparameterstype__set__pred(self._handle, pred)
        
        @property
        def pree(self):
            """
            Element pree ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 316
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__pree(self._handle)
        
        @pree.setter
        def pree(self, pree):
            _pyEMsoft.f90wrap_lambertparameterstype__set__pree(self._handle, pree)
        
        @property
        def pref(self):
            """
            Element pref ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 317
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__pref(self._handle)
        
        @pref.setter
        def pref(self, pref):
            _pyEMsoft.f90wrap_lambertparameterstype__set__pref(self._handle, pref)
        
        @property
        def preg(self):
            """
            Element preg ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 318
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__preg(self._handle)
        
        @preg.setter
        def preg(self, preg):
            _pyEMsoft.f90wrap_lambertparameterstype__set__preg(self._handle, preg)
        
        @property
        def a(self):
            """
            Element a ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 320
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__a(self._handle)
        
        @a.setter
        def a(self, a):
            _pyEMsoft.f90wrap_lambertparameterstype__set__a(self._handle, a)
        
        @property
        def ap(self):
            """
            Element ap ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 321
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__ap(self._handle)
        
        @ap.setter
        def ap(self, ap):
            _pyEMsoft.f90wrap_lambertparameterstype__set__ap(self._handle, ap)
        
        @property
        def sc(self):
            """
            Element sc ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 322
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__sc(self._handle)
        
        @sc.setter
        def sc(self, sc):
            _pyEMsoft.f90wrap_lambertparameterstype__set__sc(self._handle, sc)
        
        @property
        def beta(self):
            """
            Element beta ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 323
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__beta(self._handle)
        
        @beta.setter
        def beta(self, beta):
            _pyEMsoft.f90wrap_lambertparameterstype__set__beta(self._handle, beta)
        
        @property
        def r1(self):
            """
            Element r1 ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 324
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__r1(self._handle)
        
        @r1.setter
        def r1(self, r1):
            _pyEMsoft.f90wrap_lambertparameterstype__set__r1(self._handle, r1)
        
        @property
        def r2(self):
            """
            Element r2 ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 325
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__r2(self._handle)
        
        @r2.setter
        def r2(self, r2):
            _pyEMsoft.f90wrap_lambertparameterstype__set__r2(self._handle, r2)
        
        @property
        def r22(self):
            """
            Element r22 ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 326
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__r22(self._handle)
        
        @r22.setter
        def r22(self, r22):
            _pyEMsoft.f90wrap_lambertparameterstype__set__r22(self._handle, r22)
        
        @property
        def pi12(self):
            """
            Element pi12 ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 327
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__pi12(self._handle)
        
        @pi12.setter
        def pi12(self, pi12):
            _pyEMsoft.f90wrap_lambertparameterstype__set__pi12(self._handle, pi12)
        
        @property
        def pi8(self):
            """
            Element pi8 ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 328
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__pi8(self._handle)
        
        @pi8.setter
        def pi8(self, pi8):
            _pyEMsoft.f90wrap_lambertparameterstype__set__pi8(self._handle, pi8)
        
        @property
        def prek(self):
            """
            Element prek ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 329
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__prek(self._handle)
        
        @prek.setter
        def prek(self, prek):
            _pyEMsoft.f90wrap_lambertparameterstype__set__prek(self._handle, prek)
        
        @property
        def r24(self):
            """
            Element r24 ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 330
            
            """
            return _pyEMsoft.f90wrap_lambertparameterstype__get__r24(self._handle)
        
        @r24.setter
        def r24(self, r24):
            _pyEMsoft.f90wrap_lambertparameterstype__set__r24(self._handle, r24)
        
        @property
        def tfit(self):
            """
            Element tfit ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 350
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_lambertparameterstype__array__tfit(self._handle)
            if array_handle in self._arrays:
                tfit = self._arrays[array_handle]
            else:
                tfit = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_lambertparameterstype__array__tfit)
                self._arrays[array_handle] = tfit
            return tfit
        
        @tfit.setter
        def tfit(self, tfit):
            self.tfit[...] = tfit
        
        @property
        def bp(self):
            """
            Element bp ftype=real(kind=dbl) pytype=float
            
            
            Defined at constants.f90 line 353
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_lambertparameterstype__array__bp(self._handle)
            if array_handle in self._arrays:
                bp = self._arrays[array_handle]
            else:
                bp = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_lambertparameterstype__array__bp)
                self._arrays[array_handle] = bp
            return bp
        
        @bp.setter
        def bp(self, bp):
            self.bp[...] = bp
        
        def __str__(self):
            ret = ['<lambertparameterstype>{\n']
            ret.append('    pi : ')
            ret.append(repr(self.pi))
            ret.append(',\n    ipi : ')
            ret.append(repr(self.ipi))
            ret.append(',\n    spi : ')
            ret.append(repr(self.spi))
            ret.append(',\n    spio2 : ')
            ret.append(repr(self.spio2))
            ret.append(',\n    spi2 : ')
            ret.append(repr(self.spi2))
            ret.append(',\n    srt : ')
            ret.append(repr(self.srt))
            ret.append(',\n    isrt : ')
            ret.append(repr(self.isrt))
            ret.append(',\n    alpha : ')
            ret.append(repr(self.alpha))
            ret.append(',\n    rtt : ')
            ret.append(repr(self.rtt))
            ret.append(',\n    prea : ')
            ret.append(repr(self.prea))
            ret.append(',\n    preb : ')
            ret.append(repr(self.preb))
            ret.append(',\n    prec : ')
            ret.append(repr(self.prec))
            ret.append(',\n    pred : ')
            ret.append(repr(self.pred))
            ret.append(',\n    pree : ')
            ret.append(repr(self.pree))
            ret.append(',\n    pref : ')
            ret.append(repr(self.pref))
            ret.append(',\n    preg : ')
            ret.append(repr(self.preg))
            ret.append(',\n    a : ')
            ret.append(repr(self.a))
            ret.append(',\n    ap : ')
            ret.append(repr(self.ap))
            ret.append(',\n    sc : ')
            ret.append(repr(self.sc))
            ret.append(',\n    beta : ')
            ret.append(repr(self.beta))
            ret.append(',\n    r1 : ')
            ret.append(repr(self.r1))
            ret.append(',\n    r2 : ')
            ret.append(repr(self.r2))
            ret.append(',\n    r22 : ')
            ret.append(repr(self.r22))
            ret.append(',\n    pi12 : ')
            ret.append(repr(self.pi12))
            ret.append(',\n    pi8 : ')
            ret.append(repr(self.pi8))
            ret.append(',\n    prek : ')
            ret.append(repr(self.prek))
            ret.append(',\n    r24 : ')
            ret.append(repr(self.r24))
            ret.append(',\n    tfit : ')
            ret.append(repr(self.tfit))
            ret.append(',\n    bp : ')
            ret.append(repr(self.bp))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @property
    def epsijk(self):
        """
        Element epsijk ftype=real(kind=sgl) pytype=float
        
        
        Defined at constants.f90 line 80
        
        """
        return _pyEMsoft.f90wrap_constants__get__epsijk()
    
    @property
    def epsijkd(self):
        """
        Element epsijkd ftype=real(kind=dbl) pytype=float
        
        
        Defined at constants.f90 line 81
        
        """
        return _pyEMsoft.f90wrap_constants__get__epsijkd()
    
    @property
    def cpi(self):
        """
        Element cpi ftype=real(kind=dbl) pytype=float
        
        
        Defined at constants.f90 line 126
        
        """
        return _pyEMsoft.f90wrap_constants__get__cpi()
    
    @property
    def clight(self):
        """
        Element clight ftype=real(kind=dbl) pytype=float
        
        
        Defined at constants.f90 line 126
        
        """
        return _pyEMsoft.f90wrap_constants__get__clight()
    
    @property
    def cplanck(self):
        """
        Element cplanck ftype=real(kind=dbl) pytype=float
        
        
        Defined at constants.f90 line 126
        
        """
        return _pyEMsoft.f90wrap_constants__get__cplanck()
    
    @property
    def cboltzmann(self):
        """
        Element cboltzmann ftype=real(kind=dbl) pytype=float
        
        
        Defined at constants.f90 line 126
        
        """
        return _pyEMsoft.f90wrap_constants__get__cboltzmann()
    
    @property
    def cpermea(self):
        """
        Element cpermea ftype=real(kind=dbl) pytype=float
        
        
        Defined at constants.f90 line 126
        
        """
        return _pyEMsoft.f90wrap_constants__get__cpermea()
    
    @property
    def cpermit(self):
        """
        Element cpermit ftype=real(kind=dbl) pytype=float
        
        
        Defined at constants.f90 line 126
        
        """
        return _pyEMsoft.f90wrap_constants__get__cpermit()
    
    @property
    def ccharge(self):
        """
        Element ccharge ftype=real(kind=dbl) pytype=float
        
        
        Defined at constants.f90 line 126
        
        """
        return _pyEMsoft.f90wrap_constants__get__ccharge()
    
    @property
    def crestmass(self):
        """
        Element crestmass ftype=real(kind=dbl) pytype=float
        
        
        Defined at constants.f90 line 126
        
        """
        return _pyEMsoft.f90wrap_constants__get__crestmass()
    
    @property
    def cmoment(self):
        """
        Element cmoment ftype=real(kind=dbl) pytype=float
        
        
        Defined at constants.f90 line 126
        
        """
        return _pyEMsoft.f90wrap_constants__get__cmoment()
    
    @property
    def cj2ev(self):
        """
        Element cj2ev ftype=real(kind=dbl) pytype=float
        
        
        Defined at constants.f90 line 126
        
        """
        return _pyEMsoft.f90wrap_constants__get__cj2ev()
    
    @property
    def cavogadro(self):
        """
        Element cavogadro ftype=real(kind=dbl) pytype=float
        
        
        Defined at constants.f90 line 126
        
        """
        return _pyEMsoft.f90wrap_constants__get__cavogadro()
    
    @property
    def atom_sym(self):
        """
        Element atom_sym ftype=character(2) pytype=str
        
        
        Defined at constants.f90 line 148
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_constants__array__atom_sym(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            atom_sym = self._arrays[array_handle]
        else:
            atom_sym = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_constants__array__atom_sym)
            self._arrays[array_handle] = atom_sym
        return atom_sym
    
    @atom_sym.setter
    def atom_sym(self, atom_sym):
        self.atom_sym[...] = atom_sym
    
    @property
    def atom_spradii(self):
        """
        Element atom_spradii ftype=real(kind=sgl) pytype=float
        
        
        Defined at constants.f90 line 160
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_constants__array__atom_spradii(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            atom_spradii = self._arrays[array_handle]
        else:
            atom_spradii = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_constants__array__atom_spradii)
            self._arrays[array_handle] = atom_spradii
        return atom_spradii
    
    @atom_spradii.setter
    def atom_spradii(self, atom_spradii):
        self.atom_spradii[...] = atom_spradii
    
    @property
    def atom_mtradii(self):
        """
        Element atom_mtradii ftype=real(kind=sgl) pytype=float
        
        
        Defined at constants.f90 line 172
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_constants__array__atom_mtradii(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            atom_mtradii = self._arrays[array_handle]
        else:
            atom_mtradii = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_constants__array__atom_mtradii)
            self._arrays[array_handle] = atom_mtradii
        return atom_mtradii
    
    @atom_mtradii.setter
    def atom_mtradii(self, atom_mtradii):
        self.atom_mtradii[...] = atom_mtradii
    
    @property
    def atom_color(self):
        """
        Element atom_color ftype=character(3) pytype=str
        
        
        Defined at constants.f90 line 184
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_constants__array__atom_color(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            atom_color = self._arrays[array_handle]
        else:
            atom_color = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_constants__array__atom_color)
            self._arrays[array_handle] = atom_color
        return atom_color
    
    @atom_color.setter
    def atom_color(self, atom_color):
        self.atom_color[...] = atom_color
    
    @property
    def atom_colors(self):
        """
        Element atom_colors ftype=real(kind=sgl) pytype=float
        
        
        Defined at constants.f90 line 277
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_constants__array__atom_colors(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            atom_colors = self._arrays[array_handle]
        else:
            atom_colors = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_constants__array__atom_colors)
            self._arrays[array_handle] = atom_colors
        return atom_colors
    
    @atom_colors.setter
    def atom_colors(self, atom_colors):
        self.atom_colors[...] = atom_colors
    
    @property
    def atom_weights(self):
        """
        Element atom_weights ftype=real(kind=sgl) pytype=float
        
        
        Defined at constants.f90 line 299
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_constants__array__atom_weights(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            atom_weights = self._arrays[array_handle]
        else:
            atom_weights = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_constants__array__atom_weights)
            self._arrays[array_handle] = atom_weights
        return atom_weights
    
    @atom_weights.setter
    def atom_weights(self, atom_weights):
        self.atom_weights[...] = atom_weights
    
    @property
    def fztarray(self):
        """
        Element fztarray ftype=integer(kind=irg) pytype=int
        
        
        Defined at constants.f90 line 385
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_constants__array__fztarray(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            fztarray = self._arrays[array_handle]
        else:
            fztarray = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_constants__array__fztarray)
            self._arrays[array_handle] = fztarray
        return fztarray
    
    @fztarray.setter
    def fztarray(self, fztarray):
        self.fztarray[...] = fztarray
    
    @property
    def fzoarray(self):
        """
        Element fzoarray ftype=integer(kind=irg) pytype=int
        
        
        Defined at constants.f90 line 388
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_constants__array__fzoarray(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            fzoarray = self._arrays[array_handle]
        else:
            fzoarray = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_constants__array__fzoarray)
            self._arrays[array_handle] = fzoarray
        return fzoarray
    
    @fzoarray.setter
    def fzoarray(self, fzoarray):
        self.fzoarray[...] = fzoarray
    
    @property
    def butterfly9x9(self):
        """
        Element butterfly9x9 ftype=real(kind=sgl) pytype=float
        
        
        Defined at constants.f90 line 398
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_constants__array__butterfly9x9(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            butterfly9x9 = self._arrays[array_handle]
        else:
            butterfly9x9 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_constants__array__butterfly9x9)
            self._arrays[array_handle] = butterfly9x9
        return butterfly9x9
    
    @butterfly9x9.setter
    def butterfly9x9(self, butterfly9x9):
        self.butterfly9x9[...] = butterfly9x9
    
    @property
    def icovertices(self):
        """
        Element icovertices ftype=real(kind=dbl) pytype=float
        
        
        Defined at constants.f90 line 412
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_constants__array__icovertices(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            icovertices = self._arrays[array_handle]
        else:
            icovertices = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_constants__array__icovertices)
            self._arrays[array_handle] = icovertices
        return icovertices
    
    @icovertices.setter
    def icovertices(self, icovertices):
        self.icovertices[...] = icovertices
    
    def __str__(self):
        ret = ['<constants>{\n']
        ret.append('    epsijk : ')
        ret.append(repr(self.epsijk))
        ret.append(',\n    epsijkd : ')
        ret.append(repr(self.epsijkd))
        ret.append(',\n    cpi : ')
        ret.append(repr(self.cpi))
        ret.append(',\n    clight : ')
        ret.append(repr(self.clight))
        ret.append(',\n    cplanck : ')
        ret.append(repr(self.cplanck))
        ret.append(',\n    cboltzmann : ')
        ret.append(repr(self.cboltzmann))
        ret.append(',\n    cpermea : ')
        ret.append(repr(self.cpermea))
        ret.append(',\n    cpermit : ')
        ret.append(repr(self.cpermit))
        ret.append(',\n    ccharge : ')
        ret.append(repr(self.ccharge))
        ret.append(',\n    crestmass : ')
        ret.append(repr(self.crestmass))
        ret.append(',\n    cmoment : ')
        ret.append(repr(self.cmoment))
        ret.append(',\n    cj2ev : ')
        ret.append(repr(self.cj2ev))
        ret.append(',\n    cavogadro : ')
        ret.append(repr(self.cavogadro))
        ret.append(',\n    atom_sym : ')
        ret.append(repr(self.atom_sym))
        ret.append(',\n    atom_spradii : ')
        ret.append(repr(self.atom_spradii))
        ret.append(',\n    atom_mtradii : ')
        ret.append(repr(self.atom_mtradii))
        ret.append(',\n    atom_color : ')
        ret.append(repr(self.atom_color))
        ret.append(',\n    atom_colors : ')
        ret.append(repr(self.atom_colors))
        ret.append(',\n    atom_weights : ')
        ret.append(repr(self.atom_weights))
        ret.append(',\n    fztarray : ')
        ret.append(repr(self.fztarray))
        ret.append(',\n    fzoarray : ')
        ret.append(repr(self.fzoarray))
        ret.append(',\n    butterfly9x9 : ')
        ret.append(repr(self.butterfly9x9))
        ret.append(',\n    icovertices : ')
        ret.append(repr(self.icovertices))
        ret.append('}')
        return ''.join(ret)
    
    _dt_array_initialisers = []
    

constants = Constants()

class Math(f90wrap.runtime.FortranModule):
    """
    Module math
    
    
    Defined at math.f90 lines 52-3077
    
    """
    @staticmethod
    def infty():
        """
        infinity = infty()
        
        
        Defined at math.f90 lines 152-157
        
        
        Returns
        -------
        infinity : float
        
        """
        infinity = _pyEMsoft.f90wrap_infty()
        return infinity
    
    @staticmethod
    def inftyd():
        """
        infinity = inftyd()
        
        
        Defined at math.f90 lines 169-174
        
        
        Returns
        -------
        infinity : float
        
        """
        infinity = _pyEMsoft.f90wrap_inftyd()
        return infinity
    
    @staticmethod
    def nan():
        """
        x = nan()
        
        
        Defined at math.f90 lines 186-192
        
        
        Returns
        -------
        x : float
        
        """
        x = _pyEMsoft.f90wrap_nan()
        return x
    
    @staticmethod
    def nan_d():
        """
        x = nan_d()
        
        
        Defined at math.f90 lines 204-210
        
        
        Returns
        -------
        x : float
        
        """
        x = _pyEMsoft.f90wrap_nan_d()
        return x
    
    @staticmethod
    def getpolardecomposition(f, rmatrix, smatrix):
        """
        getpolardecomposition(f, rmatrix, smatrix)
        
        
        Defined at math.f90 lines 226-261
        
        Parameters
        ----------
        f : float array
        rmatrix : float array
        smatrix : float array
        
        """
        _pyEMsoft.f90wrap_getpolardecomposition(f=f, rmatrix=rmatrix, smatrix=smatrix)
    
    @staticmethod
    def get_bit_parameters(bd, verbose=None):
        """
        numbits, bitrange, bitmode = get_bit_parameters(bd[, verbose])
        
        
        Defined at math.f90 lines 278-324
        
        Parameters
        ----------
        bd : str
        verbose : bool
        
        Returns
        -------
        numbits : int
        bitrange : float
        bitmode : str
        
        ====================================
         analyze the bitdepth parameter; if we have integers, then we need to analyze the
         digits in the string to figure out how to scale the data. '10int' means that we
         store the data as 32-bit integers, but the scaled values range from 0 to \
             2^(10)-1
        """
        numbits, bitrange, bitmode = _pyEMsoft.f90wrap_get_bit_parameters(bd=bd, \
            verbose=verbose)
        return numbits, bitrange, bitmode
    
    @staticmethod
    def cinvert(a, b):
        """
        cinvert(a, b)
        
        
        Defined at math.f90 lines 467-490
        
        Parameters
        ----------
        a : complex array
        b : complex array
        
        """
        _pyEMsoft.f90wrap_cinvert(a=a, b=b)
    
    @staticmethod
    def matrixexponential(a, e, z0, tp, nn):
        """
        matrixexponential(a, e, z0, tp, nn)
        
        
        Defined at math.f90 lines 515-604
        
        Parameters
        ----------
        a : complex array
        e : complex array
        z0 : float
        tp : str
        nn : int
        
        """
        _pyEMsoft.f90wrap_matrixexponential(a=a, e=e, z0=z0, tp=tp, nn=nn)
    
    @staticmethod
    def besselin(x, n):
        """
        bessi = besselin(x, n)
        
        
        Defined at math.f90 lines 628-677
        
        Parameters
        ----------
        x : float
        n : int
        
        Returns
        -------
        bessi : float
        
        """
        bessi = _pyEMsoft.f90wrap_besselin(x=x, n=n)
        return bessi
    
    @staticmethod
    def besseli0(x):
        """
        bessi0 = besseli0(x)
        
        
        Defined at math.f90 lines 700-720
        
        Parameters
        ----------
        x : float
        
        Returns
        -------
        bessi0 : float
        
        """
        bessi0 = _pyEMsoft.f90wrap_besseli0(x=x)
        return bessi0
    
    @staticmethod
    def besseli1(x):
        """
        bessi1 = besseli1(x)
        
        
        Defined at math.f90 lines 743-763
        
        Parameters
        ----------
        x : float
        
        Returns
        -------
        bessi1 : float
        
        """
        bessi1 = _pyEMsoft.f90wrap_besseli1(x=x)
        return bessi1
    
    @staticmethod
    def c4_normal_01(seed):
        """
        c4_normal_01 = c4_normal_01(seed)
        
        
        Defined at math.f90 lines 773-812
        
        Parameters
        ----------
        seed : int
        
        Returns
        -------
        c4_normal_01 : complex
        
        """
        c4_normal_01 = _pyEMsoft.f90wrap_c4_normal_01(seed=seed)
        return c4_normal_01
    
    @staticmethod
    def c8_normal_01(seed):
        """
        c8_normal_01 = c8_normal_01(seed)
        
        
        Defined at math.f90 lines 814-853
        
        Parameters
        ----------
        seed : int
        
        Returns
        -------
        c8_normal_01 : complex
        
        """
        c8_normal_01 = _pyEMsoft.f90wrap_c8_normal_01(seed=seed)
        return c8_normal_01
    
    @staticmethod
    def i4_huge():
        """
        i4_huge = i4_huge()
        
        
        Defined at math.f90 lines 855-890
        
        
        Returns
        -------
        i4_huge : int
        
        """
        i4_huge = _pyEMsoft.f90wrap_i4_huge()
        return i4_huge
    
    @staticmethod
    def i4_normal_ab(a, b, seed):
        """
        i4_normal_ab = i4_normal_ab(a, b, seed)
        
        
        Defined at math.f90 lines 892-942
        
        Parameters
        ----------
        a : float
        b : float
        seed : int
        
        Returns
        -------
        i4_normal_ab : int
        
        """
        i4_normal_ab = _pyEMsoft.f90wrap_i4_normal_ab(a=a, b=b, seed=seed)
        return i4_normal_ab
    
    @staticmethod
    def i8_normal_ab(a, b, seed):
        """
        i8_normal_ab = i8_normal_ab(a, b, seed)
        
        
        Defined at math.f90 lines 944-995
        
        Parameters
        ----------
        a : float
        b : float
        seed : int
        
        Returns
        -------
        i8_normal_ab : int
        
        """
        i8_normal_ab = _pyEMsoft.f90wrap_i8_normal_ab(a=a, b=b, seed=seed)
        return i8_normal_ab
    
    @staticmethod
    def r4_normal_01(seed):
        """
        r4_normal_01 = r4_normal_01(seed)
        
        
        Defined at math.f90 lines 997-1040
        
        Parameters
        ----------
        seed : int
        
        Returns
        -------
        r4_normal_01 : float
        
        """
        r4_normal_01 = _pyEMsoft.f90wrap_r4_normal_01(seed=seed)
        return r4_normal_01
    
    @staticmethod
    def r4_normal_ab(a, b, seed):
        """
        r4_normal_ab = r4_normal_ab(a, b, seed)
        
        
        Defined at math.f90 lines 1042-1090
        
        Parameters
        ----------
        a : float
        b : float
        seed : int
        
        Returns
        -------
        r4_normal_ab : float
        
        """
        r4_normal_ab = _pyEMsoft.f90wrap_r4_normal_ab(a=a, b=b, seed=seed)
        return r4_normal_ab
    
    @staticmethod
    def r4_uniform_01(seed):
        """
        r4_uniform_01 = r4_uniform_01(seed)
        
        
        Defined at math.f90 lines 1092-1185
        
        Parameters
        ----------
        seed : int
        
        Returns
        -------
        r4_uniform_01 : float
        
        """
        r4_uniform_01 = _pyEMsoft.f90wrap_r4_uniform_01(seed=seed)
        return r4_uniform_01
    
    @staticmethod
    def r4vec_uniform_01(n, seed, r):
        """
        r4vec_uniform_01(n, seed, r)
        
        
        Defined at math.f90 lines 1187-1269
        
        Parameters
        ----------
        n : int
        seed : int
        r : float array
        
        """
        _pyEMsoft.f90wrap_r4vec_uniform_01(n=n, seed=seed, r=r)
    
    @staticmethod
    def r4vec_normal_ab(n, a, b, seed, x):
        """
        r4vec_normal_ab(n, a, b, seed, x)
        
        
        Defined at math.f90 lines 1271-1378
        
        Parameters
        ----------
        n : int
        a : float
        b : float
        seed : int
        x : float array
        
        """
        _pyEMsoft.f90wrap_r4vec_normal_ab(n=n, a=a, b=b, seed=seed, x=x)
    
    @staticmethod
    def r8_normal_01(seed):
        """
        r8_normal_01 = r8_normal_01(seed)
        
        
        Defined at math.f90 lines 1380-1423
        
        Parameters
        ----------
        seed : int
        
        Returns
        -------
        r8_normal_01 : float
        
        """
        r8_normal_01 = _pyEMsoft.f90wrap_r8_normal_01(seed=seed)
        return r8_normal_01
    
    @staticmethod
    def r8_normal_ab(a, b, seed):
        """
        r8_normal_ab = r8_normal_ab(a, b, seed)
        
        
        Defined at math.f90 lines 1425-1473
        
        Parameters
        ----------
        a : float
        b : float
        seed : int
        
        Returns
        -------
        r8_normal_ab : float
        
        """
        r8_normal_ab = _pyEMsoft.f90wrap_r8_normal_ab(a=a, b=b, seed=seed)
        return r8_normal_ab
    
    @staticmethod
    def r8_uniform_01(seed):
        """
        r8_uniform_01 = r8_uniform_01(seed)
        
        
        Defined at math.f90 lines 1475-1564
        
        Parameters
        ----------
        seed : int
        
        Returns
        -------
        r8_uniform_01 : float
        
        """
        r8_uniform_01 = _pyEMsoft.f90wrap_r8_uniform_01(seed=seed)
        return r8_uniform_01
    
    @staticmethod
    def r8mat_normal_01(m, n, seed, r):
        """
        r8mat_normal_01(m, n, seed, r)
        
        
        Defined at math.f90 lines 1566-1629
        
        Parameters
        ----------
        m : int
        n : int
        seed : int
        r : float array
        
        """
        _pyEMsoft.f90wrap_r8mat_normal_01(m=m, n=n, seed=seed, r=r)
    
    @staticmethod
    def r8mat_normal_ab(m, n, a, b, seed, r):
        """
        r8mat_normal_ab(m, n, a, b, seed, r)
        
        
        Defined at math.f90 lines 1631-1698
        
        Parameters
        ----------
        m : int
        n : int
        a : float
        b : float
        seed : int
        r : float array
        
        """
        _pyEMsoft.f90wrap_r8mat_normal_ab(m=m, n=n, a=a, b=b, seed=seed, r=r)
    
    @staticmethod
    def r8vec_normal_01(n, seed, x):
        """
        r8vec_normal_01(n, seed, x)
        
        
        Defined at math.f90 lines 1700-1802
        
        Parameters
        ----------
        n : int
        seed : int
        x : float array
        
        """
        _pyEMsoft.f90wrap_r8vec_normal_01(n=n, seed=seed, x=x)
    
    @staticmethod
    def r8vec_normal_ab(n, a, b, seed, x):
        """
        r8vec_normal_ab(n, a, b, seed, x)
        
        
        Defined at math.f90 lines 1804-1909
        
        Parameters
        ----------
        n : int
        a : float
        b : float
        seed : int
        x : float array
        
        """
        _pyEMsoft.f90wrap_r8vec_normal_ab(n=n, a=a, b=b, seed=seed, x=x)
    
    @staticmethod
    def r8vec_uniform_01(n, seed, r):
        """
        r8vec_uniform_01(n, seed, r)
        
        
        Defined at math.f90 lines 1911-1981
        
        Parameters
        ----------
        n : int
        seed : int
        r : float array
        
        """
        _pyEMsoft.f90wrap_r8vec_uniform_01(n=n, seed=seed, r=r)
    
    @staticmethod
    def transfourthranktensor(al, cin, cout):
        """
        transfourthranktensor(al, cin, cout)
        
        
        Defined at math.f90 lines 2005-2060
        
        Parameters
        ----------
        al : float array
        cin : float array
        cout : float array
        
        """
        _pyEMsoft.f90wrap_transfourthranktensor(al=al, cin=cin, cout=cout)
    
    @staticmethod
    def laguer(a, m, x, eps, polish):
        """
        laguer(a, m, x, eps, polish)
        
        
        Defined at math.f90 lines 2083-2137
        
        Parameters
        ----------
        a : complex array
        m : int
        x : complex
        eps : float
        polish : bool
        
        """
        _pyEMsoft.f90wrap_laguer(a=a, m=m, x=x, eps=eps, polish=polish)
    
    @staticmethod
    def zroots(a, roots):
        """
        zroots(a, roots)
        
        
        Defined at math.f90 lines 2157-2201
        
        Parameters
        ----------
        a : complex array
        roots : complex array
        
        """
        _pyEMsoft.f90wrap_zroots(a=a, roots=roots)
    
    @staticmethod
    def printmatrix(s, a):
        """
        printmatrix(s, a)
        
        
        Defined at math.f90 lines 2207-2219
        
        Parameters
        ----------
        s : str
        a : float array
        
        """
        _pyEMsoft.f90wrap_printmatrix(s=s, a=a)
    
    @staticmethod
    def point_inside_triangle(v0, v1, v2):
        """
        point_inside_triangle = point_inside_triangle(v0, v1, v2)
        
        
        Defined at math.f90 lines 2240-2257
        
        Parameters
        ----------
        v0 : float array
        v1 : float array
        v2 : float array
        
        Returns
        -------
        point_inside_triangle : bool
        
        """
        point_inside_triangle = _pyEMsoft.f90wrap_point_inside_triangle(v0=v0, v1=v1, \
            v2=v2)
        return point_inside_triangle
    
    @staticmethod
    def rank_points(p1, p2, p3, p4, xx, yy):
        """
        rank_points(p1, p2, p3, p4, xx, yy)
        
        
        Defined at math.f90 lines 2281-2327
        
        Parameters
        ----------
        p1 : float array
        p2 : float array
        p3 : float array
        p4 : float array
        xx : float array
        yy : float array
        
        """
        _pyEMsoft.f90wrap_rank_points(p1=p1, p2=p2, p3=p3, p4=p4, xx=xx, yy=yy)
    
    @staticmethod
    def point_inside_polygon(px, py, xx, yy):
        """
        inorout = point_inside_polygon(px, py, xx, yy)
        
        
        Defined at math.f90 lines 2367-2396
        
        Parameters
        ----------
        px : float
        py : float
        xx : float array
        yy : float array
        
        Returns
        -------
        inorout : int
        
        """
        inorout = _pyEMsoft.f90wrap_point_inside_polygon(px=px, py=py, xx=xx, yy=yy)
        return inorout
    
    @staticmethod
    def el2(x, qqc, aa, bb):
        """
        res = el2(x, qqc, aa, bb)
        
        
        Defined at math.f90 lines 2404-2462
        
        Parameters
        ----------
        x : float
        qqc : float
        aa : float
        bb : float
        
        Returns
        -------
        res : float
        
        """
        res = _pyEMsoft.f90wrap_el2(x=x, qqc=qqc, aa=aa, bb=bb)
        return res
    
    @staticmethod
    def el1k(phi, k):
        """
        res = el1k(phi, k)
        
        
        Defined at math.f90 lines 2464-2479
        
        Parameters
        ----------
        phi : float
        k : float
        
        Returns
        -------
        res : float
        
        """
        res = _pyEMsoft.f90wrap_el1k(phi=phi, k=k)
        return res
    
    @staticmethod
    def el2k(phi, k):
        """
        res = el2k(phi, k)
        
        
        Defined at math.f90 lines 2481-2496
        
        Parameters
        ----------
        phi : float
        k : float
        
        Returns
        -------
        res : float
        
        """
        res = _pyEMsoft.f90wrap_el2k(phi=phi, k=k)
        return res
    
    @staticmethod
    def kdelta(i, j):
        """
        k = kdelta(i, j)
        
        
        Defined at math.f90 lines 2511-2518
        
        Parameters
        ----------
        i : int
        j : int
        
        Returns
        -------
        k : int
        
        """
        k = _pyEMsoft.f90wrap_kdelta(i=i, j=j)
        return k
    
    @staticmethod
    def cubicroots(co, x):
        """
        cubicroots(co, x)
        
        
        Defined at math.f90 lines 2537-2555
        
        Parameters
        ----------
        co : float array
        x : complex array
        
        """
        _pyEMsoft.f90wrap_cubicroots(co=co, x=x)
    
    @staticmethod
    def kclusterweights(matrix, nrow, ncol, nclusters, niter, wts):
        """
        kclusterweights(matrix, nrow, ncol, nclusters, niter, wts)
        
        
        Defined at math.f90 lines 2573-2635
        
        Parameters
        ----------
        matrix : float array
        nrow : int
        ncol : int
        nclusters : int
        niter : int
        wts : float array
        
        """
        _pyEMsoft.f90wrap_kclusterweights(matrix=matrix, nrow=nrow, ncol=ncol, \
            nclusters=nclusters, niter=niter, wts=wts)
    
    @staticmethod
    def kcluster(matrix, nrow, ncol, nclusters, niter, indexarray):
        """
        kcluster(matrix, nrow, ncol, nclusters, niter, indexarray)
        
        
        Defined at math.f90 lines 2654-2706
        
        Parameters
        ----------
        matrix : float array
        nrow : int
        ncol : int
        nclusters : int
        niter : int
        indexarray : int array
        
        """
        _pyEMsoft.f90wrap_kcluster(matrix=matrix, nrow=nrow, ncol=ncol, \
            nclusters=nclusters, niter=niter, indexarray=indexarray)
    
    @staticmethod
    def reorganizeclusters(matrix, nrow, ncol, nclusters, nsc, nsr, indexarray):
        """
        reorganizeclusters(matrix, nrow, ncol, nclusters, nsc, nsr, indexarray)
        
        
        Defined at math.f90 lines 2727-2835
        
        Parameters
        ----------
        matrix : float array
        nrow : int
        ncol : int
        nclusters : int
        nsc : int
        nsr : int
        indexarray : int array
        
        -------- set things up for the Monte Carlo part -------
        -------------------------------------------------------
         reshape the index array for easier neighbor finding
        IA = reshape( IndexArray, (/ NSC, NSR /) )
        write (*,*) 'reshaped IndexArray ', shape (IA)
         count the number of points in each cluster and add the x-y coordinates to get \
             the cluster centroid
        """
        _pyEMsoft.f90wrap_reorganizeclusters(matrix=matrix, nrow=nrow, ncol=ncol, \
            nclusters=nclusters, nsc=nsc, nsr=nsr, indexarray=indexarray)
    
    @staticmethod
    def vectormatch(n, va, vb):
        """
        nce = vectormatch(n, va, vb)
        
        
        Defined at math.f90 lines 2900-2917
        
        Parameters
        ----------
        n : int
        va : int array
        vb : int array
        
        Returns
        -------
        nce : int
        
        """
        nce = _pyEMsoft.f90wrap_vectormatch(n=n, va=va, vb=vb)
        return nce
    
    @staticmethod
    def trilinear_splat(r, dr, init=None):
        """
        grid3 = trilinear_splat(r, dr[, init])
        
        
        Defined at math.f90 lines 2940-2971
        
        Parameters
        ----------
        r : float array
        dr : float array
        init : bool
        
        Returns
        -------
        grid3 : float array
        
        """
        grid3 = _pyEMsoft.f90wrap_trilinear_splat(r=r, dr=dr, init=init)
        return grid3
    
    @staticmethod
    def calcdeterminant(a, m, n):
        """
        determinant = calcdeterminant(a, m, n)
        
        
        Defined at math.f90 lines 2993-3014
        
        Parameters
        ----------
        a : float array
        m : int
        n : int
        
        Returns
        -------
        determinant : float
        
        """
        determinant = _pyEMsoft.f90wrap_calcdeterminant(a=a, m=m, n=n)
        return determinant
    
    @staticmethod
    def jaccard_distance(img1, img2, nn, mutualinformation=None):
        """
        jd = jaccard_distance(img1, img2, nn[, mutualinformation])
        
        
        Defined at math.f90 lines 3031-3077
        
        Parameters
        ----------
        img1 : int array
        img2 : int array
        nn : int
        mutualinformation : bool
        
        Returns
        -------
        jd : float
        
        """
        jd = _pyEMsoft.f90wrap_jaccard_distance(img1=img1, img2=img2, nn=nn, \
            mutualinformation=mutualinformation)
        return jd
    
    @staticmethod
    def _minvert(a, b, uni):
        """
        _minvert(a, b, uni)
        
        
        Defined at math.f90 lines 409-446
        
        Parameters
        ----------
        a : float array
        b : float array
        uni : bool
        
        """
        _pyEMsoft.f90wrap_minvert(a=a, b=b, uni=uni)
    
    @staticmethod
    def _minvert_d(a, b, uni):
        """
        _minvert_d(a, b, uni)
        
        
        Defined at math.f90 lines 348-385
        
        Parameters
        ----------
        a : float array
        b : float array
        uni : bool
        
        """
        _pyEMsoft.f90wrap_minvert_d(a=a, b=b, uni=uni)
    
    @staticmethod
    def minvert(*args, **kwargs):
        """
        minvert(*args, **kwargs)
        
        
        Defined at math.f90 lines 55-57
        
        Overloaded interface containing the following procedures:
          _minvert
          _minvert_d
        
        """
        for proc in [Math._minvert, Math._minvert_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _cross3(u, v):
        """
        res = _cross3(u, v)
        
        
        Defined at math.f90 lines 2852-2860
        
        Parameters
        ----------
        u : float array
        v : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cross3(u=u, v=v)
        return res
    
    @staticmethod
    def _cross3_d(u, v):
        """
        res = _cross3_d(u, v)
        
        
        Defined at math.f90 lines 2876-2884
        
        Parameters
        ----------
        u : float array
        v : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cross3_d(u=u, v=v)
        return res
    
    @staticmethod
    def cross3(*args, **kwargs):
        """
        cross3(*args, **kwargs)
        
        
        Defined at math.f90 lines 59-61
        
        Overloaded interface containing the following procedures:
          _cross3
          _cross3_d
        
        """
        for proc in [Math._cross3, Math._cross3_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _vecnorm(vec):
        """
        veclen = _vecnorm(vec)
        
        
        Defined at math.f90 lines 80-86
        
        Parameters
        ----------
        vec : float array
        
        Returns
        -------
        veclen : float
        
        """
        veclen = _pyEMsoft.f90wrap_vecnorm(vec=vec)
        return veclen
    
    @staticmethod
    def _vecnorm_d(vec):
        """
        veclen = _vecnorm_d(vec)
        
        
        Defined at math.f90 lines 98-104
        
        Parameters
        ----------
        vec : float array
        
        Returns
        -------
        veclen : float
        
        """
        veclen = _pyEMsoft.f90wrap_vecnorm_d(vec=vec)
        return veclen
    
    @staticmethod
    def _vecnorm2(vec):
        """
        veclen = _vecnorm2(vec)
        
        
        Defined at math.f90 lines 116-122
        
        Parameters
        ----------
        vec : float array
        
        Returns
        -------
        veclen : float
        
        """
        veclen = _pyEMsoft.f90wrap_vecnorm2(vec=vec)
        return veclen
    
    @staticmethod
    def _vecnorm2_d(vec):
        """
        veclen = _vecnorm2_d(vec)
        
        
        Defined at math.f90 lines 134-140
        
        Parameters
        ----------
        vec : float array
        
        Returns
        -------
        veclen : float
        
        """
        veclen = _pyEMsoft.f90wrap_vecnorm2_d(vec=vec)
        return veclen
    
    @staticmethod
    def vecnorm(*args, **kwargs):
        """
        vecnorm(*args, **kwargs)
        
        
        Defined at math.f90 lines 63-67
        
        Overloaded interface containing the following procedures:
          _vecnorm
          _vecnorm_d
          _vecnorm2
          _vecnorm2_d
        
        """
        for proc in [Math._vecnorm, Math._vecnorm_d, Math._vecnorm2, Math._vecnorm2_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    _dt_array_initialisers = []
    

math = Math()

class Rng(f90wrap.runtime.FortranModule):
    """
    Module rng
    
    
    Defined at rng.f90 lines 28-64
    
    """
    @f90wrap.runtime.register_class("pyEMsoft.rng_t")
    class rng_t(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=rng_t)
        
        
        Defined at rng.f90 lines 39-40
        
        """
        def __init__(self, handle=None):
            """
            self = Rng_T()
            
            
            Defined at rng.f90 lines 39-40
            
            
            Returns
            -------
            this : Rng_T
            	Object to be constructed
            
            
            Automatically generated constructor for rng_t
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_rng_t_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Rng_T
            
            
            Defined at rng.f90 lines 39-40
            
            Parameters
            ----------
            this : Rng_T
            	Object to be destructed
            
            
            Automatically generated destructor for rng_t
            """
            if self._alloc:
                _pyEMsoft.f90wrap_rng_t_finalise(this=self._handle)
        
        @property
        def state(self):
            """
            Element state ftype=integer pytype=int
            
            
            Defined at rng.f90 line 40
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_rng_t__array__state(self._handle)
            if array_handle in self._arrays:
                state = self._arrays[array_handle]
            else:
                state = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_rng_t__array__state)
                self._arrays[array_handle] = state
            return state
        
        @state.setter
        def state(self, state):
            self.state[...] = state
        
        def __str__(self):
            ret = ['<rng_t>{\n']
            ret.append('    state : ')
            ret.append(repr(self.state))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @staticmethod
    def rng_seed(self, seed):
        """
        rng_seed(self, seed)
        
        
        Defined at rng.f90 lines 44-49
        
        Parameters
        ----------
        self : Rng_T
        seed : int
        
        """
        _pyEMsoft.f90wrap_rng_seed(self=self._handle, seed=seed)
    
    @staticmethod
    def rng_uniform(self):
        """
        u = rng_uniform(self)
        
        
        Defined at rng.f90 lines 52-64
        
        Parameters
        ----------
        self : Rng_T
        
        Returns
        -------
        u : float
        
        """
        u = _pyEMsoft.f90wrap_rng_uniform(self=self._handle)
        return u
    
    _dt_array_initialisers = []
    

rng = Rng()

class Typedefs(f90wrap.runtime.FortranModule):
    """
    Module typedefs
    
    
    Defined at typedefs.f90 lines 65-1777
    
    """
    @f90wrap.runtime.register_class("pyEMsoft.symdata")
    class symdata(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=symdata)
        
        
        Defined at typedefs.f90 lines 547-559
        
        """
        def __init__(self, handle=None):
            """
            self = Symdata()
            
            
            Defined at typedefs.f90 lines 547-559
            
            
            Returns
            -------
            this : Symdata
            	Object to be constructed
            
            
            Automatically generated constructor for symdata
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_symdata_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Symdata
            
            
            Defined at typedefs.f90 lines 547-559
            
            Parameters
            ----------
            this : Symdata
            	Object to be destructed
            
            
            Automatically generated destructor for symdata
            """
            if self._alloc:
                _pyEMsoft.f90wrap_symdata_finalise(this=self._handle)
        
        @property
        def sym_gennum(self):
            """
            Element sym_gennum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 548
            
            """
            return _pyEMsoft.f90wrap_symdata__get__sym_gennum(self._handle)
        
        @sym_gennum.setter
        def sym_gennum(self, sym_gennum):
            _pyEMsoft.f90wrap_symdata__set__sym_gennum(self._handle, sym_gennum)
        
        @property
        def sym_matnum(self):
            """
            Element sym_matnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 549
            
            """
            return _pyEMsoft.f90wrap_symdata__get__sym_matnum(self._handle)
        
        @sym_matnum.setter
        def sym_matnum(self, sym_matnum):
            _pyEMsoft.f90wrap_symdata__set__sym_matnum(self._handle, sym_matnum)
        
        @property
        def sym_numpt(self):
            """
            Element sym_numpt ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 550
            
            """
            return _pyEMsoft.f90wrap_symdata__get__sym_numpt(self._handle)
        
        @sym_numpt.setter
        def sym_numpt(self, sym_numpt):
            _pyEMsoft.f90wrap_symdata__set__sym_numpt(self._handle, sym_numpt)
        
        @property
        def sym_reduce(self):
            """
            Element sym_reduce ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 551
            
            """
            return _pyEMsoft.f90wrap_symdata__get__sym_reduce(self._handle)
        
        @sym_reduce.setter
        def sym_reduce(self, sym_reduce):
            _pyEMsoft.f90wrap_symdata__set__sym_reduce(self._handle, sym_reduce)
        
        @property
        def sym_trigonal(self):
            """
            Element sym_trigonal ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 552
            
            """
            return _pyEMsoft.f90wrap_symdata__get__sym_trigonal(self._handle)
        
        @sym_trigonal.setter
        def sym_trigonal(self, sym_trigonal):
            _pyEMsoft.f90wrap_symdata__set__sym_trigonal(self._handle, sym_trigonal)
        
        @property
        def sym_second(self):
            """
            Element sym_second ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 553
            
            """
            return _pyEMsoft.f90wrap_symdata__get__sym_second(self._handle)
        
        @sym_second.setter
        def sym_second(self, sym_second):
            _pyEMsoft.f90wrap_symdata__set__sym_second(self._handle, sym_second)
        
        @property
        def sym_centrosym(self):
            """
            Element sym_centrosym ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 554
            
            """
            return _pyEMsoft.f90wrap_symdata__get__sym_centrosym(self._handle)
        
        @sym_centrosym.setter
        def sym_centrosym(self, sym_centrosym):
            _pyEMsoft.f90wrap_symdata__set__sym_centrosym(self._handle, sym_centrosym)
        
        @property
        def sym_data(self):
            """
            Element sym_data ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 555
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_symdata__array__sym_data(self._handle)
            if array_handle in self._arrays:
                sym_data = self._arrays[array_handle]
            else:
                sym_data = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_symdata__array__sym_data)
                self._arrays[array_handle] = sym_data
            return sym_data
        
        @sym_data.setter
        def sym_data(self, sym_data):
            self.sym_data[...] = sym_data
        
        @property
        def sym_direc(self):
            """
            Element sym_direc ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 556
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_symdata__array__sym_direc(self._handle)
            if array_handle in self._arrays:
                sym_direc = self._arrays[array_handle]
            else:
                sym_direc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_symdata__array__sym_direc)
                self._arrays[array_handle] = sym_direc
            return sym_direc
        
        @sym_direc.setter
        def sym_direc(self, sym_direc):
            self.sym_direc[...] = sym_direc
        
        @property
        def sym_recip(self):
            """
            Element sym_recip ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 557
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_symdata__array__sym_recip(self._handle)
            if array_handle in self._arrays:
                sym_recip = self._arrays[array_handle]
            else:
                sym_recip = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_symdata__array__sym_recip)
                self._arrays[array_handle] = sym_recip
            return sym_recip
        
        @sym_recip.setter
        def sym_recip(self, sym_recip):
            self.sym_recip[...] = sym_recip
        
        @property
        def sym_c(self):
            """
            Element sym_c ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 558
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_symdata__array__sym_c(self._handle)
            if array_handle in self._arrays:
                sym_c = self._arrays[array_handle]
            else:
                sym_c = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_symdata__array__sym_c)
                self._arrays[array_handle] = sym_c
            return sym_c
        
        @sym_c.setter
        def sym_c(self, sym_c):
            self.sym_c[...] = sym_c
        
        @property
        def sym_name(self):
            """
            Element sym_name ftype=character(11) pytype=str
            
            
            Defined at typedefs.f90 line 559
            
            """
            return _pyEMsoft.f90wrap_symdata__get__sym_name(self._handle)
        
        @sym_name.setter
        def sym_name(self, sym_name):
            _pyEMsoft.f90wrap_symdata__set__sym_name(self._handle, sym_name)
        
        def __str__(self):
            ret = ['<symdata>{\n']
            ret.append('    sym_gennum : ')
            ret.append(repr(self.sym_gennum))
            ret.append(',\n    sym_matnum : ')
            ret.append(repr(self.sym_matnum))
            ret.append(',\n    sym_numpt : ')
            ret.append(repr(self.sym_numpt))
            ret.append(',\n    sym_reduce : ')
            ret.append(repr(self.sym_reduce))
            ret.append(',\n    sym_trigonal : ')
            ret.append(repr(self.sym_trigonal))
            ret.append(',\n    sym_second : ')
            ret.append(repr(self.sym_second))
            ret.append(',\n    sym_centrosym : ')
            ret.append(repr(self.sym_centrosym))
            ret.append(',\n    sym_data : ')
            ret.append(repr(self.sym_data))
            ret.append(',\n    sym_direc : ')
            ret.append(repr(self.sym_direc))
            ret.append(',\n    sym_recip : ')
            ret.append(repr(self.sym_recip))
            ret.append(',\n    sym_c : ')
            ret.append(repr(self.sym_c))
            ret.append(',\n    sym_name : ')
            ret.append(repr(self.sym_name))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.symdata2D")
    class symdata2D(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=symdata2d)
        
        
        Defined at typedefs.f90 lines 568-571
        
        """
        def __init__(self, handle=None):
            """
            self = Symdata2D()
            
            
            Defined at typedefs.f90 lines 568-571
            
            
            Returns
            -------
            this : Symdata2D
            	Object to be constructed
            
            
            Automatically generated constructor for symdata2d
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_symdata2d_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Symdata2D
            
            
            Defined at typedefs.f90 lines 568-571
            
            Parameters
            ----------
            this : Symdata2D
            	Object to be destructed
            
            
            Automatically generated destructor for symdata2d
            """
            if self._alloc:
                _pyEMsoft.f90wrap_symdata2d_finalise(this=self._handle)
        
        @property
        def sym_pgnum(self):
            """
            Element sym_pgnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 569
            
            """
            return _pyEMsoft.f90wrap_symdata2d__get__sym_pgnum(self._handle)
        
        @sym_pgnum.setter
        def sym_pgnum(self, sym_pgnum):
            _pyEMsoft.f90wrap_symdata2d__set__sym_pgnum(self._handle, sym_pgnum)
        
        @property
        def sym_matnum(self):
            """
            Element sym_matnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 570
            
            """
            return _pyEMsoft.f90wrap_symdata2d__get__sym_matnum(self._handle)
        
        @sym_matnum.setter
        def sym_matnum(self, sym_matnum):
            _pyEMsoft.f90wrap_symdata2d__set__sym_matnum(self._handle, sym_matnum)
        
        @property
        def sym_direc(self):
            """
            Element sym_direc ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 571
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_symdata2d__array__sym_direc(self._handle)
            if array_handle in self._arrays:
                sym_direc = self._arrays[array_handle]
            else:
                sym_direc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_symdata2d__array__sym_direc)
                self._arrays[array_handle] = sym_direc
            return sym_direc
        
        @sym_direc.setter
        def sym_direc(self, sym_direc):
            self.sym_direc[...] = sym_direc
        
        def __str__(self):
            ret = ['<symdata2d>{\n']
            ret.append('    sym_pgnum : ')
            ret.append(repr(self.sym_pgnum))
            ret.append(',\n    sym_matnum : ')
            ret.append(repr(self.sym_matnum))
            ret.append(',\n    sym_direc : ')
            ret.append(repr(self.sym_direc))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.reflisttype")
    class reflisttype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=reflisttype)
        
        
        Defined at typedefs.f90 lines 836-857
        
        """
        def __init__(self, handle=None):
            """
            self = Reflisttype()
            
            
            Defined at typedefs.f90 lines 836-857
            
            
            Returns
            -------
            this : Reflisttype
            	Object to be constructed
            
            
            Automatically generated constructor for reflisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_reflisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Reflisttype
            
            
            Defined at typedefs.f90 lines 836-857
            
            Parameters
            ----------
            this : Reflisttype
            	Object to be destructed
            
            
            Automatically generated destructor for reflisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_reflisttype_finalise(this=self._handle)
        
        @property
        def num(self):
            """
            Element num ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 844
            
            """
            return _pyEMsoft.f90wrap_reflisttype__get__num(self._handle)
        
        @num.setter
        def num(self, num):
            _pyEMsoft.f90wrap_reflisttype__set__num(self._handle, num)
        
        @property
        def hkl(self):
            """
            Element hkl ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 844
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_reflisttype__array__hkl(self._handle)
            if array_handle in self._arrays:
                hkl = self._arrays[array_handle]
            else:
                hkl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_reflisttype__array__hkl)
                self._arrays[array_handle] = hkl
            return hkl
        
        @hkl.setter
        def hkl(self, hkl):
            self.hkl[...] = hkl
        
        @property
        def famhkl(self):
            """
            Element famhkl ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 844
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_reflisttype__array__famhkl(self._handle)
            if array_handle in self._arrays:
                famhkl = self._arrays[array_handle]
            else:
                famhkl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_reflisttype__array__famhkl)
                self._arrays[array_handle] = famhkl
            return famhkl
        
        @famhkl.setter
        def famhkl(self, famhkl):
            self.famhkl[...] = famhkl
        
        @property
        def holzn(self):
            """
            Element holzn ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 844
            
            """
            return _pyEMsoft.f90wrap_reflisttype__get__holzn(self._handle)
        
        @holzn.setter
        def holzn(self, holzn):
            _pyEMsoft.f90wrap_reflisttype__set__holzn(self._handle, holzn)
        
        @property
        def strongnum(self):
            """
            Element strongnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 844
            
            """
            return _pyEMsoft.f90wrap_reflisttype__get__strongnum(self._handle)
        
        @strongnum.setter
        def strongnum(self, strongnum):
            _pyEMsoft.f90wrap_reflisttype__set__strongnum(self._handle, strongnum)
        
        @property
        def weaknum(self):
            """
            Element weaknum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 844
            
            """
            return _pyEMsoft.f90wrap_reflisttype__get__weaknum(self._handle)
        
        @weaknum.setter
        def weaknum(self, weaknum):
            _pyEMsoft.f90wrap_reflisttype__set__weaknum(self._handle, weaknum)
        
        @property
        def famnum(self):
            """
            Element famnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 844
            
            """
            return _pyEMsoft.f90wrap_reflisttype__get__famnum(self._handle)
        
        @famnum.setter
        def famnum(self, famnum):
            _pyEMsoft.f90wrap_reflisttype__set__famnum(self._handle, famnum)
        
        @property
        def nab(self):
            """
            Element nab ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 844
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_reflisttype__array__nab(self._handle)
            if array_handle in self._arrays:
                nab = self._arrays[array_handle]
            else:
                nab = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_reflisttype__array__nab)
                self._arrays[array_handle] = nab
            return nab
        
        @nab.setter
        def nab(self, nab):
            self.nab[...] = nab
        
        @property
        def dbdiff(self):
            """
            Element dbdiff ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 845
            
            """
            return _pyEMsoft.f90wrap_reflisttype__get__dbdiff(self._handle)
        
        @dbdiff.setter
        def dbdiff(self, dbdiff):
            _pyEMsoft.f90wrap_reflisttype__set__dbdiff(self._handle, dbdiff)
        
        @property
        def sg(self):
            """
            Element sg ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 850
            
            """
            return _pyEMsoft.f90wrap_reflisttype__get__sg(self._handle)
        
        @sg.setter
        def sg(self, sg):
            _pyEMsoft.f90wrap_reflisttype__set__sg(self._handle, sg)
        
        @property
        def xg(self):
            """
            Element xg ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 850
            
            """
            return _pyEMsoft.f90wrap_reflisttype__get__xg(self._handle)
        
        @xg.setter
        def xg(self, xg):
            _pyEMsoft.f90wrap_reflisttype__set__xg(self._handle, xg)
        
        @property
        def sangle(self):
            """
            Element sangle ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 850
            
            """
            return _pyEMsoft.f90wrap_reflisttype__get__sangle(self._handle)
        
        @sangle.setter
        def sangle(self, sangle):
            _pyEMsoft.f90wrap_reflisttype__set__sangle(self._handle, sangle)
        
        @property
        def thetag(self):
            """
            Element thetag ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 850
            
            """
            return _pyEMsoft.f90wrap_reflisttype__get__thetag(self._handle)
        
        @thetag.setter
        def thetag(self, thetag):
            _pyEMsoft.f90wrap_reflisttype__set__thetag(self._handle, thetag)
        
        @property
        def strong(self):
            """
            Element strong ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 851
            
            """
            return _pyEMsoft.f90wrap_reflisttype__get__strong(self._handle)
        
        @strong.setter
        def strong(self, strong):
            _pyEMsoft.f90wrap_reflisttype__set__strong(self._handle, strong)
        
        @property
        def weak(self):
            """
            Element weak ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 851
            
            """
            return _pyEMsoft.f90wrap_reflisttype__get__weak(self._handle)
        
        @weak.setter
        def weak(self, weak):
            _pyEMsoft.f90wrap_reflisttype__set__weak(self._handle, weak)
        
        @property
        def variant(self):
            """
            Element variant ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 852
            
            """
            return _pyEMsoft.f90wrap_reflisttype__get__variant(self._handle)
        
        @variant.setter
        def variant(self, variant):
            _pyEMsoft.f90wrap_reflisttype__set__variant(self._handle, variant)
        
        @property
        def ucg(self):
            """
            Element ucg ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 853
            
            """
            return _pyEMsoft.f90wrap_reflisttype__get__ucg(self._handle)
        
        @ucg.setter
        def ucg(self, ucg):
            _pyEMsoft.f90wrap_reflisttype__set__ucg(self._handle, ucg)
        
        @property
        def qg(self):
            """
            Element qg ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 854
            
            """
            return _pyEMsoft.f90wrap_reflisttype__get__qg(self._handle)
        
        @qg.setter
        def qg(self, qg):
            _pyEMsoft.f90wrap_reflisttype__set__qg(self._handle, qg)
        
        @property
        def next(self):
            """
            Element next ftype=type(reflisttype) pytype=Reflisttype
            
            
            Defined at typedefs.f90 line 855
            
            """
            next_handle = _pyEMsoft.f90wrap_reflisttype__get__next(self._handle)
            if tuple(next_handle) in self._objs:
                next = self._objs[tuple(next_handle)]
            else:
                next = typedefs.reflisttype.from_handle(next_handle)
                self._objs[tuple(next_handle)] = next
            return next
        
        @next.setter
        def next(self, next):
            next = next._handle
            _pyEMsoft.f90wrap_reflisttype__set__next(self._handle, next)
        
        @property
        def nexts(self):
            """
            Element nexts ftype=type(reflisttype) pytype=Reflisttype
            
            
            Defined at typedefs.f90 line 856
            
            """
            nexts_handle = _pyEMsoft.f90wrap_reflisttype__get__nexts(self._handle)
            if tuple(nexts_handle) in self._objs:
                nexts = self._objs[tuple(nexts_handle)]
            else:
                nexts = typedefs.reflisttype.from_handle(nexts_handle)
                self._objs[tuple(nexts_handle)] = nexts
            return nexts
        
        @nexts.setter
        def nexts(self, nexts):
            nexts = nexts._handle
            _pyEMsoft.f90wrap_reflisttype__set__nexts(self._handle, nexts)
        
        @property
        def nextw(self):
            """
            Element nextw ftype=type(reflisttype) pytype=Reflisttype
            
            
            Defined at typedefs.f90 line 857
            
            """
            nextw_handle = _pyEMsoft.f90wrap_reflisttype__get__nextw(self._handle)
            if tuple(nextw_handle) in self._objs:
                nextw = self._objs[tuple(nextw_handle)]
            else:
                nextw = typedefs.reflisttype.from_handle(nextw_handle)
                self._objs[tuple(nextw_handle)] = nextw
            return nextw
        
        @nextw.setter
        def nextw(self, nextw):
            nextw = nextw._handle
            _pyEMsoft.f90wrap_reflisttype__set__nextw(self._handle, nextw)
        
        def __str__(self):
            ret = ['<reflisttype>{\n']
            ret.append('    num : ')
            ret.append(repr(self.num))
            ret.append(',\n    hkl : ')
            ret.append(repr(self.hkl))
            ret.append(',\n    famhkl : ')
            ret.append(repr(self.famhkl))
            ret.append(',\n    holzn : ')
            ret.append(repr(self.holzn))
            ret.append(',\n    strongnum : ')
            ret.append(repr(self.strongnum))
            ret.append(',\n    weaknum : ')
            ret.append(repr(self.weaknum))
            ret.append(',\n    famnum : ')
            ret.append(repr(self.famnum))
            ret.append(',\n    nab : ')
            ret.append(repr(self.nab))
            ret.append(',\n    dbdiff : ')
            ret.append(repr(self.dbdiff))
            ret.append(',\n    sg : ')
            ret.append(repr(self.sg))
            ret.append(',\n    xg : ')
            ret.append(repr(self.xg))
            ret.append(',\n    sangle : ')
            ret.append(repr(self.sangle))
            ret.append(',\n    thetag : ')
            ret.append(repr(self.thetag))
            ret.append(',\n    strong : ')
            ret.append(repr(self.strong))
            ret.append(',\n    weak : ')
            ret.append(repr(self.weak))
            ret.append(',\n    variant : ')
            ret.append(repr(self.variant))
            ret.append(',\n    ucg : ')
            ret.append(repr(self.ucg))
            ret.append(',\n    qg : ')
            ret.append(repr(self.qg))
            ret.append(',\n    next : ')
            ret.append(repr(self.next))
            ret.append(',\n    nexts : ')
            ret.append(repr(self.nexts))
            ret.append(',\n    nextw : ')
            ret.append(repr(self.nextw))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.QCreflisttype")
    class QCreflisttype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=qcreflisttype)
        
        
        Defined at typedefs.f90 lines 860-873
        
        """
        def __init__(self, handle=None):
            """
            self = Qcreflisttype()
            
            
            Defined at typedefs.f90 lines 860-873
            
            
            Returns
            -------
            this : Qcreflisttype
            	Object to be constructed
            
            
            Automatically generated constructor for qcreflisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_qcreflisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Qcreflisttype
            
            
            Defined at typedefs.f90 lines 860-873
            
            Parameters
            ----------
            this : Qcreflisttype
            	Object to be destructed
            
            
            Automatically generated destructor for qcreflisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_qcreflisttype_finalise(this=self._handle)
        
        @property
        def num(self):
            """
            Element num ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 864
            
            """
            return _pyEMsoft.f90wrap_qcreflisttype__get__num(self._handle)
        
        @num.setter
        def num(self, num):
            _pyEMsoft.f90wrap_qcreflisttype__set__num(self._handle, num)
        
        @property
        def hkl(self):
            """
            Element hkl ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 864
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcreflisttype__array__hkl(self._handle)
            if array_handle in self._arrays:
                hkl = self._arrays[array_handle]
            else:
                hkl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcreflisttype__array__hkl)
                self._arrays[array_handle] = hkl
            return hkl
        
        @hkl.setter
        def hkl(self, hkl):
            self.hkl[...] = hkl
        
        @property
        def strongnum(self):
            """
            Element strongnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 864
            
            """
            return _pyEMsoft.f90wrap_qcreflisttype__get__strongnum(self._handle)
        
        @strongnum.setter
        def strongnum(self, strongnum):
            _pyEMsoft.f90wrap_qcreflisttype__set__strongnum(self._handle, strongnum)
        
        @property
        def weaknum(self):
            """
            Element weaknum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 864
            
            """
            return _pyEMsoft.f90wrap_qcreflisttype__get__weaknum(self._handle)
        
        @weaknum.setter
        def weaknum(self, weaknum):
            _pyEMsoft.f90wrap_qcreflisttype__set__weaknum(self._handle, weaknum)
        
        @property
        def sg(self):
            """
            Element sg ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 867
            
            """
            return _pyEMsoft.f90wrap_qcreflisttype__get__sg(self._handle)
        
        @sg.setter
        def sg(self, sg):
            _pyEMsoft.f90wrap_qcreflisttype__set__sg(self._handle, sg)
        
        @property
        def xg(self):
            """
            Element xg ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 867
            
            """
            return _pyEMsoft.f90wrap_qcreflisttype__get__xg(self._handle)
        
        @xg.setter
        def xg(self, xg):
            _pyEMsoft.f90wrap_qcreflisttype__set__xg(self._handle, xg)
        
        @property
        def glen(self):
            """
            Element glen ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 867
            
            """
            return _pyEMsoft.f90wrap_qcreflisttype__get__glen(self._handle)
        
        @glen.setter
        def glen(self, glen):
            _pyEMsoft.f90wrap_qcreflisttype__set__glen(self._handle, glen)
        
        @property
        def strong(self):
            """
            Element strong ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 868
            
            """
            return _pyEMsoft.f90wrap_qcreflisttype__get__strong(self._handle)
        
        @strong.setter
        def strong(self, strong):
            _pyEMsoft.f90wrap_qcreflisttype__set__strong(self._handle, strong)
        
        @property
        def weak(self):
            """
            Element weak ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 868
            
            """
            return _pyEMsoft.f90wrap_qcreflisttype__get__weak(self._handle)
        
        @weak.setter
        def weak(self, weak):
            _pyEMsoft.f90wrap_qcreflisttype__set__weak(self._handle, weak)
        
        @property
        def ucg(self):
            """
            Element ucg ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 869
            
            """
            return _pyEMsoft.f90wrap_qcreflisttype__get__ucg(self._handle)
        
        @ucg.setter
        def ucg(self, ucg):
            _pyEMsoft.f90wrap_qcreflisttype__set__ucg(self._handle, ucg)
        
        @property
        def qg(self):
            """
            Element qg ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 870
            
            """
            return _pyEMsoft.f90wrap_qcreflisttype__get__qg(self._handle)
        
        @qg.setter
        def qg(self, qg):
            _pyEMsoft.f90wrap_qcreflisttype__set__qg(self._handle, qg)
        
        @property
        def next(self):
            """
            Element next ftype=type(qcreflisttype) pytype=Qcreflisttype
            
            
            Defined at typedefs.f90 line 871
            
            """
            next_handle = _pyEMsoft.f90wrap_qcreflisttype__get__next(self._handle)
            if tuple(next_handle) in self._objs:
                next = self._objs[tuple(next_handle)]
            else:
                next = typedefs.QCreflisttype.from_handle(next_handle)
                self._objs[tuple(next_handle)] = next
            return next
        
        @next.setter
        def next(self, next):
            next = next._handle
            _pyEMsoft.f90wrap_qcreflisttype__set__next(self._handle, next)
        
        @property
        def nexts(self):
            """
            Element nexts ftype=type(qcreflisttype) pytype=Qcreflisttype
            
            
            Defined at typedefs.f90 line 872
            
            """
            nexts_handle = _pyEMsoft.f90wrap_qcreflisttype__get__nexts(self._handle)
            if tuple(nexts_handle) in self._objs:
                nexts = self._objs[tuple(nexts_handle)]
            else:
                nexts = typedefs.QCreflisttype.from_handle(nexts_handle)
                self._objs[tuple(nexts_handle)] = nexts
            return nexts
        
        @nexts.setter
        def nexts(self, nexts):
            nexts = nexts._handle
            _pyEMsoft.f90wrap_qcreflisttype__set__nexts(self._handle, nexts)
        
        @property
        def nextw(self):
            """
            Element nextw ftype=type(qcreflisttype) pytype=Qcreflisttype
            
            
            Defined at typedefs.f90 line 873
            
            """
            nextw_handle = _pyEMsoft.f90wrap_qcreflisttype__get__nextw(self._handle)
            if tuple(nextw_handle) in self._objs:
                nextw = self._objs[tuple(nextw_handle)]
            else:
                nextw = typedefs.QCreflisttype.from_handle(nextw_handle)
                self._objs[tuple(nextw_handle)] = nextw
            return nextw
        
        @nextw.setter
        def nextw(self, nextw):
            nextw = nextw._handle
            _pyEMsoft.f90wrap_qcreflisttype__set__nextw(self._handle, nextw)
        
        def __str__(self):
            ret = ['<qcreflisttype>{\n']
            ret.append('    num : ')
            ret.append(repr(self.num))
            ret.append(',\n    hkl : ')
            ret.append(repr(self.hkl))
            ret.append(',\n    strongnum : ')
            ret.append(repr(self.strongnum))
            ret.append(',\n    weaknum : ')
            ret.append(repr(self.weaknum))
            ret.append(',\n    sg : ')
            ret.append(repr(self.sg))
            ret.append(',\n    xg : ')
            ret.append(repr(self.xg))
            ret.append(',\n    glen : ')
            ret.append(repr(self.glen))
            ret.append(',\n    strong : ')
            ret.append(repr(self.strong))
            ret.append(',\n    weak : ')
            ret.append(repr(self.weak))
            ret.append(',\n    ucg : ')
            ret.append(repr(self.ucg))
            ret.append(',\n    qg : ')
            ret.append(repr(self.qg))
            ret.append(',\n    next : ')
            ret.append(repr(self.next))
            ret.append(',\n    nexts : ')
            ret.append(repr(self.nexts))
            ret.append(',\n    nextw : ')
            ret.append(repr(self.nextw))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.TDQCreflisttype")
    class TDQCreflisttype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=tdqcreflisttype)
        
        
        Defined at typedefs.f90 lines 876-889
        
        """
        def __init__(self, handle=None):
            """
            self = Tdqcreflisttype()
            
            
            Defined at typedefs.f90 lines 876-889
            
            
            Returns
            -------
            this : Tdqcreflisttype
            	Object to be constructed
            
            
            Automatically generated constructor for tdqcreflisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_tdqcreflisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Tdqcreflisttype
            
            
            Defined at typedefs.f90 lines 876-889
            
            Parameters
            ----------
            this : Tdqcreflisttype
            	Object to be destructed
            
            
            Automatically generated destructor for tdqcreflisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_tdqcreflisttype_finalise(this=self._handle)
        
        @property
        def num(self):
            """
            Element num ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 880
            
            """
            return _pyEMsoft.f90wrap_tdqcreflisttype__get__num(self._handle)
        
        @num.setter
        def num(self, num):
            _pyEMsoft.f90wrap_tdqcreflisttype__set__num(self._handle, num)
        
        @property
        def hkl(self):
            """
            Element hkl ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 880
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcreflisttype__array__hkl(self._handle)
            if array_handle in self._arrays:
                hkl = self._arrays[array_handle]
            else:
                hkl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcreflisttype__array__hkl)
                self._arrays[array_handle] = hkl
            return hkl
        
        @hkl.setter
        def hkl(self, hkl):
            self.hkl[...] = hkl
        
        @property
        def strongnum(self):
            """
            Element strongnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 880
            
            """
            return _pyEMsoft.f90wrap_tdqcreflisttype__get__strongnum(self._handle)
        
        @strongnum.setter
        def strongnum(self, strongnum):
            _pyEMsoft.f90wrap_tdqcreflisttype__set__strongnum(self._handle, strongnum)
        
        @property
        def weaknum(self):
            """
            Element weaknum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 880
            
            """
            return _pyEMsoft.f90wrap_tdqcreflisttype__get__weaknum(self._handle)
        
        @weaknum.setter
        def weaknum(self, weaknum):
            _pyEMsoft.f90wrap_tdqcreflisttype__set__weaknum(self._handle, weaknum)
        
        @property
        def sg(self):
            """
            Element sg ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 883
            
            """
            return _pyEMsoft.f90wrap_tdqcreflisttype__get__sg(self._handle)
        
        @sg.setter
        def sg(self, sg):
            _pyEMsoft.f90wrap_tdqcreflisttype__set__sg(self._handle, sg)
        
        @property
        def xg(self):
            """
            Element xg ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 883
            
            """
            return _pyEMsoft.f90wrap_tdqcreflisttype__get__xg(self._handle)
        
        @xg.setter
        def xg(self, xg):
            _pyEMsoft.f90wrap_tdqcreflisttype__set__xg(self._handle, xg)
        
        @property
        def glen(self):
            """
            Element glen ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 883
            
            """
            return _pyEMsoft.f90wrap_tdqcreflisttype__get__glen(self._handle)
        
        @glen.setter
        def glen(self, glen):
            _pyEMsoft.f90wrap_tdqcreflisttype__set__glen(self._handle, glen)
        
        @property
        def strong(self):
            """
            Element strong ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 884
            
            """
            return _pyEMsoft.f90wrap_tdqcreflisttype__get__strong(self._handle)
        
        @strong.setter
        def strong(self, strong):
            _pyEMsoft.f90wrap_tdqcreflisttype__set__strong(self._handle, strong)
        
        @property
        def weak(self):
            """
            Element weak ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 884
            
            """
            return _pyEMsoft.f90wrap_tdqcreflisttype__get__weak(self._handle)
        
        @weak.setter
        def weak(self, weak):
            _pyEMsoft.f90wrap_tdqcreflisttype__set__weak(self._handle, weak)
        
        @property
        def ucg(self):
            """
            Element ucg ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 885
            
            """
            return _pyEMsoft.f90wrap_tdqcreflisttype__get__ucg(self._handle)
        
        @ucg.setter
        def ucg(self, ucg):
            _pyEMsoft.f90wrap_tdqcreflisttype__set__ucg(self._handle, ucg)
        
        @property
        def qg(self):
            """
            Element qg ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 886
            
            """
            return _pyEMsoft.f90wrap_tdqcreflisttype__get__qg(self._handle)
        
        @qg.setter
        def qg(self, qg):
            _pyEMsoft.f90wrap_tdqcreflisttype__set__qg(self._handle, qg)
        
        @property
        def next(self):
            """
            Element next ftype=type(tdqcreflisttype) pytype=Tdqcreflisttype
            
            
            Defined at typedefs.f90 line 887
            
            """
            next_handle = _pyEMsoft.f90wrap_tdqcreflisttype__get__next(self._handle)
            if tuple(next_handle) in self._objs:
                next = self._objs[tuple(next_handle)]
            else:
                next = typedefs.TDQCreflisttype.from_handle(next_handle)
                self._objs[tuple(next_handle)] = next
            return next
        
        @next.setter
        def next(self, next):
            next = next._handle
            _pyEMsoft.f90wrap_tdqcreflisttype__set__next(self._handle, next)
        
        @property
        def nexts(self):
            """
            Element nexts ftype=type(tdqcreflisttype) pytype=Tdqcreflisttype
            
            
            Defined at typedefs.f90 line 888
            
            """
            nexts_handle = _pyEMsoft.f90wrap_tdqcreflisttype__get__nexts(self._handle)
            if tuple(nexts_handle) in self._objs:
                nexts = self._objs[tuple(nexts_handle)]
            else:
                nexts = typedefs.TDQCreflisttype.from_handle(nexts_handle)
                self._objs[tuple(nexts_handle)] = nexts
            return nexts
        
        @nexts.setter
        def nexts(self, nexts):
            nexts = nexts._handle
            _pyEMsoft.f90wrap_tdqcreflisttype__set__nexts(self._handle, nexts)
        
        @property
        def nextw(self):
            """
            Element nextw ftype=type(tdqcreflisttype) pytype=Tdqcreflisttype
            
            
            Defined at typedefs.f90 line 889
            
            """
            nextw_handle = _pyEMsoft.f90wrap_tdqcreflisttype__get__nextw(self._handle)
            if tuple(nextw_handle) in self._objs:
                nextw = self._objs[tuple(nextw_handle)]
            else:
                nextw = typedefs.TDQCreflisttype.from_handle(nextw_handle)
                self._objs[tuple(nextw_handle)] = nextw
            return nextw
        
        @nextw.setter
        def nextw(self, nextw):
            nextw = nextw._handle
            _pyEMsoft.f90wrap_tdqcreflisttype__set__nextw(self._handle, nextw)
        
        def __str__(self):
            ret = ['<tdqcreflisttype>{\n']
            ret.append('    num : ')
            ret.append(repr(self.num))
            ret.append(',\n    hkl : ')
            ret.append(repr(self.hkl))
            ret.append(',\n    strongnum : ')
            ret.append(repr(self.strongnum))
            ret.append(',\n    weaknum : ')
            ret.append(repr(self.weaknum))
            ret.append(',\n    sg : ')
            ret.append(repr(self.sg))
            ret.append(',\n    xg : ')
            ret.append(repr(self.xg))
            ret.append(',\n    glen : ')
            ret.append(repr(self.glen))
            ret.append(',\n    strong : ')
            ret.append(repr(self.strong))
            ret.append(',\n    weak : ')
            ret.append(repr(self.weak))
            ret.append(',\n    ucg : ')
            ret.append(repr(self.ucg))
            ret.append(',\n    qg : ')
            ret.append(repr(self.qg))
            ret.append(',\n    next : ')
            ret.append(repr(self.next))
            ret.append(',\n    nexts : ')
            ret.append(repr(self.nexts))
            ret.append(',\n    nextw : ')
            ret.append(repr(self.nextw))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.refliststrongsubstype")
    class refliststrongsubstype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=refliststrongsubstype)
        
        
        Defined at typedefs.f90 lines 902-908
        
        """
        def __init__(self, handle=None):
            """
            self = Refliststrongsubstype()
            
            
            Defined at typedefs.f90 lines 902-908
            
            
            Returns
            -------
            this : Refliststrongsubstype
            	Object to be constructed
            
            
            Automatically generated constructor for refliststrongsubstype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_refliststrongsubstype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Refliststrongsubstype
            
            
            Defined at typedefs.f90 lines 902-908
            
            Parameters
            ----------
            this : Refliststrongsubstype
            	Object to be destructed
            
            
            Automatically generated destructor for refliststrongsubstype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_refliststrongsubstype_finalise(this=self._handle)
        
        @property
        def hlist(self):
            """
            Element hlist ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 903
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_refliststrongsubstype__array__hlist(self._handle)
            if array_handle in self._arrays:
                hlist = self._arrays[array_handle]
            else:
                hlist = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_refliststrongsubstype__array__hlist)
                self._arrays[array_handle] = hlist
            return hlist
        
        @hlist.setter
        def hlist(self, hlist):
            self.hlist[...] = hlist
        
        @property
        def dynmat(self):
            """
            Element dynmat ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 904
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_refliststrongsubstype__array__dynmat(self._handle)
            if array_handle in self._arrays:
                dynmat = self._arrays[array_handle]
            else:
                dynmat = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_refliststrongsubstype__array__dynmat)
                self._arrays[array_handle] = dynmat
            return dynmat
        
        @dynmat.setter
        def dynmat(self, dynmat):
            self.dynmat[...] = dynmat
        
        @property
        def kg(self):
            """
            Element kg ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 905
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_refliststrongsubstype__array__kg(self._handle)
            if array_handle in self._arrays:
                kg = self._arrays[array_handle]
            else:
                kg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_refliststrongsubstype__array__kg)
                self._arrays[array_handle] = kg
            return kg
        
        @kg.setter
        def kg(self, kg):
            self.kg[...] = kg
        
        @property
        def g(self):
            """
            Element g ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 906
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_refliststrongsubstype__array__g(self._handle)
            if array_handle in self._arrays:
                g = self._arrays[array_handle]
            else:
                g = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_refliststrongsubstype__array__g)
                self._arrays[array_handle] = g
            return g
        
        @g.setter
        def g(self, g):
            self.g[...] = g
        
        @property
        def nns(self):
            """
            Element nns ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 907
            
            """
            return _pyEMsoft.f90wrap_refliststrongsubstype__get__nns(self._handle)
        
        @nns.setter
        def nns(self, nns):
            _pyEMsoft.f90wrap_refliststrongsubstype__set__nns(self._handle, nns)
        
        @property
        def next(self):
            """
            Element next ftype=type(refliststrongsubstype) pytype=Refliststrongsubstype
            
            
            Defined at typedefs.f90 line 908
            
            """
            next_handle = _pyEMsoft.f90wrap_refliststrongsubstype__get__next(self._handle)
            if tuple(next_handle) in self._objs:
                next = self._objs[tuple(next_handle)]
            else:
                next = typedefs.refliststrongsubstype.from_handle(next_handle)
                self._objs[tuple(next_handle)] = next
            return next
        
        @next.setter
        def next(self, next):
            next = next._handle
            _pyEMsoft.f90wrap_refliststrongsubstype__set__next(self._handle, next)
        
        def __str__(self):
            ret = ['<refliststrongsubstype>{\n']
            ret.append('    hlist : ')
            ret.append(repr(self.hlist))
            ret.append(',\n    dynmat : ')
            ret.append(repr(self.dynmat))
            ret.append(',\n    kg : ')
            ret.append(repr(self.kg))
            ret.append(',\n    g : ')
            ret.append(repr(self.g))
            ret.append(',\n    nns : ')
            ret.append(repr(self.nns))
            ret.append(',\n    next : ')
            ret.append(repr(self.next))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.Laue_g_list")
    class Laue_g_list(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=laue_g_list)
        
        
        Defined at typedefs.f90 lines 914-920
        
        """
        def __init__(self, handle=None):
            """
            self = Laue_G_List()
            
            
            Defined at typedefs.f90 lines 914-920
            
            
            Returns
            -------
            this : Laue_G_List
            	Object to be constructed
            
            
            Automatically generated constructor for laue_g_list
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_laue_g_list_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Laue_G_List
            
            
            Defined at typedefs.f90 lines 914-920
            
            Parameters
            ----------
            this : Laue_G_List
            	Object to be destructed
            
            
            Automatically generated destructor for laue_g_list
            """
            if self._alloc:
                _pyEMsoft.f90wrap_laue_g_list_finalise(this=self._handle)
        
        @property
        def hkl(self):
            """
            Element hkl ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 915
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_laue_g_list__array__hkl(self._handle)
            if array_handle in self._arrays:
                hkl = self._arrays[array_handle]
            else:
                hkl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_laue_g_list__array__hkl)
                self._arrays[array_handle] = hkl
            return hkl
        
        @hkl.setter
        def hkl(self, hkl):
            self.hkl[...] = hkl
        
        @property
        def xyz(self):
            """
            Element xyz ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 916
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_laue_g_list__array__xyz(self._handle)
            if array_handle in self._arrays:
                xyz = self._arrays[array_handle]
            else:
                xyz = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_laue_g_list__array__xyz)
                self._arrays[array_handle] = xyz
            return xyz
        
        @xyz.setter
        def xyz(self, xyz):
            self.xyz[...] = xyz
        
        @property
        def polar(self):
            """
            Element polar ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 918
            
            """
            return _pyEMsoft.f90wrap_laue_g_list__get__polar(self._handle)
        
        @polar.setter
        def polar(self, polar):
            _pyEMsoft.f90wrap_laue_g_list__set__polar(self._handle, polar)
        
        @property
        def sfs(self):
            """
            Element sfs ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 919
            
            """
            return _pyEMsoft.f90wrap_laue_g_list__get__sfs(self._handle)
        
        @sfs.setter
        def sfs(self, sfs):
            _pyEMsoft.f90wrap_laue_g_list__set__sfs(self._handle, sfs)
        
        @property
        def next(self):
            """
            Element next ftype=type(laue_g_list) pytype=Laue_G_List
            
            
            Defined at typedefs.f90 line 920
            
            """
            next_handle = _pyEMsoft.f90wrap_laue_g_list__get__next(self._handle)
            if tuple(next_handle) in self._objs:
                next = self._objs[tuple(next_handle)]
            else:
                next = typedefs.Laue_g_list.from_handle(next_handle)
                self._objs[tuple(next_handle)] = next
            return next
        
        @next.setter
        def next(self, next):
            next = next._handle
            _pyEMsoft.f90wrap_laue_g_list__set__next(self._handle, next)
        
        def __str__(self):
            ret = ['<laue_g_list>{\n']
            ret.append('    hkl : ')
            ret.append(repr(self.hkl))
            ret.append(',\n    xyz : ')
            ret.append(repr(self.xyz))
            ret.append(',\n    polar : ')
            ret.append(repr(self.polar))
            ret.append(',\n    sfs : ')
            ret.append(repr(self.sfs))
            ret.append(',\n    next : ')
            ret.append(repr(self.next))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.Laue_grow_list")
    class Laue_grow_list(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=laue_grow_list)
        
        
        Defined at typedefs.f90 lines 922-928
        
        """
        def __init__(self, handle=None):
            """
            self = Laue_Grow_List()
            
            
            Defined at typedefs.f90 lines 922-928
            
            
            Returns
            -------
            this : Laue_Grow_List
            	Object to be constructed
            
            
            Automatically generated constructor for laue_grow_list
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_laue_grow_list_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Laue_Grow_List
            
            
            Defined at typedefs.f90 lines 922-928
            
            Parameters
            ----------
            this : Laue_Grow_List
            	Object to be destructed
            
            
            Automatically generated destructor for laue_grow_list
            """
            if self._alloc:
                _pyEMsoft.f90wrap_laue_grow_list_finalise(this=self._handle)
        
        @property
        def hkl(self):
            """
            Element hkl ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 923
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_laue_grow_list__array__hkl(self._handle)
            if array_handle in self._arrays:
                hkl = self._arrays[array_handle]
            else:
                hkl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_laue_grow_list__array__hkl)
                self._arrays[array_handle] = hkl
            return hkl
        
        @hkl.setter
        def hkl(self, hkl):
            self.hkl[...] = hkl
        
        @property
        def xyz(self):
            """
            Element xyz ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 924
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_laue_grow_list__array__xyz(self._handle)
            if array_handle in self._arrays:
                xyz = self._arrays[array_handle]
            else:
                xyz = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_laue_grow_list__array__xyz)
                self._arrays[array_handle] = xyz
            return xyz
        
        @xyz.setter
        def xyz(self, xyz):
            self.xyz[...] = xyz
        
        @property
        def sfs(self):
            """
            Element sfs ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 925
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_laue_grow_list__array__sfs(self._handle)
            if array_handle in self._arrays:
                sfs = self._arrays[array_handle]
            else:
                sfs = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_laue_grow_list__array__sfs)
                self._arrays[array_handle] = sfs
            return sfs
        
        @sfs.setter
        def sfs(self, sfs):
            self.sfs[...] = sfs
        
        @property
        def dspacing(self):
            """
            Element dspacing ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 926
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_laue_grow_list__array__dspacing(self._handle)
            if array_handle in self._arrays:
                dspacing = self._arrays[array_handle]
            else:
                dspacing = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_laue_grow_list__array__dspacing)
                self._arrays[array_handle] = dspacing
            return dspacing
        
        @dspacing.setter
        def dspacing(self, dspacing):
            self.dspacing[...] = dspacing
        
        @property
        def nentries(self):
            """
            Element nentries ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 927
            
            """
            return _pyEMsoft.f90wrap_laue_grow_list__get__nentries(self._handle)
        
        @nentries.setter
        def nentries(self, nentries):
            _pyEMsoft.f90wrap_laue_grow_list__set__nentries(self._handle, nentries)
        
        @property
        def next(self):
            """
            Element next ftype=type(laue_grow_list) pytype=Laue_Grow_List
            
            
            Defined at typedefs.f90 line 928
            
            """
            next_handle = _pyEMsoft.f90wrap_laue_grow_list__get__next(self._handle)
            if tuple(next_handle) in self._objs:
                next = self._objs[tuple(next_handle)]
            else:
                next = typedefs.Laue_grow_list.from_handle(next_handle)
                self._objs[tuple(next_handle)] = next
            return next
        
        @next.setter
        def next(self, next):
            next = next._handle
            _pyEMsoft.f90wrap_laue_grow_list__set__next(self._handle, next)
        
        def __str__(self):
            ret = ['<laue_grow_list>{\n']
            ret.append('    hkl : ')
            ret.append(repr(self.hkl))
            ret.append(',\n    xyz : ')
            ret.append(repr(self.xyz))
            ret.append(',\n    sfs : ')
            ret.append(repr(self.sfs))
            ret.append(',\n    dspacing : ')
            ret.append(repr(self.dspacing))
            ret.append(',\n    nentries : ')
            ret.append(repr(self.nentries))
            ret.append(',\n    next : ')
            ret.append(repr(self.next))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.HOLZentries")
    class HOLZentries(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=holzentries)
        
        
        Defined at typedefs.f90 lines 935-937
        
        """
        def __init__(self, handle=None):
            """
            self = Holzentries()
            
            
            Defined at typedefs.f90 lines 935-937
            
            
            Returns
            -------
            this : Holzentries
            	Object to be constructed
            
            
            Automatically generated constructor for holzentries
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_holzentries_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Holzentries
            
            
            Defined at typedefs.f90 lines 935-937
            
            Parameters
            ----------
            this : Holzentries
            	Object to be destructed
            
            
            Automatically generated destructor for holzentries
            """
            if self._alloc:
                _pyEMsoft.f90wrap_holzentries_finalise(this=self._handle)
        
        @property
        def g1(self):
            """
            Element g1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 936
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzentries__array__g1(self._handle)
            if array_handle in self._arrays:
                g1 = self._arrays[array_handle]
            else:
                g1 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzentries__array__g1)
                self._arrays[array_handle] = g1
            return g1
        
        @g1.setter
        def g1(self, g1):
            self.g1[...] = g1
        
        @property
        def g2(self):
            """
            Element g2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 936
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzentries__array__g2(self._handle)
            if array_handle in self._arrays:
                g2 = self._arrays[array_handle]
            else:
                g2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzentries__array__g2)
                self._arrays[array_handle] = g2
            return g2
        
        @g2.setter
        def g2(self, g2):
            self.g2[...] = g2
        
        @property
        def g3(self):
            """
            Element g3 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 936
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzentries__array__g3(self._handle)
            if array_handle in self._arrays:
                g3 = self._arrays[array_handle]
            else:
                g3 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzentries__array__g3)
                self._arrays[array_handle] = g3
            return g3
        
        @g3.setter
        def g3(self, g3):
            self.g3[...] = g3
        
        @property
        def gx(self):
            """
            Element gx ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 936
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzentries__array__gx(self._handle)
            if array_handle in self._arrays:
                gx = self._arrays[array_handle]
            else:
                gx = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzentries__array__gx)
                self._arrays[array_handle] = gx
            return gx
        
        @gx.setter
        def gx(self, gx):
            self.gx[...] = gx
        
        @property
        def gy(self):
            """
            Element gy ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 936
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzentries__array__gy(self._handle)
            if array_handle in self._arrays:
                gy = self._arrays[array_handle]
            else:
                gy = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzentries__array__gy)
                self._arrays[array_handle] = gy
            return gy
        
        @gy.setter
        def gy(self, gy):
            self.gy[...] = gy
        
        @property
        def lc1(self):
            """
            Element lc1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 936
            
            """
            return _pyEMsoft.f90wrap_holzentries__get__lc1(self._handle)
        
        @lc1.setter
        def lc1(self, lc1):
            _pyEMsoft.f90wrap_holzentries__set__lc1(self._handle, lc1)
        
        @property
        def lc2(self):
            """
            Element lc2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 936
            
            """
            return _pyEMsoft.f90wrap_holzentries__get__lc2(self._handle)
        
        @lc2.setter
        def lc2(self, lc2):
            _pyEMsoft.f90wrap_holzentries__set__lc2(self._handle, lc2)
        
        @property
        def h(self):
            """
            Element h ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 936
            
            """
            return _pyEMsoft.f90wrap_holzentries__get__h(self._handle)
        
        @h.setter
        def h(self, h):
            _pyEMsoft.f90wrap_holzentries__set__h(self._handle, h)
        
        @property
        def fnr(self):
            """
            Element fnr ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 936
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzentries__array__fnr(self._handle)
            if array_handle in self._arrays:
                fnr = self._arrays[array_handle]
            else:
                fnr = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzentries__array__fnr)
                self._arrays[array_handle] = fnr
            return fnr
        
        @fnr.setter
        def fnr(self, fnr):
            self.fnr[...] = fnr
        
        @property
        def fng(self):
            """
            Element fng ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 936
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzentries__array__fng(self._handle)
            if array_handle in self._arrays:
                fng = self._arrays[array_handle]
            else:
                fng = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzentries__array__fng)
                self._arrays[array_handle] = fng
            return fng
        
        @fng.setter
        def fng(self, fng):
            self.fng[...] = fng
        
        @property
        def gp(self):
            """
            Element gp ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 936
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzentries__array__gp(self._handle)
            if array_handle in self._arrays:
                gp = self._arrays[array_handle]
            else:
                gp = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzentries__array__gp)
                self._arrays[array_handle] = gp
            return gp
        
        @gp.setter
        def gp(self, gp):
            self.gp[...] = gp
        
        @property
        def gtoc(self):
            """
            Element gtoc ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 936
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzentries__array__gtoc(self._handle)
            if array_handle in self._arrays:
                gtoc = self._arrays[array_handle]
            else:
                gtoc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzentries__array__gtoc)
                self._arrays[array_handle] = gtoc
            return gtoc
        
        @gtoc.setter
        def gtoc(self, gtoc):
            self.gtoc[...] = gtoc
        
        @property
        def gshort(self):
            """
            Element gshort ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 936
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzentries__array__gshort(self._handle)
            if array_handle in self._arrays:
                gshort = self._arrays[array_handle]
            else:
                gshort = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzentries__array__gshort)
                self._arrays[array_handle] = gshort
            return gshort
        
        @gshort.setter
        def gshort(self, gshort):
            self.gshort[...] = gshort
        
        @property
        def uvw(self):
            """
            Element uvw ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 937
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzentries__array__uvw(self._handle)
            if array_handle in self._arrays:
                uvw = self._arrays[array_handle]
            else:
                uvw = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzentries__array__uvw)
                self._arrays[array_handle] = uvw
            return uvw
        
        @uvw.setter
        def uvw(self, uvw):
            self.uvw[...] = uvw
        
        @property
        def fn(self):
            """
            Element fn ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 937
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzentries__array__fn(self._handle)
            if array_handle in self._arrays:
                fn = self._arrays[array_handle]
            else:
                fn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzentries__array__fn)
                self._arrays[array_handle] = fn
            return fn
        
        @fn.setter
        def fn(self, fn):
            self.fn[...] = fn
        
        def __str__(self):
            ret = ['<holzentries>{\n']
            ret.append('    g1 : ')
            ret.append(repr(self.g1))
            ret.append(',\n    g2 : ')
            ret.append(repr(self.g2))
            ret.append(',\n    g3 : ')
            ret.append(repr(self.g3))
            ret.append(',\n    gx : ')
            ret.append(repr(self.gx))
            ret.append(',\n    gy : ')
            ret.append(repr(self.gy))
            ret.append(',\n    lc1 : ')
            ret.append(repr(self.lc1))
            ret.append(',\n    lc2 : ')
            ret.append(repr(self.lc2))
            ret.append(',\n    h : ')
            ret.append(repr(self.h))
            ret.append(',\n    fnr : ')
            ret.append(repr(self.fnr))
            ret.append(',\n    fng : ')
            ret.append(repr(self.fng))
            ret.append(',\n    gp : ')
            ret.append(repr(self.gp))
            ret.append(',\n    gtoc : ')
            ret.append(repr(self.gtoc))
            ret.append(',\n    gshort : ')
            ret.append(repr(self.gshort))
            ret.append(',\n    uvw : ')
            ret.append(repr(self.uvw))
            ret.append(',\n    fn : ')
            ret.append(repr(self.fn))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.unitcell")
    class unitcell(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=unitcell)
        
        
        Defined at typedefs.f90 lines 1020-1040
        
        """
        def __init__(self, handle=None):
            """
            self = Unitcell()
            
            
            Defined at typedefs.f90 lines 1020-1040
            
            
            Returns
            -------
            this : Unitcell
            	Object to be constructed
            
            
            Automatically generated constructor for unitcell
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_unitcell_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Unitcell
            
            
            Defined at typedefs.f90 lines 1020-1040
            
            Parameters
            ----------
            this : Unitcell
            	Object to be destructed
            
            
            Automatically generated destructor for unitcell
            """
            if self._alloc:
                _pyEMsoft.f90wrap_unitcell_finalise(this=self._handle)
        
        @property
        def a(self):
            """
            Element a ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1021
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__a(self._handle)
        
        @a.setter
        def a(self, a):
            _pyEMsoft.f90wrap_unitcell__set__a(self._handle, a)
        
        @property
        def b(self):
            """
            Element b ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1021
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__b(self._handle)
        
        @b.setter
        def b(self, b):
            _pyEMsoft.f90wrap_unitcell__set__b(self._handle, b)
        
        @property
        def c(self):
            """
            Element c ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1021
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__c(self._handle)
        
        @c.setter
        def c(self, c):
            _pyEMsoft.f90wrap_unitcell__set__c(self._handle, c)
        
        @property
        def alpha(self):
            """
            Element alpha ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1021
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__alpha(self._handle)
        
        @alpha.setter
        def alpha(self, alpha):
            _pyEMsoft.f90wrap_unitcell__set__alpha(self._handle, alpha)
        
        @property
        def beta(self):
            """
            Element beta ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1021
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__beta(self._handle)
        
        @beta.setter
        def beta(self, beta):
            _pyEMsoft.f90wrap_unitcell__set__beta(self._handle, beta)
        
        @property
        def gamma(self):
            """
            Element gamma ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1021
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__gamma(self._handle)
        
        @gamma.setter
        def gamma(self, gamma):
            _pyEMsoft.f90wrap_unitcell__set__gamma(self._handle, gamma)
        
        @property
        def dmt(self):
            """
            Element dmt ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1022
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_unitcell__array__dmt(self._handle)
            if array_handle in self._arrays:
                dmt = self._arrays[array_handle]
            else:
                dmt = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_unitcell__array__dmt)
                self._arrays[array_handle] = dmt
            return dmt
        
        @dmt.setter
        def dmt(self, dmt):
            self.dmt[...] = dmt
        
        @property
        def rmt(self):
            """
            Element rmt ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1022
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_unitcell__array__rmt(self._handle)
            if array_handle in self._arrays:
                rmt = self._arrays[array_handle]
            else:
                rmt = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_unitcell__array__rmt)
                self._arrays[array_handle] = rmt
            return rmt
        
        @rmt.setter
        def rmt(self, rmt):
            self.rmt[...] = rmt
        
        @property
        def dsm(self):
            """
            Element dsm ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1022
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_unitcell__array__dsm(self._handle)
            if array_handle in self._arrays:
                dsm = self._arrays[array_handle]
            else:
                dsm = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_unitcell__array__dsm)
                self._arrays[array_handle] = dsm
            return dsm
        
        @dsm.setter
        def dsm(self, dsm):
            self.dsm[...] = dsm
        
        @property
        def rsm(self):
            """
            Element rsm ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1022
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_unitcell__array__rsm(self._handle)
            if array_handle in self._arrays:
                rsm = self._arrays[array_handle]
            else:
                rsm = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_unitcell__array__rsm)
                self._arrays[array_handle] = rsm
            return rsm
        
        @rsm.setter
        def rsm(self, rsm):
            self.rsm[...] = rsm
        
        @property
        def trigmat(self):
            """
            Element trigmat ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1022
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_unitcell__array__trigmat(self._handle)
            if array_handle in self._arrays:
                trigmat = self._arrays[array_handle]
            else:
                trigmat = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_unitcell__array__trigmat)
                self._arrays[array_handle] = trigmat
            return trigmat
        
        @trigmat.setter
        def trigmat(self, trigmat):
            self.trigmat[...] = trigmat
        
        @property
        def vol(self):
            """
            Element vol ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1022
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__vol(self._handle)
        
        @vol.setter
        def vol(self, vol):
            _pyEMsoft.f90wrap_unitcell__set__vol(self._handle, vol)
        
        @property
        def atom_type(self):
            """
            Element atom_type ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1023
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_unitcell__array__atom_type(self._handle)
            if array_handle in self._arrays:
                atom_type = self._arrays[array_handle]
            else:
                atom_type = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_unitcell__array__atom_type)
                self._arrays[array_handle] = atom_type
            return atom_type
        
        @atom_type.setter
        def atom_type(self, atom_type):
            self.atom_type[...] = atom_type
        
        @property
        def atom_ntype(self):
            """
            Element atom_ntype ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1023
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__atom_ntype(self._handle)
        
        @atom_ntype.setter
        def atom_ntype(self, atom_ntype):
            _pyEMsoft.f90wrap_unitcell__set__atom_ntype(self._handle, atom_ntype)
        
        @property
        def sym_sgnum(self):
            """
            Element sym_sgnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1023
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__sym_sgnum(self._handle)
        
        @sym_sgnum.setter
        def sym_sgnum(self, sym_sgnum):
            _pyEMsoft.f90wrap_unitcell__set__sym_sgnum(self._handle, sym_sgnum)
        
        @property
        def xtal_system(self):
            """
            Element xtal_system ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1023
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__xtal_system(self._handle)
        
        @xtal_system.setter
        def xtal_system(self, xtal_system):
            _pyEMsoft.f90wrap_unitcell__set__xtal_system(self._handle, xtal_system)
        
        @property
        def sym_sgset(self):
            """
            Element sym_sgset ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1023
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__sym_sgset(self._handle)
        
        @sym_sgset.setter
        def sym_sgset(self, sym_sgset):
            _pyEMsoft.f90wrap_unitcell__set__sym_sgset(self._handle, sym_sgset)
        
        @property
        def atom_pos(self):
            """
            Element atom_pos ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1024
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_unitcell__array__atom_pos(self._handle)
            if array_handle in self._arrays:
                atom_pos = self._arrays[array_handle]
            else:
                atom_pos = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_unitcell__array__atom_pos)
                self._arrays[array_handle] = atom_pos
            return atom_pos
        
        @atom_pos.setter
        def atom_pos(self, atom_pos):
            self.atom_pos[...] = atom_pos
        
        @property
        def numat(self):
            """
            Element numat ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1025
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_unitcell__array__numat(self._handle)
            if array_handle in self._arrays:
                numat = self._arrays[array_handle]
            else:
                numat = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_unitcell__array__numat)
                self._arrays[array_handle] = numat
            return numat
        
        @numat.setter
        def numat(self, numat):
            self.numat[...] = numat
        
        @property
        def fname(self):
            """
            Element fname ftype=character(fnlen) pytype=str
            
            
            Defined at typedefs.f90 line 1026
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__fname(self._handle)
        
        @fname.setter
        def fname(self, fname):
            _pyEMsoft.f90wrap_unitcell__set__fname(self._handle, fname)
        
        @property
        def source(self):
            """
            Element source ftype=character(fnlen) pytype=str
            
            
            Defined at typedefs.f90 line 1027
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__source(self._handle)
        
        @source.setter
        def source(self, source):
            _pyEMsoft.f90wrap_unitcell__set__source(self._handle, source)
        
        @property
        def hexset(self):
            """
            Element hexset ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1028
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__hexset(self._handle)
        
        @hexset.setter
        def hexset(self, hexset):
            _pyEMsoft.f90wrap_unitcell__set__hexset(self._handle, hexset)
        
        @property
        def apos(self):
            """
            Element apos ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1029
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_unitcell__array__apos(self._handle)
            if array_handle in self._arrays:
                apos = self._arrays[array_handle]
            else:
                apos = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_unitcell__array__apos)
                self._arrays[array_handle] = apos
            return apos
        
        @apos.setter
        def apos(self, apos):
            self.apos[...] = apos
        
        @property
        def scatfacg(self):
            """
            Element scatfacg ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1030
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_unitcell__array__scatfacg(self._handle)
            if array_handle in self._arrays:
                scatfacg = self._arrays[array_handle]
            else:
                scatfacg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_unitcell__array__scatfacg)
                self._arrays[array_handle] = scatfacg
            return scatfacg
        
        @scatfacg.setter
        def scatfacg(self, scatfacg):
            self.scatfacg[...] = scatfacg
        
        @property
        def scatfac(self):
            """
            Element scatfac ftype=complex(kind=sgl) pytype=complex
            
            
            Defined at typedefs.f90 line 1031
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_unitcell__array__scatfac(self._handle)
            if array_handle in self._arrays:
                scatfac = self._arrays[array_handle]
            else:
                scatfac = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_unitcell__array__scatfac)
                self._arrays[array_handle] = scatfac
            return scatfac
        
        @scatfac.setter
        def scatfac(self, scatfac):
            self.scatfac[...] = scatfac
        
        @property
        def lut(self):
            """
            Element lut ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 1032
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_unitcell__array__lut(self._handle)
            if array_handle in self._arrays:
                lut = self._arrays[array_handle]
            else:
                lut = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_unitcell__array__lut)
                self._arrays[array_handle] = lut
            return lut
        
        @lut.setter
        def lut(self, lut):
            self.lut[...] = lut
        
        @property
        def sghlut(self):
            """
            Element sghlut ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 1032
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_unitcell__array__sghlut(self._handle)
            if array_handle in self._arrays:
                sghlut = self._arrays[array_handle]
            else:
                sghlut = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_unitcell__array__sghlut)
                self._arrays[array_handle] = sghlut
            return sghlut
        
        @sghlut.setter
        def sghlut(self, sghlut):
            self.sghlut[...] = sghlut
        
        @property
        def lutqg(self):
            """
            Element lutqg ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 1033
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_unitcell__array__lutqg(self._handle)
            if array_handle in self._arrays:
                lutqg = self._arrays[array_handle]
            else:
                lutqg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_unitcell__array__lutqg)
                self._arrays[array_handle] = lutqg
            return lutqg
        
        @lutqg.setter
        def lutqg(self, lutqg):
            self.lutqg[...] = lutqg
        
        @property
        def dbdiff(self):
            """
            Element dbdiff ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1034
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_unitcell__array__dbdiff(self._handle)
            if array_handle in self._arrays:
                dbdiff = self._arrays[array_handle]
            else:
                dbdiff = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_unitcell__array__dbdiff)
                self._arrays[array_handle] = dbdiff
            return dbdiff
        
        @dbdiff.setter
        def dbdiff(self, dbdiff):
            self.dbdiff[...] = dbdiff
        
        @property
        def nonsymmorphic(self):
            """
            Element nonsymmorphic ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1035
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__nonsymmorphic(self._handle)
        
        @nonsymmorphic.setter
        def nonsymmorphic(self, nonsymmorphic):
            _pyEMsoft.f90wrap_unitcell__set__nonsymmorphic(self._handle, nonsymmorphic)
        
        @property
        def sg(self):
            """
            Element sg ftype=type(symdata) pytype=Symdata
            
            
            Defined at typedefs.f90 line 1036
            
            """
            sg_handle = _pyEMsoft.f90wrap_unitcell__get__sg(self._handle)
            if tuple(sg_handle) in self._objs:
                sg = self._objs[tuple(sg_handle)]
            else:
                sg = typedefs.symdata.from_handle(sg_handle)
                self._objs[tuple(sg_handle)] = sg
            return sg
        
        @sg.setter
        def sg(self, sg):
            sg = sg._handle
            _pyEMsoft.f90wrap_unitcell__set__sg(self._handle, sg)
        
        @property
        def reflist(self):
            """
            Element reflist ftype=type(reflisttype) pytype=Reflisttype
            
            
            Defined at typedefs.f90 line 1037
            
            """
            reflist_handle = _pyEMsoft.f90wrap_unitcell__get__reflist(self._handle)
            if tuple(reflist_handle) in self._objs:
                reflist = self._objs[tuple(reflist_handle)]
            else:
                reflist = typedefs.reflisttype.from_handle(reflist_handle)
                self._objs[tuple(reflist_handle)] = reflist
            return reflist
        
        @reflist.setter
        def reflist(self, reflist):
            reflist = reflist._handle
            _pyEMsoft.f90wrap_unitcell__set__reflist(self._handle, reflist)
        
        @property
        def firstw(self):
            """
            Element firstw ftype=type(reflisttype) pytype=Reflisttype
            
            
            Defined at typedefs.f90 line 1038
            
            """
            firstw_handle = _pyEMsoft.f90wrap_unitcell__get__firstw(self._handle)
            if tuple(firstw_handle) in self._objs:
                firstw = self._objs[tuple(firstw_handle)]
            else:
                firstw = typedefs.reflisttype.from_handle(firstw_handle)
                self._objs[tuple(firstw_handle)] = firstw
            return firstw
        
        @firstw.setter
        def firstw(self, firstw):
            firstw = firstw._handle
            _pyEMsoft.f90wrap_unitcell__set__firstw(self._handle, firstw)
        
        @property
        def dynnbeams(self):
            """
            Element dynnbeams ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1039
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__dynnbeams(self._handle)
        
        @dynnbeams.setter
        def dynnbeams(self, dynnbeams):
            _pyEMsoft.f90wrap_unitcell__set__dynnbeams(self._handle, dynnbeams)
        
        @property
        def dynnbeamslinked(self):
            """
            Element dynnbeamslinked ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1039
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__dynnbeamslinked(self._handle)
        
        @dynnbeamslinked.setter
        def dynnbeamslinked(self, dynnbeamslinked):
            _pyEMsoft.f90wrap_unitcell__set__dynnbeamslinked(self._handle, dynnbeamslinked)
        
        @property
        def nns(self):
            """
            Element nns ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1039
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__nns(self._handle)
        
        @nns.setter
        def nns(self, nns):
            _pyEMsoft.f90wrap_unitcell__set__nns(self._handle, nns)
        
        @property
        def nnw(self):
            """
            Element nnw ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1039
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__nnw(self._handle)
        
        @nnw.setter
        def nnw(self, nnw):
            _pyEMsoft.f90wrap_unitcell__set__nnw(self._handle, nnw)
        
        @property
        def numscatfac(self):
            """
            Element numscatfac ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1039
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__numscatfac(self._handle)
        
        @numscatfac.setter
        def numscatfac(self, numscatfac):
            _pyEMsoft.f90wrap_unitcell__set__numscatfac(self._handle, numscatfac)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1040
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_unitcell__set__voltage(self._handle, voltage)
        
        @property
        def mlambda(self):
            """
            Element mlambda ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1040
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__mlambda(self._handle)
        
        @mlambda.setter
        def mlambda(self, mlambda):
            _pyEMsoft.f90wrap_unitcell__set__mlambda(self._handle, mlambda)
        
        @property
        def mrelcor(self):
            """
            Element mrelcor ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1040
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__mrelcor(self._handle)
        
        @mrelcor.setter
        def mrelcor(self, mrelcor):
            _pyEMsoft.f90wrap_unitcell__set__mrelcor(self._handle, mrelcor)
        
        @property
        def msigma(self):
            """
            Element msigma ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1040
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__msigma(self._handle)
        
        @msigma.setter
        def msigma(self, msigma):
            _pyEMsoft.f90wrap_unitcell__set__msigma(self._handle, msigma)
        
        @property
        def mpsihat(self):
            """
            Element mpsihat ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1040
            
            """
            return _pyEMsoft.f90wrap_unitcell__get__mpsihat(self._handle)
        
        @mpsihat.setter
        def mpsihat(self, mpsihat):
            _pyEMsoft.f90wrap_unitcell__set__mpsihat(self._handle, mpsihat)
        
        def __str__(self):
            ret = ['<unitcell>{\n']
            ret.append('    a : ')
            ret.append(repr(self.a))
            ret.append(',\n    b : ')
            ret.append(repr(self.b))
            ret.append(',\n    c : ')
            ret.append(repr(self.c))
            ret.append(',\n    alpha : ')
            ret.append(repr(self.alpha))
            ret.append(',\n    beta : ')
            ret.append(repr(self.beta))
            ret.append(',\n    gamma : ')
            ret.append(repr(self.gamma))
            ret.append(',\n    dmt : ')
            ret.append(repr(self.dmt))
            ret.append(',\n    rmt : ')
            ret.append(repr(self.rmt))
            ret.append(',\n    dsm : ')
            ret.append(repr(self.dsm))
            ret.append(',\n    rsm : ')
            ret.append(repr(self.rsm))
            ret.append(',\n    trigmat : ')
            ret.append(repr(self.trigmat))
            ret.append(',\n    vol : ')
            ret.append(repr(self.vol))
            ret.append(',\n    atom_type : ')
            ret.append(repr(self.atom_type))
            ret.append(',\n    atom_ntype : ')
            ret.append(repr(self.atom_ntype))
            ret.append(',\n    sym_sgnum : ')
            ret.append(repr(self.sym_sgnum))
            ret.append(',\n    xtal_system : ')
            ret.append(repr(self.xtal_system))
            ret.append(',\n    sym_sgset : ')
            ret.append(repr(self.sym_sgset))
            ret.append(',\n    atom_pos : ')
            ret.append(repr(self.atom_pos))
            ret.append(',\n    numat : ')
            ret.append(repr(self.numat))
            ret.append(',\n    fname : ')
            ret.append(repr(self.fname))
            ret.append(',\n    source : ')
            ret.append(repr(self.source))
            ret.append(',\n    hexset : ')
            ret.append(repr(self.hexset))
            ret.append(',\n    apos : ')
            ret.append(repr(self.apos))
            ret.append(',\n    scatfacg : ')
            ret.append(repr(self.scatfacg))
            ret.append(',\n    scatfac : ')
            ret.append(repr(self.scatfac))
            ret.append(',\n    lut : ')
            ret.append(repr(self.lut))
            ret.append(',\n    sghlut : ')
            ret.append(repr(self.sghlut))
            ret.append(',\n    lutqg : ')
            ret.append(repr(self.lutqg))
            ret.append(',\n    dbdiff : ')
            ret.append(repr(self.dbdiff))
            ret.append(',\n    nonsymmorphic : ')
            ret.append(repr(self.nonsymmorphic))
            ret.append(',\n    sg : ')
            ret.append(repr(self.sg))
            ret.append(',\n    reflist : ')
            ret.append(repr(self.reflist))
            ret.append(',\n    firstw : ')
            ret.append(repr(self.firstw))
            ret.append(',\n    dynnbeams : ')
            ret.append(repr(self.dynnbeams))
            ret.append(',\n    dynnbeamslinked : ')
            ret.append(repr(self.dynnbeamslinked))
            ret.append(',\n    nns : ')
            ret.append(repr(self.nns))
            ret.append(',\n    nnw : ')
            ret.append(repr(self.nnw))
            ret.append(',\n    numscatfac : ')
            ret.append(repr(self.numscatfac))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    mlambda : ')
            ret.append(repr(self.mlambda))
            ret.append(',\n    mrelcor : ')
            ret.append(repr(self.mrelcor))
            ret.append(',\n    msigma : ')
            ret.append(repr(self.msigma))
            ret.append(',\n    mpsihat : ')
            ret.append(repr(self.mpsihat))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.orientation")
    class orientation(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=orientation)
        
        
        Defined at typedefs.f90 lines 1051-1052
        
        """
        def __init__(self, handle=None):
            """
            self = Orientation()
            
            
            Defined at typedefs.f90 lines 1051-1052
            
            
            Returns
            -------
            this : Orientation
            	Object to be constructed
            
            
            Automatically generated constructor for orientation
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_orientation_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Orientation
            
            
            Defined at typedefs.f90 lines 1051-1052
            
            Parameters
            ----------
            this : Orientation
            	Object to be destructed
            
            
            Automatically generated destructor for orientation
            """
            if self._alloc:
                _pyEMsoft.f90wrap_orientation_finalise(this=self._handle)
        
        @property
        def ta(self):
            """
            Element ta ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1052
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientation__array__ta(self._handle)
            if array_handle in self._arrays:
                ta = self._arrays[array_handle]
            else:
                ta = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientation__array__ta)
                self._arrays[array_handle] = ta
            return ta
        
        @ta.setter
        def ta(self, ta):
            self.ta[...] = ta
        
        @property
        def tb(self):
            """
            Element tb ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1052
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientation__array__tb(self._handle)
            if array_handle in self._arrays:
                tb = self._arrays[array_handle]
            else:
                tb = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientation__array__tb)
                self._arrays[array_handle] = tb
            return tb
        
        @tb.setter
        def tb(self, tb):
            self.tb[...] = tb
        
        @property
        def ga(self):
            """
            Element ga ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1052
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientation__array__ga(self._handle)
            if array_handle in self._arrays:
                ga = self._arrays[array_handle]
            else:
                ga = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientation__array__ga)
                self._arrays[array_handle] = ga
            return ga
        
        @ga.setter
        def ga(self, ga):
            self.ga[...] = ga
        
        @property
        def gb(self):
            """
            Element gb ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1052
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientation__array__gb(self._handle)
            if array_handle in self._arrays:
                gb = self._arrays[array_handle]
            else:
                gb = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientation__array__gb)
                self._arrays[array_handle] = gb
            return gb
        
        @gb.setter
        def gb(self, gb):
            self.gb[...] = gb
        
        def __str__(self):
            ret = ['<orientation>{\n']
            ret.append('    ta : ')
            ret.append(repr(self.ta))
            ret.append(',\n    tb : ')
            ret.append(repr(self.tb))
            ret.append(',\n    ga : ')
            ret.append(repr(self.ga))
            ret.append(',\n    gb : ')
            ret.append(repr(self.gb))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.foiltype")
    class foiltype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=foiltype)
        
        
        Defined at typedefs.f90 lines 1067-1072
        
        """
        def __init__(self, handle=None):
            """
            self = Foiltype()
            
            
            Defined at typedefs.f90 lines 1067-1072
            
            
            Returns
            -------
            this : Foiltype
            	Object to be constructed
            
            
            Automatically generated constructor for foiltype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_foiltype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Foiltype
            
            
            Defined at typedefs.f90 lines 1067-1072
            
            Parameters
            ----------
            this : Foiltype
            	Object to be destructed
            
            
            Automatically generated destructor for foiltype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_foiltype_finalise(this=self._handle)
        
        @property
        def f(self):
            """
            Element f ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_foiltype__array__f(self._handle)
            if array_handle in self._arrays:
                f = self._arrays[array_handle]
            else:
                f = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_foiltype__array__f)
                self._arrays[array_handle] = f
            return f
        
        @f.setter
        def f(self, f):
            self.f[...] = f
        
        @property
        def q(self):
            """
            Element q ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_foiltype__array__q(self._handle)
            if array_handle in self._arrays:
                q = self._arrays[array_handle]
            else:
                q = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_foiltype__array__q)
                self._arrays[array_handle] = q
            return q
        
        @q.setter
        def q(self, q):
            self.q[...] = q
        
        @property
        def fn(self):
            """
            Element fn ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_foiltype__array__fn(self._handle)
            if array_handle in self._arrays:
                fn = self._arrays[array_handle]
            else:
                fn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_foiltype__array__fn)
                self._arrays[array_handle] = fn
            return fn
        
        @fn.setter
        def fn(self, fn):
            self.fn[...] = fn
        
        @property
        def qn(self):
            """
            Element qn ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_foiltype__array__qn(self._handle)
            if array_handle in self._arrays:
                qn = self._arrays[array_handle]
            else:
                qn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_foiltype__array__qn)
                self._arrays[array_handle] = qn
            return qn
        
        @qn.setter
        def qn(self, qn):
            self.qn[...] = qn
        
        @property
        def brx(self):
            """
            Element brx ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            return _pyEMsoft.f90wrap_foiltype__get__brx(self._handle)
        
        @brx.setter
        def brx(self, brx):
            _pyEMsoft.f90wrap_foiltype__set__brx(self._handle, brx)
        
        @property
        def bry(self):
            """
            Element bry ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            return _pyEMsoft.f90wrap_foiltype__get__bry(self._handle)
        
        @bry.setter
        def bry(self, bry):
            _pyEMsoft.f90wrap_foiltype__set__bry(self._handle, bry)
        
        @property
        def brxy(self):
            """
            Element brxy ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            return _pyEMsoft.f90wrap_foiltype__get__brxy(self._handle)
        
        @brxy.setter
        def brxy(self, brxy):
            _pyEMsoft.f90wrap_foiltype__set__brxy(self._handle, brxy)
        
        @property
        def cpx(self):
            """
            Element cpx ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            return _pyEMsoft.f90wrap_foiltype__get__cpx(self._handle)
        
        @cpx.setter
        def cpx(self, cpx):
            _pyEMsoft.f90wrap_foiltype__set__cpx(self._handle, cpx)
        
        @property
        def cpy(self):
            """
            Element cpy ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            return _pyEMsoft.f90wrap_foiltype__get__cpy(self._handle)
        
        @cpy.setter
        def cpy(self, cpy):
            _pyEMsoft.f90wrap_foiltype__set__cpy(self._handle, cpy)
        
        @property
        def alp(self):
            """
            Element alp ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            return _pyEMsoft.f90wrap_foiltype__get__alp(self._handle)
        
        @alp.setter
        def alp(self, alp):
            _pyEMsoft.f90wrap_foiltype__set__alp(self._handle, alp)
        
        @property
        def als(self):
            """
            Element als ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            return _pyEMsoft.f90wrap_foiltype__get__als(self._handle)
        
        @als.setter
        def als(self, als):
            _pyEMsoft.f90wrap_foiltype__set__als(self._handle, als)
        
        @property
        def alr(self):
            """
            Element alr ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            return _pyEMsoft.f90wrap_foiltype__get__alr(self._handle)
        
        @alr.setter
        def alr(self, alr):
            _pyEMsoft.f90wrap_foiltype__set__alr(self._handle, alr)
        
        @property
        def bep(self):
            """
            Element bep ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            return _pyEMsoft.f90wrap_foiltype__get__bep(self._handle)
        
        @bep.setter
        def bep(self, bep):
            _pyEMsoft.f90wrap_foiltype__set__bep(self._handle, bep)
        
        @property
        def elmo(self):
            """
            Element elmo ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_foiltype__array__elmo(self._handle)
            if array_handle in self._arrays:
                elmo = self._arrays[array_handle]
            else:
                elmo = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_foiltype__array__elmo)
                self._arrays[array_handle] = elmo
            return elmo
        
        @elmo.setter
        def elmo(self, elmo):
            self.elmo[...] = elmo
        
        @property
        def z0(self):
            """
            Element z0 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            return _pyEMsoft.f90wrap_foiltype__get__z0(self._handle)
        
        @z0.setter
        def z0(self, z0):
            _pyEMsoft.f90wrap_foiltype__set__z0(self._handle, z0)
        
        @property
        def zb(self):
            """
            Element zb ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            return _pyEMsoft.f90wrap_foiltype__get__zb(self._handle)
        
        @zb.setter
        def zb(self, zb):
            _pyEMsoft.f90wrap_foiltype__set__zb(self._handle, zb)
        
        @property
        def b(self):
            """
            Element b ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_foiltype__array__b(self._handle)
            if array_handle in self._arrays:
                b = self._arrays[array_handle]
            else:
                b = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_foiltype__array__b)
                self._arrays[array_handle] = b
            return b
        
        @b.setter
        def b(self, b):
            self.b[...] = b
        
        @property
        def bn(self):
            """
            Element bn ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_foiltype__array__bn(self._handle)
            if array_handle in self._arrays:
                bn = self._arrays[array_handle]
            else:
                bn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_foiltype__array__bn)
                self._arrays[array_handle] = bn
            return bn
        
        @bn.setter
        def bn(self, bn):
            self.bn[...] = bn
        
        @property
        def bm(self):
            """
            Element bm ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1069
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_foiltype__array__bm(self._handle)
            if array_handle in self._arrays:
                bm = self._arrays[array_handle]
            else:
                bm = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_foiltype__array__bm)
                self._arrays[array_handle] = bm
            return bm
        
        @bm.setter
        def bm(self, bm):
            self.bm[...] = bm
        
        @property
        def a_fc(self):
            """
            Element a_fc ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1070
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_foiltype__array__a_fc(self._handle)
            if array_handle in self._arrays:
                a_fc = self._arrays[array_handle]
            else:
                a_fc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_foiltype__array__a_fc)
                self._arrays[array_handle] = a_fc
            return a_fc
        
        @a_fc.setter
        def a_fc(self, a_fc):
            self.a_fc[...] = a_fc
        
        @property
        def a_fm(self):
            """
            Element a_fm ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1070
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_foiltype__array__a_fm(self._handle)
            if array_handle in self._arrays:
                a_fm = self._arrays[array_handle]
            else:
                a_fm = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_foiltype__array__a_fm)
                self._arrays[array_handle] = a_fm
            return a_fm
        
        @a_fm.setter
        def a_fm(self, a_fm):
            self.a_fm[...] = a_fm
        
        @property
        def a_mi(self):
            """
            Element a_mi ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1070
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_foiltype__array__a_mi(self._handle)
            if array_handle in self._arrays:
                a_mi = self._arrays[array_handle]
            else:
                a_mi = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_foiltype__array__a_mi)
                self._arrays[array_handle] = a_mi
            return a_mi
        
        @a_mi.setter
        def a_mi(self, a_mi):
            self.a_mi[...] = a_mi
        
        @property
        def a_ic(self):
            """
            Element a_ic ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1070
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_foiltype__array__a_ic(self._handle)
            if array_handle in self._arrays:
                a_ic = self._arrays[array_handle]
            else:
                a_ic = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_foiltype__array__a_ic)
                self._arrays[array_handle] = a_ic
            return a_ic
        
        @a_ic.setter
        def a_ic(self, a_ic):
            self.a_ic[...] = a_ic
        
        @property
        def a_mc(self):
            """
            Element a_mc ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1070
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_foiltype__array__a_mc(self._handle)
            if array_handle in self._arrays:
                a_mc = self._arrays[array_handle]
            else:
                a_mc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_foiltype__array__a_mc)
                self._arrays[array_handle] = a_mc
            return a_mc
        
        @a_mc.setter
        def a_mc(self, a_mc):
            self.a_mc[...] = a_mc
        
        @property
        def a_fi(self):
            """
            Element a_fi ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1070
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_foiltype__array__a_fi(self._handle)
            if array_handle in self._arrays:
                a_fi = self._arrays[array_handle]
            else:
                a_fi = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_foiltype__array__a_fi)
                self._arrays[array_handle] = a_fi
            return a_fi
        
        @a_fi.setter
        def a_fi(self, a_fi):
            self.a_fi[...] = a_fi
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1071
            
            """
            return _pyEMsoft.f90wrap_foiltype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_foiltype__set__npix(self._handle, npix)
        
        @property
        def npiy(self):
            """
            Element npiy ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1071
            
            """
            return _pyEMsoft.f90wrap_foiltype__get__npiy(self._handle)
        
        @npiy.setter
        def npiy(self, npiy):
            _pyEMsoft.f90wrap_foiltype__set__npiy(self._handle, npiy)
        
        @property
        def sg(self):
            """
            Element sg ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1072
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_foiltype__array__sg(self._handle)
            if array_handle in self._arrays:
                sg = self._arrays[array_handle]
            else:
                sg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_foiltype__array__sg)
                self._arrays[array_handle] = sg
            return sg
        
        @sg.setter
        def sg(self, sg):
            self.sg[...] = sg
        
        def __str__(self):
            ret = ['<foiltype>{\n']
            ret.append('    f : ')
            ret.append(repr(self.f))
            ret.append(',\n    q : ')
            ret.append(repr(self.q))
            ret.append(',\n    fn : ')
            ret.append(repr(self.fn))
            ret.append(',\n    qn : ')
            ret.append(repr(self.qn))
            ret.append(',\n    brx : ')
            ret.append(repr(self.brx))
            ret.append(',\n    bry : ')
            ret.append(repr(self.bry))
            ret.append(',\n    brxy : ')
            ret.append(repr(self.brxy))
            ret.append(',\n    cpx : ')
            ret.append(repr(self.cpx))
            ret.append(',\n    cpy : ')
            ret.append(repr(self.cpy))
            ret.append(',\n    alp : ')
            ret.append(repr(self.alp))
            ret.append(',\n    als : ')
            ret.append(repr(self.als))
            ret.append(',\n    alr : ')
            ret.append(repr(self.alr))
            ret.append(',\n    bep : ')
            ret.append(repr(self.bep))
            ret.append(',\n    elmo : ')
            ret.append(repr(self.elmo))
            ret.append(',\n    z0 : ')
            ret.append(repr(self.z0))
            ret.append(',\n    zb : ')
            ret.append(repr(self.zb))
            ret.append(',\n    b : ')
            ret.append(repr(self.b))
            ret.append(',\n    bn : ')
            ret.append(repr(self.bn))
            ret.append(',\n    bm : ')
            ret.append(repr(self.bm))
            ret.append(',\n    a_fc : ')
            ret.append(repr(self.a_fc))
            ret.append(',\n    a_fm : ')
            ret.append(repr(self.a_fm))
            ret.append(',\n    a_mi : ')
            ret.append(repr(self.a_mi))
            ret.append(',\n    a_ic : ')
            ret.append(repr(self.a_ic))
            ret.append(',\n    a_mc : ')
            ret.append(repr(self.a_mc))
            ret.append(',\n    a_fi : ')
            ret.append(repr(self.a_fi))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    npiy : ')
            ret.append(repr(self.npiy))
            ret.append(',\n    sg : ')
            ret.append(repr(self.sg))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.dislocationtype")
    class dislocationtype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=dislocationtype)
        
        
        Defined at typedefs.f90 lines 1078-1082
        
        """
        def __init__(self, handle=None):
            """
            self = Dislocationtype()
            
            
            Defined at typedefs.f90 lines 1078-1082
            
            
            Returns
            -------
            this : Dislocationtype
            	Object to be constructed
            
            
            Automatically generated constructor for dislocationtype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_dislocationtype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Dislocationtype
            
            
            Defined at typedefs.f90 lines 1078-1082
            
            Parameters
            ----------
            this : Dislocationtype
            	Object to be destructed
            
            
            Automatically generated destructor for dislocationtype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_dislocationtype_finalise(this=self._handle)
        
        @property
        def burg(self):
            """
            Element burg ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1079
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dislocationtype__array__burg(self._handle)
            if array_handle in self._arrays:
                burg = self._arrays[array_handle]
            else:
                burg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dislocationtype__array__burg)
                self._arrays[array_handle] = burg
            return burg
        
        @burg.setter
        def burg(self, burg):
            self.burg[...] = burg
        
        @property
        def burgd(self):
            """
            Element burgd ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1079
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dislocationtype__array__burgd(self._handle)
            if array_handle in self._arrays:
                burgd = self._arrays[array_handle]
            else:
                burgd = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dislocationtype__array__burgd)
                self._arrays[array_handle] = burgd
            return burgd
        
        @burgd.setter
        def burgd(self, burgd):
            self.burgd[...] = burgd
        
        @property
        def u(self):
            """
            Element u ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1079
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dislocationtype__array__u(self._handle)
            if array_handle in self._arrays:
                u = self._arrays[array_handle]
            else:
                u = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dislocationtype__array__u)
                self._arrays[array_handle] = u
            return u
        
        @u.setter
        def u(self, u):
            self.u[...] = u
        
        @property
        def un(self):
            """
            Element un ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1079
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dislocationtype__array__un(self._handle)
            if array_handle in self._arrays:
                un = self._arrays[array_handle]
            else:
                un = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dislocationtype__array__un)
                self._arrays[array_handle] = un
            return un
        
        @un.setter
        def un(self, un):
            self.un[...] = un
        
        @property
        def g(self):
            """
            Element g ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1079
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dislocationtype__array__g(self._handle)
            if array_handle in self._arrays:
                g = self._arrays[array_handle]
            else:
                g = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dislocationtype__array__g)
                self._arrays[array_handle] = g
            return g
        
        @g.setter
        def g(self, g):
            self.g[...] = g
        
        @property
        def gn(self):
            """
            Element gn ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1079
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dislocationtype__array__gn(self._handle)
            if array_handle in self._arrays:
                gn = self._arrays[array_handle]
            else:
                gn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dislocationtype__array__gn)
                self._arrays[array_handle] = gn
            return gn
        
        @gn.setter
        def gn(self, gn):
            self.gn[...] = gn
        
        @property
        def id(self):
            """
            Element id ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1079
            
            """
            return _pyEMsoft.f90wrap_dislocationtype__get__id(self._handle)
        
        @id.setter
        def id(self, id):
            _pyEMsoft.f90wrap_dislocationtype__set__id(self._handle, id)
        
        @property
        def jd(self):
            """
            Element jd ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1079
            
            """
            return _pyEMsoft.f90wrap_dislocationtype__get__jd(self._handle)
        
        @jd.setter
        def jd(self, jd):
            _pyEMsoft.f90wrap_dislocationtype__set__jd(self._handle, jd)
        
        @property
        def zfrac(self):
            """
            Element zfrac ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1079
            
            """
            return _pyEMsoft.f90wrap_dislocationtype__get__zfrac(self._handle)
        
        @zfrac.setter
        def zfrac(self, zfrac):
            _pyEMsoft.f90wrap_dislocationtype__set__zfrac(self._handle, zfrac)
        
        @property
        def zu(self):
            """
            Element zu ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1079
            
            """
            return _pyEMsoft.f90wrap_dislocationtype__get__zu(self._handle)
        
        @zu.setter
        def zu(self, zu):
            _pyEMsoft.f90wrap_dislocationtype__set__zu(self._handle, zu)
        
        @property
        def top(self):
            """
            Element top ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1080
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dislocationtype__array__top(self._handle)
            if array_handle in self._arrays:
                top = self._arrays[array_handle]
            else:
                top = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dislocationtype__array__top)
                self._arrays[array_handle] = top
            return top
        
        @top.setter
        def top(self, top):
            self.top[...] = top
        
        @property
        def bottom(self):
            """
            Element bottom ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1080
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dislocationtype__array__bottom(self._handle)
            if array_handle in self._arrays:
                bottom = self._arrays[array_handle]
            else:
                bottom = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dislocationtype__array__bottom)
                self._arrays[array_handle] = bottom
            return bottom
        
        @bottom.setter
        def bottom(self, bottom):
            self.bottom[...] = bottom
        
        @property
        def a_dc(self):
            """
            Element a_dc ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1081
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dislocationtype__array__a_dc(self._handle)
            if array_handle in self._arrays:
                a_dc = self._arrays[array_handle]
            else:
                a_dc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dislocationtype__array__a_dc)
                self._arrays[array_handle] = a_dc
            return a_dc
        
        @a_dc.setter
        def a_dc(self, a_dc):
            self.a_dc[...] = a_dc
        
        @property
        def a_id(self):
            """
            Element a_id ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1081
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dislocationtype__array__a_id(self._handle)
            if array_handle in self._arrays:
                a_id = self._arrays[array_handle]
            else:
                a_id = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dislocationtype__array__a_id)
                self._arrays[array_handle] = a_id
            return a_id
        
        @a_id.setter
        def a_id(self, a_id):
            self.a_id[...] = a_id
        
        @property
        def a_di(self):
            """
            Element a_di ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1081
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dislocationtype__array__a_di(self._handle)
            if array_handle in self._arrays:
                a_di = self._arrays[array_handle]
            else:
                a_di = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dislocationtype__array__a_di)
                self._arrays[array_handle] = a_di
            return a_di
        
        @a_di.setter
        def a_di(self, a_di):
            self.a_di[...] = a_di
        
        @property
        def a_df(self):
            """
            Element a_df ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1081
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dislocationtype__array__a_df(self._handle)
            if array_handle in self._arrays:
                a_df = self._arrays[array_handle]
            else:
                a_df = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dislocationtype__array__a_df)
                self._arrays[array_handle] = a_df
            return a_df
        
        @a_df.setter
        def a_df(self, a_df):
            self.a_df[...] = a_df
        
        @property
        def dismat(self):
            """
            Element dismat ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 1082
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dislocationtype__array__dismat(self._handle)
            if array_handle in self._arrays:
                dismat = self._arrays[array_handle]
            else:
                dismat = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dislocationtype__array__dismat)
                self._arrays[array_handle] = dismat
            return dismat
        
        @dismat.setter
        def dismat(self, dismat):
            self.dismat[...] = dismat
        
        @property
        def pa(self):
            """
            Element pa ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 1082
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dislocationtype__array__pa(self._handle)
            if array_handle in self._arrays:
                pa = self._arrays[array_handle]
            else:
                pa = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dislocationtype__array__pa)
                self._arrays[array_handle] = pa
            return pa
        
        @pa.setter
        def pa(self, pa):
            self.pa[...] = pa
        
        def __str__(self):
            ret = ['<dislocationtype>{\n']
            ret.append('    burg : ')
            ret.append(repr(self.burg))
            ret.append(',\n    burgd : ')
            ret.append(repr(self.burgd))
            ret.append(',\n    u : ')
            ret.append(repr(self.u))
            ret.append(',\n    un : ')
            ret.append(repr(self.un))
            ret.append(',\n    g : ')
            ret.append(repr(self.g))
            ret.append(',\n    gn : ')
            ret.append(repr(self.gn))
            ret.append(',\n    id : ')
            ret.append(repr(self.id))
            ret.append(',\n    jd : ')
            ret.append(repr(self.jd))
            ret.append(',\n    zfrac : ')
            ret.append(repr(self.zfrac))
            ret.append(',\n    zu : ')
            ret.append(repr(self.zu))
            ret.append(',\n    top : ')
            ret.append(repr(self.top))
            ret.append(',\n    bottom : ')
            ret.append(repr(self.bottom))
            ret.append(',\n    a_dc : ')
            ret.append(repr(self.a_dc))
            ret.append(',\n    a_id : ')
            ret.append(repr(self.a_id))
            ret.append(',\n    a_di : ')
            ret.append(repr(self.a_di))
            ret.append(',\n    a_df : ')
            ret.append(repr(self.a_df))
            ret.append(',\n    dismat : ')
            ret.append(repr(self.dismat))
            ret.append(',\n    pa : ')
            ret.append(repr(self.pa))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.inclusiontype")
    class inclusiontype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=inclusiontype)
        
        
        Defined at typedefs.f90 lines 1084-1085
        
        """
        def __init__(self, handle=None):
            """
            self = Inclusiontype()
            
            
            Defined at typedefs.f90 lines 1084-1085
            
            
            Returns
            -------
            this : Inclusiontype
            	Object to be constructed
            
            
            Automatically generated constructor for inclusiontype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_inclusiontype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Inclusiontype
            
            
            Defined at typedefs.f90 lines 1084-1085
            
            Parameters
            ----------
            this : Inclusiontype
            	Object to be destructed
            
            
            Automatically generated destructor for inclusiontype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_inclusiontype_finalise(this=self._handle)
        
        @property
        def xpos(self):
            """
            Element xpos ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1085
            
            """
            return _pyEMsoft.f90wrap_inclusiontype__get__xpos(self._handle)
        
        @xpos.setter
        def xpos(self, xpos):
            _pyEMsoft.f90wrap_inclusiontype__set__xpos(self._handle, xpos)
        
        @property
        def ypos(self):
            """
            Element ypos ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1085
            
            """
            return _pyEMsoft.f90wrap_inclusiontype__get__ypos(self._handle)
        
        @ypos.setter
        def ypos(self, ypos):
            _pyEMsoft.f90wrap_inclusiontype__set__ypos(self._handle, ypos)
        
        @property
        def zpos(self):
            """
            Element zpos ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1085
            
            """
            return _pyEMsoft.f90wrap_inclusiontype__get__zpos(self._handle)
        
        @zpos.setter
        def zpos(self, zpos):
            _pyEMsoft.f90wrap_inclusiontype__set__zpos(self._handle, zpos)
        
        @property
        def radius(self):
            """
            Element radius ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1085
            
            """
            return _pyEMsoft.f90wrap_inclusiontype__get__radius(self._handle)
        
        @radius.setter
        def radius(self, radius):
            _pyEMsoft.f90wrap_inclusiontype__set__radius(self._handle, radius)
        
        @property
        def c(self):
            """
            Element c ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1085
            
            """
            return _pyEMsoft.f90wrap_inclusiontype__get__c(self._handle)
        
        @c.setter
        def c(self, c):
            _pyEMsoft.f90wrap_inclusiontype__set__c(self._handle, c)
        
        def __str__(self):
            ret = ['<inclusiontype>{\n']
            ret.append('    xpos : ')
            ret.append(repr(self.xpos))
            ret.append(',\n    ypos : ')
            ret.append(repr(self.ypos))
            ret.append(',\n    zpos : ')
            ret.append(repr(self.zpos))
            ret.append(',\n    radius : ')
            ret.append(repr(self.radius))
            ret.append(',\n    c : ')
            ret.append(repr(self.c))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.Einclusiontype")
    class Einclusiontype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=einclusiontype)
        
        
        Defined at typedefs.f90 lines 1089-1096
        
        """
        def __init__(self, handle=None):
            """
            self = Einclusiontype()
            
            
            Defined at typedefs.f90 lines 1089-1096
            
            
            Returns
            -------
            this : Einclusiontype
            	Object to be constructed
            
            
            Automatically generated constructor for einclusiontype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_einclusiontype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Einclusiontype
            
            
            Defined at typedefs.f90 lines 1089-1096
            
            Parameters
            ----------
            this : Einclusiontype
            	Object to be destructed
            
            
            Automatically generated destructor for einclusiontype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_einclusiontype_finalise(this=self._handle)
        
        @property
        def xyz(self):
            """
            Element xyz ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1090
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__xyz(self._handle)
            if array_handle in self._arrays:
                xyz = self._arrays[array_handle]
            else:
                xyz = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__xyz)
                self._arrays[array_handle] = xyz
            return xyz
        
        @xyz.setter
        def xyz(self, xyz):
            self.xyz[...] = xyz
        
        @property
        def a123(self):
            """
            Element a123 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1090
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__a123(self._handle)
            if array_handle in self._arrays:
                a123 = self._arrays[array_handle]
            else:
                a123 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__a123)
                self._arrays[array_handle] = a123
            return a123
        
        @a123.setter
        def a123(self, a123):
            self.a123[...] = a123
        
        @property
        def a1(self):
            """
            Element a1 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1091
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__a1(self._handle)
        
        @a1.setter
        def a1(self, a1):
            _pyEMsoft.f90wrap_einclusiontype__set__a1(self._handle, a1)
        
        @property
        def a2(self):
            """
            Element a2 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1091
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__a2(self._handle)
        
        @a2.setter
        def a2(self, a2):
            _pyEMsoft.f90wrap_einclusiontype__set__a2(self._handle, a2)
        
        @property
        def a3(self):
            """
            Element a3 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1091
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__a3(self._handle)
        
        @a3.setter
        def a3(self, a3):
            _pyEMsoft.f90wrap_einclusiontype__set__a3(self._handle, a3)
        
        @property
        def principalaxes(self):
            """
            Element principalaxes ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1091
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__principalaxes(self._handle)
            if array_handle in self._arrays:
                principalaxes = self._arrays[array_handle]
            else:
                principalaxes = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__principalaxes)
                self._arrays[array_handle] = principalaxes
            return principalaxes
        
        @principalaxes.setter
        def principalaxes(self, principalaxes):
            self.principalaxes[...] = principalaxes
        
        @property
        def permut(self):
            """
            Element permut ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1091
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__permut(self._handle)
            if array_handle in self._arrays:
                permut = self._arrays[array_handle]
            else:
                permut = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__permut)
                self._arrays[array_handle] = permut
            return permut
        
        @permut.setter
        def permut(self, permut):
            self.permut[...] = permut
        
        @property
        def rotell(self):
            """
            Element rotell ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1091
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__rotell(self._handle)
            if array_handle in self._arrays:
                rotell = self._arrays[array_handle]
            else:
                rotell = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__rotell)
                self._arrays[array_handle] = rotell
            return rotell
        
        @rotell.setter
        def rotell(self, rotell):
            self.rotell[...] = rotell
        
        @property
        def epsstar(self):
            """
            Element epsstar ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1091
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__epsstar(self._handle)
            if array_handle in self._arrays:
                epsstar = self._arrays[array_handle]
            else:
                epsstar = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__epsstar)
                self._arrays[array_handle] = epsstar
            return epsstar
        
        @epsstar.setter
        def epsstar(self, epsstar):
            self.epsstar[...] = epsstar
        
        @property
        def nu(self):
            """
            Element nu ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__nu(self._handle)
        
        @nu.setter
        def nu(self, nu):
            _pyEMsoft.f90wrap_einclusiontype__set__nu(self._handle, nu)
        
        @property
        def omnu(self):
            """
            Element omnu ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__omnu(self._handle)
        
        @omnu.setter
        def omnu(self, omnu):
            _pyEMsoft.f90wrap_einclusiontype__set__omnu(self._handle, omnu)
        
        @property
        def pre(self):
            """
            Element pre ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__pre(self._handle)
        
        @pre.setter
        def pre(self, pre):
            _pyEMsoft.f90wrap_einclusiontype__set__pre(self._handle, pre)
        
        @property
        def v(self):
            """
            Element v ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__v(self._handle)
        
        @v.setter
        def v(self, v):
            _pyEMsoft.f90wrap_einclusiontype__set__v(self._handle, v)
        
        @property
        def a12(self):
            """
            Element a12 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__a12(self._handle)
        
        @a12.setter
        def a12(self, a12):
            _pyEMsoft.f90wrap_einclusiontype__set__a12(self._handle, a12)
        
        @property
        def a22(self):
            """
            Element a22 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__a22(self._handle)
        
        @a22.setter
        def a22(self, a22):
            _pyEMsoft.f90wrap_einclusiontype__set__a22(self._handle, a22)
        
        @property
        def a32(self):
            """
            Element a32 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__a32(self._handle)
        
        @a32.setter
        def a32(self, a32):
            _pyEMsoft.f90wrap_einclusiontype__set__a32(self._handle, a32)
        
        @property
        def asq(self):
            """
            Element asq ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__asq(self._handle)
            if array_handle in self._arrays:
                asq = self._arrays[array_handle]
            else:
                asq = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__asq)
                self._arrays[array_handle] = asq
            return asq
        
        @asq.setter
        def asq(self, asq):
            self.asq[...] = asq
        
        @property
        def eta(self):
            """
            Element eta ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__eta(self._handle)
        
        @eta.setter
        def eta(self, eta):
            _pyEMsoft.f90wrap_einclusiontype__set__eta(self._handle, eta)
        
        @property
        def ss1(self):
            """
            Element ss1 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__ss1(self._handle)
        
        @ss1.setter
        def ss1(self, ss1):
            _pyEMsoft.f90wrap_einclusiontype__set__ss1(self._handle, ss1)
        
        @property
        def svec(self):
            """
            Element svec ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__svec(self._handle)
            if array_handle in self._arrays:
                svec = self._arrays[array_handle]
            else:
                svec = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__svec)
                self._arrays[array_handle] = svec
            return svec
        
        @svec.setter
        def svec(self, svec):
            self.svec[...] = svec
        
        @property
        def qs1(self):
            """
            Element qs1 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__qs1(self._handle)
        
        @qs1.setter
        def qs1(self, qs1):
            _pyEMsoft.f90wrap_einclusiontype__set__qs1(self._handle, qs1)
        
        @property
        def qvec1(self):
            """
            Element qvec1 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__qvec1(self._handle)
            if array_handle in self._arrays:
                qvec1 = self._arrays[array_handle]
            else:
                qvec1 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__qvec1)
                self._arrays[array_handle] = qvec1
            return qvec1
        
        @qvec1.setter
        def qvec1(self, qvec1):
            self.qvec1[...] = qvec1
        
        @property
        def qvec2(self):
            """
            Element qvec2 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__qvec2(self._handle)
            if array_handle in self._arrays:
                qvec2 = self._arrays[array_handle]
            else:
                qvec2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__qvec2)
                self._arrays[array_handle] = qvec2
            return qvec2
        
        @qvec2.setter
        def qvec2(self, qvec2):
            self.qvec2[...] = qvec2
        
        @property
        def deltaij(self):
            """
            Element deltaij ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__deltaij(self._handle)
            if array_handle in self._arrays:
                deltaij = self._arrays[array_handle]
            else:
                deltaij = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__deltaij)
                self._arrays[array_handle] = deltaij
            return deltaij
        
        @deltaij.setter
        def deltaij(self, deltaij):
            self.deltaij[...] = deltaij
        
        @property
        def kel(self):
            """
            Element kel ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__kel(self._handle)
        
        @kel.setter
        def kel(self, kel):
            _pyEMsoft.f90wrap_einclusiontype__set__kel(self._handle, kel)
        
        @property
        def prei1(self):
            """
            Element prei1 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__prei1(self._handle)
        
        @prei1.setter
        def prei1(self, prei1):
            _pyEMsoft.f90wrap_einclusiontype__set__prei1(self._handle, prei1)
        
        @property
        def prei3(self):
            """
            Element prei3 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__prei3(self._handle)
        
        @prei3.setter
        def prei3(self, prei3):
            _pyEMsoft.f90wrap_einclusiontype__set__prei3(self._handle, prei3)
        
        @property
        def s3(self):
            """
            Element s3 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__s3(self._handle)
        
        @s3.setter
        def s3(self, s3):
            _pyEMsoft.f90wrap_einclusiontype__set__s3(self._handle, s3)
        
        @property
        def c1(self):
            """
            Element c1 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__c1(self._handle)
        
        @c1.setter
        def c1(self, c1):
            _pyEMsoft.f90wrap_einclusiontype__set__c1(self._handle, c1)
        
        @property
        def c2(self):
            """
            Element c2 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__c2(self._handle)
        
        @c2.setter
        def c2(self, c2):
            _pyEMsoft.f90wrap_einclusiontype__set__c2(self._handle, c2)
        
        @property
        def mith(self):
            """
            Element mith ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__mith(self._handle)
        
        @mith.setter
        def mith(self, mith):
            _pyEMsoft.f90wrap_einclusiontype__set__mith(self._handle, mith)
        
        @property
        def math(self):
            """
            Element math ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__math(self._handle)
        
        @math.setter
        def math(self, math):
            _pyEMsoft.f90wrap_einclusiontype__set__math(self._handle, math)
        
        @property
        def thpre(self):
            """
            Element thpre ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__thpre(self._handle)
        
        @thpre.setter
        def thpre(self, thpre):
            _pyEMsoft.f90wrap_einclusiontype__set__thpre(self._handle, thpre)
        
        @property
        def iiinside(self):
            """
            Element iiinside ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__iiinside(self._handle)
            if array_handle in self._arrays:
                iiinside = self._arrays[array_handle]
            else:
                iiinside = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__iiinside)
                self._arrays[array_handle] = iiinside
            return iiinside
        
        @iiinside.setter
        def iiinside(self, iiinside):
            self.iiinside[...] = iiinside
        
        @property
        def iijinside(self):
            """
            Element iijinside ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__iijinside(self._handle)
            if array_handle in self._arrays:
                iijinside = self._arrays[array_handle]
            else:
                iijinside = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__iijinside)
                self._arrays[array_handle] = iijinside
            return iijinside
        
        @iijinside.setter
        def iijinside(self, iijinside):
            self.iijinside[...] = iijinside
        
        @property
        def xpos(self):
            """
            Element xpos ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__xpos(self._handle)
        
        @xpos.setter
        def xpos(self, xpos):
            _pyEMsoft.f90wrap_einclusiontype__set__xpos(self._handle, xpos)
        
        @property
        def ypos(self):
            """
            Element ypos ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__ypos(self._handle)
        
        @ypos.setter
        def ypos(self, ypos):
            _pyEMsoft.f90wrap_einclusiontype__set__ypos(self._handle, ypos)
        
        @property
        def zpos(self):
            """
            Element zpos ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__zpos(self._handle)
        
        @zpos.setter
        def zpos(self, zpos):
            _pyEMsoft.f90wrap_einclusiontype__set__zpos(self._handle, zpos)
        
        @property
        def esv(self):
            """
            Element esv ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__esv(self._handle)
            if array_handle in self._arrays:
                esv = self._arrays[array_handle]
            else:
                esv = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__esv)
                self._arrays[array_handle] = esv
            return esv
        
        @esv.setter
        def esv(self, esv):
            self.esv[...] = esv
        
        @property
        def eshelbys(self):
            """
            Element eshelbys ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1094
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__eshelbys(self._handle)
            if array_handle in self._arrays:
                eshelbys = self._arrays[array_handle]
            else:
                eshelbys = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__eshelbys)
                self._arrays[array_handle] = eshelbys
            return eshelbys
        
        @eshelbys.setter
        def eshelbys(self, eshelbys):
            self.eshelbys[...] = eshelbys
        
        @property
        def eflut(self):
            """
            Element eflut ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1095
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__eflut(self._handle)
            if array_handle in self._arrays:
                eflut = self._arrays[array_handle]
            else:
                eflut = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__eflut)
                self._arrays[array_handle] = eflut
            return eflut
        
        @eflut.setter
        def eflut(self, eflut):
            self.eflut[...] = eflut
        
        @property
        def eelut(self):
            """
            Element eelut ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1095
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_einclusiontype__array__eelut(self._handle)
            if array_handle in self._arrays:
                eelut = self._arrays[array_handle]
            else:
                eelut = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_einclusiontype__array__eelut)
                self._arrays[array_handle] = eelut
            return eelut
        
        @eelut.setter
        def eelut(self, eelut):
            self.eelut[...] = eelut
        
        @property
        def nlut(self):
            """
            Element nlut ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1096
            
            """
            return _pyEMsoft.f90wrap_einclusiontype__get__nlut(self._handle)
        
        @nlut.setter
        def nlut(self, nlut):
            _pyEMsoft.f90wrap_einclusiontype__set__nlut(self._handle, nlut)
        
        def __str__(self):
            ret = ['<einclusiontype>{\n']
            ret.append('    xyz : ')
            ret.append(repr(self.xyz))
            ret.append(',\n    a123 : ')
            ret.append(repr(self.a123))
            ret.append(',\n    a1 : ')
            ret.append(repr(self.a1))
            ret.append(',\n    a2 : ')
            ret.append(repr(self.a2))
            ret.append(',\n    a3 : ')
            ret.append(repr(self.a3))
            ret.append(',\n    principalaxes : ')
            ret.append(repr(self.principalaxes))
            ret.append(',\n    permut : ')
            ret.append(repr(self.permut))
            ret.append(',\n    rotell : ')
            ret.append(repr(self.rotell))
            ret.append(',\n    epsstar : ')
            ret.append(repr(self.epsstar))
            ret.append(',\n    nu : ')
            ret.append(repr(self.nu))
            ret.append(',\n    omnu : ')
            ret.append(repr(self.omnu))
            ret.append(',\n    pre : ')
            ret.append(repr(self.pre))
            ret.append(',\n    v : ')
            ret.append(repr(self.v))
            ret.append(',\n    a12 : ')
            ret.append(repr(self.a12))
            ret.append(',\n    a22 : ')
            ret.append(repr(self.a22))
            ret.append(',\n    a32 : ')
            ret.append(repr(self.a32))
            ret.append(',\n    asq : ')
            ret.append(repr(self.asq))
            ret.append(',\n    eta : ')
            ret.append(repr(self.eta))
            ret.append(',\n    ss1 : ')
            ret.append(repr(self.ss1))
            ret.append(',\n    svec : ')
            ret.append(repr(self.svec))
            ret.append(',\n    qs1 : ')
            ret.append(repr(self.qs1))
            ret.append(',\n    qvec1 : ')
            ret.append(repr(self.qvec1))
            ret.append(',\n    qvec2 : ')
            ret.append(repr(self.qvec2))
            ret.append(',\n    deltaij : ')
            ret.append(repr(self.deltaij))
            ret.append(',\n    kel : ')
            ret.append(repr(self.kel))
            ret.append(',\n    prei1 : ')
            ret.append(repr(self.prei1))
            ret.append(',\n    prei3 : ')
            ret.append(repr(self.prei3))
            ret.append(',\n    s3 : ')
            ret.append(repr(self.s3))
            ret.append(',\n    c1 : ')
            ret.append(repr(self.c1))
            ret.append(',\n    c2 : ')
            ret.append(repr(self.c2))
            ret.append(',\n    mith : ')
            ret.append(repr(self.mith))
            ret.append(',\n    math : ')
            ret.append(repr(self.math))
            ret.append(',\n    thpre : ')
            ret.append(repr(self.thpre))
            ret.append(',\n    iiinside : ')
            ret.append(repr(self.iiinside))
            ret.append(',\n    iijinside : ')
            ret.append(repr(self.iijinside))
            ret.append(',\n    xpos : ')
            ret.append(repr(self.xpos))
            ret.append(',\n    ypos : ')
            ret.append(repr(self.ypos))
            ret.append(',\n    zpos : ')
            ret.append(repr(self.zpos))
            ret.append(',\n    esv : ')
            ret.append(repr(self.esv))
            ret.append(',\n    eshelbys : ')
            ret.append(repr(self.eshelbys))
            ret.append(',\n    eflut : ')
            ret.append(repr(self.eflut))
            ret.append(',\n    eelut : ')
            ret.append(repr(self.eelut))
            ret.append(',\n    nlut : ')
            ret.append(repr(self.nlut))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.stackingfaulttype")
    class stackingfaulttype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=stackingfaulttype)
        
        
        Defined at typedefs.f90 lines 1098-1102
        
        """
        def __init__(self, handle=None):
            """
            self = Stackingfaulttype()
            
            
            Defined at typedefs.f90 lines 1098-1102
            
            
            Returns
            -------
            this : Stackingfaulttype
            	Object to be constructed
            
            
            Automatically generated constructor for stackingfaulttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_stackingfaulttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Stackingfaulttype
            
            
            Defined at typedefs.f90 lines 1098-1102
            
            Parameters
            ----------
            this : Stackingfaulttype
            	Object to be destructed
            
            
            Automatically generated destructor for stackingfaulttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_stackingfaulttype_finalise(this=self._handle)
        
        @property
        def lpu(self):
            """
            Element lpu ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stackingfaulttype__array__lpu(self._handle)
            if array_handle in self._arrays:
                lpu = self._arrays[array_handle]
            else:
                lpu = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stackingfaulttype__array__lpu)
                self._arrays[array_handle] = lpu
            return lpu
        
        @lpu.setter
        def lpu(self, lpu):
            self.lpu[...] = lpu
        
        @property
        def tpu(self):
            """
            Element tpu ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stackingfaulttype__array__tpu(self._handle)
            if array_handle in self._arrays:
                tpu = self._arrays[array_handle]
            else:
                tpu = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stackingfaulttype__array__tpu)
                self._arrays[array_handle] = tpu
            return tpu
        
        @tpu.setter
        def tpu(self, tpu):
            self.tpu[...] = tpu
        
        @property
        def lpb(self):
            """
            Element lpb ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stackingfaulttype__array__lpb(self._handle)
            if array_handle in self._arrays:
                lpb = self._arrays[array_handle]
            else:
                lpb = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stackingfaulttype__array__lpb)
                self._arrays[array_handle] = lpb
            return lpb
        
        @lpb.setter
        def lpb(self, lpb):
            self.lpb[...] = lpb
        
        @property
        def lpbc(self):
            """
            Element lpbc ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stackingfaulttype__array__lpbc(self._handle)
            if array_handle in self._arrays:
                lpbc = self._arrays[array_handle]
            else:
                lpbc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stackingfaulttype__array__lpbc)
                self._arrays[array_handle] = lpbc
            return lpbc
        
        @lpbc.setter
        def lpbc(self, lpbc):
            self.lpbc[...] = lpbc
        
        @property
        def tpb(self):
            """
            Element tpb ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stackingfaulttype__array__tpb(self._handle)
            if array_handle in self._arrays:
                tpb = self._arrays[array_handle]
            else:
                tpb = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stackingfaulttype__array__tpb)
                self._arrays[array_handle] = tpb
            return tpb
        
        @tpb.setter
        def tpb(self, tpb):
            self.tpb[...] = tpb
        
        @property
        def plane(self):
            """
            Element plane ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stackingfaulttype__array__plane(self._handle)
            if array_handle in self._arrays:
                plane = self._arrays[array_handle]
            else:
                plane = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stackingfaulttype__array__plane)
                self._arrays[array_handle] = plane
            return plane
        
        @plane.setter
        def plane(self, plane):
            self.plane[...] = plane
        
        @property
        def sep(self):
            """
            Element sep ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            return _pyEMsoft.f90wrap_stackingfaulttype__get__sep(self._handle)
        
        @sep.setter
        def sep(self, sep):
            _pyEMsoft.f90wrap_stackingfaulttype__set__sep(self._handle, sep)
        
        @property
        def id(self):
            """
            Element id ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            return _pyEMsoft.f90wrap_stackingfaulttype__get__id(self._handle)
        
        @id.setter
        def id(self, id):
            _pyEMsoft.f90wrap_stackingfaulttype__set__id(self._handle, id)
        
        @property
        def jd(self):
            """
            Element jd ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            return _pyEMsoft.f90wrap_stackingfaulttype__get__jd(self._handle)
        
        @jd.setter
        def jd(self, jd):
            _pyEMsoft.f90wrap_stackingfaulttype__set__jd(self._handle, jd)
        
        @property
        def lptop(self):
            """
            Element lptop ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stackingfaulttype__array__lptop(self._handle)
            if array_handle in self._arrays:
                lptop = self._arrays[array_handle]
            else:
                lptop = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stackingfaulttype__array__lptop)
                self._arrays[array_handle] = lptop
            return lptop
        
        @lptop.setter
        def lptop(self, lptop):
            self.lptop[...] = lptop
        
        @property
        def lpbot(self):
            """
            Element lpbot ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stackingfaulttype__array__lpbot(self._handle)
            if array_handle in self._arrays:
                lpbot = self._arrays[array_handle]
            else:
                lpbot = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stackingfaulttype__array__lpbot)
                self._arrays[array_handle] = lpbot
            return lpbot
        
        @lpbot.setter
        def lpbot(self, lpbot):
            self.lpbot[...] = lpbot
        
        @property
        def tptop(self):
            """
            Element tptop ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stackingfaulttype__array__tptop(self._handle)
            if array_handle in self._arrays:
                tptop = self._arrays[array_handle]
            else:
                tptop = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stackingfaulttype__array__tptop)
                self._arrays[array_handle] = tptop
            return tptop
        
        @tptop.setter
        def tptop(self, tptop):
            self.tptop[...] = tptop
        
        @property
        def tpbot(self):
            """
            Element tpbot ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stackingfaulttype__array__tpbot(self._handle)
            if array_handle in self._arrays:
                tpbot = self._arrays[array_handle]
            else:
                tpbot = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stackingfaulttype__array__tpbot)
                self._arrays[array_handle] = tpbot
            return tpbot
        
        @tpbot.setter
        def tpbot(self, tpbot):
            self.tpbot[...] = tpbot
        
        @property
        def thetan(self):
            """
            Element thetan ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            return _pyEMsoft.f90wrap_stackingfaulttype__get__thetan(self._handle)
        
        @thetan.setter
        def thetan(self, thetan):
            _pyEMsoft.f90wrap_stackingfaulttype__set__thetan(self._handle, thetan)
        
        @property
        def a_if(self):
            """
            Element a_if ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stackingfaulttype__array__a_if(self._handle)
            if array_handle in self._arrays:
                a_if = self._arrays[array_handle]
            else:
                a_if = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stackingfaulttype__array__a_if)
                self._arrays[array_handle] = a_if
            return a_if
        
        @a_if.setter
        def a_if(self, a_if):
            self.a_if[...] = a_if
        
        @property
        def lpr(self):
            """
            Element lpr ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stackingfaulttype__array__lpr(self._handle)
            if array_handle in self._arrays:
                lpr = self._arrays[array_handle]
            else:
                lpr = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stackingfaulttype__array__lpr)
                self._arrays[array_handle] = lpr
            return lpr
        
        @lpr.setter
        def lpr(self, lpr):
            self.lpr[...] = lpr
        
        @property
        def tpr(self):
            """
            Element tpr ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stackingfaulttype__array__tpr(self._handle)
            if array_handle in self._arrays:
                tpr = self._arrays[array_handle]
            else:
                tpr = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stackingfaulttype__array__tpr)
                self._arrays[array_handle] = tpr
            return tpr
        
        @tpr.setter
        def tpr(self, tpr):
            self.tpr[...] = tpr
        
        @property
        def rdisp(self):
            """
            Element rdisp ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stackingfaulttype__array__rdisp(self._handle)
            if array_handle in self._arrays:
                rdisp = self._arrays[array_handle]
            else:
                rdisp = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stackingfaulttype__array__rdisp)
                self._arrays[array_handle] = rdisp
            return rdisp
        
        @rdisp.setter
        def rdisp(self, rdisp):
            self.rdisp[...] = rdisp
        
        @property
        def poisson(self):
            """
            Element poisson ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1101
            
            """
            return _pyEMsoft.f90wrap_stackingfaulttype__get__poisson(self._handle)
        
        @poisson.setter
        def poisson(self, poisson):
            _pyEMsoft.f90wrap_stackingfaulttype__set__poisson(self._handle, poisson)
        
        @property
        def zpos(self):
            """
            Element zpos ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1102
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stackingfaulttype__array__zpos(self._handle)
            if array_handle in self._arrays:
                zpos = self._arrays[array_handle]
            else:
                zpos = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stackingfaulttype__array__zpos)
                self._arrays[array_handle] = zpos
            return zpos
        
        @zpos.setter
        def zpos(self, zpos):
            self.zpos[...] = zpos
        
        def __str__(self):
            ret = ['<stackingfaulttype>{\n']
            ret.append('    lpu : ')
            ret.append(repr(self.lpu))
            ret.append(',\n    tpu : ')
            ret.append(repr(self.tpu))
            ret.append(',\n    lpb : ')
            ret.append(repr(self.lpb))
            ret.append(',\n    lpbc : ')
            ret.append(repr(self.lpbc))
            ret.append(',\n    tpb : ')
            ret.append(repr(self.tpb))
            ret.append(',\n    plane : ')
            ret.append(repr(self.plane))
            ret.append(',\n    sep : ')
            ret.append(repr(self.sep))
            ret.append(',\n    id : ')
            ret.append(repr(self.id))
            ret.append(',\n    jd : ')
            ret.append(repr(self.jd))
            ret.append(',\n    lptop : ')
            ret.append(repr(self.lptop))
            ret.append(',\n    lpbot : ')
            ret.append(repr(self.lpbot))
            ret.append(',\n    tptop : ')
            ret.append(repr(self.tptop))
            ret.append(',\n    tpbot : ')
            ret.append(repr(self.tpbot))
            ret.append(',\n    thetan : ')
            ret.append(repr(self.thetan))
            ret.append(',\n    a_if : ')
            ret.append(repr(self.a_if))
            ret.append(',\n    lpr : ')
            ret.append(repr(self.lpr))
            ret.append(',\n    tpr : ')
            ret.append(repr(self.tpr))
            ret.append(',\n    rdisp : ')
            ret.append(repr(self.rdisp))
            ret.append(',\n    poisson : ')
            ret.append(repr(self.poisson))
            ret.append(',\n    zpos : ')
            ret.append(repr(self.zpos))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.voidtype")
    class voidtype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=voidtype)
        
        
        Defined at typedefs.f90 lines 1104-1105
        
        """
        def __init__(self, handle=None):
            """
            self = Voidtype()
            
            
            Defined at typedefs.f90 lines 1104-1105
            
            
            Returns
            -------
            this : Voidtype
            	Object to be constructed
            
            
            Automatically generated constructor for voidtype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_voidtype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Voidtype
            
            
            Defined at typedefs.f90 lines 1104-1105
            
            Parameters
            ----------
            this : Voidtype
            	Object to be destructed
            
            
            Automatically generated destructor for voidtype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_voidtype_finalise(this=self._handle)
        
        @property
        def xpos(self):
            """
            Element xpos ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1105
            
            """
            return _pyEMsoft.f90wrap_voidtype__get__xpos(self._handle)
        
        @xpos.setter
        def xpos(self, xpos):
            _pyEMsoft.f90wrap_voidtype__set__xpos(self._handle, xpos)
        
        @property
        def ypos(self):
            """
            Element ypos ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1105
            
            """
            return _pyEMsoft.f90wrap_voidtype__get__ypos(self._handle)
        
        @ypos.setter
        def ypos(self, ypos):
            _pyEMsoft.f90wrap_voidtype__set__ypos(self._handle, ypos)
        
        @property
        def zpos(self):
            """
            Element zpos ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1105
            
            """
            return _pyEMsoft.f90wrap_voidtype__get__zpos(self._handle)
        
        @zpos.setter
        def zpos(self, zpos):
            _pyEMsoft.f90wrap_voidtype__set__zpos(self._handle, zpos)
        
        @property
        def radius(self):
            """
            Element radius ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1105
            
            """
            return _pyEMsoft.f90wrap_voidtype__get__radius(self._handle)
        
        @radius.setter
        def radius(self, radius):
            _pyEMsoft.f90wrap_voidtype__set__radius(self._handle, radius)
        
        def __str__(self):
            ret = ['<voidtype>{\n']
            ret.append('    xpos : ')
            ret.append(repr(self.xpos))
            ret.append(',\n    ypos : ')
            ret.append(repr(self.ypos))
            ret.append(',\n    zpos : ')
            ret.append(repr(self.zpos))
            ret.append(',\n    radius : ')
            ret.append(repr(self.radius))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.YDtype")
    class YDtype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ydtype)
        
        
        Defined at typedefs.f90 lines 1107-1110
        
        """
        def __init__(self, handle=None):
            """
            self = Ydtype()
            
            
            Defined at typedefs.f90 lines 1107-1110
            
            
            Returns
            -------
            this : Ydtype
            	Object to be constructed
            
            
            Automatically generated constructor for ydtype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ydtype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ydtype
            
            
            Defined at typedefs.f90 lines 1107-1110
            
            Parameters
            ----------
            this : Ydtype
            	Object to be destructed
            
            
            Automatically generated destructor for ydtype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ydtype_finalise(this=self._handle)
        
        @property
        def burg(self):
            """
            Element burg ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1108
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ydtype__array__burg(self._handle)
            if array_handle in self._arrays:
                burg = self._arrays[array_handle]
            else:
                burg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ydtype__array__burg)
                self._arrays[array_handle] = burg
            return burg
        
        @burg.setter
        def burg(self, burg):
            self.burg[...] = burg
        
        @property
        def burgd(self):
            """
            Element burgd ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1108
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ydtype__array__burgd(self._handle)
            if array_handle in self._arrays:
                burgd = self._arrays[array_handle]
            else:
                burgd = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ydtype__array__burgd)
                self._arrays[array_handle] = burgd
            return burgd
        
        @burgd.setter
        def burgd(self, burgd):
            self.burgd[...] = burgd
        
        @property
        def u(self):
            """
            Element u ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1108
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ydtype__array__u(self._handle)
            if array_handle in self._arrays:
                u = self._arrays[array_handle]
            else:
                u = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ydtype__array__u)
                self._arrays[array_handle] = u
            return u
        
        @u.setter
        def u(self, u):
            self.u[...] = u
        
        @property
        def un(self):
            """
            Element un ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1108
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ydtype__array__un(self._handle)
            if array_handle in self._arrays:
                un = self._arrays[array_handle]
            else:
                un = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ydtype__array__un)
                self._arrays[array_handle] = un
            return un
        
        @un.setter
        def un(self, un):
            self.un[...] = un
        
        @property
        def g(self):
            """
            Element g ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1108
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ydtype__array__g(self._handle)
            if array_handle in self._arrays:
                g = self._arrays[array_handle]
            else:
                g = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ydtype__array__g)
                self._arrays[array_handle] = g
            return g
        
        @g.setter
        def g(self, g):
            self.g[...] = g
        
        @property
        def gn(self):
            """
            Element gn ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1108
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ydtype__array__gn(self._handle)
            if array_handle in self._arrays:
                gn = self._arrays[array_handle]
            else:
                gn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ydtype__array__gn)
                self._arrays[array_handle] = gn
            return gn
        
        @gn.setter
        def gn(self, gn):
            self.gn[...] = gn
        
        @property
        def id(self):
            """
            Element id ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1108
            
            """
            return _pyEMsoft.f90wrap_ydtype__get__id(self._handle)
        
        @id.setter
        def id(self, id):
            _pyEMsoft.f90wrap_ydtype__set__id(self._handle, id)
        
        @property
        def jd(self):
            """
            Element jd ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1108
            
            """
            return _pyEMsoft.f90wrap_ydtype__get__jd(self._handle)
        
        @jd.setter
        def jd(self, jd):
            _pyEMsoft.f90wrap_ydtype__set__jd(self._handle, jd)
        
        @property
        def zu(self):
            """
            Element zu ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1108
            
            """
            return _pyEMsoft.f90wrap_ydtype__get__zu(self._handle)
        
        @zu.setter
        def zu(self, zu):
            _pyEMsoft.f90wrap_ydtype__set__zu(self._handle, zu)
        
        @property
        def bs(self):
            """
            Element bs ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1108
            
            """
            return _pyEMsoft.f90wrap_ydtype__get__bs(self._handle)
        
        @bs.setter
        def bs(self, bs):
            _pyEMsoft.f90wrap_ydtype__set__bs(self._handle, bs)
        
        @property
        def be(self):
            """
            Element be ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1108
            
            """
            return _pyEMsoft.f90wrap_ydtype__get__be(self._handle)
        
        @be.setter
        def be(self, be):
            _pyEMsoft.f90wrap_ydtype__set__be(self._handle, be)
        
        @property
        def bx(self):
            """
            Element bx ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1108
            
            """
            return _pyEMsoft.f90wrap_ydtype__get__bx(self._handle)
        
        @bx.setter
        def bx(self, bx):
            _pyEMsoft.f90wrap_ydtype__set__bx(self._handle, bx)
        
        @property
        def beta(self):
            """
            Element beta ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1108
            
            """
            return _pyEMsoft.f90wrap_ydtype__get__beta(self._handle)
        
        @beta.setter
        def beta(self, beta):
            _pyEMsoft.f90wrap_ydtype__set__beta(self._handle, beta)
        
        @property
        def alpha(self):
            """
            Element alpha ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1109
            
            """
            return _pyEMsoft.f90wrap_ydtype__get__alpha(self._handle)
        
        @alpha.setter
        def alpha(self, alpha):
            _pyEMsoft.f90wrap_ydtype__set__alpha(self._handle, alpha)
        
        @property
        def ca(self):
            """
            Element ca ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1109
            
            """
            return _pyEMsoft.f90wrap_ydtype__get__ca(self._handle)
        
        @ca.setter
        def ca(self, ca):
            _pyEMsoft.f90wrap_ydtype__set__ca(self._handle, ca)
        
        @property
        def sa(self):
            """
            Element sa ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1109
            
            """
            return _pyEMsoft.f90wrap_ydtype__get__sa(self._handle)
        
        @sa.setter
        def sa(self, sa):
            _pyEMsoft.f90wrap_ydtype__set__sa(self._handle, sa)
        
        @property
        def ta(self):
            """
            Element ta ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1109
            
            """
            return _pyEMsoft.f90wrap_ydtype__get__ta(self._handle)
        
        @ta.setter
        def ta(self, ta):
            _pyEMsoft.f90wrap_ydtype__set__ta(self._handle, ta)
        
        @property
        def cota(self):
            """
            Element cota ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1109
            
            """
            return _pyEMsoft.f90wrap_ydtype__get__cota(self._handle)
        
        @cota.setter
        def cota(self, cota):
            _pyEMsoft.f90wrap_ydtype__set__cota(self._handle, cota)
        
        @property
        def top(self):
            """
            Element top ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1109
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ydtype__array__top(self._handle)
            if array_handle in self._arrays:
                top = self._arrays[array_handle]
            else:
                top = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ydtype__array__top)
                self._arrays[array_handle] = top
            return top
        
        @top.setter
        def top(self, top):
            self.top[...] = top
        
        @property
        def bottom(self):
            """
            Element bottom ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1109
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ydtype__array__bottom(self._handle)
            if array_handle in self._arrays:
                bottom = self._arrays[array_handle]
            else:
                bottom = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ydtype__array__bottom)
                self._arrays[array_handle] = bottom
            return bottom
        
        @bottom.setter
        def bottom(self, bottom):
            self.bottom[...] = bottom
        
        @property
        def sig(self):
            """
            Element sig ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1109
            
            """
            return _pyEMsoft.f90wrap_ydtype__get__sig(self._handle)
        
        @sig.setter
        def sig(self, sig):
            _pyEMsoft.f90wrap_ydtype__set__sig(self._handle, sig)
        
        @property
        def a_dc(self):
            """
            Element a_dc ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1110
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ydtype__array__a_dc(self._handle)
            if array_handle in self._arrays:
                a_dc = self._arrays[array_handle]
            else:
                a_dc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ydtype__array__a_dc)
                self._arrays[array_handle] = a_dc
            return a_dc
        
        @a_dc.setter
        def a_dc(self, a_dc):
            self.a_dc[...] = a_dc
        
        @property
        def a_id(self):
            """
            Element a_id ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1110
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ydtype__array__a_id(self._handle)
            if array_handle in self._arrays:
                a_id = self._arrays[array_handle]
            else:
                a_id = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ydtype__array__a_id)
                self._arrays[array_handle] = a_id
            return a_id
        
        @a_id.setter
        def a_id(self, a_id):
            self.a_id[...] = a_id
        
        @property
        def a_di(self):
            """
            Element a_di ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1110
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ydtype__array__a_di(self._handle)
            if array_handle in self._arrays:
                a_di = self._arrays[array_handle]
            else:
                a_di = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ydtype__array__a_di)
                self._arrays[array_handle] = a_di
            return a_di
        
        @a_di.setter
        def a_di(self, a_di):
            self.a_di[...] = a_di
        
        def __str__(self):
            ret = ['<ydtype>{\n']
            ret.append('    burg : ')
            ret.append(repr(self.burg))
            ret.append(',\n    burgd : ')
            ret.append(repr(self.burgd))
            ret.append(',\n    u : ')
            ret.append(repr(self.u))
            ret.append(',\n    un : ')
            ret.append(repr(self.un))
            ret.append(',\n    g : ')
            ret.append(repr(self.g))
            ret.append(',\n    gn : ')
            ret.append(repr(self.gn))
            ret.append(',\n    id : ')
            ret.append(repr(self.id))
            ret.append(',\n    jd : ')
            ret.append(repr(self.jd))
            ret.append(',\n    zu : ')
            ret.append(repr(self.zu))
            ret.append(',\n    bs : ')
            ret.append(repr(self.bs))
            ret.append(',\n    be : ')
            ret.append(repr(self.be))
            ret.append(',\n    bx : ')
            ret.append(repr(self.bx))
            ret.append(',\n    beta : ')
            ret.append(repr(self.beta))
            ret.append(',\n    alpha : ')
            ret.append(repr(self.alpha))
            ret.append(',\n    ca : ')
            ret.append(repr(self.ca))
            ret.append(',\n    sa : ')
            ret.append(repr(self.sa))
            ret.append(',\n    ta : ')
            ret.append(repr(self.ta))
            ret.append(',\n    cota : ')
            ret.append(repr(self.cota))
            ret.append(',\n    top : ')
            ret.append(repr(self.top))
            ret.append(',\n    bottom : ')
            ret.append(repr(self.bottom))
            ret.append(',\n    sig : ')
            ret.append(repr(self.sig))
            ret.append(',\n    a_dc : ')
            ret.append(repr(self.a_dc))
            ret.append(',\n    a_id : ')
            ret.append(repr(self.a_id))
            ret.append(',\n    a_di : ')
            ret.append(repr(self.a_di))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.apbtype")
    class apbtype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=apbtype)
        
        
        Defined at typedefs.f90 lines 1112-1113
        
        """
        def __init__(self, handle=None):
            """
            self = Apbtype()
            
            
            Defined at typedefs.f90 lines 1112-1113
            
            
            Returns
            -------
            this : Apbtype
            	Object to be constructed
            
            
            Automatically generated constructor for apbtype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_apbtype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Apbtype
            
            
            Defined at typedefs.f90 lines 1112-1113
            
            Parameters
            ----------
            this : Apbtype
            	Object to be destructed
            
            
            Automatically generated destructor for apbtype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_apbtype_finalise(this=self._handle)
        
        @property
        def xpos(self):
            """
            Element xpos ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1113
            
            """
            return _pyEMsoft.f90wrap_apbtype__get__xpos(self._handle)
        
        @xpos.setter
        def xpos(self, xpos):
            _pyEMsoft.f90wrap_apbtype__set__xpos(self._handle, xpos)
        
        @property
        def ypos(self):
            """
            Element ypos ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1113
            
            """
            return _pyEMsoft.f90wrap_apbtype__get__ypos(self._handle)
        
        @ypos.setter
        def ypos(self, ypos):
            _pyEMsoft.f90wrap_apbtype__set__ypos(self._handle, ypos)
        
        @property
        def zpos(self):
            """
            Element zpos ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1113
            
            """
            return _pyEMsoft.f90wrap_apbtype__get__zpos(self._handle)
        
        @zpos.setter
        def zpos(self, zpos):
            _pyEMsoft.f90wrap_apbtype__set__zpos(self._handle, zpos)
        
        @property
        def radius(self):
            """
            Element radius ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1113
            
            """
            return _pyEMsoft.f90wrap_apbtype__get__radius(self._handle)
        
        @radius.setter
        def radius(self, radius):
            _pyEMsoft.f90wrap_apbtype__set__radius(self._handle, radius)
        
        @property
        def w(self):
            """
            Element w ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1113
            
            """
            return _pyEMsoft.f90wrap_apbtype__get__w(self._handle)
        
        @w.setter
        def w(self, w):
            _pyEMsoft.f90wrap_apbtype__set__w(self._handle, w)
        
        @property
        def rdisp(self):
            """
            Element rdisp ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1113
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_apbtype__array__rdisp(self._handle)
            if array_handle in self._arrays:
                rdisp = self._arrays[array_handle]
            else:
                rdisp = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_apbtype__array__rdisp)
                self._arrays[array_handle] = rdisp
            return rdisp
        
        @rdisp.setter
        def rdisp(self, rdisp):
            self.rdisp[...] = rdisp
        
        def __str__(self):
            ret = ['<apbtype>{\n']
            ret.append('    xpos : ')
            ret.append(repr(self.xpos))
            ret.append(',\n    ypos : ')
            ret.append(repr(self.ypos))
            ret.append(',\n    zpos : ')
            ret.append(repr(self.zpos))
            ret.append(',\n    radius : ')
            ret.append(repr(self.radius))
            ret.append(',\n    w : ')
            ret.append(repr(self.w))
            ret.append(',\n    rdisp : ')
            ret.append(repr(self.rdisp))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.defecttype")
    class defecttype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=defecttype)
        
        
        Defined at typedefs.f90 lines 1120-1133
        
        """
        def __init__(self, handle=None):
            """
            self = Defecttype()
            
            
            Defined at typedefs.f90 lines 1120-1133
            
            
            Returns
            -------
            this : Defecttype
            	Object to be constructed
            
            
            Automatically generated constructor for defecttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_defecttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Defecttype
            
            
            Defined at typedefs.f90 lines 1120-1133
            
            Parameters
            ----------
            this : Defecttype
            	Object to be destructed
            
            
            Automatically generated destructor for defecttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_defecttype_finalise(this=self._handle)
        
        @property
        def numvoids(self):
            """
            Element numvoids ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1121
            
            """
            return _pyEMsoft.f90wrap_defecttype__get__numvoids(self._handle)
        
        @numvoids.setter
        def numvoids(self, numvoids):
            _pyEMsoft.f90wrap_defecttype__set__numvoids(self._handle, numvoids)
        
        @property
        def numdisl(self):
            """
            Element numdisl ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1121
            
            """
            return _pyEMsoft.f90wrap_defecttype__get__numdisl(self._handle)
        
        @numdisl.setter
        def numdisl(self, numdisl):
            _pyEMsoft.f90wrap_defecttype__set__numdisl(self._handle, numdisl)
        
        @property
        def numydisl(self):
            """
            Element numydisl ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1121
            
            """
            return _pyEMsoft.f90wrap_defecttype__get__numydisl(self._handle)
        
        @numydisl.setter
        def numydisl(self, numydisl):
            _pyEMsoft.f90wrap_defecttype__set__numydisl(self._handle, numydisl)
        
        @property
        def numsf(self):
            """
            Element numsf ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1121
            
            """
            return _pyEMsoft.f90wrap_defecttype__get__numsf(self._handle)
        
        @numsf.setter
        def numsf(self, numsf):
            _pyEMsoft.f90wrap_defecttype__set__numsf(self._handle, numsf)
        
        @property
        def numinc(self):
            """
            Element numinc ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1121
            
            """
            return _pyEMsoft.f90wrap_defecttype__get__numinc(self._handle)
        
        @numinc.setter
        def numinc(self, numinc):
            _pyEMsoft.f90wrap_defecttype__set__numinc(self._handle, numinc)
        
        @property
        def numeinc(self):
            """
            Element numeinc ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1121
            
            """
            return _pyEMsoft.f90wrap_defecttype__get__numeinc(self._handle)
        
        @numeinc.setter
        def numeinc(self, numeinc):
            _pyEMsoft.f90wrap_defecttype__set__numeinc(self._handle, numeinc)
        
        @property
        def numapb(self):
            """
            Element numapb ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1121
            
            """
            return _pyEMsoft.f90wrap_defecttype__get__numapb(self._handle)
        
        @numapb.setter
        def numapb(self, numapb):
            _pyEMsoft.f90wrap_defecttype__set__numapb(self._handle, numapb)
        
        @property
        def foilname(self):
            """
            Element foilname ftype=character(fnlen) pytype=str
            
            
            Defined at typedefs.f90 line 1122
            
            """
            return _pyEMsoft.f90wrap_defecttype__get__foilname(self._handle)
        
        @foilname.setter
        def foilname(self, foilname):
            _pyEMsoft.f90wrap_defecttype__set__foilname(self._handle, foilname)
        
        @property
        def nmat(self):
            """
            Element nmat ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1123
            
            """
            return _pyEMsoft.f90wrap_defecttype__get__nmat(self._handle)
        
        @nmat.setter
        def nmat(self, nmat):
            _pyEMsoft.f90wrap_defecttype__set__nmat(self._handle, nmat)
        
        @property
        def df_g(self):
            """
            Element df_g ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1123
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_defecttype__array__df_g(self._handle)
            if array_handle in self._arrays:
                df_g = self._arrays[array_handle]
            else:
                df_g = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_defecttype__array__df_g)
                self._arrays[array_handle] = df_g
            return df_g
        
        @df_g.setter
        def df_g(self, df_g):
            self.df_g[...] = df_g
        
        @property
        def df_npix(self):
            """
            Element df_npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1123
            
            """
            return _pyEMsoft.f90wrap_defecttype__get__df_npix(self._handle)
        
        @df_npix.setter
        def df_npix(self, df_npix):
            _pyEMsoft.f90wrap_defecttype__set__df_npix(self._handle, df_npix)
        
        @property
        def df_npiy(self):
            """
            Element df_npiy ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1123
            
            """
            return _pyEMsoft.f90wrap_defecttype__get__df_npiy(self._handle)
        
        @df_npiy.setter
        def df_npiy(self, df_npiy):
            _pyEMsoft.f90wrap_defecttype__set__df_npiy(self._handle, df_npiy)
        
        @property
        def df_nums(self):
            """
            Element df_nums ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1123
            
            """
            return _pyEMsoft.f90wrap_defecttype__get__df_nums(self._handle)
        
        @df_nums.setter
        def df_nums(self, df_nums):
            _pyEMsoft.f90wrap_defecttype__set__df_nums(self._handle, df_nums)
        
        @property
        def df_numinclusion(self):
            """
            Element df_numinclusion ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1123
            
            """
            return _pyEMsoft.f90wrap_defecttype__get__df_numinclusion(self._handle)
        
        @df_numinclusion.setter
        def df_numinclusion(self, df_numinclusion):
            _pyEMsoft.f90wrap_defecttype__set__df_numinclusion(self._handle, \
                df_numinclusion)
        
        @property
        def df_numvoid(self):
            """
            Element df_numvoid ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1123
            
            """
            return _pyEMsoft.f90wrap_defecttype__get__df_numvoid(self._handle)
        
        @df_numvoid.setter
        def df_numvoid(self, df_numvoid):
            _pyEMsoft.f90wrap_defecttype__set__df_numvoid(self._handle, df_numvoid)
        
        @property
        def df_slice(self):
            """
            Element df_slice ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1124
            
            """
            return _pyEMsoft.f90wrap_defecttype__get__df_slice(self._handle)
        
        @df_slice.setter
        def df_slice(self, df_slice):
            _pyEMsoft.f90wrap_defecttype__set__df_slice(self._handle, df_slice)
        
        @property
        def df_l(self):
            """
            Element df_l ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1124
            
            """
            return _pyEMsoft.f90wrap_defecttype__get__df_l(self._handle)
        
        @df_l.setter
        def df_l(self, df_l):
            _pyEMsoft.f90wrap_defecttype__set__df_l(self._handle, df_l)
        
        @property
        def df_gc(self):
            """
            Element df_gc ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1124
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_defecttype__array__df_gc(self._handle)
            if array_handle in self._arrays:
                df_gc = self._arrays[array_handle]
            else:
                df_gc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_defecttype__array__df_gc)
                self._arrays[array_handle] = df_gc
            return df_gc
        
        @df_gc.setter
        def df_gc(self, df_gc):
            self.df_gc[...] = df_gc
        
        @property
        def df_gstar(self):
            """
            Element df_gstar ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1124
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_defecttype__array__df_gstar(self._handle)
            if array_handle in self._arrays:
                df_gstar = self._arrays[array_handle]
            else:
                df_gstar = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_defecttype__array__df_gstar)
                self._arrays[array_handle] = df_gstar
            return df_gstar
        
        @df_gstar.setter
        def df_gstar(self, df_gstar):
            self.df_gstar[...] = df_gstar
        
        @property
        def df_gf(self):
            """
            Element df_gf ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1124
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_defecttype__array__df_gf(self._handle)
            if array_handle in self._arrays:
                df_gf = self._arrays[array_handle]
            else:
                df_gf = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_defecttype__array__df_gf)
                self._arrays[array_handle] = df_gf
            return df_gf
        
        @df_gf.setter
        def df_gf(self, df_gf):
            self.df_gf[...] = df_gf
        
        @property
        def df_foilsg(self):
            """
            Element df_foilsg ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1126
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_defecttype__array__df_foilsg(self._handle)
            if array_handle in self._arrays:
                df_foilsg = self._arrays[array_handle]
            else:
                df_foilsg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_defecttype__array__df_foilsg)
                self._arrays[array_handle] = df_foilsg
            return df_foilsg
        
        @df_foilsg.setter
        def df_foilsg(self, df_foilsg):
            self.df_foilsg[...] = df_foilsg
        
        @property
        def df_r(self):
            """
            Element df_r ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1126
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_defecttype__array__df_r(self._handle)
            if array_handle in self._arrays:
                df_r = self._arrays[array_handle]
            else:
                df_r = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_defecttype__array__df_r)
                self._arrays[array_handle] = df_r
            return df_r
        
        @df_r.setter
        def df_r(self, df_r):
            self.df_r[...] = df_r
        
        def __str__(self):
            ret = ['<defecttype>{\n']
            ret.append('    numvoids : ')
            ret.append(repr(self.numvoids))
            ret.append(',\n    numdisl : ')
            ret.append(repr(self.numdisl))
            ret.append(',\n    numydisl : ')
            ret.append(repr(self.numydisl))
            ret.append(',\n    numsf : ')
            ret.append(repr(self.numsf))
            ret.append(',\n    numinc : ')
            ret.append(repr(self.numinc))
            ret.append(',\n    numeinc : ')
            ret.append(repr(self.numeinc))
            ret.append(',\n    numapb : ')
            ret.append(repr(self.numapb))
            ret.append(',\n    foilname : ')
            ret.append(repr(self.foilname))
            ret.append(',\n    nmat : ')
            ret.append(repr(self.nmat))
            ret.append(',\n    df_g : ')
            ret.append(repr(self.df_g))
            ret.append(',\n    df_npix : ')
            ret.append(repr(self.df_npix))
            ret.append(',\n    df_npiy : ')
            ret.append(repr(self.df_npiy))
            ret.append(',\n    df_nums : ')
            ret.append(repr(self.df_nums))
            ret.append(',\n    df_numinclusion : ')
            ret.append(repr(self.df_numinclusion))
            ret.append(',\n    df_numvoid : ')
            ret.append(repr(self.df_numvoid))
            ret.append(',\n    df_slice : ')
            ret.append(repr(self.df_slice))
            ret.append(',\n    df_l : ')
            ret.append(repr(self.df_l))
            ret.append(',\n    df_gc : ')
            ret.append(repr(self.df_gc))
            ret.append(',\n    df_gstar : ')
            ret.append(repr(self.df_gstar))
            ret.append(',\n    df_gf : ')
            ret.append(repr(self.df_gf))
            ret.append(',\n    df_foilsg : ')
            ret.append(repr(self.df_foilsg))
            ret.append(',\n    df_r : ')
            ret.append(repr(self.df_r))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.gnode")
    class gnode(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=gnode)
        
        
        Defined at typedefs.f90 lines 1139-1152
        
        """
        def __init__(self, handle=None):
            """
            self = Gnode()
            
            
            Defined at typedefs.f90 lines 1139-1152
            
            
            Returns
            -------
            this : Gnode
            	Object to be constructed
            
            
            Automatically generated constructor for gnode
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_gnode_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Gnode
            
            
            Defined at typedefs.f90 lines 1139-1152
            
            Parameters
            ----------
            this : Gnode
            	Object to be destructed
            
            
            Automatically generated destructor for gnode
            """
            if self._alloc:
                _pyEMsoft.f90wrap_gnode_finalise(this=self._handle)
        
        @property
        def method(self):
            """
            Element method ftype=character(2) pytype=str
            
            
            Defined at typedefs.f90 line 1140
            
            """
            return _pyEMsoft.f90wrap_gnode__get__method(self._handle)
        
        @method.setter
        def method(self, method):
            _pyEMsoft.f90wrap_gnode__set__method(self._handle, method)
        
        @property
        def absorption(self):
            """
            Element absorption ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1141
            
            """
            return _pyEMsoft.f90wrap_gnode__get__absorption(self._handle)
        
        @absorption.setter
        def absorption(self, absorption):
            _pyEMsoft.f90wrap_gnode__set__absorption(self._handle, absorption)
        
        @property
        def hkl(self):
            """
            Element hkl ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1142
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_gnode__array__hkl(self._handle)
            if array_handle in self._arrays:
                hkl = self._arrays[array_handle]
            else:
                hkl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_gnode__array__hkl)
                self._arrays[array_handle] = hkl
            return hkl
        
        @hkl.setter
        def hkl(self, hkl):
            self.hkl[...] = hkl
        
        @property
        def xg(self):
            """
            Element xg ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1149
            
            """
            return _pyEMsoft.f90wrap_gnode__get__xg(self._handle)
        
        @xg.setter
        def xg(self, xg):
            _pyEMsoft.f90wrap_gnode__set__xg(self._handle, xg)
        
        @property
        def xgp(self):
            """
            Element xgp ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1149
            
            """
            return _pyEMsoft.f90wrap_gnode__get__xgp(self._handle)
        
        @xgp.setter
        def xgp(self, xgp):
            _pyEMsoft.f90wrap_gnode__set__xgp(self._handle, xgp)
        
        @property
        def ar(self):
            """
            Element ar ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1149
            
            """
            return _pyEMsoft.f90wrap_gnode__get__ar(self._handle)
        
        @ar.setter
        def ar(self, ar):
            _pyEMsoft.f90wrap_gnode__set__ar(self._handle, ar)
        
        @property
        def g(self):
            """
            Element g ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1149
            
            """
            return _pyEMsoft.f90wrap_gnode__get__g(self._handle)
        
        @g.setter
        def g(self, g):
            _pyEMsoft.f90wrap_gnode__set__g(self._handle, g)
        
        @property
        def vmod(self):
            """
            Element vmod ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1149
            
            """
            return _pyEMsoft.f90wrap_gnode__get__vmod(self._handle)
        
        @vmod.setter
        def vmod(self, vmod):
            _pyEMsoft.f90wrap_gnode__set__vmod(self._handle, vmod)
        
        @property
        def vpmod(self):
            """
            Element vpmod ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1149
            
            """
            return _pyEMsoft.f90wrap_gnode__get__vpmod(self._handle)
        
        @vpmod.setter
        def vpmod(self, vpmod):
            _pyEMsoft.f90wrap_gnode__set__vpmod(self._handle, vpmod)
        
        @property
        def umod(self):
            """
            Element umod ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1149
            
            """
            return _pyEMsoft.f90wrap_gnode__get__umod(self._handle)
        
        @umod.setter
        def umod(self, umod):
            _pyEMsoft.f90wrap_gnode__set__umod(self._handle, umod)
        
        @property
        def upmod(self):
            """
            Element upmod ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1149
            
            """
            return _pyEMsoft.f90wrap_gnode__get__upmod(self._handle)
        
        @upmod.setter
        def upmod(self, upmod):
            _pyEMsoft.f90wrap_gnode__set__upmod(self._handle, upmod)
        
        @property
        def vphase(self):
            """
            Element vphase ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1149
            
            """
            return _pyEMsoft.f90wrap_gnode__get__vphase(self._handle)
        
        @vphase.setter
        def vphase(self, vphase):
            _pyEMsoft.f90wrap_gnode__set__vphase(self._handle, vphase)
        
        @property
        def vpphase(self):
            """
            Element vpphase ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1149
            
            """
            return _pyEMsoft.f90wrap_gnode__get__vpphase(self._handle)
        
        @vpphase.setter
        def vpphase(self, vpphase):
            _pyEMsoft.f90wrap_gnode__set__vpphase(self._handle, vpphase)
        
        @property
        def ucg(self):
            """
            Element ucg ftype=complex(kind=sgl) pytype=complex
            
            
            Defined at typedefs.f90 line 1152
            
            """
            return _pyEMsoft.f90wrap_gnode__get__ucg(self._handle)
        
        @ucg.setter
        def ucg(self, ucg):
            _pyEMsoft.f90wrap_gnode__set__ucg(self._handle, ucg)
        
        @property
        def vg(self):
            """
            Element vg ftype=complex(kind=sgl) pytype=complex
            
            
            Defined at typedefs.f90 line 1152
            
            """
            return _pyEMsoft.f90wrap_gnode__get__vg(self._handle)
        
        @vg.setter
        def vg(self, vg):
            _pyEMsoft.f90wrap_gnode__set__vg(self._handle, vg)
        
        @property
        def qg(self):
            """
            Element qg ftype=complex(kind=sgl) pytype=complex
            
            
            Defined at typedefs.f90 line 1152
            
            """
            return _pyEMsoft.f90wrap_gnode__get__qg(self._handle)
        
        @qg.setter
        def qg(self, qg):
            _pyEMsoft.f90wrap_gnode__set__qg(self._handle, qg)
        
        def __str__(self):
            ret = ['<gnode>{\n']
            ret.append('    method : ')
            ret.append(repr(self.method))
            ret.append(',\n    absorption : ')
            ret.append(repr(self.absorption))
            ret.append(',\n    hkl : ')
            ret.append(repr(self.hkl))
            ret.append(',\n    xg : ')
            ret.append(repr(self.xg))
            ret.append(',\n    xgp : ')
            ret.append(repr(self.xgp))
            ret.append(',\n    ar : ')
            ret.append(repr(self.ar))
            ret.append(',\n    g : ')
            ret.append(repr(self.g))
            ret.append(',\n    vmod : ')
            ret.append(repr(self.vmod))
            ret.append(',\n    vpmod : ')
            ret.append(repr(self.vpmod))
            ret.append(',\n    umod : ')
            ret.append(repr(self.umod))
            ret.append(',\n    upmod : ')
            ret.append(repr(self.upmod))
            ret.append(',\n    vphase : ')
            ret.append(repr(self.vphase))
            ret.append(',\n    vpphase : ')
            ret.append(repr(self.vpphase))
            ret.append(',\n    ucg : ')
            ret.append(repr(self.ucg))
            ret.append(',\n    vg : ')
            ret.append(repr(self.vg))
            ret.append(',\n    qg : ')
            ret.append(repr(self.qg))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.DynType")
    class DynType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=dyntype)
        
        
        Defined at typedefs.f90 lines 1158-1171
        
        """
        def __init__(self, handle=None):
            """
            self = Dyntype()
            
            
            Defined at typedefs.f90 lines 1158-1171
            
            
            Returns
            -------
            this : Dyntype
            	Object to be constructed
            
            
            Automatically generated constructor for dyntype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_dyntype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Dyntype
            
            
            Defined at typedefs.f90 lines 1158-1171
            
            Parameters
            ----------
            this : Dyntype
            	Object to be destructed
            
            
            Automatically generated destructor for dyntype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_dyntype_finalise(this=self._handle)
        
        @property
        def wv(self):
            """
            Element wv ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1159
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dyntype__array__wv(self._handle)
            if array_handle in self._arrays:
                wv = self._arrays[array_handle]
            else:
                wv = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dyntype__array__wv)
                self._arrays[array_handle] = wv
            return wv
        
        @wv.setter
        def wv(self, wv):
            self.wv[...] = wv
        
        @property
        def fn(self):
            """
            Element fn ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1160
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dyntype__array__fn(self._handle)
            if array_handle in self._arrays:
                fn = self._arrays[array_handle]
            else:
                fn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dyntype__array__fn)
                self._arrays[array_handle] = fn
            return fn
        
        @fn.setter
        def fn(self, fn):
            self.fn[...] = fn
        
        @property
        def upz(self):
            """
            Element upz ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1161
            
            """
            return _pyEMsoft.f90wrap_dyntype__get__upz(self._handle)
        
        @upz.setter
        def upz(self, upz):
            _pyEMsoft.f90wrap_dyntype__set__upz(self._handle, upz)
        
        @property
        def dynmat(self):
            """
            Element dynmat ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 1166
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dyntype__array__dynmat(self._handle)
            if array_handle in self._arrays:
                dynmat = self._arrays[array_handle]
            else:
                dynmat = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dyntype__array__dynmat)
                self._arrays[array_handle] = dynmat
            return dynmat
        
        @dynmat.setter
        def dynmat(self, dynmat):
            self.dynmat[...] = dynmat
        
        def __str__(self):
            ret = ['<dyntype>{\n']
            ret.append('    wv : ')
            ret.append(repr(self.wv))
            ret.append(',\n    fn : ')
            ret.append(repr(self.fn))
            ret.append(',\n    upz : ')
            ret.append(repr(self.upz))
            ret.append(',\n    dynmat : ')
            ret.append(repr(self.dynmat))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.BetheParameterType")
    class BetheParameterType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=betheparametertype)
        
        
        Defined at typedefs.f90 lines 1177-1201
        
        """
        def __init__(self, handle=None):
            """
            self = Betheparametertype()
            
            
            Defined at typedefs.f90 lines 1177-1201
            
            
            Returns
            -------
            this : Betheparametertype
            	Object to be constructed
            
            
            Automatically generated constructor for betheparametertype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_betheparametertype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Betheparametertype
            
            
            Defined at typedefs.f90 lines 1177-1201
            
            Parameters
            ----------
            this : Betheparametertype
            	Object to be destructed
            
            
            Automatically generated destructor for betheparametertype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_betheparametertype_finalise(this=self._handle)
        
        @property
        def c1(self):
            """
            Element c1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1178
            
            """
            return _pyEMsoft.f90wrap_betheparametertype__get__c1(self._handle)
        
        @c1.setter
        def c1(self, c1):
            _pyEMsoft.f90wrap_betheparametertype__set__c1(self._handle, c1)
        
        @property
        def c2(self):
            """
            Element c2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1179
            
            """
            return _pyEMsoft.f90wrap_betheparametertype__get__c2(self._handle)
        
        @c2.setter
        def c2(self, c2):
            _pyEMsoft.f90wrap_betheparametertype__set__c2(self._handle, c2)
        
        @property
        def c3(self):
            """
            Element c3 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1180
            
            """
            return _pyEMsoft.f90wrap_betheparametertype__get__c3(self._handle)
        
        @c3.setter
        def c3(self, c3):
            _pyEMsoft.f90wrap_betheparametertype__set__c3(self._handle, c3)
        
        @property
        def sgdbdiff(self):
            """
            Element sgdbdiff ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1181
            
            """
            return _pyEMsoft.f90wrap_betheparametertype__get__sgdbdiff(self._handle)
        
        @sgdbdiff.setter
        def sgdbdiff(self, sgdbdiff):
            _pyEMsoft.f90wrap_betheparametertype__set__sgdbdiff(self._handle, sgdbdiff)
        
        @property
        def weakcutoff(self):
            """
            Element weakcutoff ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1182
            
            """
            return _pyEMsoft.f90wrap_betheparametertype__get__weakcutoff(self._handle)
        
        @weakcutoff.setter
        def weakcutoff(self, weakcutoff):
            _pyEMsoft.f90wrap_betheparametertype__set__weakcutoff(self._handle, weakcutoff)
        
        @property
        def cutoff(self):
            """
            Element cutoff ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1183
            
            """
            return _pyEMsoft.f90wrap_betheparametertype__get__cutoff(self._handle)
        
        @cutoff.setter
        def cutoff(self, cutoff):
            _pyEMsoft.f90wrap_betheparametertype__set__cutoff(self._handle, cutoff)
        
        @property
        def sgcutoff(self):
            """
            Element sgcutoff ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1184
            
            """
            return _pyEMsoft.f90wrap_betheparametertype__get__sgcutoff(self._handle)
        
        @sgcutoff.setter
        def sgcutoff(self, sgcutoff):
            _pyEMsoft.f90wrap_betheparametertype__set__sgcutoff(self._handle, sgcutoff)
        
        @property
        def nns(self):
            """
            Element nns ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1185
            
            """
            return _pyEMsoft.f90wrap_betheparametertype__get__nns(self._handle)
        
        @nns.setter
        def nns(self, nns):
            _pyEMsoft.f90wrap_betheparametertype__set__nns(self._handle, nns)
        
        @property
        def nnw(self):
            """
            Element nnw ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1186
            
            """
            return _pyEMsoft.f90wrap_betheparametertype__get__nnw(self._handle)
        
        @nnw.setter
        def nnw(self, nnw):
            _pyEMsoft.f90wrap_betheparametertype__set__nnw(self._handle, nnw)
        
        @property
        def minweak(self):
            """
            Element minweak ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1187
            
            """
            return _pyEMsoft.f90wrap_betheparametertype__get__minweak(self._handle)
        
        @minweak.setter
        def minweak(self, minweak):
            _pyEMsoft.f90wrap_betheparametertype__set__minweak(self._handle, minweak)
        
        @property
        def minstrong(self):
            """
            Element minstrong ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1188
            
            """
            return _pyEMsoft.f90wrap_betheparametertype__get__minstrong(self._handle)
        
        @minstrong.setter
        def minstrong(self, minstrong):
            _pyEMsoft.f90wrap_betheparametertype__set__minstrong(self._handle, minstrong)
        
        @property
        def maxweak(self):
            """
            Element maxweak ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1189
            
            """
            return _pyEMsoft.f90wrap_betheparametertype__get__maxweak(self._handle)
        
        @maxweak.setter
        def maxweak(self, maxweak):
            _pyEMsoft.f90wrap_betheparametertype__set__maxweak(self._handle, maxweak)
        
        @property
        def maxstrong(self):
            """
            Element maxstrong ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1190
            
            """
            return _pyEMsoft.f90wrap_betheparametertype__get__maxstrong(self._handle)
        
        @maxstrong.setter
        def maxstrong(self, maxstrong):
            _pyEMsoft.f90wrap_betheparametertype__set__maxstrong(self._handle, maxstrong)
        
        @property
        def totweak(self):
            """
            Element totweak ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1191
            
            """
            return _pyEMsoft.f90wrap_betheparametertype__get__totweak(self._handle)
        
        @totweak.setter
        def totweak(self, totweak):
            _pyEMsoft.f90wrap_betheparametertype__set__totweak(self._handle, totweak)
        
        @property
        def totstrong(self):
            """
            Element totstrong ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1192
            
            """
            return _pyEMsoft.f90wrap_betheparametertype__get__totstrong(self._handle)
        
        @totstrong.setter
        def totstrong(self, totstrong):
            _pyEMsoft.f90wrap_betheparametertype__set__totstrong(self._handle, totstrong)
        
        @property
        def weaklist(self):
            """
            Element weaklist ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1193
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_betheparametertype__array__weaklist(self._handle)
            if array_handle in self._arrays:
                weaklist = self._arrays[array_handle]
            else:
                weaklist = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_betheparametertype__array__weaklist)
                self._arrays[array_handle] = weaklist
            return weaklist
        
        @weaklist.setter
        def weaklist(self, weaklist):
            self.weaklist[...] = weaklist
        
        @property
        def stronglist(self):
            """
            Element stronglist ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1194
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_betheparametertype__array__stronglist(self._handle)
            if array_handle in self._arrays:
                stronglist = self._arrays[array_handle]
            else:
                stronglist = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_betheparametertype__array__stronglist)
                self._arrays[array_handle] = stronglist
            return stronglist
        
        @stronglist.setter
        def stronglist(self, stronglist):
            self.stronglist[...] = stronglist
        
        @property
        def weakhkl(self):
            """
            Element weakhkl ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1195
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_betheparametertype__array__weakhkl(self._handle)
            if array_handle in self._arrays:
                weakhkl = self._arrays[array_handle]
            else:
                weakhkl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_betheparametertype__array__weakhkl)
                self._arrays[array_handle] = weakhkl
            return weakhkl
        
        @weakhkl.setter
        def weakhkl(self, weakhkl):
            self.weakhkl[...] = weakhkl
        
        @property
        def stronghkl(self):
            """
            Element stronghkl ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1196
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_betheparametertype__array__stronghkl(self._handle)
            if array_handle in self._arrays:
                stronghkl = self._arrays[array_handle]
            else:
                stronghkl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_betheparametertype__array__stronghkl)
                self._arrays[array_handle] = stronghkl
            return stronghkl
        
        @stronghkl.setter
        def stronghkl(self, stronghkl):
            self.stronghkl[...] = stronghkl
        
        @property
        def weaksg(self):
            """
            Element weaksg ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1197
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_betheparametertype__array__weaksg(self._handle)
            if array_handle in self._arrays:
                weaksg = self._arrays[array_handle]
            else:
                weaksg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_betheparametertype__array__weaksg)
                self._arrays[array_handle] = weaksg
            return weaksg
        
        @weaksg.setter
        def weaksg(self, weaksg):
            self.weaksg[...] = weaksg
        
        @property
        def strongsg(self):
            """
            Element strongsg ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1198
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_betheparametertype__array__strongsg(self._handle)
            if array_handle in self._arrays:
                strongsg = self._arrays[array_handle]
            else:
                strongsg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_betheparametertype__array__strongsg)
                self._arrays[array_handle] = strongsg
            return strongsg
        
        @strongsg.setter
        def strongsg(self, strongsg):
            self.strongsg[...] = strongsg
        
        @property
        def strongid(self):
            """
            Element strongid ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1199
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_betheparametertype__array__strongid(self._handle)
            if array_handle in self._arrays:
                strongid = self._arrays[array_handle]
            else:
                strongid = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_betheparametertype__array__strongid)
                self._arrays[array_handle] = strongid
            return strongid
        
        @strongid.setter
        def strongid(self, strongid):
            self.strongid[...] = strongid
        
        @property
        def reflistindex(self):
            """
            Element reflistindex ftype=integer(kind=sgl) pytype=int
            
            
            Defined at typedefs.f90 line 1200
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_betheparametertype__array__reflistindex(self._handle)
            if array_handle in self._arrays:
                reflistindex = self._arrays[array_handle]
            else:
                reflistindex = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_betheparametertype__array__reflistindex)
                self._arrays[array_handle] = reflistindex
            return reflistindex
        
        @reflistindex.setter
        def reflistindex(self, reflistindex):
            self.reflistindex[...] = reflistindex
        
        @property
        def weakreflistindex(self):
            """
            Element weakreflistindex ftype=integer(kind=sgl) pytype=int
            
            
            Defined at typedefs.f90 line 1201
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_betheparametertype__array__weakreflistindex(self._handle)
            if array_handle in self._arrays:
                weakreflistindex = self._arrays[array_handle]
            else:
                weakreflistindex = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_betheparametertype__array__weakreflistindex)
                self._arrays[array_handle] = weakreflistindex
            return weakreflistindex
        
        @weakreflistindex.setter
        def weakreflistindex(self, weakreflistindex):
            self.weakreflistindex[...] = weakreflistindex
        
        def __str__(self):
            ret = ['<betheparametertype>{\n']
            ret.append('    c1 : ')
            ret.append(repr(self.c1))
            ret.append(',\n    c2 : ')
            ret.append(repr(self.c2))
            ret.append(',\n    c3 : ')
            ret.append(repr(self.c3))
            ret.append(',\n    sgdbdiff : ')
            ret.append(repr(self.sgdbdiff))
            ret.append(',\n    weakcutoff : ')
            ret.append(repr(self.weakcutoff))
            ret.append(',\n    cutoff : ')
            ret.append(repr(self.cutoff))
            ret.append(',\n    sgcutoff : ')
            ret.append(repr(self.sgcutoff))
            ret.append(',\n    nns : ')
            ret.append(repr(self.nns))
            ret.append(',\n    nnw : ')
            ret.append(repr(self.nnw))
            ret.append(',\n    minweak : ')
            ret.append(repr(self.minweak))
            ret.append(',\n    minstrong : ')
            ret.append(repr(self.minstrong))
            ret.append(',\n    maxweak : ')
            ret.append(repr(self.maxweak))
            ret.append(',\n    maxstrong : ')
            ret.append(repr(self.maxstrong))
            ret.append(',\n    totweak : ')
            ret.append(repr(self.totweak))
            ret.append(',\n    totstrong : ')
            ret.append(repr(self.totstrong))
            ret.append(',\n    weaklist : ')
            ret.append(repr(self.weaklist))
            ret.append(',\n    stronglist : ')
            ret.append(repr(self.stronglist))
            ret.append(',\n    weakhkl : ')
            ret.append(repr(self.weakhkl))
            ret.append(',\n    stronghkl : ')
            ret.append(repr(self.stronghkl))
            ret.append(',\n    weaksg : ')
            ret.append(repr(self.weaksg))
            ret.append(',\n    strongsg : ')
            ret.append(repr(self.strongsg))
            ret.append(',\n    strongid : ')
            ret.append(repr(self.strongid))
            ret.append(',\n    reflistindex : ')
            ret.append(repr(self.reflistindex))
            ret.append(',\n    weakreflistindex : ')
            ret.append(repr(self.weakreflistindex))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.STEMtype")
    class STEMtype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=stemtype)
        
        
        Defined at typedefs.f90 lines 1206-1210
        
        """
        def __init__(self, handle=None):
            """
            self = Stemtype()
            
            
            Defined at typedefs.f90 lines 1206-1210
            
            
            Returns
            -------
            this : Stemtype
            	Object to be constructed
            
            
            Automatically generated constructor for stemtype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_stemtype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Stemtype
            
            
            Defined at typedefs.f90 lines 1206-1210
            
            Parameters
            ----------
            this : Stemtype
            	Object to be destructed
            
            
            Automatically generated destructor for stemtype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_stemtype_finalise(this=self._handle)
        
        @property
        def numk(self):
            """
            Element numk ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1207
            
            """
            return _pyEMsoft.f90wrap_stemtype__get__numk(self._handle)
        
        @numk.setter
        def numk(self, numk):
            _pyEMsoft.f90wrap_stemtype__set__numk(self._handle, numk)
        
        @property
        def bfmrad(self):
            """
            Element bfmrad ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1208
            
            """
            return _pyEMsoft.f90wrap_stemtype__get__bfmrad(self._handle)
        
        @bfmrad.setter
        def bfmrad(self, bfmrad):
            _pyEMsoft.f90wrap_stemtype__set__bfmrad(self._handle, bfmrad)
        
        @property
        def adfimrad(self):
            """
            Element adfimrad ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1208
            
            """
            return _pyEMsoft.f90wrap_stemtype__get__adfimrad(self._handle)
        
        @adfimrad.setter
        def adfimrad(self, adfimrad):
            _pyEMsoft.f90wrap_stemtype__set__adfimrad(self._handle, adfimrad)
        
        @property
        def adfomrad(self):
            """
            Element adfomrad ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1208
            
            """
            return _pyEMsoft.f90wrap_stemtype__get__adfomrad(self._handle)
        
        @adfomrad.setter
        def adfomrad(self, adfomrad):
            _pyEMsoft.f90wrap_stemtype__set__adfomrad(self._handle, adfomrad)
        
        @property
        def diffapmrad(self):
            """
            Element diffapmrad ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1208
            
            """
            return _pyEMsoft.f90wrap_stemtype__get__diffapmrad(self._handle)
        
        @diffapmrad.setter
        def diffapmrad(self, diffapmrad):
            _pyEMsoft.f90wrap_stemtype__set__diffapmrad(self._handle, diffapmrad)
        
        @property
        def diffapmcenter(self):
            """
            Element diffapmcenter ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1208
            
            """
            return _pyEMsoft.f90wrap_stemtype__get__diffapmcenter(self._handle)
        
        @diffapmcenter.setter
        def diffapmcenter(self, diffapmcenter):
            _pyEMsoft.f90wrap_stemtype__set__diffapmcenter(self._handle, diffapmcenter)
        
        @property
        def zabfweightsarray(self):
            """
            Element zabfweightsarray ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1209
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stemtype__array__zabfweightsarray(self._handle)
            if array_handle in self._arrays:
                zabfweightsarray = self._arrays[array_handle]
            else:
                zabfweightsarray = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stemtype__array__zabfweightsarray)
                self._arrays[array_handle] = zabfweightsarray
            return zabfweightsarray
        
        @zabfweightsarray.setter
        def zabfweightsarray(self, zabfweightsarray):
            self.zabfweightsarray[...] = zabfweightsarray
        
        @property
        def zaadfweightsarray(self):
            """
            Element zaadfweightsarray ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1209
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stemtype__array__zaadfweightsarray(self._handle)
            if array_handle in self._arrays:
                zaadfweightsarray = self._arrays[array_handle]
            else:
                zaadfweightsarray = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stemtype__array__zaadfweightsarray)
                self._arrays[array_handle] = zaadfweightsarray
            return zaadfweightsarray
        
        @zaadfweightsarray.setter
        def zaadfweightsarray(self, zaadfweightsarray):
            self.zaadfweightsarray[...] = zaadfweightsarray
        
        @property
        def sgarray(self):
            """
            Element sgarray ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1210
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stemtype__array__sgarray(self._handle)
            if array_handle in self._arrays:
                sgarray = self._arrays[array_handle]
            else:
                sgarray = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stemtype__array__sgarray)
                self._arrays[array_handle] = sgarray
            return sgarray
        
        @sgarray.setter
        def sgarray(self, sgarray):
            self.sgarray[...] = sgarray
        
        @property
        def bfweightsarray(self):
            """
            Element bfweightsarray ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1210
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stemtype__array__bfweightsarray(self._handle)
            if array_handle in self._arrays:
                bfweightsarray = self._arrays[array_handle]
            else:
                bfweightsarray = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stemtype__array__bfweightsarray)
                self._arrays[array_handle] = bfweightsarray
            return bfweightsarray
        
        @bfweightsarray.setter
        def bfweightsarray(self, bfweightsarray):
            self.bfweightsarray[...] = bfweightsarray
        
        @property
        def adfweightsarray(self):
            """
            Element adfweightsarray ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1210
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stemtype__array__adfweightsarray(self._handle)
            if array_handle in self._arrays:
                adfweightsarray = self._arrays[array_handle]
            else:
                adfweightsarray = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stemtype__array__adfweightsarray)
                self._arrays[array_handle] = adfweightsarray
            return adfweightsarray
        
        @adfweightsarray.setter
        def adfweightsarray(self, adfweightsarray):
            self.adfweightsarray[...] = adfweightsarray
        
        def __str__(self):
            ret = ['<stemtype>{\n']
            ret.append('    numk : ')
            ret.append(repr(self.numk))
            ret.append(',\n    bfmrad : ')
            ret.append(repr(self.bfmrad))
            ret.append(',\n    adfimrad : ')
            ret.append(repr(self.adfimrad))
            ret.append(',\n    adfomrad : ')
            ret.append(repr(self.adfomrad))
            ret.append(',\n    diffapmrad : ')
            ret.append(repr(self.diffapmrad))
            ret.append(',\n    diffapmcenter : ')
            ret.append(repr(self.diffapmcenter))
            ret.append(',\n    zabfweightsarray : ')
            ret.append(repr(self.zabfweightsarray))
            ret.append(',\n    zaadfweightsarray : ')
            ret.append(repr(self.zaadfweightsarray))
            ret.append(',\n    sgarray : ')
            ret.append(repr(self.sgarray))
            ret.append(',\n    bfweightsarray : ')
            ret.append(repr(self.bfweightsarray))
            ret.append(',\n    adfweightsarray : ')
            ret.append(repr(self.adfweightsarray))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.kvectorlist")
    class kvectorlist(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=kvectorlist)
        
        
        Defined at typedefs.f90 lines 1216-1221
        
        """
        def __init__(self, handle=None):
            """
            self = Kvectorlist()
            
            
            Defined at typedefs.f90 lines 1216-1221
            
            
            Returns
            -------
            this : Kvectorlist
            	Object to be constructed
            
            
            Automatically generated constructor for kvectorlist
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_kvectorlist_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Kvectorlist
            
            
            Defined at typedefs.f90 lines 1216-1221
            
            Parameters
            ----------
            this : Kvectorlist
            	Object to be destructed
            
            
            Automatically generated destructor for kvectorlist
            """
            if self._alloc:
                _pyEMsoft.f90wrap_kvectorlist_finalise(this=self._handle)
        
        @property
        def i(self):
            """
            Element i ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1217
            
            """
            return _pyEMsoft.f90wrap_kvectorlist__get__i(self._handle)
        
        @i.setter
        def i(self, i):
            _pyEMsoft.f90wrap_kvectorlist__set__i(self._handle, i)
        
        @property
        def j(self):
            """
            Element j ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1217
            
            """
            return _pyEMsoft.f90wrap_kvectorlist__get__j(self._handle)
        
        @j.setter
        def j(self, j):
            _pyEMsoft.f90wrap_kvectorlist__set__j(self._handle, j)
        
        @property
        def hs(self):
            """
            Element hs ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1217
            
            """
            return _pyEMsoft.f90wrap_kvectorlist__get__hs(self._handle)
        
        @hs.setter
        def hs(self, hs):
            _pyEMsoft.f90wrap_kvectorlist__set__hs(self._handle, hs)
        
        @property
        def kt(self):
            """
            Element kt ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1218
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_kvectorlist__array__kt(self._handle)
            if array_handle in self._arrays:
                kt = self._arrays[array_handle]
            else:
                kt = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_kvectorlist__array__kt)
                self._arrays[array_handle] = kt
            return kt
        
        @kt.setter
        def kt(self, kt):
            self.kt[...] = kt
        
        @property
        def kn(self):
            """
            Element kn ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1219
            
            """
            return _pyEMsoft.f90wrap_kvectorlist__get__kn(self._handle)
        
        @kn.setter
        def kn(self, kn):
            _pyEMsoft.f90wrap_kvectorlist__set__kn(self._handle, kn)
        
        @property
        def k(self):
            """
            Element k ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1220
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_kvectorlist__array__k(self._handle)
            if array_handle in self._arrays:
                k = self._arrays[array_handle]
            else:
                k = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_kvectorlist__array__k)
                self._arrays[array_handle] = k
            return k
        
        @k.setter
        def k(self, k):
            self.k[...] = k
        
        @property
        def next(self):
            """
            Element next ftype=type(kvectorlist) pytype=Kvectorlist
            
            
            Defined at typedefs.f90 line 1221
            
            """
            next_handle = _pyEMsoft.f90wrap_kvectorlist__get__next(self._handle)
            if tuple(next_handle) in self._objs:
                next = self._objs[tuple(next_handle)]
            else:
                next = typedefs.kvectorlist.from_handle(next_handle)
                self._objs[tuple(next_handle)] = next
            return next
        
        @next.setter
        def next(self, next):
            next = next._handle
            _pyEMsoft.f90wrap_kvectorlist__set__next(self._handle, next)
        
        def __str__(self):
            ret = ['<kvectorlist>{\n']
            ret.append('    i : ')
            ret.append(repr(self.i))
            ret.append(',\n    j : ')
            ret.append(repr(self.j))
            ret.append(',\n    hs : ')
            ret.append(repr(self.hs))
            ret.append(',\n    kt : ')
            ret.append(repr(self.kt))
            ret.append(',\n    kn : ')
            ret.append(repr(self.kn))
            ret.append(',\n    k : ')
            ret.append(repr(self.k))
            ret.append(',\n    next : ')
            ret.append(repr(self.next))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.postscript_type")
    class postscript_type(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=postscript_type)
        
        
        Defined at typedefs.f90 lines 1227-1230
        
        """
        def __init__(self, handle=None):
            """
            self = Postscript_Type()
            
            
            Defined at typedefs.f90 lines 1227-1230
            
            
            Returns
            -------
            this : Postscript_Type
            	Object to be constructed
            
            
            Automatically generated constructor for postscript_type
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_postscript_type_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Postscript_Type
            
            
            Defined at typedefs.f90 lines 1227-1230
            
            Parameters
            ----------
            this : Postscript_Type
            	Object to be destructed
            
            
            Automatically generated destructor for postscript_type
            """
            if self._alloc:
                _pyEMsoft.f90wrap_postscript_type_finalise(this=self._handle)
        
        @property
        def pspage(self):
            """
            Element pspage ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1228
            
            """
            return _pyEMsoft.f90wrap_postscript_type__get__pspage(self._handle)
        
        @pspage.setter
        def pspage(self, pspage):
            _pyEMsoft.f90wrap_postscript_type__set__pspage(self._handle, pspage)
        
        @property
        def psdash(self):
            """
            Element psdash ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1229
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_postscript_type__array__psdash(self._handle)
            if array_handle in self._arrays:
                psdash = self._arrays[array_handle]
            else:
                psdash = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_postscript_type__array__psdash)
                self._arrays[array_handle] = psdash
            return psdash
        
        @psdash.setter
        def psdash(self, psdash):
            self.psdash[...] = psdash
        
        @property
        def psfigwidth(self):
            """
            Element psfigwidth ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1229
            
            """
            return _pyEMsoft.f90wrap_postscript_type__get__psfigwidth(self._handle)
        
        @psfigwidth.setter
        def psfigwidth(self, psfigwidth):
            _pyEMsoft.f90wrap_postscript_type__set__psfigwidth(self._handle, psfigwidth)
        
        @property
        def psfigheight(self):
            """
            Element psfigheight ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1229
            
            """
            return _pyEMsoft.f90wrap_postscript_type__get__psfigheight(self._handle)
        
        @psfigheight.setter
        def psfigheight(self, psfigheight):
            _pyEMsoft.f90wrap_postscript_type__set__psfigheight(self._handle, psfigheight)
        
        @property
        def psscale(self):
            """
            Element psscale ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1229
            
            """
            return _pyEMsoft.f90wrap_postscript_type__get__psscale(self._handle)
        
        @psscale.setter
        def psscale(self, psscale):
            _pyEMsoft.f90wrap_postscript_type__set__psscale(self._handle, psscale)
        
        @property
        def psname(self):
            """
            Element psname ftype=character(fnlen) pytype=str
            
            
            Defined at typedefs.f90 line 1230
            
            """
            return _pyEMsoft.f90wrap_postscript_type__get__psname(self._handle)
        
        @psname.setter
        def psname(self, psname):
            _pyEMsoft.f90wrap_postscript_type__set__psname(self._handle, psname)
        
        def __str__(self):
            ret = ['<postscript_type>{\n']
            ret.append('    pspage : ')
            ret.append(repr(self.pspage))
            ret.append(',\n    psdash : ')
            ret.append(repr(self.psdash))
            ret.append(',\n    psfigwidth : ')
            ret.append(repr(self.psfigwidth))
            ret.append(',\n    psfigheight : ')
            ret.append(repr(self.psfigheight))
            ret.append(',\n    psscale : ')
            ret.append(repr(self.psscale))
            ret.append(',\n    psname : ')
            ret.append(repr(self.psname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.axonotype")
    class axonotype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=axonotype)
        
        
        Defined at typedefs.f90 lines 1233-1236
        
        """
        def __init__(self, handle=None):
            """
            self = Axonotype()
            
            
            Defined at typedefs.f90 lines 1233-1236
            
            
            Returns
            -------
            this : Axonotype
            	Object to be constructed
            
            
            Automatically generated constructor for axonotype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_axonotype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Axonotype
            
            
            Defined at typedefs.f90 lines 1233-1236
            
            Parameters
            ----------
            this : Axonotype
            	Object to be destructed
            
            
            Automatically generated destructor for axonotype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_axonotype_finalise(this=self._handle)
        
        @property
        def xi(self):
            """
            Element xi ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1234
            
            """
            return _pyEMsoft.f90wrap_axonotype__get__xi(self._handle)
        
        @xi.setter
        def xi(self, xi):
            _pyEMsoft.f90wrap_axonotype__set__xi(self._handle, xi)
        
        @property
        def yi(self):
            """
            Element yi ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1234
            
            """
            return _pyEMsoft.f90wrap_axonotype__get__yi(self._handle)
        
        @yi.setter
        def yi(self, yi):
            _pyEMsoft.f90wrap_axonotype__set__yi(self._handle, yi)
        
        @property
        def beta(self):
            """
            Element beta ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1234
            
            """
            return _pyEMsoft.f90wrap_axonotype__get__beta(self._handle)
        
        @beta.setter
        def beta(self, beta):
            _pyEMsoft.f90wrap_axonotype__set__beta(self._handle, beta)
        
        @property
        def xmod(self):
            """
            Element xmod ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1234
            
            """
            return _pyEMsoft.f90wrap_axonotype__get__xmod(self._handle)
        
        @xmod.setter
        def xmod(self, xmod):
            _pyEMsoft.f90wrap_axonotype__set__xmod(self._handle, xmod)
        
        @property
        def ymod(self):
            """
            Element ymod ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1234
            
            """
            return _pyEMsoft.f90wrap_axonotype__get__ymod(self._handle)
        
        @ymod.setter
        def ymod(self, ymod):
            _pyEMsoft.f90wrap_axonotype__set__ymod(self._handle, ymod)
        
        @property
        def countx(self):
            """
            Element countx ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1234
            
            """
            return _pyEMsoft.f90wrap_axonotype__get__countx(self._handle)
        
        @countx.setter
        def countx(self, countx):
            _pyEMsoft.f90wrap_axonotype__set__countx(self._handle, countx)
        
        @property
        def county(self):
            """
            Element county ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1234
            
            """
            return _pyEMsoft.f90wrap_axonotype__get__county(self._handle)
        
        @county.setter
        def county(self, county):
            _pyEMsoft.f90wrap_axonotype__set__county(self._handle, county)
        
        @property
        def grid(self):
            """
            Element grid ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1235
            
            """
            return _pyEMsoft.f90wrap_axonotype__get__grid(self._handle)
        
        @grid.setter
        def grid(self, grid):
            _pyEMsoft.f90wrap_axonotype__set__grid(self._handle, grid)
        
        @property
        def scle(self):
            """
            Element scle ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1235
            
            """
            return _pyEMsoft.f90wrap_axonotype__get__scle(self._handle)
        
        @scle.setter
        def scle(self, scle):
            _pyEMsoft.f90wrap_axonotype__set__scle(self._handle, scle)
        
        @property
        def vscle(self):
            """
            Element vscle ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1235
            
            """
            return _pyEMsoft.f90wrap_axonotype__get__vscle(self._handle)
        
        @vscle.setter
        def vscle(self, vscle):
            _pyEMsoft.f90wrap_axonotype__set__vscle(self._handle, vscle)
        
        @property
        def xstart(self):
            """
            Element xstart ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1235
            
            """
            return _pyEMsoft.f90wrap_axonotype__get__xstart(self._handle)
        
        @xstart.setter
        def xstart(self, xstart):
            _pyEMsoft.f90wrap_axonotype__set__xstart(self._handle, xstart)
        
        @property
        def ystart(self):
            """
            Element ystart ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1235
            
            """
            return _pyEMsoft.f90wrap_axonotype__get__ystart(self._handle)
        
        @ystart.setter
        def ystart(self, ystart):
            _pyEMsoft.f90wrap_axonotype__set__ystart(self._handle, ystart)
        
        @property
        def visibility(self):
            """
            Element visibility ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1236
            
            """
            return _pyEMsoft.f90wrap_axonotype__get__visibility(self._handle)
        
        @visibility.setter
        def visibility(self, visibility):
            _pyEMsoft.f90wrap_axonotype__set__visibility(self._handle, visibility)
        
        def __str__(self):
            ret = ['<axonotype>{\n']
            ret.append('    xi : ')
            ret.append(repr(self.xi))
            ret.append(',\n    yi : ')
            ret.append(repr(self.yi))
            ret.append(',\n    beta : ')
            ret.append(repr(self.beta))
            ret.append(',\n    xmod : ')
            ret.append(repr(self.xmod))
            ret.append(',\n    ymod : ')
            ret.append(repr(self.ymod))
            ret.append(',\n    countx : ')
            ret.append(repr(self.countx))
            ret.append(',\n    county : ')
            ret.append(repr(self.county))
            ret.append(',\n    grid : ')
            ret.append(repr(self.grid))
            ret.append(',\n    scle : ')
            ret.append(repr(self.scle))
            ret.append(',\n    vscle : ')
            ret.append(repr(self.vscle))
            ret.append(',\n    xstart : ')
            ret.append(repr(self.xstart))
            ret.append(',\n    ystart : ')
            ret.append(repr(self.ystart))
            ret.append(',\n    visibility : ')
            ret.append(repr(self.visibility))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.axistype")
    class axistype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=axistype)
        
        
        Defined at typedefs.f90 lines 1239-1240
        
        """
        def __init__(self, handle=None):
            """
            self = Axistype()
            
            
            Defined at typedefs.f90 lines 1239-1240
            
            
            Returns
            -------
            this : Axistype
            	Object to be constructed
            
            
            Automatically generated constructor for axistype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_axistype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Axistype
            
            
            Defined at typedefs.f90 lines 1239-1240
            
            Parameters
            ----------
            this : Axistype
            	Object to be destructed
            
            
            Automatically generated destructor for axistype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_axistype_finalise(this=self._handle)
        
        @property
        def axw(self):
            """
            Element axw ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1240
            
            """
            return _pyEMsoft.f90wrap_axistype__get__axw(self._handle)
        
        @axw.setter
        def axw(self, axw):
            _pyEMsoft.f90wrap_axistype__set__axw(self._handle, axw)
        
        @property
        def xll(self):
            """
            Element xll ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1240
            
            """
            return _pyEMsoft.f90wrap_axistype__get__xll(self._handle)
        
        @xll.setter
        def xll(self, xll):
            _pyEMsoft.f90wrap_axistype__set__xll(self._handle, xll)
        
        @property
        def yll(self):
            """
            Element yll ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1240
            
            """
            return _pyEMsoft.f90wrap_axistype__get__yll(self._handle)
        
        @yll.setter
        def yll(self, yll):
            _pyEMsoft.f90wrap_axistype__set__yll(self._handle, yll)
        
        def __str__(self):
            ret = ['<axistype>{\n']
            ret.append('    axw : ')
            ret.append(repr(self.axw))
            ret.append(',\n    xll : ')
            ret.append(repr(self.xll))
            ret.append(',\n    yll : ')
            ret.append(repr(self.yll))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.timetype")
    class timetype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=timetype)
        
        
        Defined at typedefs.f90 lines 1245-1255
        
        """
        def __init__(self, handle=None):
            """
            self = Timetype()
            
            
            Defined at typedefs.f90 lines 1245-1255
            
            
            Returns
            -------
            this : Timetype
            	Object to be constructed
            
            
            Automatically generated constructor for timetype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_timetype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Timetype
            
            
            Defined at typedefs.f90 lines 1245-1255
            
            Parameters
            ----------
            this : Timetype
            	Object to be destructed
            
            
            Automatically generated destructor for timetype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_timetype_finalise(this=self._handle)
        
        @property
        def time_t_count(self):
            """
            Element time_t_count ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1246
            
            """
            return _pyEMsoft.f90wrap_timetype__get__time_t_count(self._handle)
        
        @time_t_count.setter
        def time_t_count(self, time_t_count):
            _pyEMsoft.f90wrap_timetype__set__time_t_count(self._handle, time_t_count)
        
        @property
        def time_unit_count(self):
            """
            Element time_unit_count ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1247
            
            """
            return _pyEMsoft.f90wrap_timetype__get__time_unit_count(self._handle)
        
        @time_unit_count.setter
        def time_unit_count(self, time_unit_count):
            _pyEMsoft.f90wrap_timetype__set__time_unit_count(self._handle, time_unit_count)
        
        @property
        def time_interval(self):
            """
            Element time_interval ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1248
            
            """
            return _pyEMsoft.f90wrap_timetype__get__time_interval(self._handle)
        
        @time_interval.setter
        def time_interval(self, time_interval):
            _pyEMsoft.f90wrap_timetype__set__time_interval(self._handle, time_interval)
        
        @property
        def time_fraction(self):
            """
            Element time_fraction ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1249
            
            """
            return _pyEMsoft.f90wrap_timetype__get__time_fraction(self._handle)
        
        @time_fraction.setter
        def time_fraction(self, time_fraction):
            _pyEMsoft.f90wrap_timetype__set__time_fraction(self._handle, time_fraction)
        
        @property
        def time_newcount(self):
            """
            Element time_newcount ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1250
            
            """
            return _pyEMsoft.f90wrap_timetype__get__time_newcount(self._handle)
        
        @time_newcount.setter
        def time_newcount(self, time_newcount):
            _pyEMsoft.f90wrap_timetype__set__time_newcount(self._handle, time_newcount)
        
        @property
        def time_count_rate(self):
            """
            Element time_count_rate ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1251
            
            """
            return _pyEMsoft.f90wrap_timetype__get__time_count_rate(self._handle)
        
        @time_count_rate.setter
        def time_count_rate(self, time_count_rate):
            _pyEMsoft.f90wrap_timetype__set__time_count_rate(self._handle, time_count_rate)
        
        @property
        def time_count_max(self):
            """
            Element time_count_max ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1252
            
            """
            return _pyEMsoft.f90wrap_timetype__get__time_count_max(self._handle)
        
        @time_count_max.setter
        def time_count_max(self, time_count_max):
            _pyEMsoft.f90wrap_timetype__set__time_count_max(self._handle, time_count_max)
        
        @property
        def time_count(self):
            """
            Element time_count ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1253
            
            """
            return _pyEMsoft.f90wrap_timetype__get__time_count(self._handle)
        
        @time_count.setter
        def time_count(self, time_count):
            _pyEMsoft.f90wrap_timetype__set__time_count(self._handle, time_count)
        
        @property
        def time_old(self):
            """
            Element time_old ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1254
            
            """
            return _pyEMsoft.f90wrap_timetype__get__time_old(self._handle)
        
        @time_old.setter
        def time_old(self, time_old):
            _pyEMsoft.f90wrap_timetype__set__time_old(self._handle, time_old)
        
        @property
        def time_loops(self):
            """
            Element time_loops ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1255
            
            """
            return _pyEMsoft.f90wrap_timetype__get__time_loops(self._handle)
        
        @time_loops.setter
        def time_loops(self, time_loops):
            _pyEMsoft.f90wrap_timetype__set__time_loops(self._handle, time_loops)
        
        def __str__(self):
            ret = ['<timetype>{\n']
            ret.append('    time_t_count : ')
            ret.append(repr(self.time_t_count))
            ret.append(',\n    time_unit_count : ')
            ret.append(repr(self.time_unit_count))
            ret.append(',\n    time_interval : ')
            ret.append(repr(self.time_interval))
            ret.append(',\n    time_fraction : ')
            ret.append(repr(self.time_fraction))
            ret.append(',\n    time_newcount : ')
            ret.append(repr(self.time_newcount))
            ret.append(',\n    time_count_rate : ')
            ret.append(repr(self.time_count_rate))
            ret.append(',\n    time_count_max : ')
            ret.append(repr(self.time_count_max))
            ret.append(',\n    time_count : ')
            ret.append(repr(self.time_count))
            ret.append(',\n    time_old : ')
            ret.append(repr(self.time_old))
            ret.append(',\n    time_loops : ')
            ret.append(repr(self.time_loops))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.orientationtype")
    class orientationtype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=orientationtype)
        
        
        Defined at typedefs.f90 lines 1261-1270
        
        """
        def __init__(self, handle=None):
            """
            self = Orientationtype()
            
            
            Defined at typedefs.f90 lines 1261-1270
            
            
            Returns
            -------
            this : Orientationtype
            	Object to be constructed
            
            
            Automatically generated constructor for orientationtype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_orientationtype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Orientationtype
            
            
            Defined at typedefs.f90 lines 1261-1270
            
            Parameters
            ----------
            this : Orientationtype
            	Object to be destructed
            
            
            Automatically generated destructor for orientationtype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_orientationtype_finalise(this=self._handle)
        
        @property
        def eulang(self):
            """
            Element eulang ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1262
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtype__array__eulang(self._handle)
            if array_handle in self._arrays:
                eulang = self._arrays[array_handle]
            else:
                eulang = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtype__array__eulang)
                self._arrays[array_handle] = eulang
            return eulang
        
        @eulang.setter
        def eulang(self, eulang):
            self.eulang[...] = eulang
        
        @property
        def om(self):
            """
            Element om ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1263
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtype__array__om(self._handle)
            if array_handle in self._arrays:
                om = self._arrays[array_handle]
            else:
                om = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtype__array__om)
                self._arrays[array_handle] = om
            return om
        
        @om.setter
        def om(self, om):
            self.om[...] = om
        
        @property
        def axang(self):
            """
            Element axang ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1264
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtype__array__axang(self._handle)
            if array_handle in self._arrays:
                axang = self._arrays[array_handle]
            else:
                axang = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtype__array__axang)
                self._arrays[array_handle] = axang
            return axang
        
        @axang.setter
        def axang(self, axang):
            self.axang[...] = axang
        
        @property
        def rodrigues(self):
            """
            Element rodrigues ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1265
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtype__array__rodrigues(self._handle)
            if array_handle in self._arrays:
                rodrigues = self._arrays[array_handle]
            else:
                rodrigues = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtype__array__rodrigues)
                self._arrays[array_handle] = rodrigues
            return rodrigues
        
        @rodrigues.setter
        def rodrigues(self, rodrigues):
            self.rodrigues[...] = rodrigues
        
        @property
        def quat(self):
            """
            Element quat ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1266
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtype__array__quat(self._handle)
            if array_handle in self._arrays:
                quat = self._arrays[array_handle]
            else:
                quat = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtype__array__quat)
                self._arrays[array_handle] = quat
            return quat
        
        @quat.setter
        def quat(self, quat):
            self.quat[...] = quat
        
        @property
        def homochoric(self):
            """
            Element homochoric ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1267
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtype__array__homochoric(self._handle)
            if array_handle in self._arrays:
                homochoric = self._arrays[array_handle]
            else:
                homochoric = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtype__array__homochoric)
                self._arrays[array_handle] = homochoric
            return homochoric
        
        @homochoric.setter
        def homochoric(self, homochoric):
            self.homochoric[...] = homochoric
        
        @property
        def cubochoric(self):
            """
            Element cubochoric ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1268
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtype__array__cubochoric(self._handle)
            if array_handle in self._arrays:
                cubochoric = self._arrays[array_handle]
            else:
                cubochoric = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtype__array__cubochoric)
                self._arrays[array_handle] = cubochoric
            return cubochoric
        
        @cubochoric.setter
        def cubochoric(self, cubochoric):
            self.cubochoric[...] = cubochoric
        
        @property
        def stereographic(self):
            """
            Element stereographic ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1269
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtype__array__stereographic(self._handle)
            if array_handle in self._arrays:
                stereographic = self._arrays[array_handle]
            else:
                stereographic = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtype__array__stereographic)
                self._arrays[array_handle] = stereographic
            return stereographic
        
        @stereographic.setter
        def stereographic(self, stereographic):
            self.stereographic[...] = stereographic
        
        @property
        def rvmap(self):
            """
            Element rvmap ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1270
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtype__array__rvmap(self._handle)
            if array_handle in self._arrays:
                rvmap = self._arrays[array_handle]
            else:
                rvmap = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtype__array__rvmap)
                self._arrays[array_handle] = rvmap
            return rvmap
        
        @rvmap.setter
        def rvmap(self, rvmap):
            self.rvmap[...] = rvmap
        
        def __str__(self):
            ret = ['<orientationtype>{\n']
            ret.append('    eulang : ')
            ret.append(repr(self.eulang))
            ret.append(',\n    om : ')
            ret.append(repr(self.om))
            ret.append(',\n    axang : ')
            ret.append(repr(self.axang))
            ret.append(',\n    rodrigues : ')
            ret.append(repr(self.rodrigues))
            ret.append(',\n    quat : ')
            ret.append(repr(self.quat))
            ret.append(',\n    homochoric : ')
            ret.append(repr(self.homochoric))
            ret.append(',\n    cubochoric : ')
            ret.append(repr(self.cubochoric))
            ret.append(',\n    stereographic : ')
            ret.append(repr(self.stereographic))
            ret.append(',\n    rvmap : ')
            ret.append(repr(self.rvmap))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.orientationtyped")
    class orientationtyped(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=orientationtyped)
        
        
        Defined at typedefs.f90 lines 1273-1282
        
        """
        def __init__(self, handle=None):
            """
            self = Orientationtyped()
            
            
            Defined at typedefs.f90 lines 1273-1282
            
            
            Returns
            -------
            this : Orientationtyped
            	Object to be constructed
            
            
            Automatically generated constructor for orientationtyped
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_orientationtyped_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Orientationtyped
            
            
            Defined at typedefs.f90 lines 1273-1282
            
            Parameters
            ----------
            this : Orientationtyped
            	Object to be destructed
            
            
            Automatically generated destructor for orientationtyped
            """
            if self._alloc:
                _pyEMsoft.f90wrap_orientationtyped_finalise(this=self._handle)
        
        @property
        def eulang(self):
            """
            Element eulang ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1274
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtyped__array__eulang(self._handle)
            if array_handle in self._arrays:
                eulang = self._arrays[array_handle]
            else:
                eulang = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtyped__array__eulang)
                self._arrays[array_handle] = eulang
            return eulang
        
        @eulang.setter
        def eulang(self, eulang):
            self.eulang[...] = eulang
        
        @property
        def om(self):
            """
            Element om ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1275
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtyped__array__om(self._handle)
            if array_handle in self._arrays:
                om = self._arrays[array_handle]
            else:
                om = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtyped__array__om)
                self._arrays[array_handle] = om
            return om
        
        @om.setter
        def om(self, om):
            self.om[...] = om
        
        @property
        def axang(self):
            """
            Element axang ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1276
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtyped__array__axang(self._handle)
            if array_handle in self._arrays:
                axang = self._arrays[array_handle]
            else:
                axang = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtyped__array__axang)
                self._arrays[array_handle] = axang
            return axang
        
        @axang.setter
        def axang(self, axang):
            self.axang[...] = axang
        
        @property
        def rodrigues(self):
            """
            Element rodrigues ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1277
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtyped__array__rodrigues(self._handle)
            if array_handle in self._arrays:
                rodrigues = self._arrays[array_handle]
            else:
                rodrigues = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtyped__array__rodrigues)
                self._arrays[array_handle] = rodrigues
            return rodrigues
        
        @rodrigues.setter
        def rodrigues(self, rodrigues):
            self.rodrigues[...] = rodrigues
        
        @property
        def quat(self):
            """
            Element quat ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1278
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtyped__array__quat(self._handle)
            if array_handle in self._arrays:
                quat = self._arrays[array_handle]
            else:
                quat = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtyped__array__quat)
                self._arrays[array_handle] = quat
            return quat
        
        @quat.setter
        def quat(self, quat):
            self.quat[...] = quat
        
        @property
        def homochoric(self):
            """
            Element homochoric ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1279
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtyped__array__homochoric(self._handle)
            if array_handle in self._arrays:
                homochoric = self._arrays[array_handle]
            else:
                homochoric = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtyped__array__homochoric)
                self._arrays[array_handle] = homochoric
            return homochoric
        
        @homochoric.setter
        def homochoric(self, homochoric):
            self.homochoric[...] = homochoric
        
        @property
        def cubochoric(self):
            """
            Element cubochoric ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1280
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtyped__array__cubochoric(self._handle)
            if array_handle in self._arrays:
                cubochoric = self._arrays[array_handle]
            else:
                cubochoric = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtyped__array__cubochoric)
                self._arrays[array_handle] = cubochoric
            return cubochoric
        
        @cubochoric.setter
        def cubochoric(self, cubochoric):
            self.cubochoric[...] = cubochoric
        
        @property
        def stereographic(self):
            """
            Element stereographic ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1281
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtyped__array__stereographic(self._handle)
            if array_handle in self._arrays:
                stereographic = self._arrays[array_handle]
            else:
                stereographic = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtyped__array__stereographic)
                self._arrays[array_handle] = stereographic
            return stereographic
        
        @stereographic.setter
        def stereographic(self, stereographic):
            self.stereographic[...] = stereographic
        
        @property
        def rvmap(self):
            """
            Element rvmap ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1282
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationtyped__array__rvmap(self._handle)
            if array_handle in self._arrays:
                rvmap = self._arrays[array_handle]
            else:
                rvmap = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationtyped__array__rvmap)
                self._arrays[array_handle] = rvmap
            return rvmap
        
        @rvmap.setter
        def rvmap(self, rvmap):
            self.rvmap[...] = rvmap
        
        def __str__(self):
            ret = ['<orientationtyped>{\n']
            ret.append('    eulang : ')
            ret.append(repr(self.eulang))
            ret.append(',\n    om : ')
            ret.append(repr(self.om))
            ret.append(',\n    axang : ')
            ret.append(repr(self.axang))
            ret.append(',\n    rodrigues : ')
            ret.append(repr(self.rodrigues))
            ret.append(',\n    quat : ')
            ret.append(repr(self.quat))
            ret.append(',\n    homochoric : ')
            ret.append(repr(self.homochoric))
            ret.append(',\n    cubochoric : ')
            ret.append(repr(self.cubochoric))
            ret.append(',\n    stereographic : ')
            ret.append(repr(self.stereographic))
            ret.append(',\n    rvmap : ')
            ret.append(repr(self.rvmap))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.FZpointd")
    class FZpointd(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=fzpointd)
        
        
        Defined at typedefs.f90 lines 1288-1292
        
        """
        def __init__(self, handle=None):
            """
            self = Fzpointd()
            
            
            Defined at typedefs.f90 lines 1288-1292
            
            
            Returns
            -------
            this : Fzpointd
            	Object to be constructed
            
            
            Automatically generated constructor for fzpointd
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_fzpointd_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Fzpointd
            
            
            Defined at typedefs.f90 lines 1288-1292
            
            Parameters
            ----------
            this : Fzpointd
            	Object to be destructed
            
            
            Automatically generated destructor for fzpointd
            """
            if self._alloc:
                _pyEMsoft.f90wrap_fzpointd_finalise(this=self._handle)
        
        @property
        def rod(self):
            """
            Element rod ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1289
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_fzpointd__array__rod(self._handle)
            if array_handle in self._arrays:
                rod = self._arrays[array_handle]
            else:
                rod = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_fzpointd__array__rod)
                self._arrays[array_handle] = rod
            return rod
        
        @rod.setter
        def rod(self, rod):
            self.rod[...] = rod
        
        @property
        def trod(self):
            """
            Element trod ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1290
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_fzpointd__array__trod(self._handle)
            if array_handle in self._arrays:
                trod = self._arrays[array_handle]
            else:
                trod = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_fzpointd__array__trod)
                self._arrays[array_handle] = trod
            return trod
        
        @trod.setter
        def trod(self, trod):
            self.trod[...] = trod
        
        @property
        def gridpt(self):
            """
            Element gridpt ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1291
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_fzpointd__array__gridpt(self._handle)
            if array_handle in self._arrays:
                gridpt = self._arrays[array_handle]
            else:
                gridpt = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_fzpointd__array__gridpt)
                self._arrays[array_handle] = gridpt
            return gridpt
        
        @gridpt.setter
        def gridpt(self, gridpt):
            self.gridpt[...] = gridpt
        
        @property
        def next(self):
            """
            Element next ftype=type(fzpointd) pytype=Fzpointd
            
            
            Defined at typedefs.f90 line 1292
            
            """
            next_handle = _pyEMsoft.f90wrap_fzpointd__get__next(self._handle)
            if tuple(next_handle) in self._objs:
                next = self._objs[tuple(next_handle)]
            else:
                next = typedefs.FZpointd.from_handle(next_handle)
                self._objs[tuple(next_handle)] = next
            return next
        
        @next.setter
        def next(self, next):
            next = next._handle
            _pyEMsoft.f90wrap_fzpointd__set__next(self._handle, next)
        
        def __str__(self):
            ret = ['<fzpointd>{\n']
            ret.append('    rod : ')
            ret.append(repr(self.rod))
            ret.append(',\n    trod : ')
            ret.append(repr(self.trod))
            ret.append(',\n    gridpt : ')
            ret.append(repr(self.gridpt))
            ret.append(',\n    next : ')
            ret.append(repr(self.next))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.SO2pointd")
    class SO2pointd(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=so2pointd)
        
        
        Defined at typedefs.f90 lines 1295-1298
        
        """
        def __init__(self, handle=None):
            """
            self = So2Pointd()
            
            
            Defined at typedefs.f90 lines 1295-1298
            
            
            Returns
            -------
            this : So2Pointd
            	Object to be constructed
            
            
            Automatically generated constructor for so2pointd
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_so2pointd_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class So2Pointd
            
            
            Defined at typedefs.f90 lines 1295-1298
            
            Parameters
            ----------
            this : So2Pointd
            	Object to be destructed
            
            
            Automatically generated destructor for so2pointd
            """
            if self._alloc:
                _pyEMsoft.f90wrap_so2pointd_finalise(this=self._handle)
        
        @property
        def sql(self):
            """
            Element sql ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1296
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_so2pointd__array__sql(self._handle)
            if array_handle in self._arrays:
                sql = self._arrays[array_handle]
            else:
                sql = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_so2pointd__array__sql)
                self._arrays[array_handle] = sql
            return sql
        
        @sql.setter
        def sql(self, sql):
            self.sql[...] = sql
        
        @property
        def nvec(self):
            """
            Element nvec ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1297
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_so2pointd__array__nvec(self._handle)
            if array_handle in self._arrays:
                nvec = self._arrays[array_handle]
            else:
                nvec = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_so2pointd__array__nvec)
                self._arrays[array_handle] = nvec
            return nvec
        
        @nvec.setter
        def nvec(self, nvec):
            self.nvec[...] = nvec
        
        @property
        def next(self):
            """
            Element next ftype=type(so2pointd) pytype=So2Pointd
            
            
            Defined at typedefs.f90 line 1298
            
            """
            next_handle = _pyEMsoft.f90wrap_so2pointd__get__next(self._handle)
            if tuple(next_handle) in self._objs:
                next = self._objs[tuple(next_handle)]
            else:
                next = typedefs.SO2pointd.from_handle(next_handle)
                self._objs[tuple(next_handle)] = next
            return next
        
        @next.setter
        def next(self, next):
            next = next._handle
            _pyEMsoft.f90wrap_so2pointd__set__next(self._handle, next)
        
        def __str__(self):
            ret = ['<so2pointd>{\n']
            ret.append('    sql : ')
            ret.append(repr(self.sql))
            ret.append(',\n    nvec : ')
            ret.append(repr(self.nvec))
            ret.append(',\n    next : ')
            ret.append(repr(self.next))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.substrateBW")
    class substrateBW(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=substratebw)
        
        
        Defined at typedefs.f90 lines 1304-1310
        
        """
        def __init__(self, handle=None):
            """
            self = Substratebw()
            
            
            Defined at typedefs.f90 lines 1304-1310
            
            
            Returns
            -------
            this : Substratebw
            	Object to be constructed
            
            
            Automatically generated constructor for substratebw
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_substratebw_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Substratebw
            
            
            Defined at typedefs.f90 lines 1304-1310
            
            Parameters
            ----------
            this : Substratebw
            	Object to be destructed
            
            
            Automatically generated destructor for substratebw
            """
            if self._alloc:
                _pyEMsoft.f90wrap_substratebw_finalise(this=self._handle)
        
        @property
        def nsg(self):
            """
            Element nsg ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1305
            
            """
            return _pyEMsoft.f90wrap_substratebw__get__nsg(self._handle)
        
        @nsg.setter
        def nsg(self, nsg):
            _pyEMsoft.f90wrap_substratebw__set__nsg(self._handle, nsg)
        
        @property
        def kg(self):
            """
            Element kg ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1306
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_substratebw__array__kg(self._handle)
            if array_handle in self._arrays:
                kg = self._arrays[array_handle]
            else:
                kg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_substratebw__array__kg)
                self._arrays[array_handle] = kg
            return kg
        
        @kg.setter
        def kg(self, kg):
            self.kg[...] = kg
        
        @property
        def hg(self):
            """
            Element hg ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1307
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_substratebw__array__hg(self._handle)
            if array_handle in self._arrays:
                hg = self._arrays[array_handle]
            else:
                hg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_substratebw__array__hg)
                self._arrays[array_handle] = hg
            return hg
        
        @hg.setter
        def hg(self, hg):
            self.hg[...] = hg
        
        @property
        def gammam(self):
            """
            Element gammam ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 1308
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_substratebw__array__gammam(self._handle)
            if array_handle in self._arrays:
                gammam = self._arrays[array_handle]
            else:
                gammam = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_substratebw__array__gammam)
                self._arrays[array_handle] = gammam
            return gammam
        
        @gammam.setter
        def gammam(self, gammam):
            self.gammam[...] = gammam
        
        @property
        def dmg(self):
            """
            Element dmg ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 1309
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_substratebw__array__dmg(self._handle)
            if array_handle in self._arrays:
                dmg = self._arrays[array_handle]
            else:
                dmg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_substratebw__array__dmg)
                self._arrays[array_handle] = dmg
            return dmg
        
        @dmg.setter
        def dmg(self, dmg):
            self.dmg[...] = dmg
        
        @property
        def nextg(self):
            """
            Element nextg ftype=type(substratebw) pytype=Substratebw
            
            
            Defined at typedefs.f90 line 1310
            
            """
            nextg_handle = _pyEMsoft.f90wrap_substratebw__get__nextg(self._handle)
            if tuple(nextg_handle) in self._objs:
                nextg = self._objs[tuple(nextg_handle)]
            else:
                nextg = typedefs.substrateBW.from_handle(nextg_handle)
                self._objs[tuple(nextg_handle)] = nextg
            return nextg
        
        @nextg.setter
        def nextg(self, nextg):
            nextg = nextg._handle
            _pyEMsoft.f90wrap_substratebw__set__nextg(self._handle, nextg)
        
        def __str__(self):
            ret = ['<substratebw>{\n']
            ret.append('    nsg : ')
            ret.append(repr(self.nsg))
            ret.append(',\n    kg : ')
            ret.append(repr(self.kg))
            ret.append(',\n    hg : ')
            ret.append(repr(self.hg))
            ret.append(',\n    gammam : ')
            ret.append(repr(self.gammam))
            ret.append(',\n    dmg : ')
            ret.append(repr(self.dmg))
            ret.append(',\n    nextg : ')
            ret.append(repr(self.nextg))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.dicttype")
    class dicttype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=dicttype)
        
        
        Defined at typedefs.f90 lines 1316-1325
        
        """
        def __init__(self, handle=None):
            """
            self = Dicttype()
            
            
            Defined at typedefs.f90 lines 1316-1325
            
            
            Returns
            -------
            this : Dicttype
            	Object to be constructed
            
            
            Automatically generated constructor for dicttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_dicttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Dicttype
            
            
            Defined at typedefs.f90 lines 1316-1325
            
            Parameters
            ----------
            this : Dicttype
            	Object to be destructed
            
            
            Automatically generated destructor for dicttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_dicttype_finalise(this=self._handle)
        
        @property
        def nqsym(self):
            """
            Element nqsym ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1317
            
            """
            return _pyEMsoft.f90wrap_dicttype__get__nqsym(self._handle)
        
        @nqsym.setter
        def nqsym(self, nqsym):
            _pyEMsoft.f90wrap_dicttype__set__nqsym(self._handle, nqsym)
        
        @property
        def pm(self):
            """
            Element pm ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1318
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dicttype__array__pm(self._handle)
            if array_handle in self._arrays:
                pm = self._arrays[array_handle]
            else:
                pm = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dicttype__array__pm)
                self._arrays[array_handle] = pm
            return pm
        
        @pm.setter
        def pm(self, pm):
            self.pm[...] = pm
        
        @property
        def pgnum(self):
            """
            Element pgnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1319
            
            """
            return _pyEMsoft.f90wrap_dicttype__get__pgnum(self._handle)
        
        @pgnum.setter
        def pgnum(self, pgnum):
            _pyEMsoft.f90wrap_dicttype__set__pgnum(self._handle, pgnum)
        
        @property
        def prot(self):
            """
            Element prot ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1320
            
            """
            return _pyEMsoft.f90wrap_dicttype__get__prot(self._handle)
        
        @prot.setter
        def prot(self, prot):
            _pyEMsoft.f90wrap_dicttype__set__prot(self._handle, prot)
        
        @property
        def xap(self):
            """
            Element xap ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1321
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dicttype__array__xap(self._handle)
            if array_handle in self._arrays:
                xap = self._arrays[array_handle]
            else:
                xap = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dicttype__array__xap)
                self._arrays[array_handle] = xap
            return xap
        
        @xap.setter
        def xap(self, xap):
            self.xap[...] = xap
        
        @property
        def yap(self):
            """
            Element yap ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1322
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dicttype__array__yap(self._handle)
            if array_handle in self._arrays:
                yap = self._arrays[array_handle]
            else:
                yap = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dicttype__array__yap)
                self._arrays[array_handle] = yap
            return yap
        
        @yap.setter
        def yap(self, yap):
            self.yap[...] = yap
        
        @property
        def apnum(self):
            """
            Element apnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1323
            
            """
            return _pyEMsoft.f90wrap_dicttype__get__apnum(self._handle)
        
        @apnum.setter
        def apnum(self, apnum):
            _pyEMsoft.f90wrap_dicttype__set__apnum(self._handle, apnum)
        
        @property
        def num_of_init(self):
            """
            Element num_of_init ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1324
            
            """
            return _pyEMsoft.f90wrap_dicttype__get__num_of_init(self._handle)
        
        @num_of_init.setter
        def num_of_init(self, num_of_init):
            _pyEMsoft.f90wrap_dicttype__set__num_of_init(self._handle, num_of_init)
        
        @property
        def num_of_iterations(self):
            """
            Element num_of_iterations ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1325
            
            """
            return _pyEMsoft.f90wrap_dicttype__get__num_of_iterations(self._handle)
        
        @num_of_iterations.setter
        def num_of_iterations(self, num_of_iterations):
            _pyEMsoft.f90wrap_dicttype__set__num_of_iterations(self._handle, \
                num_of_iterations)
        
        def __str__(self):
            ret = ['<dicttype>{\n']
            ret.append('    nqsym : ')
            ret.append(repr(self.nqsym))
            ret.append(',\n    pm : ')
            ret.append(repr(self.pm))
            ret.append(',\n    pgnum : ')
            ret.append(repr(self.pgnum))
            ret.append(',\n    prot : ')
            ret.append(repr(self.prot))
            ret.append(',\n    xap : ')
            ret.append(repr(self.xap))
            ret.append(',\n    yap : ')
            ret.append(repr(self.yap))
            ret.append(',\n    apnum : ')
            ret.append(repr(self.apnum))
            ret.append(',\n    num_of_init : ')
            ret.append(repr(self.num_of_init))
            ret.append(',\n    num_of_iterations : ')
            ret.append(repr(self.num_of_iterations))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.kikuchireflection")
    class kikuchireflection(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=kikuchireflection)
        
        
        Defined at typedefs.f90 lines 1330-1334
        
        """
        def __init__(self, handle=None):
            """
            self = Kikuchireflection()
            
            
            Defined at typedefs.f90 lines 1330-1334
            
            
            Returns
            -------
            this : Kikuchireflection
            	Object to be constructed
            
            
            Automatically generated constructor for kikuchireflection
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_kikuchireflection_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Kikuchireflection
            
            
            Defined at typedefs.f90 lines 1330-1334
            
            Parameters
            ----------
            this : Kikuchireflection
            	Object to be destructed
            
            
            Automatically generated destructor for kikuchireflection
            """
            if self._alloc:
                _pyEMsoft.f90wrap_kikuchireflection_finalise(this=self._handle)
        
        @property
        def hkl(self):
            """
            Element hkl ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1331
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_kikuchireflection__array__hkl(self._handle)
            if array_handle in self._arrays:
                hkl = self._arrays[array_handle]
            else:
                hkl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_kikuchireflection__array__hkl)
                self._arrays[array_handle] = hkl
            return hkl
        
        @hkl.setter
        def hkl(self, hkl):
            self.hkl[...] = hkl
        
        @property
        def rnum(self):
            """
            Element rnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1331
            
            """
            return _pyEMsoft.f90wrap_kikuchireflection__get__rnum(self._handle)
        
        @rnum.setter
        def rnum(self, rnum):
            _pyEMsoft.f90wrap_kikuchireflection__set__rnum(self._handle, rnum)
        
        @property
        def drawh(self):
            """
            Element drawh ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1332
            
            """
            return _pyEMsoft.f90wrap_kikuchireflection__get__drawh(self._handle)
        
        @drawh.setter
        def drawh(self, drawh):
            _pyEMsoft.f90wrap_kikuchireflection__set__drawh(self._handle, drawh)
        
        @property
        def drawk(self):
            """
            Element drawk ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1332
            
            """
            return _pyEMsoft.f90wrap_kikuchireflection__get__drawk(self._handle)
        
        @drawk.setter
        def drawk(self, drawk):
            _pyEMsoft.f90wrap_kikuchireflection__set__drawk(self._handle, drawk)
        
        @property
        def drawc(self):
            """
            Element drawc ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1332
            
            """
            return _pyEMsoft.f90wrap_kikuchireflection__get__drawc(self._handle)
        
        @drawc.setter
        def drawc(self, drawc):
            _pyEMsoft.f90wrap_kikuchireflection__set__drawc(self._handle, drawc)
        
        @property
        def hlx(self):
            """
            Element hlx ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1333
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_kikuchireflection__array__hlx(self._handle)
            if array_handle in self._arrays:
                hlx = self._arrays[array_handle]
            else:
                hlx = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_kikuchireflection__array__hlx)
                self._arrays[array_handle] = hlx
            return hlx
        
        @hlx.setter
        def hlx(self, hlx):
            self.hlx[...] = hlx
        
        @property
        def hly(self):
            """
            Element hly ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1333
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_kikuchireflection__array__hly(self._handle)
            if array_handle in self._arrays:
                hly = self._arrays[array_handle]
            else:
                hly = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_kikuchireflection__array__hly)
                self._arrays[array_handle] = hly
            return hly
        
        @hly.setter
        def hly(self, hly):
            self.hly[...] = hly
        
        @property
        def klx(self):
            """
            Element klx ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1333
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_kikuchireflection__array__klx(self._handle)
            if array_handle in self._arrays:
                klx = self._arrays[array_handle]
            else:
                klx = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_kikuchireflection__array__klx)
                self._arrays[array_handle] = klx
            return klx
        
        @klx.setter
        def klx(self, klx):
            self.klx[...] = klx
        
        @property
        def kly(self):
            """
            Element kly ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1333
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_kikuchireflection__array__kly(self._handle)
            if array_handle in self._arrays:
                kly = self._arrays[array_handle]
            else:
                kly = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_kikuchireflection__array__kly)
                self._arrays[array_handle] = kly
            return kly
        
        @kly.setter
        def kly(self, kly):
            self.kly[...] = kly
        
        @property
        def clx(self):
            """
            Element clx ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1333
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_kikuchireflection__array__clx(self._handle)
            if array_handle in self._arrays:
                clx = self._arrays[array_handle]
            else:
                clx = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_kikuchireflection__array__clx)
                self._arrays[array_handle] = clx
            return clx
        
        @clx.setter
        def clx(self, clx):
            self.clx[...] = clx
        
        @property
        def cly(self):
            """
            Element cly ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1333
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_kikuchireflection__array__cly(self._handle)
            if array_handle in self._arrays:
                cly = self._arrays[array_handle]
            else:
                cly = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_kikuchireflection__array__cly)
                self._arrays[array_handle] = cly
            return cly
        
        @cly.setter
        def cly(self, cly):
            self.cly[...] = cly
        
        @property
        def beta(self):
            """
            Element beta ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1333
            
            """
            return _pyEMsoft.f90wrap_kikuchireflection__get__beta(self._handle)
        
        @beta.setter
        def beta(self, beta):
            _pyEMsoft.f90wrap_kikuchireflection__set__beta(self._handle, beta)
        
        @property
        def theta(self):
            """
            Element theta ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1333
            
            """
            return _pyEMsoft.f90wrap_kikuchireflection__get__theta(self._handle)
        
        @theta.setter
        def theta(self, theta):
            _pyEMsoft.f90wrap_kikuchireflection__set__theta(self._handle, theta)
        
        @property
        def ig(self):
            """
            Element ig ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1333
            
            """
            return _pyEMsoft.f90wrap_kikuchireflection__get__ig(self._handle)
        
        @ig.setter
        def ig(self, ig):
            _pyEMsoft.f90wrap_kikuchireflection__set__ig(self._handle, ig)
        
        @property
        def next(self):
            """
            Element next ftype=type(kikuchireflection) pytype=Kikuchireflection
            
            
            Defined at typedefs.f90 line 1334
            
            """
            next_handle = _pyEMsoft.f90wrap_kikuchireflection__get__next(self._handle)
            if tuple(next_handle) in self._objs:
                next = self._objs[tuple(next_handle)]
            else:
                next = typedefs.kikuchireflection.from_handle(next_handle)
                self._objs[tuple(next_handle)] = next
            return next
        
        @next.setter
        def next(self, next):
            next = next._handle
            _pyEMsoft.f90wrap_kikuchireflection__set__next(self._handle, next)
        
        def __str__(self):
            ret = ['<kikuchireflection>{\n']
            ret.append('    hkl : ')
            ret.append(repr(self.hkl))
            ret.append(',\n    rnum : ')
            ret.append(repr(self.rnum))
            ret.append(',\n    drawh : ')
            ret.append(repr(self.drawh))
            ret.append(',\n    drawk : ')
            ret.append(repr(self.drawk))
            ret.append(',\n    drawc : ')
            ret.append(repr(self.drawc))
            ret.append(',\n    hlx : ')
            ret.append(repr(self.hlx))
            ret.append(',\n    hly : ')
            ret.append(repr(self.hly))
            ret.append(',\n    klx : ')
            ret.append(repr(self.klx))
            ret.append(',\n    kly : ')
            ret.append(repr(self.kly))
            ret.append(',\n    clx : ')
            ret.append(repr(self.clx))
            ret.append(',\n    cly : ')
            ret.append(repr(self.cly))
            ret.append(',\n    beta : ')
            ret.append(repr(self.beta))
            ret.append(',\n    theta : ')
            ret.append(repr(self.theta))
            ret.append(',\n    ig : ')
            ret.append(repr(self.ig))
            ret.append(',\n    next : ')
            ret.append(repr(self.next))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.holzreflection")
    class holzreflection(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=holzreflection)
        
        
        Defined at typedefs.f90 lines 1340-1344
        
        """
        def __init__(self, handle=None):
            """
            self = Holzreflection()
            
            
            Defined at typedefs.f90 lines 1340-1344
            
            
            Returns
            -------
            this : Holzreflection
            	Object to be constructed
            
            
            Automatically generated constructor for holzreflection
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_holzreflection_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Holzreflection
            
            
            Defined at typedefs.f90 lines 1340-1344
            
            Parameters
            ----------
            this : Holzreflection
            	Object to be destructed
            
            
            Automatically generated destructor for holzreflection
            """
            if self._alloc:
                _pyEMsoft.f90wrap_holzreflection_finalise(this=self._handle)
        
        @property
        def hkl(self):
            """
            Element hkl ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1341
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzreflection__array__hkl(self._handle)
            if array_handle in self._arrays:
                hkl = self._arrays[array_handle]
            else:
                hkl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzreflection__array__hkl)
                self._arrays[array_handle] = hkl
            return hkl
        
        @hkl.setter
        def hkl(self, hkl):
            self.hkl[...] = hkl
        
        @property
        def n1(self):
            """
            Element n1 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1341
            
            """
            return _pyEMsoft.f90wrap_holzreflection__get__n1(self._handle)
        
        @n1.setter
        def n1(self, n1):
            _pyEMsoft.f90wrap_holzreflection__set__n1(self._handle, n1)
        
        @property
        def n2(self):
            """
            Element n2 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1341
            
            """
            return _pyEMsoft.f90wrap_holzreflection__get__n2(self._handle)
        
        @n2.setter
        def n2(self, n2):
            _pyEMsoft.f90wrap_holzreflection__set__n2(self._handle, n2)
        
        @property
        def n(self):
            """
            Element n ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1341
            
            """
            return _pyEMsoft.f90wrap_holzreflection__get__n(self._handle)
        
        @n.setter
        def n(self, n):
            _pyEMsoft.f90wrap_holzreflection__set__n(self._handle, n)
        
        @property
        def draw(self):
            """
            Element draw ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1342
            
            """
            return _pyEMsoft.f90wrap_holzreflection__get__draw(self._handle)
        
        @draw.setter
        def draw(self, draw):
            _pyEMsoft.f90wrap_holzreflection__set__draw(self._handle, draw)
        
        @property
        def dbdiff(self):
            """
            Element dbdiff ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1342
            
            """
            return _pyEMsoft.f90wrap_holzreflection__get__dbdiff(self._handle)
        
        @dbdiff.setter
        def dbdiff(self, dbdiff):
            _pyEMsoft.f90wrap_holzreflection__set__dbdiff(self._handle, dbdiff)
        
        @property
        def hlphi(self):
            """
            Element hlphi ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1343
            
            """
            return _pyEMsoft.f90wrap_holzreflection__get__hlphi(self._handle)
        
        @hlphi.setter
        def hlphi(self, hlphi):
            _pyEMsoft.f90wrap_holzreflection__set__hlphi(self._handle, hlphi)
        
        @property
        def hlx(self):
            """
            Element hlx ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1343
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzreflection__array__hlx(self._handle)
            if array_handle in self._arrays:
                hlx = self._arrays[array_handle]
            else:
                hlx = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzreflection__array__hlx)
                self._arrays[array_handle] = hlx
            return hlx
        
        @hlx.setter
        def hlx(self, hlx):
            self.hlx[...] = hlx
        
        @property
        def hly(self):
            """
            Element hly ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1343
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzreflection__array__hly(self._handle)
            if array_handle in self._arrays:
                hly = self._arrays[array_handle]
            else:
                hly = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzreflection__array__hly)
                self._arrays[array_handle] = hly
            return hly
        
        @hly.setter
        def hly(self, hly):
            self.hly[...] = hly
        
        @property
        def sg(self):
            """
            Element sg ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1343
            
            """
            return _pyEMsoft.f90wrap_holzreflection__get__sg(self._handle)
        
        @sg.setter
        def sg(self, sg):
            _pyEMsoft.f90wrap_holzreflection__set__sg(self._handle, sg)
        
        @property
        def ig(self):
            """
            Element ig ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1343
            
            """
            return _pyEMsoft.f90wrap_holzreflection__get__ig(self._handle)
        
        @ig.setter
        def ig(self, ig):
            _pyEMsoft.f90wrap_holzreflection__set__ig(self._handle, ig)
        
        @property
        def pxy(self):
            """
            Element pxy ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1343
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzreflection__array__pxy(self._handle)
            if array_handle in self._arrays:
                pxy = self._arrays[array_handle]
            else:
                pxy = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzreflection__array__pxy)
                self._arrays[array_handle] = pxy
            return pxy
        
        @pxy.setter
        def pxy(self, pxy):
            self.pxy[...] = pxy
        
        @property
        def next(self):
            """
            Element next ftype=type(holzreflection) pytype=Holzreflection
            
            
            Defined at typedefs.f90 line 1344
            
            """
            next_handle = _pyEMsoft.f90wrap_holzreflection__get__next(self._handle)
            if tuple(next_handle) in self._objs:
                next = self._objs[tuple(next_handle)]
            else:
                next = typedefs.holzreflection.from_handle(next_handle)
                self._objs[tuple(next_handle)] = next
            return next
        
        @next.setter
        def next(self, next):
            next = next._handle
            _pyEMsoft.f90wrap_holzreflection__set__next(self._handle, next)
        
        def __str__(self):
            ret = ['<holzreflection>{\n']
            ret.append('    hkl : ')
            ret.append(repr(self.hkl))
            ret.append(',\n    n1 : ')
            ret.append(repr(self.n1))
            ret.append(',\n    n2 : ')
            ret.append(repr(self.n2))
            ret.append(',\n    n : ')
            ret.append(repr(self.n))
            ret.append(',\n    draw : ')
            ret.append(repr(self.draw))
            ret.append(',\n    dbdiff : ')
            ret.append(repr(self.dbdiff))
            ret.append(',\n    hlphi : ')
            ret.append(repr(self.hlphi))
            ret.append(',\n    hlx : ')
            ret.append(repr(self.hlx))
            ret.append(',\n    hly : ')
            ret.append(repr(self.hly))
            ret.append(',\n    sg : ')
            ret.append(repr(self.sg))
            ret.append(',\n    ig : ')
            ret.append(repr(self.ig))
            ret.append(',\n    pxy : ')
            ret.append(repr(self.pxy))
            ret.append(',\n    next : ')
            ret.append(repr(self.next))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.HOLZvartype")
    class HOLZvartype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=holzvartype)
        
        
        Defined at typedefs.f90 lines 1346-1349
        
        """
        def __init__(self, handle=None):
            """
            self = Holzvartype()
            
            
            Defined at typedefs.f90 lines 1346-1349
            
            
            Returns
            -------
            this : Holzvartype
            	Object to be constructed
            
            
            Automatically generated constructor for holzvartype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_holzvartype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Holzvartype
            
            
            Defined at typedefs.f90 lines 1346-1349
            
            Parameters
            ----------
            this : Holzvartype
            	Object to be destructed
            
            
            Automatically generated destructor for holzvartype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_holzvartype_finalise(this=self._handle)
        
        @property
        def g1(self):
            """
            Element g1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzvartype__array__g1(self._handle)
            if array_handle in self._arrays:
                g1 = self._arrays[array_handle]
            else:
                g1 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzvartype__array__g1)
                self._arrays[array_handle] = g1
            return g1
        
        @g1.setter
        def g1(self, g1):
            self.g1[...] = g1
        
        @property
        def g2(self):
            """
            Element g2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzvartype__array__g2(self._handle)
            if array_handle in self._arrays:
                g2 = self._arrays[array_handle]
            else:
                g2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzvartype__array__g2)
                self._arrays[array_handle] = g2
            return g2
        
        @g2.setter
        def g2(self, g2):
            self.g2[...] = g2
        
        @property
        def g3(self):
            """
            Element g3 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzvartype__array__g3(self._handle)
            if array_handle in self._arrays:
                g3 = self._arrays[array_handle]
            else:
                g3 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzvartype__array__g3)
                self._arrays[array_handle] = g3
            return g3
        
        @g3.setter
        def g3(self, g3):
            self.g3[...] = g3
        
        @property
        def h(self):
            """
            Element h ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            return _pyEMsoft.f90wrap_holzvartype__get__h(self._handle)
        
        @h.setter
        def h(self, h):
            _pyEMsoft.f90wrap_holzvartype__set__h(self._handle, h)
        
        @property
        def fng(self):
            """
            Element fng ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzvartype__array__fng(self._handle)
            if array_handle in self._arrays:
                fng = self._arrays[array_handle]
            else:
                fng = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzvartype__array__fng)
                self._arrays[array_handle] = fng
            return fng
        
        @fng.setter
        def fng(self, fng):
            self.fng[...] = fng
        
        @property
        def fnr(self):
            """
            Element fnr ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzvartype__array__fnr(self._handle)
            if array_handle in self._arrays:
                fnr = self._arrays[array_handle]
            else:
                fnr = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzvartype__array__fnr)
                self._arrays[array_handle] = fnr
            return fnr
        
        @fnr.setter
        def fnr(self, fnr):
            self.fnr[...] = fnr
        
        @property
        def gshort(self):
            """
            Element gshort ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzvartype__array__gshort(self._handle)
            if array_handle in self._arrays:
                gshort = self._arrays[array_handle]
            else:
                gshort = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzvartype__array__gshort)
                self._arrays[array_handle] = gshort
            return gshort
        
        @gshort.setter
        def gshort(self, gshort):
            self.gshort[...] = gshort
        
        @property
        def gp(self):
            """
            Element gp ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzvartype__array__gp(self._handle)
            if array_handle in self._arrays:
                gp = self._arrays[array_handle]
            else:
                gp = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzvartype__array__gp)
                self._arrays[array_handle] = gp
            return gp
        
        @gp.setter
        def gp(self, gp):
            self.gp[...] = gp
        
        @property
        def lc1(self):
            """
            Element lc1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            return _pyEMsoft.f90wrap_holzvartype__get__lc1(self._handle)
        
        @lc1.setter
        def lc1(self, lc1):
            _pyEMsoft.f90wrap_holzvartype__set__lc1(self._handle, lc1)
        
        @property
        def lc2(self):
            """
            Element lc2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            return _pyEMsoft.f90wrap_holzvartype__get__lc2(self._handle)
        
        @lc2.setter
        def lc2(self, lc2):
            _pyEMsoft.f90wrap_holzvartype__set__lc2(self._handle, lc2)
        
        @property
        def thickness(self):
            """
            Element thickness ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            return _pyEMsoft.f90wrap_holzvartype__get__thickness(self._handle)
        
        @thickness.setter
        def thickness(self, thickness):
            _pyEMsoft.f90wrap_holzvartype__set__thickness(self._handle, thickness)
        
        @property
        def rectangle(self):
            """
            Element rectangle ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzvartype__array__rectangle(self._handle)
            if array_handle in self._arrays:
                rectangle = self._arrays[array_handle]
            else:
                rectangle = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzvartype__array__rectangle)
                self._arrays[array_handle] = rectangle
            return rectangle
        
        @rectangle.setter
        def rectangle(self, rectangle):
            self.rectangle[...] = rectangle
        
        @property
        def px(self):
            """
            Element px ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            return _pyEMsoft.f90wrap_holzvartype__get__px(self._handle)
        
        @px.setter
        def px(self, px):
            _pyEMsoft.f90wrap_holzvartype__set__px(self._handle, px)
        
        @property
        def py(self):
            """
            Element py ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            return _pyEMsoft.f90wrap_holzvartype__get__py(self._handle)
        
        @py.setter
        def py(self, py):
            _pyEMsoft.f90wrap_holzvartype__set__py(self._handle, py)
        
        @property
        def thetac(self):
            """
            Element thetac ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            return _pyEMsoft.f90wrap_holzvartype__get__thetac(self._handle)
        
        @thetac.setter
        def thetac(self, thetac):
            _pyEMsoft.f90wrap_holzvartype__set__thetac(self._handle, thetac)
        
        @property
        def lal(self):
            """
            Element lal ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            return _pyEMsoft.f90wrap_holzvartype__get__lal(self._handle)
        
        @lal.setter
        def lal(self, lal):
            _pyEMsoft.f90wrap_holzvartype__set__lal(self._handle, lal)
        
        @property
        def gmax(self):
            """
            Element gmax ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            return _pyEMsoft.f90wrap_holzvartype__get__gmax(self._handle)
        
        @gmax.setter
        def gmax(self, gmax):
            _pyEMsoft.f90wrap_holzvartype__set__gmax(self._handle, gmax)
        
        @property
        def imax(self):
            """
            Element imax ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            return _pyEMsoft.f90wrap_holzvartype__get__imax(self._handle)
        
        @imax.setter
        def imax(self, imax):
            _pyEMsoft.f90wrap_holzvartype__set__imax(self._handle, imax)
        
        @property
        def gtoc(self):
            """
            Element gtoc ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzvartype__array__gtoc(self._handle)
            if array_handle in self._arrays:
                gtoc = self._arrays[array_handle]
            else:
                gtoc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzvartype__array__gtoc)
                self._arrays[array_handle] = gtoc
            return gtoc
        
        @gtoc.setter
        def gtoc(self, gtoc):
            self.gtoc[...] = gtoc
        
        @property
        def glen(self):
            """
            Element glen ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            return _pyEMsoft.f90wrap_holzvartype__get__glen(self._handle)
        
        @glen.setter
        def glen(self, glen):
            _pyEMsoft.f90wrap_holzvartype__set__glen(self._handle, glen)
        
        @property
        def phi(self):
            """
            Element phi ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            return _pyEMsoft.f90wrap_holzvartype__get__phi(self._handle)
        
        @phi.setter
        def phi(self, phi):
            _pyEMsoft.f90wrap_holzvartype__set__phi(self._handle, phi)
        
        @property
        def cbedrad(self):
            """
            Element cbedrad ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            return _pyEMsoft.f90wrap_holzvartype__get__cbedrad(self._handle)
        
        @cbedrad.setter
        def cbedrad(self, cbedrad):
            _pyEMsoft.f90wrap_holzvartype__set__cbedrad(self._handle, cbedrad)
        
        @property
        def cbedsc(self):
            """
            Element cbedsc ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1348
            
            """
            return _pyEMsoft.f90wrap_holzvartype__get__cbedsc(self._handle)
        
        @cbedsc.setter
        def cbedsc(self, cbedsc):
            _pyEMsoft.f90wrap_holzvartype__set__cbedsc(self._handle, cbedsc)
        
        @property
        def uvw(self):
            """
            Element uvw ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1349
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzvartype__array__uvw(self._handle)
            if array_handle in self._arrays:
                uvw = self._arrays[array_handle]
            else:
                uvw = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzvartype__array__uvw)
                self._arrays[array_handle] = uvw
            return uvw
        
        @uvw.setter
        def uvw(self, uvw):
            self.uvw[...] = uvw
        
        @property
        def fn(self):
            """
            Element fn ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1349
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_holzvartype__array__fn(self._handle)
            if array_handle in self._arrays:
                fn = self._arrays[array_handle]
            else:
                fn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_holzvartype__array__fn)
                self._arrays[array_handle] = fn
            return fn
        
        @fn.setter
        def fn(self, fn):
            self.fn[...] = fn
        
        def __str__(self):
            ret = ['<holzvartype>{\n']
            ret.append('    g1 : ')
            ret.append(repr(self.g1))
            ret.append(',\n    g2 : ')
            ret.append(repr(self.g2))
            ret.append(',\n    g3 : ')
            ret.append(repr(self.g3))
            ret.append(',\n    h : ')
            ret.append(repr(self.h))
            ret.append(',\n    fng : ')
            ret.append(repr(self.fng))
            ret.append(',\n    fnr : ')
            ret.append(repr(self.fnr))
            ret.append(',\n    gshort : ')
            ret.append(repr(self.gshort))
            ret.append(',\n    gp : ')
            ret.append(repr(self.gp))
            ret.append(',\n    lc1 : ')
            ret.append(repr(self.lc1))
            ret.append(',\n    lc2 : ')
            ret.append(repr(self.lc2))
            ret.append(',\n    thickness : ')
            ret.append(repr(self.thickness))
            ret.append(',\n    rectangle : ')
            ret.append(repr(self.rectangle))
            ret.append(',\n    px : ')
            ret.append(repr(self.px))
            ret.append(',\n    py : ')
            ret.append(repr(self.py))
            ret.append(',\n    thetac : ')
            ret.append(repr(self.thetac))
            ret.append(',\n    lal : ')
            ret.append(repr(self.lal))
            ret.append(',\n    gmax : ')
            ret.append(repr(self.gmax))
            ret.append(',\n    imax : ')
            ret.append(repr(self.imax))
            ret.append(',\n    gtoc : ')
            ret.append(repr(self.gtoc))
            ret.append(',\n    glen : ')
            ret.append(repr(self.glen))
            ret.append(',\n    phi : ')
            ret.append(repr(self.phi))
            ret.append(',\n    cbedrad : ')
            ret.append(repr(self.cbedrad))
            ret.append(',\n    cbedsc : ')
            ret.append(repr(self.cbedsc))
            ret.append(',\n    uvw : ')
            ret.append(repr(self.uvw))
            ret.append(',\n    fn : ')
            ret.append(repr(self.fn))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.COMP_WKS_TYP")
    class COMP_WKS_TYP(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=comp_wks_typ)
        
        
        Defined at typedefs.f90 lines 1352-1357
        
        """
        def __init__(self, handle=None):
            """
            self = Comp_Wks_Typ()
            
            
            Defined at typedefs.f90 lines 1352-1357
            
            
            Returns
            -------
            this : Comp_Wks_Typ
            	Object to be constructed
            
            
            Automatically generated constructor for comp_wks_typ
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_comp_wks_typ_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Comp_Wks_Typ
            
            
            Defined at typedefs.f90 lines 1352-1357
            
            Parameters
            ----------
            this : Comp_Wks_Typ
            	Object to be destructed
            
            
            Automatically generated destructor for comp_wks_typ
            """
            if self._alloc:
                _pyEMsoft.f90wrap_comp_wks_typ_finalise(this=self._handle)
        
        @property
        def fob(self):
            """
            Element fob ftype=double precision pytype=unknown
            
            
            Defined at typedefs.f90 line 1353
            
            """
            return _pyEMsoft.f90wrap_comp_wks_typ__get__fob(self._handle)
        
        @fob.setter
        def fob(self, fob):
            _pyEMsoft.f90wrap_comp_wks_typ__set__fob(self._handle, fob)
        
        @property
        def alfamax(self):
            """
            Element alfamax ftype=double precision pytype=unknown
            
            
            Defined at typedefs.f90 line 1353
            
            """
            return _pyEMsoft.f90wrap_comp_wks_typ__get__alfamax(self._handle)
        
        @alfamax.setter
        def alfamax(self, alfamax):
            _pyEMsoft.f90wrap_comp_wks_typ__set__alfamax(self._handle, alfamax)
        
        @property
        def alfanr2(self):
            """
            Element alfanr2 ftype=double precision pytype=unknown
            
            
            Defined at typedefs.f90 line 1353
            
            """
            return _pyEMsoft.f90wrap_comp_wks_typ__get__alfanr2(self._handle)
        
        @alfanr2.setter
        def alfanr2(self, alfanr2):
            _pyEMsoft.f90wrap_comp_wks_typ__set__alfanr2(self._handle, alfanr2)
        
        @property
        def fstop(self):
            """
            Element fstop ftype=double precision pytype=unknown
            
            
            Defined at typedefs.f90 line 1353
            
            """
            return _pyEMsoft.f90wrap_comp_wks_typ__get__fstop(self._handle)
        
        @fstop.setter
        def fstop(self, fstop):
            _pyEMsoft.f90wrap_comp_wks_typ__set__fstop(self._handle, fstop)
        
        @property
        def doldalfa(self):
            """
            Element doldalfa ftype=double precision pytype=unknown
            
            
            Defined at typedefs.f90 line 1354
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_comp_wks_typ__array__doldalfa(self._handle)
            if array_handle in self._arrays:
                doldalfa = self._arrays[array_handle]
            else:
                doldalfa = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_comp_wks_typ__array__doldalfa)
                self._arrays[array_handle] = doldalfa
            return doldalfa
        
        @doldalfa.setter
        def doldalfa(self, doldalfa):
            self.doldalfa[...] = doldalfa
        
        @property
        def x(self):
            """
            Element x ftype=double precision pytype=unknown
            
            
            Defined at typedefs.f90 line 1355
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_comp_wks_typ__array__x(self._handle)
            if array_handle in self._arrays:
                x = self._arrays[array_handle]
            else:
                x = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_comp_wks_typ__array__x)
                self._arrays[array_handle] = x
            return x
        
        @x.setter
        def x(self, x):
            self.x[...] = x
        
        @property
        def d(self):
            """
            Element d ftype=double precision pytype=unknown
            
            
            Defined at typedefs.f90 line 1356
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_comp_wks_typ__array__d(self._handle)
            if array_handle in self._arrays:
                d = self._arrays[array_handle]
            else:
                d = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_comp_wks_typ__array__d)
                self._arrays[array_handle] = d
            return d
        
        @d.setter
        def d(self, d):
            self.d[...] = d
        
        @property
        def numcost(self):
            """
            Element numcost ftype=integer                   pytype=int
            
            
            Defined at typedefs.f90 line 1357
            
            """
            return _pyEMsoft.f90wrap_comp_wks_typ__get__numcost(self._handle)
        
        @numcost.setter
        def numcost(self, numcost):
            _pyEMsoft.f90wrap_comp_wks_typ__set__numcost(self._handle, numcost)
        
        def __str__(self):
            ret = ['<comp_wks_typ>{\n']
            ret.append('    fob : ')
            ret.append(repr(self.fob))
            ret.append(',\n    alfamax : ')
            ret.append(repr(self.alfamax))
            ret.append(',\n    alfanr2 : ')
            ret.append(repr(self.alfanr2))
            ret.append(',\n    fstop : ')
            ret.append(repr(self.fstop))
            ret.append(',\n    doldalfa : ')
            ret.append(repr(self.doldalfa))
            ret.append(',\n    x : ')
            ret.append(repr(self.x))
            ret.append(',\n    d : ')
            ret.append(repr(self.d))
            ret.append(',\n    numcost : ')
            ret.append(repr(self.numcost))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.MuellerMatrixType")
    class MuellerMatrixType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=muellermatrixtype)
        
        
        Defined at typedefs.f90 lines 1362-1364
        
        """
        def __init__(self, handle=None):
            """
            self = Muellermatrixtype()
            
            
            Defined at typedefs.f90 lines 1362-1364
            
            
            Returns
            -------
            this : Muellermatrixtype
            	Object to be constructed
            
            
            Automatically generated constructor for muellermatrixtype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_muellermatrixtype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Muellermatrixtype
            
            
            Defined at typedefs.f90 lines 1362-1364
            
            Parameters
            ----------
            this : Muellermatrixtype
            	Object to be destructed
            
            
            Automatically generated destructor for muellermatrixtype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_muellermatrixtype_finalise(this=self._handle)
        
        @property
        def m(self):
            """
            Element m ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1363
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_muellermatrixtype__array__m(self._handle)
            if array_handle in self._arrays:
                m = self._arrays[array_handle]
            else:
                m = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_muellermatrixtype__array__m)
                self._arrays[array_handle] = m
            return m
        
        @m.setter
        def m(self, m):
            self.m[...] = m
        
        @property
        def descriptor(self):
            """
            Element descriptor ftype=character(fnlen) pytype=str
            
            
            Defined at typedefs.f90 line 1364
            
            """
            return _pyEMsoft.f90wrap_muellermatrixtype__get__descriptor(self._handle)
        
        @descriptor.setter
        def descriptor(self, descriptor):
            _pyEMsoft.f90wrap_muellermatrixtype__set__descriptor(self._handle, descriptor)
        
        def __str__(self):
            ret = ['<muellermatrixtype>{\n']
            ret.append('    m : ')
            ret.append(repr(self.m))
            ret.append(',\n    descriptor : ')
            ret.append(repr(self.descriptor))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.StokesVectorType")
    class StokesVectorType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=stokesvectortype)
        
        
        Defined at typedefs.f90 lines 1366-1368
        
        """
        def __init__(self, handle=None):
            """
            self = Stokesvectortype()
            
            
            Defined at typedefs.f90 lines 1366-1368
            
            
            Returns
            -------
            this : Stokesvectortype
            	Object to be constructed
            
            
            Automatically generated constructor for stokesvectortype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_stokesvectortype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Stokesvectortype
            
            
            Defined at typedefs.f90 lines 1366-1368
            
            Parameters
            ----------
            this : Stokesvectortype
            	Object to be destructed
            
            
            Automatically generated destructor for stokesvectortype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_stokesvectortype_finalise(this=self._handle)
        
        @property
        def s(self):
            """
            Element s ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1367
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stokesvectortype__array__s(self._handle)
            if array_handle in self._arrays:
                s = self._arrays[array_handle]
            else:
                s = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stokesvectortype__array__s)
                self._arrays[array_handle] = s
            return s
        
        @s.setter
        def s(self, s):
            self.s[...] = s
        
        @property
        def descriptor(self):
            """
            Element descriptor ftype=character(fnlen) pytype=str
            
            
            Defined at typedefs.f90 line 1368
            
            """
            return _pyEMsoft.f90wrap_stokesvectortype__get__descriptor(self._handle)
        
        @descriptor.setter
        def descriptor(self, descriptor):
            _pyEMsoft.f90wrap_stokesvectortype__set__descriptor(self._handle, descriptor)
        
        def __str__(self):
            ret = ['<stokesvectortype>{\n']
            ret.append('    s : ')
            ret.append(repr(self.s))
            ret.append(',\n    descriptor : ')
            ret.append(repr(self.descriptor))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.QCsymdata")
    class QCsymdata(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=qcsymdata)
        
        
        Defined at typedefs.f90 lines 1374-1384
        
        """
        def __init__(self, handle=None):
            """
            self = Qcsymdata()
            
            
            Defined at typedefs.f90 lines 1374-1384
            
            
            Returns
            -------
            this : Qcsymdata
            	Object to be constructed
            
            
            Automatically generated constructor for qcsymdata
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_qcsymdata_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Qcsymdata
            
            
            Defined at typedefs.f90 lines 1374-1384
            
            Parameters
            ----------
            this : Qcsymdata
            	Object to be destructed
            
            
            Automatically generated destructor for qcsymdata
            """
            if self._alloc:
                _pyEMsoft.f90wrap_qcsymdata_finalise(this=self._handle)
        
        @property
        def sym_gennum(self):
            """
            Element sym_gennum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1375
            
            """
            return _pyEMsoft.f90wrap_qcsymdata__get__sym_gennum(self._handle)
        
        @sym_gennum.setter
        def sym_gennum(self, sym_gennum):
            _pyEMsoft.f90wrap_qcsymdata__set__sym_gennum(self._handle, sym_gennum)
        
        @property
        def sym_matnum(self):
            """
            Element sym_matnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1376
            
            """
            return _pyEMsoft.f90wrap_qcsymdata__get__sym_matnum(self._handle)
        
        @sym_matnum.setter
        def sym_matnum(self, sym_matnum):
            _pyEMsoft.f90wrap_qcsymdata__set__sym_matnum(self._handle, sym_matnum)
        
        @property
        def sym_numpt(self):
            """
            Element sym_numpt ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1377
            
            """
            return _pyEMsoft.f90wrap_qcsymdata__get__sym_numpt(self._handle)
        
        @sym_numpt.setter
        def sym_numpt(self, sym_numpt):
            _pyEMsoft.f90wrap_qcsymdata__set__sym_numpt(self._handle, sym_numpt)
        
        @property
        def sym_reduce(self):
            """
            Element sym_reduce ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1378
            
            """
            return _pyEMsoft.f90wrap_qcsymdata__get__sym_reduce(self._handle)
        
        @sym_reduce.setter
        def sym_reduce(self, sym_reduce):
            _pyEMsoft.f90wrap_qcsymdata__set__sym_reduce(self._handle, sym_reduce)
        
        @property
        def sym_data(self):
            """
            Element sym_data ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1379
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcsymdata__array__sym_data(self._handle)
            if array_handle in self._arrays:
                sym_data = self._arrays[array_handle]
            else:
                sym_data = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcsymdata__array__sym_data)
                self._arrays[array_handle] = sym_data
            return sym_data
        
        @sym_data.setter
        def sym_data(self, sym_data):
            self.sym_data[...] = sym_data
        
        @property
        def sym_direc(self):
            """
            Element sym_direc ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1380
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcsymdata__array__sym_direc(self._handle)
            if array_handle in self._arrays:
                sym_direc = self._arrays[array_handle]
            else:
                sym_direc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcsymdata__array__sym_direc)
                self._arrays[array_handle] = sym_direc
            return sym_direc
        
        @sym_direc.setter
        def sym_direc(self, sym_direc):
            self.sym_direc[...] = sym_direc
        
        @property
        def sym_recip(self):
            """
            Element sym_recip ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1381
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcsymdata__array__sym_recip(self._handle)
            if array_handle in self._arrays:
                sym_recip = self._arrays[array_handle]
            else:
                sym_recip = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcsymdata__array__sym_recip)
                self._arrays[array_handle] = sym_recip
            return sym_recip
        
        @sym_recip.setter
        def sym_recip(self, sym_recip):
            self.sym_recip[...] = sym_recip
        
        @property
        def sym_c(self):
            """
            Element sym_c ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1382
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcsymdata__array__sym_c(self._handle)
            if array_handle in self._arrays:
                sym_c = self._arrays[array_handle]
            else:
                sym_c = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcsymdata__array__sym_c)
                self._arrays[array_handle] = sym_c
            return sym_c
        
        @sym_c.setter
        def sym_c(self, sym_c):
            self.sym_c[...] = sym_c
        
        @property
        def sym_name(self):
            """
            Element sym_name ftype=character(11) pytype=str
            
            
            Defined at typedefs.f90 line 1383
            
            """
            return _pyEMsoft.f90wrap_qcsymdata__get__sym_name(self._handle)
        
        @sym_name.setter
        def sym_name(self, sym_name):
            _pyEMsoft.f90wrap_qcsymdata__set__sym_name(self._handle, sym_name)
        
        @property
        def sym_gl(self):
            """
            Element sym_gl ftype=character(100) pytype=str
            
            
            Defined at typedefs.f90 line 1384
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcsymdata__array__sym_gl(self._handle)
            if array_handle in self._arrays:
                sym_gl = self._arrays[array_handle]
            else:
                sym_gl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcsymdata__array__sym_gl)
                self._arrays[array_handle] = sym_gl
            return sym_gl
        
        @sym_gl.setter
        def sym_gl(self, sym_gl):
            self.sym_gl[...] = sym_gl
        
        def __str__(self):
            ret = ['<qcsymdata>{\n']
            ret.append('    sym_gennum : ')
            ret.append(repr(self.sym_gennum))
            ret.append(',\n    sym_matnum : ')
            ret.append(repr(self.sym_matnum))
            ret.append(',\n    sym_numpt : ')
            ret.append(repr(self.sym_numpt))
            ret.append(',\n    sym_reduce : ')
            ret.append(repr(self.sym_reduce))
            ret.append(',\n    sym_data : ')
            ret.append(repr(self.sym_data))
            ret.append(',\n    sym_direc : ')
            ret.append(repr(self.sym_direc))
            ret.append(',\n    sym_recip : ')
            ret.append(repr(self.sym_recip))
            ret.append(',\n    sym_c : ')
            ret.append(repr(self.sym_c))
            ret.append(',\n    sym_name : ')
            ret.append(repr(self.sym_name))
            ret.append(',\n    sym_gl : ')
            ret.append(repr(self.sym_gl))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.QCStructureType")
    class QCStructureType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=qcstructuretype)
        
        
        Defined at typedefs.f90 lines 1386-1423
        
        """
        def __init__(self, handle=None):
            """
            self = Qcstructuretype()
            
            
            Defined at typedefs.f90 lines 1386-1423
            
            
            Returns
            -------
            this : Qcstructuretype
            	Object to be constructed
            
            
            Automatically generated constructor for qcstructuretype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_qcstructuretype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Qcstructuretype
            
            
            Defined at typedefs.f90 lines 1386-1423
            
            Parameters
            ----------
            this : Qcstructuretype
            	Object to be destructed
            
            
            Automatically generated destructor for qcstructuretype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_qcstructuretype_finalise(this=self._handle)
        
        @property
        def atno(self):
            """
            Element atno ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1387
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__atno(self._handle)
        
        @atno.setter
        def atno(self, atno):
            _pyEMsoft.f90wrap_qcstructuretype__set__atno(self._handle, atno)
        
        @property
        def imax(self):
            """
            Element imax ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1388
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__imax(self._handle)
        
        @imax.setter
        def imax(self, imax):
            _pyEMsoft.f90wrap_qcstructuretype__set__imax(self._handle, imax)
        
        @property
        def numindices(self):
            """
            Element numindices ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1389
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__numindices(self._handle)
        
        @numindices.setter
        def numindices(self, numindices):
            _pyEMsoft.f90wrap_qcstructuretype__set__numindices(self._handle, numindices)
        
        @property
        def facts(self):
            """
            Element facts ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1390
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__facts(self._handle)
            if array_handle in self._arrays:
                facts = self._arrays[array_handle]
            else:
                facts = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__facts)
                self._arrays[array_handle] = facts
            return facts
        
        @facts.setter
        def facts(self, facts):
            self.facts[...] = facts
        
        @property
        def ucgindex(self):
            """
            Element ucgindex ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1391
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__ucgindex(self._handle)
            if array_handle in self._arrays:
                ucgindex = self._arrays[array_handle]
            else:
                ucgindex = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__ucgindex)
                self._arrays[array_handle] = ucgindex
            return ucgindex
        
        @ucgindex.setter
        def ucgindex(self, ucgindex):
            self.ucgindex[...] = ucgindex
        
        @property
        def ucgcalc(self):
            """
            Element ucgcalc ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1392
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__ucgcalc(self._handle)
            if array_handle in self._arrays:
                ucgcalc = self._arrays[array_handle]
            else:
                ucgcalc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__ucgcalc)
                self._arrays[array_handle] = ucgcalc
            return ucgcalc
        
        @ucgcalc.setter
        def ucgcalc(self, ucgcalc):
            self.ucgcalc[...] = ucgcalc
        
        @property
        def inverseindex(self):
            """
            Element inverseindex ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1393
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__inverseindex(self._handle)
            if array_handle in self._arrays:
                inverseindex = self._arrays[array_handle]
            else:
                inverseindex = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__inverseindex)
                self._arrays[array_handle] = inverseindex
            return inverseindex
        
        @inverseindex.setter
        def inverseindex(self, inverseindex):
            self.inverseindex[...] = inverseindex
        
        @property
        def sg(self):
            """
            Element sg ftype=type(qcsymdata) pytype=Qcsymdata
            
            
            Defined at typedefs.f90 line 1394
            
            """
            sg_handle = _pyEMsoft.f90wrap_qcstructuretype__get__sg(self._handle)
            if tuple(sg_handle) in self._objs:
                sg = self._objs[tuple(sg_handle)]
            else:
                sg = typedefs.QCsymdata.from_handle(sg_handle)
                self._objs[tuple(sg_handle)] = sg
            return sg
        
        @sg.setter
        def sg(self, sg):
            sg = sg._handle
            _pyEMsoft.f90wrap_qcstructuretype__set__sg(self._handle, sg)
        
        @property
        def epvec(self):
            """
            Element epvec ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1395
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__epvec(self._handle)
            if array_handle in self._arrays:
                epvec = self._arrays[array_handle]
            else:
                epvec = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__epvec)
                self._arrays[array_handle] = epvec
            return epvec
        
        @epvec.setter
        def epvec(self, epvec):
            self.epvec[...] = epvec
        
        @property
        def epar(self):
            """
            Element epar ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1395
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__epar(self._handle)
            if array_handle in self._arrays:
                epar = self._arrays[array_handle]
            else:
                epar = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__epar)
                self._arrays[array_handle] = epar
            return epar
        
        @epar.setter
        def epar(self, epar):
            self.epar[...] = epar
        
        @property
        def eovec(self):
            """
            Element eovec ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1396
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__eovec(self._handle)
            if array_handle in self._arrays:
                eovec = self._arrays[array_handle]
            else:
                eovec = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__eovec)
                self._arrays[array_handle] = eovec
            return eovec
        
        @eovec.setter
        def eovec(self, eovec):
            self.eovec[...] = eovec
        
        @property
        def eperp(self):
            """
            Element eperp ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1396
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__eperp(self._handle)
            if array_handle in self._arrays:
                eperp = self._arrays[array_handle]
            else:
                eperp = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__eperp)
                self._arrays[array_handle] = eperp
            return eperp
        
        @eperp.setter
        def eperp(self, eperp):
            self.eperp[...] = eperp
        
        @property
        def mp(self):
            """
            Element mp ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1397
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__mp(self._handle)
            if array_handle in self._arrays:
                mp = self._arrays[array_handle]
            else:
                mp = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__mp)
                self._arrays[array_handle] = mp
            return mp
        
        @mp.setter
        def mp(self, mp):
            self.mp[...] = mp
        
        @property
        def picos(self):
            """
            Element picos ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1397
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__picos(self._handle)
            if array_handle in self._arrays:
                picos = self._arrays[array_handle]
            else:
                picos = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__picos)
                self._arrays[array_handle] = picos
            return picos
        
        @picos.setter
        def picos(self, picos):
            self.picos[...] = picos
        
        @property
        def mo(self):
            """
            Element mo ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1398
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__mo(self._handle)
            if array_handle in self._arrays:
                mo = self._arrays[array_handle]
            else:
                mo = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__mo)
                self._arrays[array_handle] = mo
            return mo
        
        @mo.setter
        def mo(self, mo):
            self.mo[...] = mo
        
        @property
        def qicos(self):
            """
            Element qicos ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1398
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__qicos(self._handle)
            if array_handle in self._arrays:
                qicos = self._arrays[array_handle]
            else:
                qicos = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__qicos)
                self._arrays[array_handle] = qicos
            return qicos
        
        @qicos.setter
        def qicos(self, qicos):
            self.qicos[...] = qicos
        
        @property
        def dsm(self):
            """
            Element dsm ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1399
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__dsm(self._handle)
            if array_handle in self._arrays:
                dsm = self._arrays[array_handle]
            else:
                dsm = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__dsm)
                self._arrays[array_handle] = dsm
            return dsm
        
        @dsm.setter
        def dsm(self, dsm):
            self.dsm[...] = dsm
        
        @property
        def rsm(self):
            """
            Element rsm ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1399
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__rsm(self._handle)
            if array_handle in self._arrays:
                rsm = self._arrays[array_handle]
            else:
                rsm = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__rsm)
                self._arrays[array_handle] = rsm
            return rsm
        
        @rsm.setter
        def rsm(self, rsm):
            self.rsm[...] = rsm
        
        @property
        def dmt(self):
            """
            Element dmt ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1400
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__dmt(self._handle)
            if array_handle in self._arrays:
                dmt = self._arrays[array_handle]
            else:
                dmt = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__dmt)
                self._arrays[array_handle] = dmt
            return dmt
        
        @dmt.setter
        def dmt(self, dmt):
            self.dmt[...] = dmt
        
        @property
        def rmt(self):
            """
            Element rmt ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1400
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__rmt(self._handle)
            if array_handle in self._arrays:
                rmt = self._arrays[array_handle]
            else:
                rmt = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__rmt)
                self._arrays[array_handle] = rmt
            return rmt
        
        @rmt.setter
        def rmt(self, rmt):
            self.rmt[...] = rmt
        
        @property
        def scaling(self):
            """
            Element scaling ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1401
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__scaling(self._handle)
            if array_handle in self._arrays:
                scaling = self._arrays[array_handle]
            else:
                scaling = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__scaling)
                self._arrays[array_handle] = scaling
            return scaling
        
        @scaling.setter
        def scaling(self, scaling):
            self.scaling[...] = scaling
        
        @property
        def sym_icos(self):
            """
            Element sym_icos ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1402
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__sym_icos(self._handle)
            if array_handle in self._arrays:
                sym_icos = self._arrays[array_handle]
            else:
                sym_icos = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__sym_icos)
                self._arrays[array_handle] = sym_icos
            return sym_icos
        
        @sym_icos.setter
        def sym_icos(self, sym_icos):
            self.sym_icos[...] = sym_icos
        
        @property
        def qclatparm(self):
            """
            Element qclatparm ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1403
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__qclatparm(self._handle)
        
        @qclatparm.setter
        def qclatparm(self, qclatparm):
            _pyEMsoft.f90wrap_qcstructuretype__set__qclatparm(self._handle, qclatparm)
        
        @property
        def alphaij(self):
            """
            Element alphaij ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1403
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__alphaij(self._handle)
        
        @alphaij.setter
        def alphaij(self, alphaij):
            _pyEMsoft.f90wrap_qcstructuretype__set__alphaij(self._handle, alphaij)
        
        @property
        def alphastarij(self):
            """
            Element alphastarij ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1403
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__alphastarij(self._handle)
        
        @alphastarij.setter
        def alphastarij(self, alphastarij):
            _pyEMsoft.f90wrap_qcstructuretype__set__alphastarij(self._handle, alphastarij)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1404
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_qcstructuretype__set__dmin(self._handle, dmin)
        
        @property
        def vol(self):
            """
            Element vol ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1405
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__vol(self._handle)
        
        @vol.setter
        def vol(self, vol):
            _pyEMsoft.f90wrap_qcstructuretype__set__vol(self._handle, vol)
        
        @property
        def gmax_orth(self):
            """
            Element gmax_orth ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1406
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__gmax_orth(self._handle)
        
        @gmax_orth.setter
        def gmax_orth(self, gmax_orth):
            _pyEMsoft.f90wrap_qcstructuretype__set__gmax_orth(self._handle, gmax_orth)
        
        @property
        def dwf(self):
            """
            Element dwf ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1407
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__dwf(self._handle)
        
        @dwf.setter
        def dwf(self, dwf):
            _pyEMsoft.f90wrap_qcstructuretype__set__dwf(self._handle, dwf)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1408
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_qcstructuretype__set__voltage(self._handle, voltage)
        
        @property
        def mrelcor(self):
            """
            Element mrelcor ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1409
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__mrelcor(self._handle)
        
        @mrelcor.setter
        def mrelcor(self, mrelcor):
            _pyEMsoft.f90wrap_qcstructuretype__set__mrelcor(self._handle, mrelcor)
        
        @property
        def msigma(self):
            """
            Element msigma ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1410
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__msigma(self._handle)
        
        @msigma.setter
        def msigma(self, msigma):
            _pyEMsoft.f90wrap_qcstructuretype__set__msigma(self._handle, msigma)
        
        @property
        def mpsihat(self):
            """
            Element mpsihat ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1411
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__mpsihat(self._handle)
        
        @mpsihat.setter
        def mpsihat(self, mpsihat):
            _pyEMsoft.f90wrap_qcstructuretype__set__mpsihat(self._handle, mpsihat)
        
        @property
        def mlambda(self):
            """
            Element mlambda ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1412
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__mlambda(self._handle)
        
        @mlambda.setter
        def mlambda(self, mlambda):
            _pyEMsoft.f90wrap_qcstructuretype__set__mlambda(self._handle, mlambda)
        
        @property
        def upzero(self):
            """
            Element upzero ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1413
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__upzero(self._handle)
        
        @upzero.setter
        def upzero(self, upzero):
            _pyEMsoft.f90wrap_qcstructuretype__set__upzero(self._handle, upzero)
        
        @property
        def xizerop(self):
            """
            Element xizerop ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1414
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__xizerop(self._handle)
        
        @xizerop.setter
        def xizerop(self, xizerop):
            _pyEMsoft.f90wrap_qcstructuretype__set__xizerop(self._handle, xizerop)
        
        @property
        def multiplicity(self):
            """
            Element multiplicity ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1415
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__multiplicity(self._handle)
        
        @multiplicity.setter
        def multiplicity(self, multiplicity):
            _pyEMsoft.f90wrap_qcstructuretype__set__multiplicity(self._handle, multiplicity)
        
        @property
        def centering(self):
            """
            Element centering ftype=character(1) pytype=str
            
            
            Defined at typedefs.f90 line 1416
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__centering(self._handle)
        
        @centering.setter
        def centering(self, centering):
            _pyEMsoft.f90wrap_qcstructuretype__set__centering(self._handle, centering)
        
        @property
        def lut(self):
            """
            Element lut ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 1417
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__lut(self._handle)
            if array_handle in self._arrays:
                lut = self._arrays[array_handle]
            else:
                lut = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__lut)
                self._arrays[array_handle] = lut
            return lut
        
        @lut.setter
        def lut(self, lut):
            self.lut[...] = lut
        
        @property
        def lutqg(self):
            """
            Element lutqg ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 1418
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__lutqg(self._handle)
            if array_handle in self._arrays:
                lutqg = self._arrays[array_handle]
            else:
                lutqg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__lutqg)
                self._arrays[array_handle] = lutqg
            return lutqg
        
        @lutqg.setter
        def lutqg(self, lutqg):
            self.lutqg[...] = lutqg
        
        @property
        def dbdiff(self):
            """
            Element dbdiff ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1419
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__dbdiff(self._handle)
            if array_handle in self._arrays:
                dbdiff = self._arrays[array_handle]
            else:
                dbdiff = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__dbdiff)
                self._arrays[array_handle] = dbdiff
            return dbdiff
        
        @dbdiff.setter
        def dbdiff(self, dbdiff):
            self.dbdiff[...] = dbdiff
        
        @property
        def sgname(self):
            """
            Element sgname ftype=character(fnlen) pytype=str
            
            
            Defined at typedefs.f90 line 1420
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__sgname(self._handle)
            if array_handle in self._arrays:
                sgname = self._arrays[array_handle]
            else:
                sgname = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__sgname)
                self._arrays[array_handle] = sgname
            return sgname
        
        @sgname.setter
        def sgname(self, sgname):
            self.sgname[...] = sgname
        
        @property
        def qctype(self):
            """
            Element qctype ftype=character(fnlen) pytype=str
            
            
            Defined at typedefs.f90 line 1420
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__qctype(self._handle)
        
        @qctype.setter
        def qctype(self, qctype):
            _pyEMsoft.f90wrap_qcstructuretype__set__qctype(self._handle, qctype)
        
        @property
        def fname(self):
            """
            Element fname ftype=character(fnlen) pytype=str
            
            
            Defined at typedefs.f90 line 1420
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__fname(self._handle)
        
        @fname.setter
        def fname(self, fname):
            _pyEMsoft.f90wrap_qcstructuretype__set__fname(self._handle, fname)
        
        @property
        def sym_sgnum(self):
            """
            Element sym_sgnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1421
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__sym_sgnum(self._handle)
        
        @sym_sgnum.setter
        def sym_sgnum(self, sym_sgnum):
            _pyEMsoft.f90wrap_qcstructuretype__set__sym_sgnum(self._handle, sym_sgnum)
        
        @property
        def atom_ntype(self):
            """
            Element atom_ntype ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1421
            
            """
            return _pyEMsoft.f90wrap_qcstructuretype__get__atom_ntype(self._handle)
        
        @atom_ntype.setter
        def atom_ntype(self, atom_ntype):
            _pyEMsoft.f90wrap_qcstructuretype__set__atom_ntype(self._handle, atom_ntype)
        
        @property
        def atom_type(self):
            """
            Element atom_type ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1421
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__atom_type(self._handle)
            if array_handle in self._arrays:
                atom_type = self._arrays[array_handle]
            else:
                atom_type = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__atom_type)
                self._arrays[array_handle] = atom_type
            return atom_type
        
        @atom_type.setter
        def atom_type(self, atom_type):
            self.atom_type[...] = atom_type
        
        @property
        def numat(self):
            """
            Element numat ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1421
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__numat(self._handle)
            if array_handle in self._arrays:
                numat = self._arrays[array_handle]
            else:
                numat = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__numat)
                self._arrays[array_handle] = numat
            return numat
        
        @numat.setter
        def numat(self, numat):
            self.numat[...] = numat
        
        @property
        def apos(self):
            """
            Element apos ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1422
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__apos(self._handle)
            if array_handle in self._arrays:
                apos = self._arrays[array_handle]
            else:
                apos = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__apos)
                self._arrays[array_handle] = apos
            return apos
        
        @apos.setter
        def apos(self, apos):
            self.apos[...] = apos
        
        @property
        def atom_pos(self):
            """
            Element atom_pos ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1423
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_qcstructuretype__array__atom_pos(self._handle)
            if array_handle in self._arrays:
                atom_pos = self._arrays[array_handle]
            else:
                atom_pos = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_qcstructuretype__array__atom_pos)
                self._arrays[array_handle] = atom_pos
            return atom_pos
        
        @atom_pos.setter
        def atom_pos(self, atom_pos):
            self.atom_pos[...] = atom_pos
        
        def __str__(self):
            ret = ['<qcstructuretype>{\n']
            ret.append('    atno : ')
            ret.append(repr(self.atno))
            ret.append(',\n    imax : ')
            ret.append(repr(self.imax))
            ret.append(',\n    numindices : ')
            ret.append(repr(self.numindices))
            ret.append(',\n    facts : ')
            ret.append(repr(self.facts))
            ret.append(',\n    ucgindex : ')
            ret.append(repr(self.ucgindex))
            ret.append(',\n    ucgcalc : ')
            ret.append(repr(self.ucgcalc))
            ret.append(',\n    inverseindex : ')
            ret.append(repr(self.inverseindex))
            ret.append(',\n    sg : ')
            ret.append(repr(self.sg))
            ret.append(',\n    epvec : ')
            ret.append(repr(self.epvec))
            ret.append(',\n    epar : ')
            ret.append(repr(self.epar))
            ret.append(',\n    eovec : ')
            ret.append(repr(self.eovec))
            ret.append(',\n    eperp : ')
            ret.append(repr(self.eperp))
            ret.append(',\n    mp : ')
            ret.append(repr(self.mp))
            ret.append(',\n    picos : ')
            ret.append(repr(self.picos))
            ret.append(',\n    mo : ')
            ret.append(repr(self.mo))
            ret.append(',\n    qicos : ')
            ret.append(repr(self.qicos))
            ret.append(',\n    dsm : ')
            ret.append(repr(self.dsm))
            ret.append(',\n    rsm : ')
            ret.append(repr(self.rsm))
            ret.append(',\n    dmt : ')
            ret.append(repr(self.dmt))
            ret.append(',\n    rmt : ')
            ret.append(repr(self.rmt))
            ret.append(',\n    scaling : ')
            ret.append(repr(self.scaling))
            ret.append(',\n    sym_icos : ')
            ret.append(repr(self.sym_icos))
            ret.append(',\n    qclatparm : ')
            ret.append(repr(self.qclatparm))
            ret.append(',\n    alphaij : ')
            ret.append(repr(self.alphaij))
            ret.append(',\n    alphastarij : ')
            ret.append(repr(self.alphastarij))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    vol : ')
            ret.append(repr(self.vol))
            ret.append(',\n    gmax_orth : ')
            ret.append(repr(self.gmax_orth))
            ret.append(',\n    dwf : ')
            ret.append(repr(self.dwf))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    mrelcor : ')
            ret.append(repr(self.mrelcor))
            ret.append(',\n    msigma : ')
            ret.append(repr(self.msigma))
            ret.append(',\n    mpsihat : ')
            ret.append(repr(self.mpsihat))
            ret.append(',\n    mlambda : ')
            ret.append(repr(self.mlambda))
            ret.append(',\n    upzero : ')
            ret.append(repr(self.upzero))
            ret.append(',\n    xizerop : ')
            ret.append(repr(self.xizerop))
            ret.append(',\n    multiplicity : ')
            ret.append(repr(self.multiplicity))
            ret.append(',\n    centering : ')
            ret.append(repr(self.centering))
            ret.append(',\n    lut : ')
            ret.append(repr(self.lut))
            ret.append(',\n    lutqg : ')
            ret.append(repr(self.lutqg))
            ret.append(',\n    dbdiff : ')
            ret.append(repr(self.dbdiff))
            ret.append(',\n    sgname : ')
            ret.append(repr(self.sgname))
            ret.append(',\n    qctype : ')
            ret.append(repr(self.qctype))
            ret.append(',\n    fname : ')
            ret.append(repr(self.fname))
            ret.append(',\n    sym_sgnum : ')
            ret.append(repr(self.sym_sgnum))
            ret.append(',\n    atom_ntype : ')
            ret.append(repr(self.atom_ntype))
            ret.append(',\n    atom_type : ')
            ret.append(repr(self.atom_type))
            ret.append(',\n    numat : ')
            ret.append(repr(self.numat))
            ret.append(',\n    apos : ')
            ret.append(repr(self.apos))
            ret.append(',\n    atom_pos : ')
            ret.append(repr(self.atom_pos))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.TDQCsymdata")
    class TDQCsymdata(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=tdqcsymdata)
        
        
        Defined at typedefs.f90 lines 1425-1436
        
        """
        def __init__(self, handle=None):
            """
            self = Tdqcsymdata()
            
            
            Defined at typedefs.f90 lines 1425-1436
            
            
            Returns
            -------
            this : Tdqcsymdata
            	Object to be constructed
            
            
            Automatically generated constructor for tdqcsymdata
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_tdqcsymdata_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Tdqcsymdata
            
            
            Defined at typedefs.f90 lines 1425-1436
            
            Parameters
            ----------
            this : Tdqcsymdata
            	Object to be destructed
            
            
            Automatically generated destructor for tdqcsymdata
            """
            if self._alloc:
                _pyEMsoft.f90wrap_tdqcsymdata_finalise(this=self._handle)
        
        @property
        def sym_gennum(self):
            """
            Element sym_gennum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1426
            
            """
            return _pyEMsoft.f90wrap_tdqcsymdata__get__sym_gennum(self._handle)
        
        @sym_gennum.setter
        def sym_gennum(self, sym_gennum):
            _pyEMsoft.f90wrap_tdqcsymdata__set__sym_gennum(self._handle, sym_gennum)
        
        @property
        def sym_matnum(self):
            """
            Element sym_matnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1427
            
            """
            return _pyEMsoft.f90wrap_tdqcsymdata__get__sym_matnum(self._handle)
        
        @sym_matnum.setter
        def sym_matnum(self, sym_matnum):
            _pyEMsoft.f90wrap_tdqcsymdata__set__sym_matnum(self._handle, sym_matnum)
        
        @property
        def sym_numpt(self):
            """
            Element sym_numpt ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1428
            
            """
            return _pyEMsoft.f90wrap_tdqcsymdata__get__sym_numpt(self._handle)
        
        @sym_numpt.setter
        def sym_numpt(self, sym_numpt):
            _pyEMsoft.f90wrap_tdqcsymdata__set__sym_numpt(self._handle, sym_numpt)
        
        @property
        def sym_reduce(self):
            """
            Element sym_reduce ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1429
            
            """
            return _pyEMsoft.f90wrap_tdqcsymdata__get__sym_reduce(self._handle)
        
        @sym_reduce.setter
        def sym_reduce(self, sym_reduce):
            _pyEMsoft.f90wrap_tdqcsymdata__set__sym_reduce(self._handle, sym_reduce)
        
        @property
        def sym_data(self):
            """
            Element sym_data ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1430
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcsymdata__array__sym_data(self._handle)
            if array_handle in self._arrays:
                sym_data = self._arrays[array_handle]
            else:
                sym_data = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcsymdata__array__sym_data)
                self._arrays[array_handle] = sym_data
            return sym_data
        
        @sym_data.setter
        def sym_data(self, sym_data):
            self.sym_data[...] = sym_data
        
        @property
        def sym_direc(self):
            """
            Element sym_direc ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1431
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcsymdata__array__sym_direc(self._handle)
            if array_handle in self._arrays:
                sym_direc = self._arrays[array_handle]
            else:
                sym_direc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcsymdata__array__sym_direc)
                self._arrays[array_handle] = sym_direc
            return sym_direc
        
        @sym_direc.setter
        def sym_direc(self, sym_direc):
            self.sym_direc[...] = sym_direc
        
        @property
        def sym_recip(self):
            """
            Element sym_recip ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1432
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcsymdata__array__sym_recip(self._handle)
            if array_handle in self._arrays:
                sym_recip = self._arrays[array_handle]
            else:
                sym_recip = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcsymdata__array__sym_recip)
                self._arrays[array_handle] = sym_recip
            return sym_recip
        
        @sym_recip.setter
        def sym_recip(self, sym_recip):
            self.sym_recip[...] = sym_recip
        
        @property
        def sym_c(self):
            """
            Element sym_c ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1433
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcsymdata__array__sym_c(self._handle)
            if array_handle in self._arrays:
                sym_c = self._arrays[array_handle]
            else:
                sym_c = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcsymdata__array__sym_c)
                self._arrays[array_handle] = sym_c
            return sym_c
        
        @sym_c.setter
        def sym_c(self, sym_c):
            self.sym_c[...] = sym_c
        
        @property
        def sym_name(self):
            """
            Element sym_name ftype=character(11) pytype=str
            
            
            Defined at typedefs.f90 line 1434
            
            """
            return _pyEMsoft.f90wrap_tdqcsymdata__get__sym_name(self._handle)
        
        @sym_name.setter
        def sym_name(self, sym_name):
            _pyEMsoft.f90wrap_tdqcsymdata__set__sym_name(self._handle, sym_name)
        
        @property
        def n_axial(self):
            """
            Element n_axial ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1435
            
            """
            return _pyEMsoft.f90wrap_tdqcsymdata__get__n_axial(self._handle)
        
        @n_axial.setter
        def n_axial(self, n_axial):
            _pyEMsoft.f90wrap_tdqcsymdata__set__n_axial(self._handle, n_axial)
        
        @property
        def sym_gl(self):
            """
            Element sym_gl ftype=character(40) pytype=str
            
            
            Defined at typedefs.f90 line 1436
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcsymdata__array__sym_gl(self._handle)
            if array_handle in self._arrays:
                sym_gl = self._arrays[array_handle]
            else:
                sym_gl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcsymdata__array__sym_gl)
                self._arrays[array_handle] = sym_gl
            return sym_gl
        
        @sym_gl.setter
        def sym_gl(self, sym_gl):
            self.sym_gl[...] = sym_gl
        
        def __str__(self):
            ret = ['<tdqcsymdata>{\n']
            ret.append('    sym_gennum : ')
            ret.append(repr(self.sym_gennum))
            ret.append(',\n    sym_matnum : ')
            ret.append(repr(self.sym_matnum))
            ret.append(',\n    sym_numpt : ')
            ret.append(repr(self.sym_numpt))
            ret.append(',\n    sym_reduce : ')
            ret.append(repr(self.sym_reduce))
            ret.append(',\n    sym_data : ')
            ret.append(repr(self.sym_data))
            ret.append(',\n    sym_direc : ')
            ret.append(repr(self.sym_direc))
            ret.append(',\n    sym_recip : ')
            ret.append(repr(self.sym_recip))
            ret.append(',\n    sym_c : ')
            ret.append(repr(self.sym_c))
            ret.append(',\n    sym_name : ')
            ret.append(repr(self.sym_name))
            ret.append(',\n    n_axial : ')
            ret.append(repr(self.n_axial))
            ret.append(',\n    sym_gl : ')
            ret.append(repr(self.sym_gl))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.TDQCStructureType")
    class TDQCStructureType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=tdqcstructuretype)
        
        
        Defined at typedefs.f90 lines 1439-1477
        
        """
        def __init__(self, handle=None):
            """
            self = Tdqcstructuretype()
            
            
            Defined at typedefs.f90 lines 1439-1477
            
            
            Returns
            -------
            this : Tdqcstructuretype
            	Object to be constructed
            
            
            Automatically generated constructor for tdqcstructuretype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_tdqcstructuretype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Tdqcstructuretype
            
            
            Defined at typedefs.f90 lines 1439-1477
            
            Parameters
            ----------
            this : Tdqcstructuretype
            	Object to be destructed
            
            
            Automatically generated destructor for tdqcstructuretype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_tdqcstructuretype_finalise(this=self._handle)
        
        @property
        def atno(self):
            """
            Element atno ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1440
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__atno(self._handle)
        
        @atno.setter
        def atno(self, atno):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__atno(self._handle, atno)
        
        @property
        def imax_qc(self):
            """
            Element imax_qc ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1441
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__imax_qc(self._handle)
        
        @imax_qc.setter
        def imax_qc(self, imax_qc):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__imax_qc(self._handle, imax_qc)
        
        @property
        def imax_p(self):
            """
            Element imax_p ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1441
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__imax_p(self._handle)
        
        @imax_p.setter
        def imax_p(self, imax_p):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__imax_p(self._handle, imax_p)
        
        @property
        def imaxz(self):
            """
            Element imaxz ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1442
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__imaxz(self._handle)
        
        @imaxz.setter
        def imaxz(self, imaxz):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__imaxz(self._handle, imaxz)
        
        @property
        def numindices(self):
            """
            Element numindices ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1443
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__numindices(self._handle)
        
        @numindices.setter
        def numindices(self, numindices):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__numindices(self._handle, numindices)
        
        @property
        def nsym(self):
            """
            Element nsym ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1444
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__nsym(self._handle)
        
        @nsym.setter
        def nsym(self, nsym):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__nsym(self._handle, nsym)
        
        @property
        def facts(self):
            """
            Element facts ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1445
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__facts(self._handle)
            if array_handle in self._arrays:
                facts = self._arrays[array_handle]
            else:
                facts = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__facts)
                self._arrays[array_handle] = facts
            return facts
        
        @facts.setter
        def facts(self, facts):
            self.facts[...] = facts
        
        @property
        def ucgindex(self):
            """
            Element ucgindex ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1446
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__ucgindex(self._handle)
            if array_handle in self._arrays:
                ucgindex = self._arrays[array_handle]
            else:
                ucgindex = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__ucgindex)
                self._arrays[array_handle] = ucgindex
            return ucgindex
        
        @ucgindex.setter
        def ucgindex(self, ucgindex):
            self.ucgindex[...] = ucgindex
        
        @property
        def ucgcalc(self):
            """
            Element ucgcalc ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1447
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__ucgcalc(self._handle)
            if array_handle in self._arrays:
                ucgcalc = self._arrays[array_handle]
            else:
                ucgcalc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__ucgcalc)
                self._arrays[array_handle] = ucgcalc
            return ucgcalc
        
        @ucgcalc.setter
        def ucgcalc(self, ucgcalc):
            self.ucgcalc[...] = ucgcalc
        
        @property
        def inverseindex(self):
            """
            Element inverseindex ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1448
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__inverseindex(self._handle)
            if array_handle in self._arrays:
                inverseindex = self._arrays[array_handle]
            else:
                inverseindex = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__inverseindex)
                self._arrays[array_handle] = inverseindex
            return inverseindex
        
        @inverseindex.setter
        def inverseindex(self, inverseindex):
            self.inverseindex[...] = inverseindex
        
        @property
        def sg(self):
            """
            Element sg ftype=type(tdqcsymdata) pytype=Tdqcsymdata
            
            
            Defined at typedefs.f90 line 1449
            
            """
            sg_handle = _pyEMsoft.f90wrap_tdqcstructuretype__get__sg(self._handle)
            if tuple(sg_handle) in self._objs:
                sg = self._objs[tuple(sg_handle)]
            else:
                sg = typedefs.TDQCsymdata.from_handle(sg_handle)
                self._objs[tuple(sg_handle)] = sg
            return sg
        
        @sg.setter
        def sg(self, sg):
            sg = sg._handle
            _pyEMsoft.f90wrap_tdqcstructuretype__set__sg(self._handle, sg)
        
        @property
        def epvec(self):
            """
            Element epvec ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1450
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__epvec(self._handle)
            if array_handle in self._arrays:
                epvec = self._arrays[array_handle]
            else:
                epvec = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__epvec)
                self._arrays[array_handle] = epvec
            return epvec
        
        @epvec.setter
        def epvec(self, epvec):
            self.epvec[...] = epvec
        
        @property
        def epar(self):
            """
            Element epar ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1450
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__epar(self._handle)
            if array_handle in self._arrays:
                epar = self._arrays[array_handle]
            else:
                epar = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__epar)
                self._arrays[array_handle] = epar
            return epar
        
        @epar.setter
        def epar(self, epar):
            self.epar[...] = epar
        
        @property
        def scaling(self):
            """
            Element scaling ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1450
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__scaling(self._handle)
            if array_handle in self._arrays:
                scaling = self._arrays[array_handle]
            else:
                scaling = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__scaling)
                self._arrays[array_handle] = scaling
            return scaling
        
        @scaling.setter
        def scaling(self, scaling):
            self.scaling[...] = scaling
        
        @property
        def scalingfact(self):
            """
            Element scalingfact ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1450
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__scalingfact(self._handle)
        
        @scalingfact.setter
        def scalingfact(self, scalingfact):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__scalingfact(self._handle, scalingfact)
        
        @property
        def dsm(self):
            """
            Element dsm ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1451
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__dsm(self._handle)
            if array_handle in self._arrays:
                dsm = self._arrays[array_handle]
            else:
                dsm = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__dsm)
                self._arrays[array_handle] = dsm
            return dsm
        
        @dsm.setter
        def dsm(self, dsm):
            self.dsm[...] = dsm
        
        @property
        def rsm(self):
            """
            Element rsm ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1451
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__rsm(self._handle)
            if array_handle in self._arrays:
                rsm = self._arrays[array_handle]
            else:
                rsm = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__rsm)
                self._arrays[array_handle] = rsm
            return rsm
        
        @rsm.setter
        def rsm(self, rsm):
            self.rsm[...] = rsm
        
        @property
        def rmt(self):
            """
            Element rmt ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1452
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__rmt(self._handle)
            if array_handle in self._arrays:
                rmt = self._arrays[array_handle]
            else:
                rmt = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__rmt)
                self._arrays[array_handle] = rmt
            return rmt
        
        @rmt.setter
        def rmt(self, rmt):
            self.rmt[...] = rmt
        
        @property
        def dmt(self):
            """
            Element dmt ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1452
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__dmt(self._handle)
            if array_handle in self._arrays:
                dmt = self._arrays[array_handle]
            else:
                dmt = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__dmt)
                self._arrays[array_handle] = dmt
            return dmt
        
        @dmt.setter
        def dmt(self, dmt):
            self.dmt[...] = dmt
        
        @property
        def sym_icos(self):
            """
            Element sym_icos ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1453
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__sym_icos(self._handle)
            if array_handle in self._arrays:
                sym_icos = self._arrays[array_handle]
            else:
                sym_icos = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__sym_icos)
                self._arrays[array_handle] = sym_icos
            return sym_icos
        
        @sym_icos.setter
        def sym_icos(self, sym_icos):
            self.sym_icos[...] = sym_icos
        
        @property
        def qclatparm_a(self):
            """
            Element qclatparm_a ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1454
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__qclatparm_a(self._handle)
        
        @qclatparm_a.setter
        def qclatparm_a(self, qclatparm_a):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__qclatparm_a(self._handle, qclatparm_a)
        
        @property
        def qclatparm_c(self):
            """
            Element qclatparm_c ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1455
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__qclatparm_c(self._handle)
        
        @qclatparm_c.setter
        def qclatparm_c(self, qclatparm_c):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__qclatparm_c(self._handle, qclatparm_c)
        
        @property
        def alphaij(self):
            """
            Element alphaij ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1456
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__alphaij(self._handle)
        
        @alphaij.setter
        def alphaij(self, alphaij):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__alphaij(self._handle, alphaij)
        
        @property
        def alphai5(self):
            """
            Element alphai5 ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1456
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__alphai5(self._handle)
        
        @alphai5.setter
        def alphai5(self, alphai5):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__alphai5(self._handle, alphai5)
        
        @property
        def alphastarij(self):
            """
            Element alphastarij ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1456
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__alphastarij(self._handle)
        
        @alphastarij.setter
        def alphastarij(self, alphastarij):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__alphastarij(self._handle, alphastarij)
        
        @property
        def dmin_qc(self):
            """
            Element dmin_qc ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1457
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__dmin_qc(self._handle)
        
        @dmin_qc.setter
        def dmin_qc(self, dmin_qc):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__dmin_qc(self._handle, dmin_qc)
        
        @property
        def dmin_p(self):
            """
            Element dmin_p ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1457
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__dmin_p(self._handle)
        
        @dmin_p.setter
        def dmin_p(self, dmin_p):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__dmin_p(self._handle, dmin_p)
        
        @property
        def vol(self):
            """
            Element vol ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1458
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__vol(self._handle)
        
        @vol.setter
        def vol(self, vol):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__vol(self._handle, vol)
        
        @property
        def gmax_orth(self):
            """
            Element gmax_orth ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1459
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__gmax_orth(self._handle)
        
        @gmax_orth.setter
        def gmax_orth(self, gmax_orth):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__gmax_orth(self._handle, gmax_orth)
        
        @property
        def dwf(self):
            """
            Element dwf ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1460
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__dwf(self._handle)
        
        @dwf.setter
        def dwf(self, dwf):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__dwf(self._handle, dwf)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1461
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__voltage(self._handle, voltage)
        
        @property
        def mrelcor(self):
            """
            Element mrelcor ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1462
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__mrelcor(self._handle)
        
        @mrelcor.setter
        def mrelcor(self, mrelcor):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__mrelcor(self._handle, mrelcor)
        
        @property
        def msigma(self):
            """
            Element msigma ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1463
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__msigma(self._handle)
        
        @msigma.setter
        def msigma(self, msigma):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__msigma(self._handle, msigma)
        
        @property
        def mpsihat(self):
            """
            Element mpsihat ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1464
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__mpsihat(self._handle)
        
        @mpsihat.setter
        def mpsihat(self, mpsihat):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__mpsihat(self._handle, mpsihat)
        
        @property
        def mlambda(self):
            """
            Element mlambda ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1465
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__mlambda(self._handle)
        
        @mlambda.setter
        def mlambda(self, mlambda):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__mlambda(self._handle, mlambda)
        
        @property
        def upzero(self):
            """
            Element upzero ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1466
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__upzero(self._handle)
        
        @upzero.setter
        def upzero(self, upzero):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__upzero(self._handle, upzero)
        
        @property
        def xizerop(self):
            """
            Element xizerop ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1467
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__xizerop(self._handle)
        
        @xizerop.setter
        def xizerop(self, xizerop):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__xizerop(self._handle, xizerop)
        
        @property
        def multiplicity(self):
            """
            Element multiplicity ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1468
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__multiplicity(self._handle)
        
        @multiplicity.setter
        def multiplicity(self, multiplicity):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__multiplicity(self._handle, \
                multiplicity)
        
        @property
        def qctype(self):
            """
            Element qctype ftype=character(fnlen) pytype=str
            
            
            Defined at typedefs.f90 line 1469
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__qctype(self._handle)
        
        @qctype.setter
        def qctype(self, qctype):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__qctype(self._handle, qctype)
        
        @property
        def fname(self):
            """
            Element fname ftype=character(fnlen) pytype=str
            
            
            Defined at typedefs.f90 line 1469
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__fname(self._handle)
        
        @fname.setter
        def fname(self, fname):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__fname(self._handle, fname)
        
        @property
        def centering(self):
            """
            Element centering ftype=character(1) pytype=str
            
            
            Defined at typedefs.f90 line 1470
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__centering(self._handle)
        
        @centering.setter
        def centering(self, centering):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__centering(self._handle, centering)
        
        @property
        def lut(self):
            """
            Element lut ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 1471
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__lut(self._handle)
            if array_handle in self._arrays:
                lut = self._arrays[array_handle]
            else:
                lut = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__lut)
                self._arrays[array_handle] = lut
            return lut
        
        @lut.setter
        def lut(self, lut):
            self.lut[...] = lut
        
        @property
        def lutqg(self):
            """
            Element lutqg ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 1472
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__lutqg(self._handle)
            if array_handle in self._arrays:
                lutqg = self._arrays[array_handle]
            else:
                lutqg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__lutqg)
                self._arrays[array_handle] = lutqg
            return lutqg
        
        @lutqg.setter
        def lutqg(self, lutqg):
            self.lutqg[...] = lutqg
        
        @property
        def dbdiff(self):
            """
            Element dbdiff ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1473
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__dbdiff(self._handle)
            if array_handle in self._arrays:
                dbdiff = self._arrays[array_handle]
            else:
                dbdiff = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__dbdiff)
                self._arrays[array_handle] = dbdiff
            return dbdiff
        
        @dbdiff.setter
        def dbdiff(self, dbdiff):
            self.dbdiff[...] = dbdiff
        
        @property
        def atom_ntype(self):
            """
            Element atom_ntype ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1474
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__atom_ntype(self._handle)
        
        @atom_ntype.setter
        def atom_ntype(self, atom_ntype):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__atom_ntype(self._handle, atom_ntype)
        
        @property
        def atom_type(self):
            """
            Element atom_type ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1474
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__atom_type(self._handle)
            if array_handle in self._arrays:
                atom_type = self._arrays[array_handle]
            else:
                atom_type = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__atom_type)
                self._arrays[array_handle] = atom_type
            return atom_type
        
        @atom_type.setter
        def atom_type(self, atom_type):
            self.atom_type[...] = atom_type
        
        @property
        def sym_sgnum(self):
            """
            Element sym_sgnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1474
            
            """
            return _pyEMsoft.f90wrap_tdqcstructuretype__get__sym_sgnum(self._handle)
        
        @sym_sgnum.setter
        def sym_sgnum(self, sym_sgnum):
            _pyEMsoft.f90wrap_tdqcstructuretype__set__sym_sgnum(self._handle, sym_sgnum)
        
        @property
        def numat(self):
            """
            Element numat ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1474
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__numat(self._handle)
            if array_handle in self._arrays:
                numat = self._arrays[array_handle]
            else:
                numat = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__numat)
                self._arrays[array_handle] = numat
            return numat
        
        @numat.setter
        def numat(self, numat):
            self.numat[...] = numat
        
        @property
        def sgname(self):
            """
            Element sgname ftype=character(fnlen) pytype=str
            
            
            Defined at typedefs.f90 line 1475
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__sgname(self._handle)
            if array_handle in self._arrays:
                sgname = self._arrays[array_handle]
            else:
                sgname = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__sgname)
                self._arrays[array_handle] = sgname
            return sgname
        
        @sgname.setter
        def sgname(self, sgname):
            self.sgname[...] = sgname
        
        @property
        def atom_pos(self):
            """
            Element atom_pos ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1476
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__atom_pos(self._handle)
            if array_handle in self._arrays:
                atom_pos = self._arrays[array_handle]
            else:
                atom_pos = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__atom_pos)
                self._arrays[array_handle] = atom_pos
            return atom_pos
        
        @atom_pos.setter
        def atom_pos(self, atom_pos):
            self.atom_pos[...] = atom_pos
        
        @property
        def apos(self):
            """
            Element apos ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1477
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tdqcstructuretype__array__apos(self._handle)
            if array_handle in self._arrays:
                apos = self._arrays[array_handle]
            else:
                apos = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tdqcstructuretype__array__apos)
                self._arrays[array_handle] = apos
            return apos
        
        @apos.setter
        def apos(self, apos):
            self.apos[...] = apos
        
        def __str__(self):
            ret = ['<tdqcstructuretype>{\n']
            ret.append('    atno : ')
            ret.append(repr(self.atno))
            ret.append(',\n    imax_qc : ')
            ret.append(repr(self.imax_qc))
            ret.append(',\n    imax_p : ')
            ret.append(repr(self.imax_p))
            ret.append(',\n    imaxz : ')
            ret.append(repr(self.imaxz))
            ret.append(',\n    numindices : ')
            ret.append(repr(self.numindices))
            ret.append(',\n    nsym : ')
            ret.append(repr(self.nsym))
            ret.append(',\n    facts : ')
            ret.append(repr(self.facts))
            ret.append(',\n    ucgindex : ')
            ret.append(repr(self.ucgindex))
            ret.append(',\n    ucgcalc : ')
            ret.append(repr(self.ucgcalc))
            ret.append(',\n    inverseindex : ')
            ret.append(repr(self.inverseindex))
            ret.append(',\n    sg : ')
            ret.append(repr(self.sg))
            ret.append(',\n    epvec : ')
            ret.append(repr(self.epvec))
            ret.append(',\n    epar : ')
            ret.append(repr(self.epar))
            ret.append(',\n    scaling : ')
            ret.append(repr(self.scaling))
            ret.append(',\n    scalingfact : ')
            ret.append(repr(self.scalingfact))
            ret.append(',\n    dsm : ')
            ret.append(repr(self.dsm))
            ret.append(',\n    rsm : ')
            ret.append(repr(self.rsm))
            ret.append(',\n    rmt : ')
            ret.append(repr(self.rmt))
            ret.append(',\n    dmt : ')
            ret.append(repr(self.dmt))
            ret.append(',\n    sym_icos : ')
            ret.append(repr(self.sym_icos))
            ret.append(',\n    qclatparm_a : ')
            ret.append(repr(self.qclatparm_a))
            ret.append(',\n    qclatparm_c : ')
            ret.append(repr(self.qclatparm_c))
            ret.append(',\n    alphaij : ')
            ret.append(repr(self.alphaij))
            ret.append(',\n    alphai5 : ')
            ret.append(repr(self.alphai5))
            ret.append(',\n    alphastarij : ')
            ret.append(repr(self.alphastarij))
            ret.append(',\n    dmin_qc : ')
            ret.append(repr(self.dmin_qc))
            ret.append(',\n    dmin_p : ')
            ret.append(repr(self.dmin_p))
            ret.append(',\n    vol : ')
            ret.append(repr(self.vol))
            ret.append(',\n    gmax_orth : ')
            ret.append(repr(self.gmax_orth))
            ret.append(',\n    dwf : ')
            ret.append(repr(self.dwf))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    mrelcor : ')
            ret.append(repr(self.mrelcor))
            ret.append(',\n    msigma : ')
            ret.append(repr(self.msigma))
            ret.append(',\n    mpsihat : ')
            ret.append(repr(self.mpsihat))
            ret.append(',\n    mlambda : ')
            ret.append(repr(self.mlambda))
            ret.append(',\n    upzero : ')
            ret.append(repr(self.upzero))
            ret.append(',\n    xizerop : ')
            ret.append(repr(self.xizerop))
            ret.append(',\n    multiplicity : ')
            ret.append(repr(self.multiplicity))
            ret.append(',\n    qctype : ')
            ret.append(repr(self.qctype))
            ret.append(',\n    fname : ')
            ret.append(repr(self.fname))
            ret.append(',\n    centering : ')
            ret.append(repr(self.centering))
            ret.append(',\n    lut : ')
            ret.append(repr(self.lut))
            ret.append(',\n    lutqg : ')
            ret.append(repr(self.lutqg))
            ret.append(',\n    dbdiff : ')
            ret.append(repr(self.dbdiff))
            ret.append(',\n    atom_ntype : ')
            ret.append(repr(self.atom_ntype))
            ret.append(',\n    atom_type : ')
            ret.append(repr(self.atom_type))
            ret.append(',\n    sym_sgnum : ')
            ret.append(repr(self.sym_sgnum))
            ret.append(',\n    numat : ')
            ret.append(repr(self.numat))
            ret.append(',\n    sgname : ')
            ret.append(repr(self.sgname))
            ret.append(',\n    atom_pos : ')
            ret.append(repr(self.atom_pos))
            ret.append(',\n    apos : ')
            ret.append(repr(self.apos))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.PoleFigures")
    class PoleFigures(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=polefigures)
        
        
        Defined at typedefs.f90 lines 1479-1483
        
        """
        def __init__(self, handle=None):
            """
            self = Polefigures()
            
            
            Defined at typedefs.f90 lines 1479-1483
            
            
            Returns
            -------
            this : Polefigures
            	Object to be constructed
            
            
            Automatically generated constructor for polefigures
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_polefigures_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Polefigures
            
            
            Defined at typedefs.f90 lines 1479-1483
            
            Parameters
            ----------
            this : Polefigures
            	Object to be destructed
            
            
            Automatically generated destructor for polefigures
            """
            if self._alloc:
                _pyEMsoft.f90wrap_polefigures_finalise(this=self._handle)
        
        @property
        def hkl(self):
            """
            Element hkl ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1480
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_polefigures__array__hkl(self._handle)
            if array_handle in self._arrays:
                hkl = self._arrays[array_handle]
            else:
                hkl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_polefigures__array__hkl)
                self._arrays[array_handle] = hkl
            return hkl
        
        @hkl.setter
        def hkl(self, hkl):
            self.hkl[...] = hkl
        
        @property
        def pfhkl(self):
            """
            Element pfhkl ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1481
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_polefigures__array__pfhkl(self._handle)
            if array_handle in self._arrays:
                pfhkl = self._arrays[array_handle]
            else:
                pfhkl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_polefigures__array__pfhkl)
                self._arrays[array_handle] = pfhkl
            return pfhkl
        
        @pfhkl.setter
        def pfhkl(self, pfhkl):
            self.pfhkl[...] = pfhkl
        
        @property
        def xraysf(self):
            """
            Element xraysf ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 1482
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_polefigures__array__xraysf(self._handle)
            if array_handle in self._arrays:
                xraysf = self._arrays[array_handle]
            else:
                xraysf = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_polefigures__array__xraysf)
                self._arrays[array_handle] = xraysf
            return xraysf
        
        @xraysf.setter
        def xraysf(self, xraysf):
            self.xraysf[...] = xraysf
        
        @property
        def wf(self):
            """
            Element wf ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1483
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_polefigures__array__wf(self._handle)
            if array_handle in self._arrays:
                wf = self._arrays[array_handle]
            else:
                wf = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_polefigures__array__wf)
                self._arrays[array_handle] = wf
            return wf
        
        @wf.setter
        def wf(self, wf):
            self.wf[...] = wf
        
        def __str__(self):
            ret = ['<polefigures>{\n']
            ret.append('    hkl : ')
            ret.append(repr(self.hkl))
            ret.append(',\n    pfhkl : ')
            ret.append(repr(self.pfhkl))
            ret.append(',\n    xraysf : ')
            ret.append(repr(self.xraysf))
            ret.append(',\n    wf : ')
            ret.append(repr(self.wf))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.sparse_ll")
    class sparse_ll(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=sparse_ll)
        
        
        Defined at typedefs.f90 lines 1485-1488
        
        """
        def __init__(self, handle=None):
            """
            self = Sparse_Ll()
            
            
            Defined at typedefs.f90 lines 1485-1488
            
            
            Returns
            -------
            this : Sparse_Ll
            	Object to be constructed
            
            
            Automatically generated constructor for sparse_ll
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_sparse_ll_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Sparse_Ll
            
            
            Defined at typedefs.f90 lines 1485-1488
            
            Parameters
            ----------
            this : Sparse_Ll
            	Object to be destructed
            
            
            Automatically generated destructor for sparse_ll
            """
            if self._alloc:
                _pyEMsoft.f90wrap_sparse_ll_finalise(this=self._handle)
        
        @property
        def idcol(self):
            """
            Element idcol ftype=integer(kind=ill) pytype=int
            
            
            Defined at typedefs.f90 line 1486
            
            """
            return _pyEMsoft.f90wrap_sparse_ll__get__idcol(self._handle)
        
        @idcol.setter
        def idcol(self, idcol):
            _pyEMsoft.f90wrap_sparse_ll__set__idcol(self._handle, idcol)
        
        @property
        def idrow(self):
            """
            Element idrow ftype=integer(kind=ill) pytype=int
            
            
            Defined at typedefs.f90 line 1486
            
            """
            return _pyEMsoft.f90wrap_sparse_ll__get__idrow(self._handle)
        
        @idrow.setter
        def idrow(self, idrow):
            _pyEMsoft.f90wrap_sparse_ll__set__idrow(self._handle, idrow)
        
        @property
        def idlin(self):
            """
            Element idlin ftype=integer(kind=ill) pytype=int
            
            
            Defined at typedefs.f90 line 1486
            
            """
            return _pyEMsoft.f90wrap_sparse_ll__get__idlin(self._handle)
        
        @idlin.setter
        def idlin(self, idlin):
            _pyEMsoft.f90wrap_sparse_ll__set__idlin(self._handle, idlin)
        
        @property
        def idrow_inc(self):
            """
            Element idrow_inc ftype=integer(kind=ill) pytype=int
            
            
            Defined at typedefs.f90 line 1486
            
            """
            return _pyEMsoft.f90wrap_sparse_ll__get__idrow_inc(self._handle)
        
        @idrow_inc.setter
        def idrow_inc(self, idrow_inc):
            _pyEMsoft.f90wrap_sparse_ll__set__idrow_inc(self._handle, idrow_inc)
        
        @property
        def idlin_inc(self):
            """
            Element idlin_inc ftype=integer(kind=ill) pytype=int
            
            
            Defined at typedefs.f90 line 1486
            
            """
            return _pyEMsoft.f90wrap_sparse_ll__get__idlin_inc(self._handle)
        
        @idlin_inc.setter
        def idlin_inc(self, idlin_inc):
            _pyEMsoft.f90wrap_sparse_ll__set__idlin_inc(self._handle, idlin_inc)
        
        @property
        def val(self):
            """
            Element val ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1487
            
            """
            return _pyEMsoft.f90wrap_sparse_ll__get__val(self._handle)
        
        @val.setter
        def val(self, val):
            _pyEMsoft.f90wrap_sparse_ll__set__val(self._handle, val)
        
        @property
        def next(self):
            """
            Element next ftype=type(sparse_ll) pytype=Sparse_Ll
            
            
            Defined at typedefs.f90 line 1488
            
            """
            next_handle = _pyEMsoft.f90wrap_sparse_ll__get__next(self._handle)
            if tuple(next_handle) in self._objs:
                next = self._objs[tuple(next_handle)]
            else:
                next = typedefs.sparse_ll.from_handle(next_handle)
                self._objs[tuple(next_handle)] = next
            return next
        
        @next.setter
        def next(self, next):
            next = next._handle
            _pyEMsoft.f90wrap_sparse_ll__set__next(self._handle, next)
        
        @property
        def next_inc(self):
            """
            Element next_inc ftype=type(sparse_ll) pytype=Sparse_Ll
            
            
            Defined at typedefs.f90 line 1488
            
            """
            next_inc_handle = _pyEMsoft.f90wrap_sparse_ll__get__next_inc(self._handle)
            if tuple(next_inc_handle) in self._objs:
                next_inc = self._objs[tuple(next_inc_handle)]
            else:
                next_inc = typedefs.sparse_ll.from_handle(next_inc_handle)
                self._objs[tuple(next_inc_handle)] = next_inc
            return next_inc
        
        @next_inc.setter
        def next_inc(self, next_inc):
            next_inc = next_inc._handle
            _pyEMsoft.f90wrap_sparse_ll__set__next_inc(self._handle, next_inc)
        
        def __str__(self):
            ret = ['<sparse_ll>{\n']
            ret.append('    idcol : ')
            ret.append(repr(self.idcol))
            ret.append(',\n    idrow : ')
            ret.append(repr(self.idrow))
            ret.append(',\n    idlin : ')
            ret.append(repr(self.idlin))
            ret.append(',\n    idrow_inc : ')
            ret.append(repr(self.idrow_inc))
            ret.append(',\n    idlin_inc : ')
            ret.append(repr(self.idlin_inc))
            ret.append(',\n    val : ')
            ret.append(repr(self.val))
            ret.append(',\n    next : ')
            ret.append(repr(self.next))
            ret.append(',\n    next_inc : ')
            ret.append(repr(self.next_inc))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.FEIstruct")
    class FEIstruct(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=feistruct)
        
        
        Defined at typedefs.f90 lines 1494-1509
        
        """
        def __init__(self, handle=None):
            """
            self = Feistruct()
            
            
            Defined at typedefs.f90 lines 1494-1509
            
            
            Returns
            -------
            this : Feistruct
            	Object to be constructed
            
            
            Automatically generated constructor for feistruct
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_feistruct_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Feistruct
            
            
            Defined at typedefs.f90 lines 1494-1509
            
            Parameters
            ----------
            this : Feistruct
            	Object to be destructed
            
            
            Automatically generated destructor for feistruct
            """
            if self._alloc:
                _pyEMsoft.f90wrap_feistruct_finalise(this=self._handle)
        
        @property
        def a_tilt(self):
            """
            Element a_tilt ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1495
            
            """
            return _pyEMsoft.f90wrap_feistruct__get__a_tilt(self._handle)
        
        @a_tilt.setter
        def a_tilt(self, a_tilt):
            _pyEMsoft.f90wrap_feistruct__set__a_tilt(self._handle, a_tilt)
        
        @property
        def b_tilt(self):
            """
            Element b_tilt ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1496
            
            """
            return _pyEMsoft.f90wrap_feistruct__get__b_tilt(self._handle)
        
        @b_tilt.setter
        def b_tilt(self, b_tilt):
            _pyEMsoft.f90wrap_feistruct__set__b_tilt(self._handle, b_tilt)
        
        @property
        def x_stage(self):
            """
            Element x_stage ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1497
            
            """
            return _pyEMsoft.f90wrap_feistruct__get__x_stage(self._handle)
        
        @x_stage.setter
        def x_stage(self, x_stage):
            _pyEMsoft.f90wrap_feistruct__set__x_stage(self._handle, x_stage)
        
        @property
        def y_stage(self):
            """
            Element y_stage ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1498
            
            """
            return _pyEMsoft.f90wrap_feistruct__get__y_stage(self._handle)
        
        @y_stage.setter
        def y_stage(self, y_stage):
            _pyEMsoft.f90wrap_feistruct__set__y_stage(self._handle, y_stage)
        
        @property
        def z_stage(self):
            """
            Element z_stage ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1499
            
            """
            return _pyEMsoft.f90wrap_feistruct__get__z_stage(self._handle)
        
        @z_stage.setter
        def z_stage(self, z_stage):
            _pyEMsoft.f90wrap_feistruct__set__z_stage(self._handle, z_stage)
        
        @property
        def x_shift(self):
            """
            Element x_shift ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1500
            
            """
            return _pyEMsoft.f90wrap_feistruct__get__x_shift(self._handle)
        
        @x_shift.setter
        def x_shift(self, x_shift):
            _pyEMsoft.f90wrap_feistruct__set__x_shift(self._handle, x_shift)
        
        @property
        def y_shift(self):
            """
            Element y_shift ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1501
            
            """
            return _pyEMsoft.f90wrap_feistruct__get__y_shift(self._handle)
        
        @y_shift.setter
        def y_shift(self, y_shift):
            _pyEMsoft.f90wrap_feistruct__set__y_shift(self._handle, y_shift)
        
        @property
        def defocus(self):
            """
            Element defocus ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1502
            
            """
            return _pyEMsoft.f90wrap_feistruct__get__defocus(self._handle)
        
        @defocus.setter
        def defocus(self, defocus):
            _pyEMsoft.f90wrap_feistruct__set__defocus(self._handle, defocus)
        
        @property
        def exp_time(self):
            """
            Element exp_time ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1503
            
            """
            return _pyEMsoft.f90wrap_feistruct__get__exp_time(self._handle)
        
        @exp_time.setter
        def exp_time(self, exp_time):
            _pyEMsoft.f90wrap_feistruct__set__exp_time(self._handle, exp_time)
        
        @property
        def mean_int(self):
            """
            Element mean_int ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1504
            
            """
            return _pyEMsoft.f90wrap_feistruct__get__mean_int(self._handle)
        
        @mean_int.setter
        def mean_int(self, mean_int):
            _pyEMsoft.f90wrap_feistruct__set__mean_int(self._handle, mean_int)
        
        @property
        def tiltaxis(self):
            """
            Element tiltaxis ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1505
            
            """
            return _pyEMsoft.f90wrap_feistruct__get__tiltaxis(self._handle)
        
        @tiltaxis.setter
        def tiltaxis(self, tiltaxis):
            _pyEMsoft.f90wrap_feistruct__set__tiltaxis(self._handle, tiltaxis)
        
        @property
        def pixelsize(self):
            """
            Element pixelsize ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1506
            
            """
            return _pyEMsoft.f90wrap_feistruct__get__pixelsize(self._handle)
        
        @pixelsize.setter
        def pixelsize(self, pixelsize):
            _pyEMsoft.f90wrap_feistruct__set__pixelsize(self._handle, pixelsize)
        
        @property
        def magnification(self):
            """
            Element magnification ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1507
            
            """
            return _pyEMsoft.f90wrap_feistruct__get__magnification(self._handle)
        
        @magnification.setter
        def magnification(self, magnification):
            _pyEMsoft.f90wrap_feistruct__set__magnification(self._handle, magnification)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1508
            
            """
            return _pyEMsoft.f90wrap_feistruct__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_feistruct__set__voltage(self._handle, voltage)
        
        @property
        def unused(self):
            """
            Element unused ftype=character(72) pytype=str
            
            
            Defined at typedefs.f90 line 1509
            
            """
            return _pyEMsoft.f90wrap_feistruct__get__unused(self._handle)
        
        @unused.setter
        def unused(self, unused):
            _pyEMsoft.f90wrap_feistruct__set__unused(self._handle, unused)
        
        def __str__(self):
            ret = ['<feistruct>{\n']
            ret.append('    a_tilt : ')
            ret.append(repr(self.a_tilt))
            ret.append(',\n    b_tilt : ')
            ret.append(repr(self.b_tilt))
            ret.append(',\n    x_stage : ')
            ret.append(repr(self.x_stage))
            ret.append(',\n    y_stage : ')
            ret.append(repr(self.y_stage))
            ret.append(',\n    z_stage : ')
            ret.append(repr(self.z_stage))
            ret.append(',\n    x_shift : ')
            ret.append(repr(self.x_shift))
            ret.append(',\n    y_shift : ')
            ret.append(repr(self.y_shift))
            ret.append(',\n    defocus : ')
            ret.append(repr(self.defocus))
            ret.append(',\n    exp_time : ')
            ret.append(repr(self.exp_time))
            ret.append(',\n    mean_int : ')
            ret.append(repr(self.mean_int))
            ret.append(',\n    tiltaxis : ')
            ret.append(repr(self.tiltaxis))
            ret.append(',\n    pixelsize : ')
            ret.append(repr(self.pixelsize))
            ret.append(',\n    magnification : ')
            ret.append(repr(self.magnification))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    unused : ')
            ret.append(repr(self.unused))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.MRCstruct")
    class MRCstruct(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=mrcstruct)
        
        
        Defined at typedefs.f90 lines 1511-1558
        
        """
        def __init__(self, handle=None):
            """
            self = Mrcstruct()
            
            
            Defined at typedefs.f90 lines 1511-1558
            
            
            Returns
            -------
            this : Mrcstruct
            	Object to be constructed
            
            
            Automatically generated constructor for mrcstruct
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_mrcstruct_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Mrcstruct
            
            
            Defined at typedefs.f90 lines 1511-1558
            
            Parameters
            ----------
            this : Mrcstruct
            	Object to be destructed
            
            
            Automatically generated destructor for mrcstruct
            """
            if self._alloc:
                _pyEMsoft.f90wrap_mrcstruct_finalise(this=self._handle)
        
        @property
        def nx(self):
            """
            Element nx ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1512
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__nx(self._handle)
        
        @nx.setter
        def nx(self, nx):
            _pyEMsoft.f90wrap_mrcstruct__set__nx(self._handle, nx)
        
        @property
        def ny(self):
            """
            Element ny ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1513
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__ny(self._handle)
        
        @ny.setter
        def ny(self, ny):
            _pyEMsoft.f90wrap_mrcstruct__set__ny(self._handle, ny)
        
        @property
        def nz(self):
            """
            Element nz ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1514
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__nz(self._handle)
        
        @nz.setter
        def nz(self, nz):
            _pyEMsoft.f90wrap_mrcstruct__set__nz(self._handle, nz)
        
        @property
        def mode(self):
            """
            Element mode ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1515
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__mode(self._handle)
        
        @mode.setter
        def mode(self, mode):
            _pyEMsoft.f90wrap_mrcstruct__set__mode(self._handle, mode)
        
        @property
        def nxstart(self):
            """
            Element nxstart ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1516
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__nxstart(self._handle)
        
        @nxstart.setter
        def nxstart(self, nxstart):
            _pyEMsoft.f90wrap_mrcstruct__set__nxstart(self._handle, nxstart)
        
        @property
        def nystart(self):
            """
            Element nystart ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1517
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__nystart(self._handle)
        
        @nystart.setter
        def nystart(self, nystart):
            _pyEMsoft.f90wrap_mrcstruct__set__nystart(self._handle, nystart)
        
        @property
        def nzstart(self):
            """
            Element nzstart ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1518
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__nzstart(self._handle)
        
        @nzstart.setter
        def nzstart(self, nzstart):
            _pyEMsoft.f90wrap_mrcstruct__set__nzstart(self._handle, nzstart)
        
        @property
        def mx(self):
            """
            Element mx ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1519
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__mx(self._handle)
        
        @mx.setter
        def mx(self, mx):
            _pyEMsoft.f90wrap_mrcstruct__set__mx(self._handle, mx)
        
        @property
        def my(self):
            """
            Element my ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1520
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__my(self._handle)
        
        @my.setter
        def my(self, my):
            _pyEMsoft.f90wrap_mrcstruct__set__my(self._handle, my)
        
        @property
        def mz(self):
            """
            Element mz ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1521
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__mz(self._handle)
        
        @mz.setter
        def mz(self, mz):
            _pyEMsoft.f90wrap_mrcstruct__set__mz(self._handle, mz)
        
        @property
        def xlen(self):
            """
            Element xlen ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1522
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__xlen(self._handle)
        
        @xlen.setter
        def xlen(self, xlen):
            _pyEMsoft.f90wrap_mrcstruct__set__xlen(self._handle, xlen)
        
        @property
        def ylen(self):
            """
            Element ylen ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1523
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__ylen(self._handle)
        
        @ylen.setter
        def ylen(self, ylen):
            _pyEMsoft.f90wrap_mrcstruct__set__ylen(self._handle, ylen)
        
        @property
        def zlen(self):
            """
            Element zlen ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1524
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__zlen(self._handle)
        
        @zlen.setter
        def zlen(self, zlen):
            _pyEMsoft.f90wrap_mrcstruct__set__zlen(self._handle, zlen)
        
        @property
        def alpha(self):
            """
            Element alpha ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1525
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__alpha(self._handle)
        
        @alpha.setter
        def alpha(self, alpha):
            _pyEMsoft.f90wrap_mrcstruct__set__alpha(self._handle, alpha)
        
        @property
        def beta(self):
            """
            Element beta ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1526
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__beta(self._handle)
        
        @beta.setter
        def beta(self, beta):
            _pyEMsoft.f90wrap_mrcstruct__set__beta(self._handle, beta)
        
        @property
        def gamma(self):
            """
            Element gamma ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1527
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__gamma(self._handle)
        
        @gamma.setter
        def gamma(self, gamma):
            _pyEMsoft.f90wrap_mrcstruct__set__gamma(self._handle, gamma)
        
        @property
        def mapc(self):
            """
            Element mapc ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1528
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__mapc(self._handle)
        
        @mapc.setter
        def mapc(self, mapc):
            _pyEMsoft.f90wrap_mrcstruct__set__mapc(self._handle, mapc)
        
        @property
        def mapr(self):
            """
            Element mapr ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1529
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__mapr(self._handle)
        
        @mapr.setter
        def mapr(self, mapr):
            _pyEMsoft.f90wrap_mrcstruct__set__mapr(self._handle, mapr)
        
        @property
        def maps(self):
            """
            Element maps ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1530
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__maps(self._handle)
        
        @maps.setter
        def maps(self, maps):
            _pyEMsoft.f90wrap_mrcstruct__set__maps(self._handle, maps)
        
        @property
        def amin(self):
            """
            Element amin ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1531
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__amin(self._handle)
        
        @amin.setter
        def amin(self, amin):
            _pyEMsoft.f90wrap_mrcstruct__set__amin(self._handle, amin)
        
        @property
        def amax(self):
            """
            Element amax ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1532
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__amax(self._handle)
        
        @amax.setter
        def amax(self, amax):
            _pyEMsoft.f90wrap_mrcstruct__set__amax(self._handle, amax)
        
        @property
        def amean(self):
            """
            Element amean ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1533
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__amean(self._handle)
        
        @amean.setter
        def amean(self, amean):
            _pyEMsoft.f90wrap_mrcstruct__set__amean(self._handle, amean)
        
        @property
        def ispg(self):
            """
            Element ispg ftype=integer(kind=ish) pytype=int
            
            
            Defined at typedefs.f90 line 1534
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__ispg(self._handle)
        
        @ispg.setter
        def ispg(self, ispg):
            _pyEMsoft.f90wrap_mrcstruct__set__ispg(self._handle, ispg)
        
        @property
        def nsymbt(self):
            """
            Element nsymbt ftype=integer(kind=ish) pytype=int
            
            
            Defined at typedefs.f90 line 1535
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__nsymbt(self._handle)
        
        @nsymbt.setter
        def nsymbt(self, nsymbt):
            _pyEMsoft.f90wrap_mrcstruct__set__nsymbt(self._handle, nsymbt)
        
        @property
        def next(self):
            """
            Element next ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1536
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__next(self._handle)
        
        @next.setter
        def next(self, next):
            _pyEMsoft.f90wrap_mrcstruct__set__next(self._handle, next)
        
        @property
        def creatid(self):
            """
            Element creatid ftype=integer(kind=ish) pytype=int
            
            
            Defined at typedefs.f90 line 1537
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__creatid(self._handle)
        
        @creatid.setter
        def creatid(self, creatid):
            _pyEMsoft.f90wrap_mrcstruct__set__creatid(self._handle, creatid)
        
        @property
        def extra_data(self):
            """
            Element extra_data ftype=character(30) pytype=str
            
            
            Defined at typedefs.f90 line 1538
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__extra_data(self._handle)
        
        @extra_data.setter
        def extra_data(self, extra_data):
            _pyEMsoft.f90wrap_mrcstruct__set__extra_data(self._handle, extra_data)
        
        @property
        def numint(self):
            """
            Element numint ftype=integer(kind=ish) pytype=int
            
            
            Defined at typedefs.f90 line 1539
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__numint(self._handle)
        
        @numint.setter
        def numint(self, numint):
            _pyEMsoft.f90wrap_mrcstruct__set__numint(self._handle, numint)
        
        @property
        def nreal(self):
            """
            Element nreal ftype=integer(kind=ish) pytype=int
            
            
            Defined at typedefs.f90 line 1540
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__nreal(self._handle)
        
        @nreal.setter
        def nreal(self, nreal):
            _pyEMsoft.f90wrap_mrcstruct__set__nreal(self._handle, nreal)
        
        @property
        def extra_data_2(self):
            """
            Element extra_data_2 ftype=character(20) pytype=str
            
            
            Defined at typedefs.f90 line 1541
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__extra_data_2(self._handle)
        
        @extra_data_2.setter
        def extra_data_2(self, extra_data_2):
            _pyEMsoft.f90wrap_mrcstruct__set__extra_data_2(self._handle, extra_data_2)
        
        @property
        def imodstamp(self):
            """
            Element imodstamp ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1542
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__imodstamp(self._handle)
        
        @imodstamp.setter
        def imodstamp(self, imodstamp):
            _pyEMsoft.f90wrap_mrcstruct__set__imodstamp(self._handle, imodstamp)
        
        @property
        def imodflags(self):
            """
            Element imodflags ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1543
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__imodflags(self._handle)
        
        @imodflags.setter
        def imodflags(self, imodflags):
            _pyEMsoft.f90wrap_mrcstruct__set__imodflags(self._handle, imodflags)
        
        @property
        def idtype(self):
            """
            Element idtype ftype=integer(kind=ish) pytype=int
            
            
            Defined at typedefs.f90 line 1544
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__idtype(self._handle)
        
        @idtype.setter
        def idtype(self, idtype):
            _pyEMsoft.f90wrap_mrcstruct__set__idtype(self._handle, idtype)
        
        @property
        def lens(self):
            """
            Element lens ftype=integer(kind=ish) pytype=int
            
            
            Defined at typedefs.f90 line 1545
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__lens(self._handle)
        
        @lens.setter
        def lens(self, lens):
            _pyEMsoft.f90wrap_mrcstruct__set__lens(self._handle, lens)
        
        @property
        def nd1(self):
            """
            Element nd1 ftype=integer(kind=ish) pytype=int
            
            
            Defined at typedefs.f90 line 1546
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__nd1(self._handle)
        
        @nd1.setter
        def nd1(self, nd1):
            _pyEMsoft.f90wrap_mrcstruct__set__nd1(self._handle, nd1)
        
        @property
        def nd2(self):
            """
            Element nd2 ftype=integer(kind=ish) pytype=int
            
            
            Defined at typedefs.f90 line 1547
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__nd2(self._handle)
        
        @nd2.setter
        def nd2(self, nd2):
            _pyEMsoft.f90wrap_mrcstruct__set__nd2(self._handle, nd2)
        
        @property
        def vd1(self):
            """
            Element vd1 ftype=integer(kind=ish) pytype=int
            
            
            Defined at typedefs.f90 line 1548
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__vd1(self._handle)
        
        @vd1.setter
        def vd1(self, vd1):
            _pyEMsoft.f90wrap_mrcstruct__set__vd1(self._handle, vd1)
        
        @property
        def vd2(self):
            """
            Element vd2 ftype=integer(kind=ish) pytype=int
            
            
            Defined at typedefs.f90 line 1549
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__vd2(self._handle)
        
        @vd2.setter
        def vd2(self, vd2):
            _pyEMsoft.f90wrap_mrcstruct__set__vd2(self._handle, vd2)
        
        @property
        def tiltangles(self):
            """
            Element tiltangles ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1550
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mrcstruct__array__tiltangles(self._handle)
            if array_handle in self._arrays:
                tiltangles = self._arrays[array_handle]
            else:
                tiltangles = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mrcstruct__array__tiltangles)
                self._arrays[array_handle] = tiltangles
            return tiltangles
        
        @tiltangles.setter
        def tiltangles(self, tiltangles):
            self.tiltangles[...] = tiltangles
        
        @property
        def xorg(self):
            """
            Element xorg ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1551
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__xorg(self._handle)
        
        @xorg.setter
        def xorg(self, xorg):
            _pyEMsoft.f90wrap_mrcstruct__set__xorg(self._handle, xorg)
        
        @property
        def yorg(self):
            """
            Element yorg ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1552
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__yorg(self._handle)
        
        @yorg.setter
        def yorg(self, yorg):
            _pyEMsoft.f90wrap_mrcstruct__set__yorg(self._handle, yorg)
        
        @property
        def zorg(self):
            """
            Element zorg ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1553
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__zorg(self._handle)
        
        @zorg.setter
        def zorg(self, zorg):
            _pyEMsoft.f90wrap_mrcstruct__set__zorg(self._handle, zorg)
        
        @property
        def cmap(self):
            """
            Element cmap ftype=character(4) pytype=str
            
            
            Defined at typedefs.f90 line 1554
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__cmap(self._handle)
        
        @cmap.setter
        def cmap(self, cmap):
            _pyEMsoft.f90wrap_mrcstruct__set__cmap(self._handle, cmap)
        
        @property
        def stamp(self):
            """
            Element stamp ftype=character(4) pytype=str
            
            
            Defined at typedefs.f90 line 1555
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__stamp(self._handle)
        
        @stamp.setter
        def stamp(self, stamp):
            _pyEMsoft.f90wrap_mrcstruct__set__stamp(self._handle, stamp)
        
        @property
        def rms(self):
            """
            Element rms ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1556
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__rms(self._handle)
        
        @rms.setter
        def rms(self, rms):
            _pyEMsoft.f90wrap_mrcstruct__set__rms(self._handle, rms)
        
        @property
        def nlabels(self):
            """
            Element nlabels ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1557
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__nlabels(self._handle)
        
        @nlabels.setter
        def nlabels(self, nlabels):
            _pyEMsoft.f90wrap_mrcstruct__set__nlabels(self._handle, nlabels)
        
        @property
        def labels(self):
            """
            Element labels ftype=character(800) pytype=str
            
            
            Defined at typedefs.f90 line 1558
            
            """
            return _pyEMsoft.f90wrap_mrcstruct__get__labels(self._handle)
        
        @labels.setter
        def labels(self, labels):
            _pyEMsoft.f90wrap_mrcstruct__set__labels(self._handle, labels)
        
        def __str__(self):
            ret = ['<mrcstruct>{\n']
            ret.append('    nx : ')
            ret.append(repr(self.nx))
            ret.append(',\n    ny : ')
            ret.append(repr(self.ny))
            ret.append(',\n    nz : ')
            ret.append(repr(self.nz))
            ret.append(',\n    mode : ')
            ret.append(repr(self.mode))
            ret.append(',\n    nxstart : ')
            ret.append(repr(self.nxstart))
            ret.append(',\n    nystart : ')
            ret.append(repr(self.nystart))
            ret.append(',\n    nzstart : ')
            ret.append(repr(self.nzstart))
            ret.append(',\n    mx : ')
            ret.append(repr(self.mx))
            ret.append(',\n    my : ')
            ret.append(repr(self.my))
            ret.append(',\n    mz : ')
            ret.append(repr(self.mz))
            ret.append(',\n    xlen : ')
            ret.append(repr(self.xlen))
            ret.append(',\n    ylen : ')
            ret.append(repr(self.ylen))
            ret.append(',\n    zlen : ')
            ret.append(repr(self.zlen))
            ret.append(',\n    alpha : ')
            ret.append(repr(self.alpha))
            ret.append(',\n    beta : ')
            ret.append(repr(self.beta))
            ret.append(',\n    gamma : ')
            ret.append(repr(self.gamma))
            ret.append(',\n    mapc : ')
            ret.append(repr(self.mapc))
            ret.append(',\n    mapr : ')
            ret.append(repr(self.mapr))
            ret.append(',\n    maps : ')
            ret.append(repr(self.maps))
            ret.append(',\n    amin : ')
            ret.append(repr(self.amin))
            ret.append(',\n    amax : ')
            ret.append(repr(self.amax))
            ret.append(',\n    amean : ')
            ret.append(repr(self.amean))
            ret.append(',\n    ispg : ')
            ret.append(repr(self.ispg))
            ret.append(',\n    nsymbt : ')
            ret.append(repr(self.nsymbt))
            ret.append(',\n    next : ')
            ret.append(repr(self.next))
            ret.append(',\n    creatid : ')
            ret.append(repr(self.creatid))
            ret.append(',\n    extra_data : ')
            ret.append(repr(self.extra_data))
            ret.append(',\n    numint : ')
            ret.append(repr(self.numint))
            ret.append(',\n    nreal : ')
            ret.append(repr(self.nreal))
            ret.append(',\n    extra_data_2 : ')
            ret.append(repr(self.extra_data_2))
            ret.append(',\n    imodstamp : ')
            ret.append(repr(self.imodstamp))
            ret.append(',\n    imodflags : ')
            ret.append(repr(self.imodflags))
            ret.append(',\n    idtype : ')
            ret.append(repr(self.idtype))
            ret.append(',\n    lens : ')
            ret.append(repr(self.lens))
            ret.append(',\n    nd1 : ')
            ret.append(repr(self.nd1))
            ret.append(',\n    nd2 : ')
            ret.append(repr(self.nd2))
            ret.append(',\n    vd1 : ')
            ret.append(repr(self.vd1))
            ret.append(',\n    vd2 : ')
            ret.append(repr(self.vd2))
            ret.append(',\n    tiltangles : ')
            ret.append(repr(self.tiltangles))
            ret.append(',\n    xorg : ')
            ret.append(repr(self.xorg))
            ret.append(',\n    yorg : ')
            ret.append(repr(self.yorg))
            ret.append(',\n    zorg : ')
            ret.append(repr(self.zorg))
            ret.append(',\n    cmap : ')
            ret.append(repr(self.cmap))
            ret.append(',\n    stamp : ')
            ret.append(repr(self.stamp))
            ret.append(',\n    rms : ')
            ret.append(repr(self.rms))
            ret.append(',\n    nlabels : ')
            ret.append(repr(self.nlabels))
            ret.append(',\n    labels : ')
            ret.append(repr(self.labels))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.sggamma")
    class sggamma(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=sggamma)
        
        
        Defined at typedefs.f90 lines 1560-1564
        
        """
        def __init__(self, handle=None):
            """
            self = Sggamma()
            
            
            Defined at typedefs.f90 lines 1560-1564
            
            
            Returns
            -------
            this : Sggamma
            	Object to be constructed
            
            
            Automatically generated constructor for sggamma
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_sggamma_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Sggamma
            
            
            Defined at typedefs.f90 lines 1560-1564
            
            Parameters
            ----------
            this : Sggamma
            	Object to be destructed
            
            
            Automatically generated destructor for sggamma
            """
            if self._alloc:
                _pyEMsoft.f90wrap_sggamma_finalise(this=self._handle)
        
        @property
        def sg(self):
            """
            Element sg ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1561
            
            """
            return _pyEMsoft.f90wrap_sggamma__get__sg(self._handle)
        
        @sg.setter
        def sg(self, sg):
            _pyEMsoft.f90wrap_sggamma__set__sg(self._handle, sg)
        
        @property
        def hkl(self):
            """
            Element hkl ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1562
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_sggamma__array__hkl(self._handle)
            if array_handle in self._arrays:
                hkl = self._arrays[array_handle]
            else:
                hkl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_sggamma__array__hkl)
                self._arrays[array_handle] = hkl
            return hkl
        
        @hkl.setter
        def hkl(self, hkl):
            self.hkl[...] = hkl
        
        @property
        def expsg(self):
            """
            Element expsg ftype=complex(kind=dbl) pytype=complex
            
            
            Defined at typedefs.f90 line 1563
            
            """
            return _pyEMsoft.f90wrap_sggamma__get__expsg(self._handle)
        
        @expsg.setter
        def expsg(self, expsg):
            _pyEMsoft.f90wrap_sggamma__set__expsg(self._handle, expsg)
        
        @property
        def next(self):
            """
            Element next ftype=type(sggamma) pytype=Sggamma
            
            
            Defined at typedefs.f90 line 1564
            
            """
            next_handle = _pyEMsoft.f90wrap_sggamma__get__next(self._handle)
            if tuple(next_handle) in self._objs:
                next = self._objs[tuple(next_handle)]
            else:
                next = typedefs.sggamma.from_handle(next_handle)
                self._objs[tuple(next_handle)] = next
            return next
        
        @next.setter
        def next(self, next):
            next = next._handle
            _pyEMsoft.f90wrap_sggamma__set__next(self._handle, next)
        
        def __str__(self):
            ret = ['<sggamma>{\n']
            ret.append('    sg : ')
            ret.append(repr(self.sg))
            ret.append(',\n    hkl : ')
            ret.append(repr(self.hkl))
            ret.append(',\n    expsg : ')
            ret.append(repr(self.expsg))
            ret.append(',\n    next : ')
            ret.append(repr(self.next))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.LTEMstruct")
    class LTEMstruct(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ltemstruct)
        
        
        Defined at typedefs.f90 lines 1569-1582
        
        """
        def __init__(self, handle=None):
            """
            self = Ltemstruct()
            
            
            Defined at typedefs.f90 lines 1569-1582
            
            
            Returns
            -------
            this : Ltemstruct
            	Object to be constructed
            
            
            Automatically generated constructor for ltemstruct
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ltemstruct_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ltemstruct
            
            
            Defined at typedefs.f90 lines 1569-1582
            
            Parameters
            ----------
            this : Ltemstruct
            	Object to be destructed
            
            
            Automatically generated destructor for ltemstruct
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ltemstruct_finalise(this=self._handle)
        
        @property
        def kx(self):
            """
            Element kx ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1570
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ltemstruct__array__kx(self._handle)
            if array_handle in self._arrays:
                kx = self._arrays[array_handle]
            else:
                kx = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ltemstruct__array__kx)
                self._arrays[array_handle] = kx
            return kx
        
        @kx.setter
        def kx(self, kx):
            self.kx[...] = kx
        
        @property
        def ky(self):
            """
            Element ky ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1571
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ltemstruct__array__ky(self._handle)
            if array_handle in self._arrays:
                ky = self._arrays[array_handle]
            else:
                ky = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ltemstruct__array__ky)
                self._arrays[array_handle] = ky
            return ky
        
        @ky.setter
        def ky(self, ky):
            self.ky[...] = ky
        
        @property
        def kz(self):
            """
            Element kz ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1572
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ltemstruct__array__kz(self._handle)
            if array_handle in self._arrays:
                kz = self._arrays[array_handle]
            else:
                kz = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ltemstruct__array__kz)
                self._arrays[array_handle] = kz
            return kz
        
        @kz.setter
        def kz(self, kz):
            self.kz[...] = kz
        
        @property
        def mx(self):
            """
            Element mx ftype=real(c_double) pytype=float
            
            
            Defined at typedefs.f90 line 1573
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ltemstruct__array__mx(self._handle)
            if array_handle in self._arrays:
                mx = self._arrays[array_handle]
            else:
                mx = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ltemstruct__array__mx)
                self._arrays[array_handle] = mx
            return mx
        
        @mx.setter
        def mx(self, mx):
            self.mx[...] = mx
        
        @property
        def my(self):
            """
            Element my ftype=real(c_double) pytype=float
            
            
            Defined at typedefs.f90 line 1574
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ltemstruct__array__my(self._handle)
            if array_handle in self._arrays:
                my = self._arrays[array_handle]
            else:
                my = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ltemstruct__array__my)
                self._arrays[array_handle] = my
            return my
        
        @my.setter
        def my(self, my):
            self.my[...] = my
        
        @property
        def mz(self):
            """
            Element mz ftype=real(c_double) pytype=float
            
            
            Defined at typedefs.f90 line 1575
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ltemstruct__array__mz(self._handle)
            if array_handle in self._arrays:
                mz = self._arrays[array_handle]
            else:
                mz = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ltemstruct__array__mz)
                self._arrays[array_handle] = mz
            return mz
        
        @mz.setter
        def mz(self, mz):
            self.mz[...] = mz
        
        @property
        def bx(self):
            """
            Element bx ftype=real(c_double) pytype=float
            
            
            Defined at typedefs.f90 line 1576
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ltemstruct__array__bx(self._handle)
            if array_handle in self._arrays:
                bx = self._arrays[array_handle]
            else:
                bx = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ltemstruct__array__bx)
                self._arrays[array_handle] = bx
            return bx
        
        @bx.setter
        def bx(self, bx):
            self.bx[...] = bx
        
        @property
        def by(self):
            """
            Element by ftype=real(c_double) pytype=float
            
            
            Defined at typedefs.f90 line 1577
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ltemstruct__array__by(self._handle)
            if array_handle in self._arrays:
                by = self._arrays[array_handle]
            else:
                by = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ltemstruct__array__by)
                self._arrays[array_handle] = by
            return by
        
        @by.setter
        def by(self, by):
            self.by[...] = by
        
        @property
        def bz(self):
            """
            Element bz ftype=real(c_double) pytype=float
            
            
            Defined at typedefs.f90 line 1578
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ltemstruct__array__bz(self._handle)
            if array_handle in self._arrays:
                bz = self._arrays[array_handle]
            else:
                bz = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ltemstruct__array__bz)
                self._arrays[array_handle] = bz
            return bz
        
        @bz.setter
        def bz(self, bz):
            self.bz[...] = bz
        
        @property
        def ax(self):
            """
            Element ax ftype=real(c_double) pytype=float
            
            
            Defined at typedefs.f90 line 1579
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ltemstruct__array__ax(self._handle)
            if array_handle in self._arrays:
                ax = self._arrays[array_handle]
            else:
                ax = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ltemstruct__array__ax)
                self._arrays[array_handle] = ax
            return ax
        
        @ax.setter
        def ax(self, ax):
            self.ax[...] = ax
        
        @property
        def ay(self):
            """
            Element ay ftype=real(c_double) pytype=float
            
            
            Defined at typedefs.f90 line 1580
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ltemstruct__array__ay(self._handle)
            if array_handle in self._arrays:
                ay = self._arrays[array_handle]
            else:
                ay = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ltemstruct__array__ay)
                self._arrays[array_handle] = ay
            return ay
        
        @ay.setter
        def ay(self, ay):
            self.ay[...] = ay
        
        @property
        def az(self):
            """
            Element az ftype=real(c_double) pytype=float
            
            
            Defined at typedefs.f90 line 1581
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ltemstruct__array__az(self._handle)
            if array_handle in self._arrays:
                az = self._arrays[array_handle]
            else:
                az = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ltemstruct__array__az)
                self._arrays[array_handle] = az
            return az
        
        @az.setter
        def az(self, az):
            self.az[...] = az
        
        @property
        def kmag(self):
            """
            Element kmag ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1582
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ltemstruct__array__kmag(self._handle)
            if array_handle in self._arrays:
                kmag = self._arrays[array_handle]
            else:
                kmag = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ltemstruct__array__kmag)
                self._arrays[array_handle] = kmag
            return kmag
        
        @kmag.setter
        def kmag(self, kmag):
            self.kmag[...] = kmag
        
        def __str__(self):
            ret = ['<ltemstruct>{\n']
            ret.append('    kx : ')
            ret.append(repr(self.kx))
            ret.append(',\n    ky : ')
            ret.append(repr(self.ky))
            ret.append(',\n    kz : ')
            ret.append(repr(self.kz))
            ret.append(',\n    mx : ')
            ret.append(repr(self.mx))
            ret.append(',\n    my : ')
            ret.append(repr(self.my))
            ret.append(',\n    mz : ')
            ret.append(repr(self.mz))
            ret.append(',\n    bx : ')
            ret.append(repr(self.bx))
            ret.append(',\n    by : ')
            ret.append(repr(self.by))
            ret.append(',\n    bz : ')
            ret.append(repr(self.bz))
            ret.append(',\n    ax : ')
            ret.append(repr(self.ax))
            ret.append(',\n    ay : ')
            ret.append(repr(self.ay))
            ret.append(',\n    az : ')
            ret.append(repr(self.az))
            ret.append(',\n    kmag : ')
            ret.append(repr(self.kmag))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.AngleType")
    class AngleType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=angletype)
        
        
        Defined at typedefs.f90 lines 1624-1625
        
        """
        def __init__(self, handle=None):
            """
            self = Angletype()
            
            
            Defined at typedefs.f90 lines 1624-1625
            
            
            Returns
            -------
            this : Angletype
            	Object to be constructed
            
            
            Automatically generated constructor for angletype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_angletype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Angletype
            
            
            Defined at typedefs.f90 lines 1624-1625
            
            Parameters
            ----------
            this : Angletype
            	Object to be destructed
            
            
            Automatically generated destructor for angletype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_angletype_finalise(this=self._handle)
        
        @property
        def quatang(self):
            """
            Element quatang ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1625
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_angletype__array__quatang(self._handle)
            if array_handle in self._arrays:
                quatang = self._arrays[array_handle]
            else:
                quatang = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_angletype__array__quatang)
                self._arrays[array_handle] = quatang
            return quatang
        
        @quatang.setter
        def quatang(self, quatang):
            self.quatang[...] = quatang
        
        def __str__(self):
            ret = ['<angletype>{\n']
            ret.append('    quatang : ')
            ret.append(repr(self.quatang))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.MAPN_block")
    class MAPN_block(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=mapn_block)
        
        
        Defined at typedefs.f90 lines 1635-1637
        
        """
        def __init__(self, handle=None):
            """
            self = Mapn_Block()
            
            
            Defined at typedefs.f90 lines 1635-1637
            
            
            Returns
            -------
            this : Mapn_Block
            	Object to be constructed
            
            
            Automatically generated constructor for mapn_block
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_mapn_block_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Mapn_Block
            
            
            Defined at typedefs.f90 lines 1635-1637
            
            Parameters
            ----------
            this : Mapn_Block
            	Object to be destructed
            
            
            Automatically generated destructor for mapn_block
            """
            if self._alloc:
                _pyEMsoft.f90wrap_mapn_block_finalise(this=self._handle)
        
        @property
        def krash(self):
            """
            Element krash ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1636
            
            """
            return _pyEMsoft.f90wrap_mapn_block__get__krash(self._handle)
        
        @krash.setter
        def krash(self, krash):
            _pyEMsoft.f90wrap_mapn_block__set__krash(self._handle, krash)
        
        @property
        def new_bn(self):
            """
            Element new_bn ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1636
            
            """
            return _pyEMsoft.f90wrap_mapn_block__get__new_bn(self._handle)
        
        @new_bn.setter
        def new_bn(self, new_bn):
            _pyEMsoft.f90wrap_mapn_block__set__new_bn(self._handle, new_bn)
        
        @property
        def zr(self):
            """
            Element zr ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1637
            
            """
            return _pyEMsoft.f90wrap_mapn_block__get__zr(self._handle)
        
        @zr.setter
        def zr(self, zr):
            _pyEMsoft.f90wrap_mapn_block__set__zr(self._handle, zr)
        
        @property
        def zi(self):
            """
            Element zi ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1637
            
            """
            return _pyEMsoft.f90wrap_mapn_block__get__zi(self._handle)
        
        @zi.setter
        def zi(self, zi):
            _pyEMsoft.f90wrap_mapn_block__set__zi(self._handle, zi)
        
        @property
        def qr(self):
            """
            Element qr ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1637
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mapn_block__array__qr(self._handle)
            if array_handle in self._arrays:
                qr = self._arrays[array_handle]
            else:
                qr = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mapn_block__array__qr)
                self._arrays[array_handle] = qr
            return qr
        
        @qr.setter
        def qr(self, qr):
            self.qr[...] = qr
        
        @property
        def qi(self):
            """
            Element qi ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1637
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mapn_block__array__qi(self._handle)
            if array_handle in self._arrays:
                qi = self._arrays[array_handle]
            else:
                qi = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mapn_block__array__qi)
                self._arrays[array_handle] = qi
            return qi
        
        @qi.setter
        def qi(self, qi):
            self.qi[...] = qi
        
        def __str__(self):
            ret = ['<mapn_block>{\n']
            ret.append('    krash : ')
            ret.append(repr(self.krash))
            ret.append(',\n    new_bn : ')
            ret.append(repr(self.new_bn))
            ret.append(',\n    zr : ')
            ret.append(repr(self.zr))
            ret.append(',\n    zi : ')
            ret.append(repr(self.zi))
            ret.append(',\n    qr : ')
            ret.append(repr(self.qr))
            ret.append(',\n    qi : ')
            ret.append(repr(self.qi))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.MA_block")
    class MA_block(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ma_block)
        
        
        Defined at typedefs.f90 lines 1640-1641
        
        """
        def __init__(self, handle=None):
            """
            self = Ma_Block()
            
            
            Defined at typedefs.f90 lines 1640-1641
            
            
            Returns
            -------
            this : Ma_Block
            	Object to be constructed
            
            
            Automatically generated constructor for ma_block
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ma_block_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ma_Block
            
            
            Defined at typedefs.f90 lines 1640-1641
            
            Parameters
            ----------
            this : Ma_Block
            	Object to be destructed
            
            
            Automatically generated destructor for ma_block
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ma_block_finalise(this=self._handle)
        
        @property
        def pr(self):
            """
            Element pr ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1641
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ma_block__array__pr(self._handle)
            if array_handle in self._arrays:
                pr = self._arrays[array_handle]
            else:
                pr = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ma_block__array__pr)
                self._arrays[array_handle] = pr
            return pr
        
        @pr.setter
        def pr(self, pr):
            self.pr[...] = pr
        
        @property
        def pi(self):
            """
            Element pi ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1641
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ma_block__array__pi(self._handle)
            if array_handle in self._arrays:
                pi = self._arrays[array_handle]
            else:
                pi = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ma_block__array__pi)
                self._arrays[array_handle] = pi
            return pi
        
        @pi.setter
        def pi(self, pi):
            self.pi[...] = pi
        
        @property
        def ar(self):
            """
            Element ar ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1641
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ma_block__array__ar(self._handle)
            if array_handle in self._arrays:
                ar = self._arrays[array_handle]
            else:
                ar = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ma_block__array__ar)
                self._arrays[array_handle] = ar
            return ar
        
        @ar.setter
        def ar(self, ar):
            self.ar[...] = ar
        
        @property
        def ai(self):
            """
            Element ai ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1641
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ma_block__array__ai(self._handle)
            if array_handle in self._arrays:
                ai = self._arrays[array_handle]
            else:
                ai = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ma_block__array__ai)
                self._arrays[array_handle] = ai
            return ai
        
        @ai.setter
        def ai(self, ai):
            self.ai[...] = ai
        
        @property
        def emr(self):
            """
            Element emr ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1641
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ma_block__array__emr(self._handle)
            if array_handle in self._arrays:
                emr = self._arrays[array_handle]
            else:
                emr = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ma_block__array__emr)
                self._arrays[array_handle] = emr
            return emr
        
        @emr.setter
        def emr(self, emr):
            self.emr[...] = emr
        
        @property
        def emi(self):
            """
            Element emi ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1641
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ma_block__array__emi(self._handle)
            if array_handle in self._arrays:
                emi = self._arrays[array_handle]
            else:
                emi = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ma_block__array__emi)
                self._arrays[array_handle] = emi
            return emi
        
        @emi.setter
        def emi(self, emi):
            self.emi[...] = emi
        
        @property
        def h(self):
            """
            Element h ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1641
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ma_block__array__h(self._handle)
            if array_handle in self._arrays:
                h = self._arrays[array_handle]
            else:
                h = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ma_block__array__h)
                self._arrays[array_handle] = h
            return h
        
        @h.setter
        def h(self, h):
            self.h[...] = h
        
        def __str__(self):
            ret = ['<ma_block>{\n']
            ret.append('    pr : ')
            ret.append(repr(self.pr))
            ret.append(',\n    pi : ')
            ret.append(repr(self.pi))
            ret.append(',\n    ar : ')
            ret.append(repr(self.ar))
            ret.append(',\n    ai : ')
            ret.append(repr(self.ai))
            ret.append(',\n    emr : ')
            ret.append(repr(self.emr))
            ret.append(',\n    emi : ')
            ret.append(repr(self.emi))
            ret.append(',\n    h : ')
            ret.append(repr(self.h))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.MKAP_block")
    class MKAP_block(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=mkap_block)
        
        
        Defined at typedefs.f90 lines 1644-1645
        
        """
        def __init__(self, handle=None):
            """
            self = Mkap_Block()
            
            
            Defined at typedefs.f90 lines 1644-1645
            
            
            Returns
            -------
            this : Mkap_Block
            	Object to be constructed
            
            
            Automatically generated constructor for mkap_block
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_mkap_block_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Mkap_Block
            
            
            Defined at typedefs.f90 lines 1644-1645
            
            Parameters
            ----------
            this : Mkap_Block
            	Object to be destructed
            
            
            Automatically generated destructor for mkap_block
            """
            if self._alloc:
                _pyEMsoft.f90wrap_mkap_block_finalise(this=self._handle)
        
        @property
        def d1(self):
            """
            Element d1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1645
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mkap_block__array__d1(self._handle)
            if array_handle in self._arrays:
                d1 = self._arrays[array_handle]
            else:
                d1 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mkap_block__array__d1)
                self._arrays[array_handle] = d1
            return d1
        
        @d1.setter
        def d1(self, d1):
            self.d1[...] = d1
        
        @property
        def ep(self):
            """
            Element ep ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1645
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mkap_block__array__ep(self._handle)
            if array_handle in self._arrays:
                ep = self._arrays[array_handle]
            else:
                ep = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mkap_block__array__ep)
                self._arrays[array_handle] = ep
            return ep
        
        @ep.setter
        def ep(self, ep):
            self.ep[...] = ep
        
        @property
        def ea(self):
            """
            Element ea ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1645
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mkap_block__array__ea(self._handle)
            if array_handle in self._arrays:
                ea = self._arrays[array_handle]
            else:
                ea = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mkap_block__array__ea)
                self._arrays[array_handle] = ea
            return ea
        
        @ea.setter
        def ea(self, ea):
            self.ea[...] = ea
        
        def __str__(self):
            ret = ['<mkap_block>{\n']
            ret.append('    d1 : ')
            ret.append(repr(self.d1))
            ret.append(',\n    ep : ')
            ret.append(repr(self.ep))
            ret.append(',\n    ea : ')
            ret.append(repr(self.ea))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.MRD_block")
    class MRD_block(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=mrd_block)
        
        
        Defined at typedefs.f90 lines 1648-1650
        
        """
        def __init__(self, handle=None):
            """
            self = Mrd_Block()
            
            
            Defined at typedefs.f90 lines 1648-1650
            
            
            Returns
            -------
            this : Mrd_Block
            	Object to be constructed
            
            
            Automatically generated constructor for mrd_block
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_mrd_block_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Mrd_Block
            
            
            Defined at typedefs.f90 lines 1648-1650
            
            Parameters
            ----------
            this : Mrd_Block
            	Object to be destructed
            
            
            Automatically generated destructor for mrd_block
            """
            if self._alloc:
                _pyEMsoft.f90wrap_mrd_block_finalise(this=self._handle)
        
        @property
        def cn(self):
            """
            Element cn ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1649
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mrd_block__array__cn(self._handle)
            if array_handle in self._arrays:
                cn = self._arrays[array_handle]
            else:
                cn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mrd_block__array__cn)
                self._arrays[array_handle] = cn
            return cn
        
        @cn.setter
        def cn(self, cn):
            self.cn[...] = cn
        
        @property
        def x(self):
            """
            Element x ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1649
            
            """
            return _pyEMsoft.f90wrap_mrd_block__get__x(self._handle)
        
        @x.setter
        def x(self, x):
            _pyEMsoft.f90wrap_mrd_block__set__x(self._handle, x)
        
        @property
        def x1(self):
            """
            Element x1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1649
            
            """
            return _pyEMsoft.f90wrap_mrd_block__get__x1(self._handle)
        
        @x1.setter
        def x1(self, x1):
            _pyEMsoft.f90wrap_mrd_block__set__x1(self._handle, x1)
        
        @property
        def y(self):
            """
            Element y ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1649
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mrd_block__array__y(self._handle)
            if array_handle in self._arrays:
                y = self._arrays[array_handle]
            else:
                y = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mrd_block__array__y)
                self._arrays[array_handle] = y
            return y
        
        @y.setter
        def y(self, y):
            self.y[...] = y
        
        @property
        def error(self):
            """
            Element error ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1649
            
            """
            return _pyEMsoft.f90wrap_mrd_block__get__error(self._handle)
        
        @error.setter
        def error(self, error):
            _pyEMsoft.f90wrap_mrd_block__set__error(self._handle, error)
        
        @property
        def q(self):
            """
            Element q ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1649
            
            """
            return _pyEMsoft.f90wrap_mrd_block__get__q(self._handle)
        
        @q.setter
        def q(self, q):
            _pyEMsoft.f90wrap_mrd_block__set__q(self._handle, q)
        
        @property
        def d(self):
            """
            Element d ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1649
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mrd_block__array__d(self._handle)
            if array_handle in self._arrays:
                d = self._arrays[array_handle]
            else:
                d = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mrd_block__array__d)
                self._arrays[array_handle] = d
            return d
        
        @d.setter
        def d(self, d):
            self.d[...] = d
        
        @property
        def yt(self):
            """
            Element yt ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1649
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mrd_block__array__yt(self._handle)
            if array_handle in self._arrays:
                yt = self._arrays[array_handle]
            else:
                yt = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mrd_block__array__yt)
                self._arrays[array_handle] = yt
            return yt
        
        @yt.setter
        def yt(self, yt):
            self.yt[...] = yt
        
        @property
        def dt(self):
            """
            Element dt ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1649
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mrd_block__array__dt(self._handle)
            if array_handle in self._arrays:
                dt = self._arrays[array_handle]
            else:
                dt = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mrd_block__array__dt)
                self._arrays[array_handle] = dt
            return dt
        
        @dt.setter
        def dt(self, dt):
            self.dt[...] = dt
        
        @property
        def ano(self):
            """
            Element ano ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1649
            
            """
            return _pyEMsoft.f90wrap_mrd_block__get__ano(self._handle)
        
        @ano.setter
        def ano(self, ano):
            _pyEMsoft.f90wrap_mrd_block__set__ano(self._handle, ano)
        
        @property
        def skip(self):
            """
            Element skip ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1649
            
            """
            return _pyEMsoft.f90wrap_mrd_block__get__skip(self._handle)
        
        @skip.setter
        def skip(self, skip):
            _pyEMsoft.f90wrap_mrd_block__set__skip(self._handle, skip)
        
        @property
        def kount(self):
            """
            Element kount ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1650
            
            """
            return _pyEMsoft.f90wrap_mrd_block__get__kount(self._handle)
        
        @kount.setter
        def kount(self, kount):
            _pyEMsoft.f90wrap_mrd_block__set__kount(self._handle, kount)
        
        def __str__(self):
            ret = ['<mrd_block>{\n']
            ret.append('    cn : ')
            ret.append(repr(self.cn))
            ret.append(',\n    x : ')
            ret.append(repr(self.x))
            ret.append(',\n    x1 : ')
            ret.append(repr(self.x1))
            ret.append(',\n    y : ')
            ret.append(repr(self.y))
            ret.append(',\n    error : ')
            ret.append(repr(self.error))
            ret.append(',\n    q : ')
            ret.append(repr(self.q))
            ret.append(',\n    d : ')
            ret.append(repr(self.d))
            ret.append(',\n    yt : ')
            ret.append(repr(self.yt))
            ret.append(',\n    dt : ')
            ret.append(repr(self.dt))
            ret.append(',\n    ano : ')
            ret.append(repr(self.ano))
            ret.append(',\n    skip : ')
            ret.append(repr(self.skip))
            ret.append(',\n    kount : ')
            ret.append(repr(self.kount))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.MT_block")
    class MT_block(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=mt_block)
        
        
        Defined at typedefs.f90 lines 1657-1662
        
        """
        def __init__(self, handle=None):
            """
            self = Mt_Block()
            
            
            Defined at typedefs.f90 lines 1657-1662
            
            
            Returns
            -------
            this : Mt_Block
            	Object to be constructed
            
            
            Automatically generated constructor for mt_block
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_mt_block_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Mt_Block
            
            
            Defined at typedefs.f90 lines 1657-1662
            
            Parameters
            ----------
            this : Mt_Block
            	Object to be destructed
            
            
            Automatically generated destructor for mt_block
            """
            if self._alloc:
                _pyEMsoft.f90wrap_mt_block_finalise(this=self._handle)
        
        @property
        def tlu(self):
            """
            Element tlu ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tlu(self._handle)
            if array_handle in self._arrays:
                tlu = self._arrays[array_handle]
            else:
                tlu = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tlu)
                self._arrays[array_handle] = tlu
            return tlu
        
        @tlu.setter
        def tlu(self, tlu):
            self.tlu[...] = tlu
        
        @property
        def tlg(self):
            """
            Element tlg ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tlg(self._handle)
            if array_handle in self._arrays:
                tlg = self._arrays[array_handle]
            else:
                tlg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tlg)
                self._arrays[array_handle] = tlg
            return tlg
        
        @tlg.setter
        def tlg(self, tlg):
            self.tlg[...] = tlg
        
        @property
        def tlbm(self):
            """
            Element tlbm ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tlbm(self._handle)
            if array_handle in self._arrays:
                tlbm = self._arrays[array_handle]
            else:
                tlbm = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tlbm)
                self._arrays[array_handle] = tlbm
            return tlbm
        
        @tlbm.setter
        def tlbm(self, tlbm):
            self.tlbm[...] = tlbm
        
        @property
        def tlfn(self):
            """
            Element tlfn ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tlfn(self._handle)
            if array_handle in self._arrays:
                tlfn = self._arrays[array_handle]
            else:
                tlfn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tlfn)
                self._arrays[array_handle] = tlfn
            return tlfn
        
        @tlfn.setter
        def tlfn(self, tlfn):
            self.tlfn[...] = tlfn
        
        @property
        def tlb(self):
            """
            Element tlb ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tlb(self._handle)
            if array_handle in self._arrays:
                tlb = self._arrays[array_handle]
            else:
                tlb = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tlb)
                self._arrays[array_handle] = tlb
            return tlb
        
        @tlb.setter
        def tlb(self, tlb):
            self.tlb[...] = tlb
        
        @property
        def tlb2(self):
            """
            Element tlb2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tlb2(self._handle)
            if array_handle in self._arrays:
                tlb2 = self._arrays[array_handle]
            else:
                tlb2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tlb2)
                self._arrays[array_handle] = tlb2
            return tlb2
        
        @tlb2.setter
        def tlb2(self, tlb2):
            self.tlb2[...] = tlb2
        
        @property
        def tlb3(self):
            """
            Element tlb3 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tlb3(self._handle)
            if array_handle in self._arrays:
                tlb3 = self._arrays[array_handle]
            else:
                tlb3 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tlb3)
                self._arrays[array_handle] = tlb3
            return tlb3
        
        @tlb3.setter
        def tlb3(self, tlb3):
            self.tlb3[...] = tlb3
        
        @property
        def tlb4(self):
            """
            Element tlb4 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tlb4(self._handle)
            if array_handle in self._arrays:
                tlb4 = self._arrays[array_handle]
            else:
                tlb4 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tlb4)
                self._arrays[array_handle] = tlb4
            return tlb4
        
        @tlb4.setter
        def tlb4(self, tlb4):
            self.tlb4[...] = tlb4
        
        @property
        def tlfp(self):
            """
            Element tlfp ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tlfp(self._handle)
            if array_handle in self._arrays:
                tlfp = self._arrays[array_handle]
            else:
                tlfp = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tlfp)
                self._arrays[array_handle] = tlfp
            return tlfp
        
        @tlfp.setter
        def tlfp(self, tlfp):
            self.tlfp[...] = tlfp
        
        @property
        def tlfp1(self):
            """
            Element tlfp1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tlfp1(self._handle)
            if array_handle in self._arrays:
                tlfp1 = self._arrays[array_handle]
            else:
                tlfp1 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tlfp1)
                self._arrays[array_handle] = tlfp1
            return tlfp1
        
        @tlfp1.setter
        def tlfp1(self, tlfp1):
            self.tlfp1[...] = tlfp1
        
        @property
        def tlfp3(self):
            """
            Element tlfp3 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tlfp3(self._handle)
            if array_handle in self._arrays:
                tlfp3 = self._arrays[array_handle]
            else:
                tlfp3 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tlfp3)
                self._arrays[array_handle] = tlfp3
            return tlfp3
        
        @tlfp3.setter
        def tlfp3(self, tlfp3):
            self.tlfp3[...] = tlfp3
        
        @property
        def tls1(self):
            """
            Element tls1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tls1(self._handle)
            if array_handle in self._arrays:
                tls1 = self._arrays[array_handle]
            else:
                tls1 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tls1)
                self._arrays[array_handle] = tls1
            return tls1
        
        @tls1.setter
        def tls1(self, tls1):
            self.tls1[...] = tls1
        
        @property
        def tls2(self):
            """
            Element tls2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tls2(self._handle)
            if array_handle in self._arrays:
                tls2 = self._arrays[array_handle]
            else:
                tls2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tls2)
                self._arrays[array_handle] = tls2
            return tls2
        
        @tls2.setter
        def tls2(self, tls2):
            self.tls2[...] = tls2
        
        @property
        def tls3(self):
            """
            Element tls3 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tls3(self._handle)
            if array_handle in self._arrays:
                tls3 = self._arrays[array_handle]
            else:
                tls3 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tls3)
                self._arrays[array_handle] = tls3
            return tls3
        
        @tls3.setter
        def tls3(self, tls3):
            self.tls3[...] = tls3
        
        @property
        def tlf1(self):
            """
            Element tlf1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tlf1(self._handle)
            if array_handle in self._arrays:
                tlf1 = self._arrays[array_handle]
            else:
                tlf1 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tlf1)
                self._arrays[array_handle] = tlf1
            return tlf1
        
        @tlf1.setter
        def tlf1(self, tlf1):
            self.tlf1[...] = tlf1
        
        @property
        def tlf2(self):
            """
            Element tlf2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tlf2(self._handle)
            if array_handle in self._arrays:
                tlf2 = self._arrays[array_handle]
            else:
                tlf2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tlf2)
                self._arrays[array_handle] = tlf2
            return tlf2
        
        @tlf2.setter
        def tlf2(self, tlf2):
            self.tlf2[...] = tlf2
        
        @property
        def tlf3(self):
            """
            Element tlf3 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tlf3(self._handle)
            if array_handle in self._arrays:
                tlf3 = self._arrays[array_handle]
            else:
                tlf3 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tlf3)
                self._arrays[array_handle] = tlf3
            return tlf3
        
        @tlf3.setter
        def tlf3(self, tlf3):
            self.tlf3[...] = tlf3
        
        @property
        def tlf4(self):
            """
            Element tlf4 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1659
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__tlf4(self._handle)
            if array_handle in self._arrays:
                tlf4 = self._arrays[array_handle]
            else:
                tlf4 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__tlf4)
                self._arrays[array_handle] = tlf4
            return tlf4
        
        @tlf4.setter
        def tlf4(self, tlf4):
            self.tlf4[...] = tlf4
        
        @property
        def lu(self):
            """
            Element lu ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__lu(self._handle)
            if array_handle in self._arrays:
                lu = self._arrays[array_handle]
            else:
                lu = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__lu)
                self._arrays[array_handle] = lu
            return lu
        
        @lu.setter
        def lu(self, lu):
            self.lu[...] = lu
        
        @property
        def lg(self):
            """
            Element lg ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__lg(self._handle)
            if array_handle in self._arrays:
                lg = self._arrays[array_handle]
            else:
                lg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__lg)
                self._arrays[array_handle] = lg
            return lg
        
        @lg.setter
        def lg(self, lg):
            self.lg[...] = lg
        
        @property
        def lbm(self):
            """
            Element lbm ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__lbm(self._handle)
            if array_handle in self._arrays:
                lbm = self._arrays[array_handle]
            else:
                lbm = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__lbm)
                self._arrays[array_handle] = lbm
            return lbm
        
        @lbm.setter
        def lbm(self, lbm):
            self.lbm[...] = lbm
        
        @property
        def lfn(self):
            """
            Element lfn ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__lfn(self._handle)
            if array_handle in self._arrays:
                lfn = self._arrays[array_handle]
            else:
                lfn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__lfn)
                self._arrays[array_handle] = lfn
            return lfn
        
        @lfn.setter
        def lfn(self, lfn):
            self.lfn[...] = lfn
        
        @property
        def lb(self):
            """
            Element lb ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__lb(self._handle)
            if array_handle in self._arrays:
                lb = self._arrays[array_handle]
            else:
                lb = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__lb)
                self._arrays[array_handle] = lb
            return lb
        
        @lb.setter
        def lb(self, lb):
            self.lb[...] = lb
        
        @property
        def lb2(self):
            """
            Element lb2 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__lb2(self._handle)
            if array_handle in self._arrays:
                lb2 = self._arrays[array_handle]
            else:
                lb2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__lb2)
                self._arrays[array_handle] = lb2
            return lb2
        
        @lb2.setter
        def lb2(self, lb2):
            self.lb2[...] = lb2
        
        @property
        def lb3(self):
            """
            Element lb3 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__lb3(self._handle)
            if array_handle in self._arrays:
                lb3 = self._arrays[array_handle]
            else:
                lb3 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__lb3)
                self._arrays[array_handle] = lb3
            return lb3
        
        @lb3.setter
        def lb3(self, lb3):
            self.lb3[...] = lb3
        
        @property
        def lb4(self):
            """
            Element lb4 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__lb4(self._handle)
            if array_handle in self._arrays:
                lb4 = self._arrays[array_handle]
            else:
                lb4 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__lb4)
                self._arrays[array_handle] = lb4
            return lb4
        
        @lb4.setter
        def lb4(self, lb4):
            self.lb4[...] = lb4
        
        @property
        def ld(self):
            """
            Element ld ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            return _pyEMsoft.f90wrap_mt_block__get__ld(self._handle)
        
        @ld.setter
        def ld(self, ld):
            _pyEMsoft.f90wrap_mt_block__set__ld(self._handle, ld)
        
        @property
        def ld2(self):
            """
            Element ld2 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            return _pyEMsoft.f90wrap_mt_block__get__ld2(self._handle)
        
        @ld2.setter
        def ld2(self, ld2):
            _pyEMsoft.f90wrap_mt_block__set__ld2(self._handle, ld2)
        
        @property
        def ld3(self):
            """
            Element ld3 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            return _pyEMsoft.f90wrap_mt_block__get__ld3(self._handle)
        
        @ld3.setter
        def ld3(self, ld3):
            _pyEMsoft.f90wrap_mt_block__set__ld3(self._handle, ld3)
        
        @property
        def ld4(self):
            """
            Element ld4 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            return _pyEMsoft.f90wrap_mt_block__get__ld4(self._handle)
        
        @ld4.setter
        def ld4(self, ld4):
            _pyEMsoft.f90wrap_mt_block__set__ld4(self._handle, ld4)
        
        @property
        def lfp(self):
            """
            Element lfp ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__lfp(self._handle)
            if array_handle in self._arrays:
                lfp = self._arrays[array_handle]
            else:
                lfp = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__lfp)
                self._arrays[array_handle] = lfp
            return lfp
        
        @lfp.setter
        def lfp(self, lfp):
            self.lfp[...] = lfp
        
        @property
        def lfp1(self):
            """
            Element lfp1 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__lfp1(self._handle)
            if array_handle in self._arrays:
                lfp1 = self._arrays[array_handle]
            else:
                lfp1 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__lfp1)
                self._arrays[array_handle] = lfp1
            return lfp1
        
        @lfp1.setter
        def lfp1(self, lfp1):
            self.lfp1[...] = lfp1
        
        @property
        def lfp3(self):
            """
            Element lfp3 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__lfp3(self._handle)
            if array_handle in self._arrays:
                lfp3 = self._arrays[array_handle]
            else:
                lfp3 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__lfp3)
                self._arrays[array_handle] = lfp3
            return lfp3
        
        @lfp3.setter
        def lfp3(self, lfp3):
            self.lfp3[...] = lfp3
        
        @property
        def ls1(self):
            """
            Element ls1 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__ls1(self._handle)
            if array_handle in self._arrays:
                ls1 = self._arrays[array_handle]
            else:
                ls1 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__ls1)
                self._arrays[array_handle] = ls1
            return ls1
        
        @ls1.setter
        def ls1(self, ls1):
            self.ls1[...] = ls1
        
        @property
        def ls2(self):
            """
            Element ls2 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__ls2(self._handle)
            if array_handle in self._arrays:
                ls2 = self._arrays[array_handle]
            else:
                ls2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__ls2)
                self._arrays[array_handle] = ls2
            return ls2
        
        @ls2.setter
        def ls2(self, ls2):
            self.ls2[...] = ls2
        
        @property
        def ls3(self):
            """
            Element ls3 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__ls3(self._handle)
            if array_handle in self._arrays:
                ls3 = self._arrays[array_handle]
            else:
                ls3 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__ls3)
                self._arrays[array_handle] = ls3
            return ls3
        
        @ls3.setter
        def ls3(self, ls3):
            self.ls3[...] = ls3
        
        @property
        def lf1(self):
            """
            Element lf1 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__lf1(self._handle)
            if array_handle in self._arrays:
                lf1 = self._arrays[array_handle]
            else:
                lf1 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__lf1)
                self._arrays[array_handle] = lf1
            return lf1
        
        @lf1.setter
        def lf1(self, lf1):
            self.lf1[...] = lf1
        
        @property
        def lf2(self):
            """
            Element lf2 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__lf2(self._handle)
            if array_handle in self._arrays:
                lf2 = self._arrays[array_handle]
            else:
                lf2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__lf2)
                self._arrays[array_handle] = lf2
            return lf2
        
        @lf2.setter
        def lf2(self, lf2):
            self.lf2[...] = lf2
        
        @property
        def lf3(self):
            """
            Element lf3 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__lf3(self._handle)
            if array_handle in self._arrays:
                lf3 = self._arrays[array_handle]
            else:
                lf3 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__lf3)
                self._arrays[array_handle] = lf3
            return lf3
        
        @lf3.setter
        def lf3(self, lf3):
            self.lf3[...] = lf3
        
        @property
        def lf4(self):
            """
            Element lf4 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mt_block__array__lf4(self._handle)
            if array_handle in self._arrays:
                lf4 = self._arrays[array_handle]
            else:
                lf4 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mt_block__array__lf4)
                self._arrays[array_handle] = lf4
            return lf4
        
        @lf4.setter
        def lf4(self, lf4):
            self.lf4[...] = lf4
        
        @property
        def lq1(self):
            """
            Element lq1 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            return _pyEMsoft.f90wrap_mt_block__get__lq1(self._handle)
        
        @lq1.setter
        def lq1(self, lq1):
            _pyEMsoft.f90wrap_mt_block__set__lq1(self._handle, lq1)
        
        @property
        def lq2(self):
            """
            Element lq2 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            return _pyEMsoft.f90wrap_mt_block__get__lq2(self._handle)
        
        @lq2.setter
        def lq2(self, lq2):
            _pyEMsoft.f90wrap_mt_block__set__lq2(self._handle, lq2)
        
        @property
        def lq3(self):
            """
            Element lq3 ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1662
            
            """
            return _pyEMsoft.f90wrap_mt_block__get__lq3(self._handle)
        
        @lq3.setter
        def lq3(self, lq3):
            _pyEMsoft.f90wrap_mt_block__set__lq3(self._handle, lq3)
        
        def __str__(self):
            ret = ['<mt_block>{\n']
            ret.append('    tlu : ')
            ret.append(repr(self.tlu))
            ret.append(',\n    tlg : ')
            ret.append(repr(self.tlg))
            ret.append(',\n    tlbm : ')
            ret.append(repr(self.tlbm))
            ret.append(',\n    tlfn : ')
            ret.append(repr(self.tlfn))
            ret.append(',\n    tlb : ')
            ret.append(repr(self.tlb))
            ret.append(',\n    tlb2 : ')
            ret.append(repr(self.tlb2))
            ret.append(',\n    tlb3 : ')
            ret.append(repr(self.tlb3))
            ret.append(',\n    tlb4 : ')
            ret.append(repr(self.tlb4))
            ret.append(',\n    tlfp : ')
            ret.append(repr(self.tlfp))
            ret.append(',\n    tlfp1 : ')
            ret.append(repr(self.tlfp1))
            ret.append(',\n    tlfp3 : ')
            ret.append(repr(self.tlfp3))
            ret.append(',\n    tls1 : ')
            ret.append(repr(self.tls1))
            ret.append(',\n    tls2 : ')
            ret.append(repr(self.tls2))
            ret.append(',\n    tls3 : ')
            ret.append(repr(self.tls3))
            ret.append(',\n    tlf1 : ')
            ret.append(repr(self.tlf1))
            ret.append(',\n    tlf2 : ')
            ret.append(repr(self.tlf2))
            ret.append(',\n    tlf3 : ')
            ret.append(repr(self.tlf3))
            ret.append(',\n    tlf4 : ')
            ret.append(repr(self.tlf4))
            ret.append(',\n    lu : ')
            ret.append(repr(self.lu))
            ret.append(',\n    lg : ')
            ret.append(repr(self.lg))
            ret.append(',\n    lbm : ')
            ret.append(repr(self.lbm))
            ret.append(',\n    lfn : ')
            ret.append(repr(self.lfn))
            ret.append(',\n    lb : ')
            ret.append(repr(self.lb))
            ret.append(',\n    lb2 : ')
            ret.append(repr(self.lb2))
            ret.append(',\n    lb3 : ')
            ret.append(repr(self.lb3))
            ret.append(',\n    lb4 : ')
            ret.append(repr(self.lb4))
            ret.append(',\n    ld : ')
            ret.append(repr(self.ld))
            ret.append(',\n    ld2 : ')
            ret.append(repr(self.ld2))
            ret.append(',\n    ld3 : ')
            ret.append(repr(self.ld3))
            ret.append(',\n    ld4 : ')
            ret.append(repr(self.ld4))
            ret.append(',\n    lfp : ')
            ret.append(repr(self.lfp))
            ret.append(',\n    lfp1 : ')
            ret.append(repr(self.lfp1))
            ret.append(',\n    lfp3 : ')
            ret.append(repr(self.lfp3))
            ret.append(',\n    ls1 : ')
            ret.append(repr(self.ls1))
            ret.append(',\n    ls2 : ')
            ret.append(repr(self.ls2))
            ret.append(',\n    ls3 : ')
            ret.append(repr(self.ls3))
            ret.append(',\n    lf1 : ')
            ret.append(repr(self.lf1))
            ret.append(',\n    lf2 : ')
            ret.append(repr(self.lf2))
            ret.append(',\n    lf3 : ')
            ret.append(repr(self.lf3))
            ret.append(',\n    lf4 : ')
            ret.append(repr(self.lf4))
            ret.append(',\n    lq1 : ')
            ret.append(repr(self.lq1))
            ret.append(',\n    lq2 : ')
            ret.append(repr(self.lq2))
            ret.append(',\n    lq3 : ')
            ret.append(repr(self.lq3))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.MKT_block")
    class MKT_block(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=mkt_block)
        
        
        Defined at typedefs.f90 lines 1665-1666
        
        """
        def __init__(self, handle=None):
            """
            self = Mkt_Block()
            
            
            Defined at typedefs.f90 lines 1665-1666
            
            
            Returns
            -------
            this : Mkt_Block
            	Object to be constructed
            
            
            Automatically generated constructor for mkt_block
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_mkt_block_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Mkt_Block
            
            
            Defined at typedefs.f90 lines 1665-1666
            
            Parameters
            ----------
            this : Mkt_Block
            	Object to be destructed
            
            
            Automatically generated destructor for mkt_block
            """
            if self._alloc:
                _pyEMsoft.f90wrap_mkt_block_finalise(this=self._handle)
        
        @property
        def at(self):
            """
            Element at ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1666
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mkt_block__array__at(self._handle)
            if array_handle in self._arrays:
                at = self._arrays[array_handle]
            else:
                at = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mkt_block__array__at)
                self._arrays[array_handle] = at
            return at
        
        @at.setter
        def at(self, at):
            self.at[...] = at
        
        @property
        def atr(self):
            """
            Element atr ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1666
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mkt_block__array__atr(self._handle)
            if array_handle in self._arrays:
                atr = self._arrays[array_handle]
            else:
                atr = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mkt_block__array__atr)
                self._arrays[array_handle] = atr
            return atr
        
        @atr.setter
        def atr(self, atr):
            self.atr[...] = atr
        
        def __str__(self):
            ret = ['<mkt_block>{\n']
            ret.append('    at : ')
            ret.append(repr(self.at))
            ret.append(',\n    atr : ')
            ret.append(repr(self.atr))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.SCALE30_block")
    class SCALE30_block(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=scale30_block)
        
        
        Defined at typedefs.f90 lines 1669-1670
        
        """
        def __init__(self, handle=None):
            """
            self = Scale30_Block()
            
            
            Defined at typedefs.f90 lines 1669-1670
            
            
            Returns
            -------
            this : Scale30_Block
            	Object to be constructed
            
            
            Automatically generated constructor for scale30_block
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_scale30_block_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Scale30_Block
            
            
            Defined at typedefs.f90 lines 1669-1670
            
            Parameters
            ----------
            this : Scale30_Block
            	Object to be destructed
            
            
            Automatically generated destructor for scale30_block
            """
            if self._alloc:
                _pyEMsoft.f90wrap_scale30_block_finalise(this=self._handle)
        
        @property
        def ltest(self):
            """
            Element ltest ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1670
            
            """
            return _pyEMsoft.f90wrap_scale30_block__get__ltest(self._handle)
        
        @ltest.setter
        def ltest(self, ltest):
            _pyEMsoft.f90wrap_scale30_block__set__ltest(self._handle, ltest)
        
        def __str__(self):
            ret = ['<scale30_block>{\n']
            ret.append('    ltest : ')
            ret.append(repr(self.ltest))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.MP_block")
    class MP_block(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=mp_block)
        
        
        Defined at typedefs.f90 lines 1673-1674
        
        """
        def __init__(self, handle=None):
            """
            self = Mp_Block()
            
            
            Defined at typedefs.f90 lines 1673-1674
            
            
            Returns
            -------
            this : Mp_Block
            	Object to be constructed
            
            
            Automatically generated constructor for mp_block
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_mp_block_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Mp_Block
            
            
            Defined at typedefs.f90 lines 1673-1674
            
            Parameters
            ----------
            this : Mp_Block
            	Object to be destructed
            
            
            Automatically generated destructor for mp_block
            """
            if self._alloc:
                _pyEMsoft.f90wrap_mp_block_finalise(this=self._handle)
        
        @property
        def pc(self):
            """
            Element pc ftype=complex(kind=sgl) pytype=complex
            
            
            Defined at typedefs.f90 line 1674
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mp_block__array__pc(self._handle)
            if array_handle in self._arrays:
                pc = self._arrays[array_handle]
            else:
                pc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mp_block__array__pc)
                self._arrays[array_handle] = pc
            return pc
        
        @pc.setter
        def pc(self, pc):
            self.pc[...] = pc
        
        @property
        def as_(self):
            """
            Element as_ ftype=complex(kind=sgl) pytype=complex
            
            
            Defined at typedefs.f90 line 1674
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mp_block__array__as_(self._handle)
            if array_handle in self._arrays:
                as_ = self._arrays[array_handle]
            else:
                as_ = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mp_block__array__as_)
                self._arrays[array_handle] = as_
            return as_
        
        @as_.setter
        def as_(self, as_):
            self.as_[...] = as_
        
        @property
        def el(self):
            """
            Element el ftype=complex(kind=sgl) pytype=complex
            
            
            Defined at typedefs.f90 line 1674
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_mp_block__array__el(self._handle)
            if array_handle in self._arrays:
                el = self._arrays[array_handle]
            else:
                el = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_mp_block__array__el)
                self._arrays[array_handle] = el
            return el
        
        @el.setter
        def el(self, el):
            self.el[...] = el
        
        def __str__(self):
            ret = ['<mp_block>{\n']
            ret.append('    pc : ')
            ret.append(repr(self.pc))
            ret.append(',\n    as_ : ')
            ret.append(repr(self.as_))
            ret.append(',\n    el : ')
            ret.append(repr(self.el))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.MAP_block")
    class MAP_block(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=map_block)
        
        
        Defined at typedefs.f90 lines 1677-1678
        
        """
        def __init__(self, handle=None):
            """
            self = Map_Block()
            
            
            Defined at typedefs.f90 lines 1677-1678
            
            
            Returns
            -------
            this : Map_Block
            	Object to be constructed
            
            
            Automatically generated constructor for map_block
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_map_block_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Map_Block
            
            
            Defined at typedefs.f90 lines 1677-1678
            
            Parameters
            ----------
            this : Map_Block
            	Object to be destructed
            
            
            Automatically generated destructor for map_block
            """
            if self._alloc:
                _pyEMsoft.f90wrap_map_block_finalise(this=self._handle)
        
        @property
        def dc(self):
            """
            Element dc ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1678
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_map_block__array__dc(self._handle)
            if array_handle in self._arrays:
                dc = self._arrays[array_handle]
            else:
                dc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_map_block__array__dc)
                self._arrays[array_handle] = dc
            return dc
        
        @dc.setter
        def dc(self, dc):
            self.dc[...] = dc
        
        def __str__(self):
            ret = ['<map_block>{\n']
            ret.append('    dc : ')
            ret.append(repr(self.dc))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.LTEM_Magnetization")
    class LTEM_Magnetization(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ltem_magnetization)
        
        
        Defined at typedefs.f90 lines 1684-1696
        
        """
        def __init__(self, handle=None):
            """
            self = Ltem_Magnetization()
            
            
            Defined at typedefs.f90 lines 1684-1696
            
            
            Returns
            -------
            this : Ltem_Magnetization
            	Object to be constructed
            
            
            Automatically generated constructor for ltem_magnetization
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ltem_magnetization_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ltem_Magnetization
            
            
            Defined at typedefs.f90 lines 1684-1696
            
            Parameters
            ----------
            this : Ltem_Magnetization
            	Object to be destructed
            
            
            Automatically generated destructor for ltem_magnetization
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ltem_magnetization_finalise(this=self._handle)
        
        @property
        def nx(self):
            """
            Element nx ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1685
            
            """
            return _pyEMsoft.f90wrap_ltem_magnetization__get__nx(self._handle)
        
        @nx.setter
        def nx(self, nx):
            _pyEMsoft.f90wrap_ltem_magnetization__set__nx(self._handle, nx)
        
        @property
        def ny(self):
            """
            Element ny ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1686
            
            """
            return _pyEMsoft.f90wrap_ltem_magnetization__get__ny(self._handle)
        
        @ny.setter
        def ny(self, ny):
            _pyEMsoft.f90wrap_ltem_magnetization__set__ny(self._handle, ny)
        
        @property
        def nz(self):
            """
            Element nz ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1687
            
            """
            return _pyEMsoft.f90wrap_ltem_magnetization__get__nz(self._handle)
        
        @nz.setter
        def nz(self, nz):
            _pyEMsoft.f90wrap_ltem_magnetization__set__nz(self._handle, nz)
        
        @property
        def dx(self):
            """
            Element dx ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1688
            
            """
            return _pyEMsoft.f90wrap_ltem_magnetization__get__dx(self._handle)
        
        @dx.setter
        def dx(self, dx):
            _pyEMsoft.f90wrap_ltem_magnetization__set__dx(self._handle, dx)
        
        @property
        def dy(self):
            """
            Element dy ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1689
            
            """
            return _pyEMsoft.f90wrap_ltem_magnetization__get__dy(self._handle)
        
        @dy.setter
        def dy(self, dy):
            _pyEMsoft.f90wrap_ltem_magnetization__set__dy(self._handle, dy)
        
        @property
        def dz(self):
            """
            Element dz ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1690
            
            """
            return _pyEMsoft.f90wrap_ltem_magnetization__get__dz(self._handle)
        
        @dz.setter
        def dz(self, dz):
            _pyEMsoft.f90wrap_ltem_magnetization__set__dz(self._handle, dz)
        
        @property
        def originalmag(self):
            """
            Element originalmag ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1691
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ltem_magnetization__array__originalmag(self._handle)
            if array_handle in self._arrays:
                originalmag = self._arrays[array_handle]
            else:
                originalmag = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ltem_magnetization__array__originalmag)
                self._arrays[array_handle] = originalmag
            return originalmag
        
        @originalmag.setter
        def originalmag(self, originalmag):
            self.originalmag[...] = originalmag
        
        @property
        def resampledmag(self):
            """
            Element resampledmag ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1692
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ltem_magnetization__array__resampledmag(self._handle)
            if array_handle in self._arrays:
                resampledmag = self._arrays[array_handle]
            else:
                resampledmag = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ltem_magnetization__array__resampledmag)
                self._arrays[array_handle] = resampledmag
            return resampledmag
        
        @resampledmag.setter
        def resampledmag(self, resampledmag):
            self.resampledmag[...] = resampledmag
        
        @property
        def mmagnitude(self):
            """
            Element mmagnitude ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1693
            
            """
            return _pyEMsoft.f90wrap_ltem_magnetization__get__mmagnitude(self._handle)
        
        @mmagnitude.setter
        def mmagnitude(self, mmagnitude):
            _pyEMsoft.f90wrap_ltem_magnetization__set__mmagnitude(self._handle, mmagnitude)
        
        @property
        def bzero(self):
            """
            Element bzero ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1694
            
            """
            return _pyEMsoft.f90wrap_ltem_magnetization__get__bzero(self._handle)
        
        @bzero.setter
        def bzero(self, bzero):
            _pyEMsoft.f90wrap_ltem_magnetization__set__bzero(self._handle, bzero)
        
        @property
        def thick(self):
            """
            Element thick ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1695
            
            """
            return _pyEMsoft.f90wrap_ltem_magnetization__get__thick(self._handle)
        
        @thick.setter
        def thick(self, thick):
            _pyEMsoft.f90wrap_ltem_magnetization__set__thick(self._handle, thick)
        
        @property
        def origin(self):
            """
            Element origin ftype=character(fnlen) pytype=str
            
            
            Defined at typedefs.f90 line 1696
            
            """
            return _pyEMsoft.f90wrap_ltem_magnetization__get__origin(self._handle)
        
        @origin.setter
        def origin(self, origin):
            _pyEMsoft.f90wrap_ltem_magnetization__set__origin(self._handle, origin)
        
        def __str__(self):
            ret = ['<ltem_magnetization>{\n']
            ret.append('    nx : ')
            ret.append(repr(self.nx))
            ret.append(',\n    ny : ')
            ret.append(repr(self.ny))
            ret.append(',\n    nz : ')
            ret.append(repr(self.nz))
            ret.append(',\n    dx : ')
            ret.append(repr(self.dx))
            ret.append(',\n    dy : ')
            ret.append(repr(self.dy))
            ret.append(',\n    dz : ')
            ret.append(repr(self.dz))
            ret.append(',\n    originalmag : ')
            ret.append(repr(self.originalmag))
            ret.append(',\n    resampledmag : ')
            ret.append(repr(self.resampledmag))
            ret.append(',\n    mmagnitude : ')
            ret.append(repr(self.mmagnitude))
            ret.append(',\n    bzero : ')
            ret.append(repr(self.bzero))
            ret.append(',\n    thick : ')
            ret.append(repr(self.thick))
            ret.append(',\n    origin : ')
            ret.append(repr(self.origin))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDPixel")
    class EBSDPixel(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdpixel)
        
        
        Defined at typedefs.f90 lines 1702-1705
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdpixel()
            
            
            Defined at typedefs.f90 lines 1702-1705
            
            
            Returns
            -------
            this : Ebsdpixel
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdpixel
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdpixel_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdpixel
            
            
            Defined at typedefs.f90 lines 1702-1705
            
            Parameters
            ----------
            this : Ebsdpixel
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdpixel
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdpixel_finalise(this=self._handle)
        
        @property
        def lambdaez(self):
            """
            Element lambdaez ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1703
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdpixel__array__lambdaez(self._handle)
            if array_handle in self._arrays:
                lambdaez = self._arrays[array_handle]
            else:
                lambdaez = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdpixel__array__lambdaez)
                self._arrays[array_handle] = lambdaez
            return lambdaez
        
        @lambdaez.setter
        def lambdaez(self, lambdaez):
            self.lambdaez[...] = lambdaez
        
        @property
        def dc(self):
            """
            Element dc ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1704
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdpixel__array__dc(self._handle)
            if array_handle in self._arrays:
                dc = self._arrays[array_handle]
            else:
                dc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdpixel__array__dc)
                self._arrays[array_handle] = dc
            return dc
        
        @dc.setter
        def dc(self, dc):
            self.dc[...] = dc
        
        @property
        def cfactor(self):
            """
            Element cfactor ftype=real(kind=dbl) pytype=float
            
            
            Defined at typedefs.f90 line 1705
            
            """
            return _pyEMsoft.f90wrap_ebsdpixel__get__cfactor(self._handle)
        
        @cfactor.setter
        def cfactor(self, cfactor):
            _pyEMsoft.f90wrap_ebsdpixel__set__cfactor(self._handle, cfactor)
        
        def __str__(self):
            ret = ['<ebsdpixel>{\n']
            ret.append('    lambdaez : ')
            ret.append(repr(self.lambdaez))
            ret.append(',\n    dc : ')
            ret.append(repr(self.dc))
            ret.append(',\n    cfactor : ')
            ret.append(repr(self.cfactor))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDMCdataType")
    class EBSDMCdataType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdmcdatatype)
        
        
        Defined at typedefs.f90 lines 1707-1715
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdmcdatatype()
            
            
            Defined at typedefs.f90 lines 1707-1715
            
            
            Returns
            -------
            this : Ebsdmcdatatype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdmcdatatype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdmcdatatype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdmcdatatype
            
            
            Defined at typedefs.f90 lines 1707-1715
            
            Parameters
            ----------
            this : Ebsdmcdatatype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdmcdatatype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdmcdatatype_finalise(this=self._handle)
        
        @property
        def multiplier(self):
            """
            Element multiplier ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1708
            
            """
            return _pyEMsoft.f90wrap_ebsdmcdatatype__get__multiplier(self._handle)
        
        @multiplier.setter
        def multiplier(self, multiplier):
            _pyEMsoft.f90wrap_ebsdmcdatatype__set__multiplier(self._handle, multiplier)
        
        @property
        def numebins(self):
            """
            Element numebins ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1709
            
            """
            return _pyEMsoft.f90wrap_ebsdmcdatatype__get__numebins(self._handle)
        
        @numebins.setter
        def numebins(self, numebins):
            _pyEMsoft.f90wrap_ebsdmcdatatype__set__numebins(self._handle, numebins)
        
        @property
        def numzbins(self):
            """
            Element numzbins ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1710
            
            """
            return _pyEMsoft.f90wrap_ebsdmcdatatype__get__numzbins(self._handle)
        
        @numzbins.setter
        def numzbins(self, numzbins):
            _pyEMsoft.f90wrap_ebsdmcdatatype__set__numzbins(self._handle, numzbins)
        
        @property
        def totnum_el(self):
            """
            Element totnum_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1711
            
            """
            return _pyEMsoft.f90wrap_ebsdmcdatatype__get__totnum_el(self._handle)
        
        @totnum_el.setter
        def totnum_el(self, totnum_el):
            _pyEMsoft.f90wrap_ebsdmcdatatype__set__totnum_el(self._handle, totnum_el)
        
        @property
        def accum_e(self):
            """
            Element accum_e ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1712
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmcdatatype__array__accum_e(self._handle)
            if array_handle in self._arrays:
                accum_e = self._arrays[array_handle]
            else:
                accum_e = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmcdatatype__array__accum_e)
                self._arrays[array_handle] = accum_e
            return accum_e
        
        @accum_e.setter
        def accum_e(self, accum_e):
            self.accum_e[...] = accum_e
        
        @property
        def accum_z(self):
            """
            Element accum_z ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1713
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmcdatatype__array__accum_z(self._handle)
            if array_handle in self._arrays:
                accum_z = self._arrays[array_handle]
            else:
                accum_z = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmcdatatype__array__accum_z)
                self._arrays[array_handle] = accum_z
            return accum_z
        
        @accum_z.setter
        def accum_z(self, accum_z):
            self.accum_z[...] = accum_z
        
        @property
        def accumsp(self):
            """
            Element accumsp ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1714
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmcdatatype__array__accumsp(self._handle)
            if array_handle in self._arrays:
                accumsp = self._arrays[array_handle]
            else:
                accumsp = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmcdatatype__array__accumsp)
                self._arrays[array_handle] = accumsp
            return accumsp
        
        @accumsp.setter
        def accumsp(self, accumsp):
            self.accumsp[...] = accumsp
        
        @property
        def accum_xyz(self):
            """
            Element accum_xyz ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1715
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmcdatatype__array__accum_xyz(self._handle)
            if array_handle in self._arrays:
                accum_xyz = self._arrays[array_handle]
            else:
                accum_xyz = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmcdatatype__array__accum_xyz)
                self._arrays[array_handle] = accum_xyz
            return accum_xyz
        
        @accum_xyz.setter
        def accum_xyz(self, accum_xyz):
            self.accum_xyz[...] = accum_xyz
        
        def __str__(self):
            ret = ['<ebsdmcdatatype>{\n']
            ret.append('    multiplier : ')
            ret.append(repr(self.multiplier))
            ret.append(',\n    numebins : ')
            ret.append(repr(self.numebins))
            ret.append(',\n    numzbins : ')
            ret.append(repr(self.numzbins))
            ret.append(',\n    totnum_el : ')
            ret.append(repr(self.totnum_el))
            ret.append(',\n    accum_e : ')
            ret.append(repr(self.accum_e))
            ret.append(',\n    accum_z : ')
            ret.append(repr(self.accum_z))
            ret.append(',\n    accumsp : ')
            ret.append(repr(self.accumsp))
            ret.append(',\n    accum_xyz : ')
            ret.append(repr(self.accum_xyz))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDMPdataType")
    class EBSDMPdataType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdmpdatatype)
        
        
        Defined at typedefs.f90 lines 1717-1731
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdmpdatatype()
            
            
            Defined at typedefs.f90 lines 1717-1731
            
            
            Returns
            -------
            this : Ebsdmpdatatype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdmpdatatype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdmpdatatype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdmpdatatype
            
            
            Defined at typedefs.f90 lines 1717-1731
            
            Parameters
            ----------
            this : Ebsdmpdatatype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdmpdatatype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdmpdatatype_finalise(this=self._handle)
        
        @property
        def lastenergy(self):
            """
            Element lastenergy ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1718
            
            """
            return _pyEMsoft.f90wrap_ebsdmpdatatype__get__lastenergy(self._handle)
        
        @lastenergy.setter
        def lastenergy(self, lastenergy):
            _pyEMsoft.f90wrap_ebsdmpdatatype__set__lastenergy(self._handle, lastenergy)
        
        @property
        def numebins(self):
            """
            Element numebins ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1719
            
            """
            return _pyEMsoft.f90wrap_ebsdmpdatatype__get__numebins(self._handle)
        
        @numebins.setter
        def numebins(self, numebins):
            _pyEMsoft.f90wrap_ebsdmpdatatype__set__numebins(self._handle, numebins)
        
        @property
        def numset(self):
            """
            Element numset ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1720
            
            """
            return _pyEMsoft.f90wrap_ebsdmpdatatype__get__numset(self._handle)
        
        @numset.setter
        def numset(self, numset):
            _pyEMsoft.f90wrap_ebsdmpdatatype__set__numset(self._handle, numset)
        
        @property
        def newpgnumber(self):
            """
            Element newpgnumber ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1721
            
            """
            return _pyEMsoft.f90wrap_ebsdmpdatatype__get__newpgnumber(self._handle)
        
        @newpgnumber.setter
        def newpgnumber(self, newpgnumber):
            _pyEMsoft.f90wrap_ebsdmpdatatype__set__newpgnumber(self._handle, newpgnumber)
        
        @property
        def averagedmp(self):
            """
            Element averagedmp ftype=logical pytype=bool
            
            
            Defined at typedefs.f90 line 1722
            
            """
            return _pyEMsoft.f90wrap_ebsdmpdatatype__get__averagedmp(self._handle)
        
        @averagedmp.setter
        def averagedmp(self, averagedmp):
            _pyEMsoft.f90wrap_ebsdmpdatatype__set__averagedmp(self._handle, averagedmp)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at typedefs.f90 line 1723
            
            """
            return _pyEMsoft.f90wrap_ebsdmpdatatype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_ebsdmpdatatype__set__xtalname(self._handle, xtalname)
        
        @property
        def betheparameters(self):
            """
            Element betheparameters ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1724
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmpdatatype__array__betheparameters(self._handle)
            if array_handle in self._arrays:
                betheparameters = self._arrays[array_handle]
            else:
                betheparameters = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmpdatatype__array__betheparameters)
                self._arrays[array_handle] = betheparameters
            return betheparameters
        
        @betheparameters.setter
        def betheparameters(self, betheparameters):
            self.betheparameters[...] = betheparameters
        
        @property
        def kevs(self):
            """
            Element kevs ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1725
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmpdatatype__array__kevs(self._handle)
            if array_handle in self._arrays:
                kevs = self._arrays[array_handle]
            else:
                kevs = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmpdatatype__array__kevs)
                self._arrays[array_handle] = kevs
            return kevs
        
        @kevs.setter
        def kevs(self, kevs):
            self.kevs[...] = kevs
        
        @property
        def mlpnh4(self):
            """
            Element mlpnh4 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1726
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmpdatatype__array__mlpnh4(self._handle)
            if array_handle in self._arrays:
                mlpnh4 = self._arrays[array_handle]
            else:
                mlpnh4 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmpdatatype__array__mlpnh4)
                self._arrays[array_handle] = mlpnh4
            return mlpnh4
        
        @mlpnh4.setter
        def mlpnh4(self, mlpnh4):
            self.mlpnh4[...] = mlpnh4
        
        @property
        def mlpsh4(self):
            """
            Element mlpsh4 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1727
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmpdatatype__array__mlpsh4(self._handle)
            if array_handle in self._arrays:
                mlpsh4 = self._arrays[array_handle]
            else:
                mlpsh4 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmpdatatype__array__mlpsh4)
                self._arrays[array_handle] = mlpsh4
            return mlpsh4
        
        @mlpsh4.setter
        def mlpsh4(self, mlpsh4):
            self.mlpsh4[...] = mlpsh4
        
        @property
        def mlpnh(self):
            """
            Element mlpnh ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1728
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmpdatatype__array__mlpnh(self._handle)
            if array_handle in self._arrays:
                mlpnh = self._arrays[array_handle]
            else:
                mlpnh = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmpdatatype__array__mlpnh)
                self._arrays[array_handle] = mlpnh
            return mlpnh
        
        @mlpnh.setter
        def mlpnh(self, mlpnh):
            self.mlpnh[...] = mlpnh
        
        @property
        def mlpsh(self):
            """
            Element mlpsh ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1729
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmpdatatype__array__mlpsh(self._handle)
            if array_handle in self._arrays:
                mlpsh = self._arrays[array_handle]
            else:
                mlpsh = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmpdatatype__array__mlpsh)
                self._arrays[array_handle] = mlpsh
            return mlpsh
        
        @mlpsh.setter
        def mlpsh(self, mlpsh):
            self.mlpsh[...] = mlpsh
        
        @property
        def masterspnh(self):
            """
            Element masterspnh ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1730
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmpdatatype__array__masterspnh(self._handle)
            if array_handle in self._arrays:
                masterspnh = self._arrays[array_handle]
            else:
                masterspnh = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmpdatatype__array__masterspnh)
                self._arrays[array_handle] = masterspnh
            return masterspnh
        
        @masterspnh.setter
        def masterspnh(self, masterspnh):
            self.masterspnh[...] = masterspnh
        
        @property
        def masterspsh(self):
            """
            Element masterspsh ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1731
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmpdatatype__array__masterspsh(self._handle)
            if array_handle in self._arrays:
                masterspsh = self._arrays[array_handle]
            else:
                masterspsh = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmpdatatype__array__masterspsh)
                self._arrays[array_handle] = masterspsh
            return masterspsh
        
        @masterspsh.setter
        def masterspsh(self, masterspsh):
            self.masterspsh[...] = masterspsh
        
        def __str__(self):
            ret = ['<ebsdmpdatatype>{\n']
            ret.append('    lastenergy : ')
            ret.append(repr(self.lastenergy))
            ret.append(',\n    numebins : ')
            ret.append(repr(self.numebins))
            ret.append(',\n    numset : ')
            ret.append(repr(self.numset))
            ret.append(',\n    newpgnumber : ')
            ret.append(repr(self.newpgnumber))
            ret.append(',\n    averagedmp : ')
            ret.append(repr(self.averagedmp))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    betheparameters : ')
            ret.append(repr(self.betheparameters))
            ret.append(',\n    kevs : ')
            ret.append(repr(self.kevs))
            ret.append(',\n    mlpnh4 : ')
            ret.append(repr(self.mlpnh4))
            ret.append(',\n    mlpsh4 : ')
            ret.append(repr(self.mlpsh4))
            ret.append(',\n    mlpnh : ')
            ret.append(repr(self.mlpnh))
            ret.append(',\n    mlpsh : ')
            ret.append(repr(self.mlpsh))
            ret.append(',\n    masterspnh : ')
            ret.append(repr(self.masterspnh))
            ret.append(',\n    masterspsh : ')
            ret.append(repr(self.masterspsh))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDDetectorType")
    class EBSDDetectorType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsddetectortype)
        
        
        Defined at typedefs.f90 lines 1733-1736
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsddetectortype()
            
            
            Defined at typedefs.f90 lines 1733-1736
            
            
            Returns
            -------
            this : Ebsddetectortype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsddetectortype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsddetectortype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsddetectortype
            
            
            Defined at typedefs.f90 lines 1733-1736
            
            Parameters
            ----------
            this : Ebsddetectortype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsddetectortype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsddetectortype_finalise(this=self._handle)
        
        @property
        def rgx(self):
            """
            Element rgx ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1734
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddetectortype__array__rgx(self._handle)
            if array_handle in self._arrays:
                rgx = self._arrays[array_handle]
            else:
                rgx = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddetectortype__array__rgx)
                self._arrays[array_handle] = rgx
            return rgx
        
        @rgx.setter
        def rgx(self, rgx):
            self.rgx[...] = rgx
        
        @property
        def rgy(self):
            """
            Element rgy ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1734
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddetectortype__array__rgy(self._handle)
            if array_handle in self._arrays:
                rgy = self._arrays[array_handle]
            else:
                rgy = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddetectortype__array__rgy)
                self._arrays[array_handle] = rgy
            return rgy
        
        @rgy.setter
        def rgy(self, rgy):
            self.rgy[...] = rgy
        
        @property
        def rgz(self):
            """
            Element rgz ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1734
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddetectortype__array__rgz(self._handle)
            if array_handle in self._arrays:
                rgz = self._arrays[array_handle]
            else:
                rgz = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddetectortype__array__rgz)
                self._arrays[array_handle] = rgz
            return rgz
        
        @rgz.setter
        def rgz(self, rgz):
            self.rgz[...] = rgz
        
        @property
        def accum_e_detector(self):
            """
            Element accum_e_detector ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1735
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddetectortype__array__accum_e_detector(self._handle)
            if array_handle in self._arrays:
                accum_e_detector = self._arrays[array_handle]
            else:
                accum_e_detector = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddetectortype__array__accum_e_detector)
                self._arrays[array_handle] = accum_e_detector
            return accum_e_detector
        
        @accum_e_detector.setter
        def accum_e_detector(self, accum_e_detector):
            self.accum_e_detector[...] = accum_e_detector
        
        def __str__(self):
            ret = ['<ebsddetectortype>{\n']
            ret.append('    rgx : ')
            ret.append(repr(self.rgx))
            ret.append(',\n    rgy : ')
            ret.append(repr(self.rgy))
            ret.append(',\n    rgz : ')
            ret.append(repr(self.rgz))
            ret.append(',\n    accum_e_detector : ')
            ret.append(repr(self.accum_e_detector))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDAngleDIType")
    class EBSDAngleDIType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdangleditype)
        
        
        Defined at typedefs.f90 lines 1742-1743
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdangleditype()
            
            
            Defined at typedefs.f90 lines 1742-1743
            
            
            Returns
            -------
            this : Ebsdangleditype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdangleditype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdangleditype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdangleditype
            
            
            Defined at typedefs.f90 lines 1742-1743
            
            Parameters
            ----------
            this : Ebsdangleditype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdangleditype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdangleditype_finalise(this=self._handle)
        
        @property
        def quatang(self):
            """
            Element quatang ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1743
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdangleditype__array__quatang(self._handle)
            if array_handle in self._arrays:
                quatang = self._arrays[array_handle]
            else:
                quatang = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdangleditype__array__quatang)
                self._arrays[array_handle] = quatang
            return quatang
        
        @quatang.setter
        def quatang(self, quatang):
            self.quatang[...] = quatang
        
        def __str__(self):
            ret = ['<ebsdangleditype>{\n']
            ret.append('    quatang : ')
            ret.append(repr(self.quatang))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDLargeAccumDIType")
    class EBSDLargeAccumDIType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdlargeaccumditype)
        
        
        Defined at typedefs.f90 lines 1745-1747
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdlargeaccumditype()
            
            
            Defined at typedefs.f90 lines 1745-1747
            
            
            Returns
            -------
            this : Ebsdlargeaccumditype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdlargeaccumditype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdlargeaccumditype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdlargeaccumditype
            
            
            Defined at typedefs.f90 lines 1745-1747
            
            Parameters
            ----------
            this : Ebsdlargeaccumditype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdlargeaccumditype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdlargeaccumditype_finalise(this=self._handle)
        
        @property
        def accum_e(self):
            """
            Element accum_e ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1746
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdlargeaccumditype__array__accum_e(self._handle)
            if array_handle in self._arrays:
                accum_e = self._arrays[array_handle]
            else:
                accum_e = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdlargeaccumditype__array__accum_e)
                self._arrays[array_handle] = accum_e
            return accum_e
        
        @accum_e.setter
        def accum_e(self, accum_e):
            self.accum_e[...] = accum_e
        
        @property
        def accum_z(self):
            """
            Element accum_z ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1746
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdlargeaccumditype__array__accum_z(self._handle)
            if array_handle in self._arrays:
                accum_z = self._arrays[array_handle]
            else:
                accum_z = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdlargeaccumditype__array__accum_z)
                self._arrays[array_handle] = accum_z
            return accum_z
        
        @accum_z.setter
        def accum_z(self, accum_z):
            self.accum_z[...] = accum_z
        
        @property
        def accum_e_detector(self):
            """
            Element accum_e_detector ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1747
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdlargeaccumditype__array__accum_e_detector(self._handle)
            if array_handle in self._arrays:
                accum_e_detector = self._arrays[array_handle]
            else:
                accum_e_detector = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdlargeaccumditype__array__accum_e_detector)
                self._arrays[array_handle] = accum_e_detector
            return accum_e_detector
        
        @accum_e_detector.setter
        def accum_e_detector(self, accum_e_detector):
            self.accum_e_detector[...] = accum_e_detector
        
        def __str__(self):
            ret = ['<ebsdlargeaccumditype>{\n']
            ret.append('    accum_e : ')
            ret.append(repr(self.accum_e))
            ret.append(',\n    accum_z : ')
            ret.append(repr(self.accum_z))
            ret.append(',\n    accum_e_detector : ')
            ret.append(repr(self.accum_e_detector))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDMasterDIType")
    class EBSDMasterDIType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdmasterditype)
        
        
        Defined at typedefs.f90 lines 1749-1751
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdmasterditype()
            
            
            Defined at typedefs.f90 lines 1749-1751
            
            
            Returns
            -------
            this : Ebsdmasterditype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdmasterditype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdmasterditype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdmasterditype
            
            
            Defined at typedefs.f90 lines 1749-1751
            
            Parameters
            ----------
            this : Ebsdmasterditype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdmasterditype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdmasterditype_finalise(this=self._handle)
        
        @property
        def mlpnh(self):
            """
            Element mlpnh ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1750
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmasterditype__array__mlpnh(self._handle)
            if array_handle in self._arrays:
                mlpnh = self._arrays[array_handle]
            else:
                mlpnh = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmasterditype__array__mlpnh)
                self._arrays[array_handle] = mlpnh
            return mlpnh
        
        @mlpnh.setter
        def mlpnh(self, mlpnh):
            self.mlpnh[...] = mlpnh
        
        @property
        def mlpsh(self):
            """
            Element mlpsh ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1750
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmasterditype__array__mlpsh(self._handle)
            if array_handle in self._arrays:
                mlpsh = self._arrays[array_handle]
            else:
                mlpsh = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmasterditype__array__mlpsh)
                self._arrays[array_handle] = mlpsh
            return mlpsh
        
        @mlpsh.setter
        def mlpsh(self, mlpsh):
            self.mlpsh[...] = mlpsh
        
        @property
        def rgx(self):
            """
            Element rgx ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1751
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmasterditype__array__rgx(self._handle)
            if array_handle in self._arrays:
                rgx = self._arrays[array_handle]
            else:
                rgx = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmasterditype__array__rgx)
                self._arrays[array_handle] = rgx
            return rgx
        
        @rgx.setter
        def rgx(self, rgx):
            self.rgx[...] = rgx
        
        @property
        def rgy(self):
            """
            Element rgy ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1751
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmasterditype__array__rgy(self._handle)
            if array_handle in self._arrays:
                rgy = self._arrays[array_handle]
            else:
                rgy = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmasterditype__array__rgy)
                self._arrays[array_handle] = rgy
            return rgy
        
        @rgy.setter
        def rgy(self, rgy):
            self.rgy[...] = rgy
        
        @property
        def rgz(self):
            """
            Element rgz ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1751
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmasterditype__array__rgz(self._handle)
            if array_handle in self._arrays:
                rgz = self._arrays[array_handle]
            else:
                rgz = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmasterditype__array__rgz)
                self._arrays[array_handle] = rgz
            return rgz
        
        @rgz.setter
        def rgz(self, rgz):
            self.rgz[...] = rgz
        
        def __str__(self):
            ret = ['<ebsdmasterditype>{\n']
            ret.append('    mlpnh : ')
            ret.append(repr(self.mlpnh))
            ret.append(',\n    mlpsh : ')
            ret.append(repr(self.mlpsh))
            ret.append(',\n    rgx : ')
            ret.append(repr(self.rgx))
            ret.append(',\n    rgy : ')
            ret.append(repr(self.rgy))
            ret.append(',\n    rgz : ')
            ret.append(repr(self.rgz))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDDIdataType")
    class EBSDDIdataType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsddidatatype)
        
        
        Defined at typedefs.f90 lines 1753-1777
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsddidatatype()
            
            
            Defined at typedefs.f90 lines 1753-1777
            
            
            Returns
            -------
            this : Ebsddidatatype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsddidatatype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsddidatatype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsddidatatype
            
            
            Defined at typedefs.f90 lines 1753-1777
            
            Parameters
            ----------
            this : Ebsddidatatype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsddidatatype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsddidatatype_finalise(this=self._handle)
        
        @property
        def fzcnt(self):
            """
            Element fzcnt ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1754
            
            """
            return _pyEMsoft.f90wrap_ebsddidatatype__get__fzcnt(self._handle)
        
        @fzcnt.setter
        def fzcnt(self, fzcnt):
            _pyEMsoft.f90wrap_ebsddidatatype__set__fzcnt(self._handle, fzcnt)
        
        @property
        def nexp(self):
            """
            Element nexp ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1755
            
            """
            return _pyEMsoft.f90wrap_ebsddidatatype__get__nexp(self._handle)
        
        @nexp.setter
        def nexp(self, nexp):
            _pyEMsoft.f90wrap_ebsddidatatype__set__nexp(self._handle, nexp)
        
        @property
        def pgnum(self):
            """
            Element pgnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1756
            
            """
            return _pyEMsoft.f90wrap_ebsddidatatype__get__pgnum(self._handle)
        
        @pgnum.setter
        def pgnum(self, pgnum):
            _pyEMsoft.f90wrap_ebsddidatatype__set__pgnum(self._handle, pgnum)
        
        @property
        def adp(self):
            """
            Element adp ftype=integer(kind=sgl) pytype=int
            
            
            Defined at typedefs.f90 line 1757
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__adp(self._handle)
            if array_handle in self._arrays:
                adp = self._arrays[array_handle]
            else:
                adp = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__adp)
                self._arrays[array_handle] = adp
            return adp
        
        @adp.setter
        def adp(self, adp):
            self.adp[...] = adp
        
        @property
        def averageorientations(self):
            """
            Element averageorientations ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1758
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__averageorientations(self._handle)
            if array_handle in self._arrays:
                averageorientations = self._arrays[array_handle]
            else:
                averageorientations = \
                    f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__averageorientations)
                self._arrays[array_handle] = averageorientations
            return averageorientations
        
        @averageorientations.setter
        def averageorientations(self, averageorientations):
            self.averageorientations[...] = averageorientations
        
        @property
        def ci(self):
            """
            Element ci ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1759
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__ci(self._handle)
            if array_handle in self._arrays:
                ci = self._arrays[array_handle]
            else:
                ci = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__ci)
                self._arrays[array_handle] = ci
            return ci
        
        @ci.setter
        def ci(self, ci):
            self.ci[...] = ci
        
        @property
        def eulerangles(self):
            """
            Element eulerangles ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1760
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__eulerangles(self._handle)
            if array_handle in self._arrays:
                eulerangles = self._arrays[array_handle]
            else:
                eulerangles = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__eulerangles)
                self._arrays[array_handle] = eulerangles
            return eulerangles
        
        @eulerangles.setter
        def eulerangles(self, eulerangles):
            self.eulerangles[...] = eulerangles
        
        @property
        def dictionaryeulerangles(self):
            """
            Element dictionaryeulerangles ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1761
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__dictionaryeulerangles(self._handle)
            if array_handle in self._arrays:
                dictionaryeulerangles = self._arrays[array_handle]
            else:
                dictionaryeulerangles = \
                    f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__dictionaryeulerangles)
                self._arrays[array_handle] = dictionaryeulerangles
            return dictionaryeulerangles
        
        @dictionaryeulerangles.setter
        def dictionaryeulerangles(self, dictionaryeulerangles):
            self.dictionaryeulerangles[...] = dictionaryeulerangles
        
        @property
        def fit(self):
            """
            Element fit ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1762
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__fit(self._handle)
            if array_handle in self._arrays:
                fit = self._arrays[array_handle]
            else:
                fit = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__fit)
                self._arrays[array_handle] = fit
            return fit
        
        @fit.setter
        def fit(self, fit):
            self.fit[...] = fit
        
        @property
        def iq(self):
            """
            Element iq ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1763
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__iq(self._handle)
            if array_handle in self._arrays:
                iq = self._arrays[array_handle]
            else:
                iq = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__iq)
                self._arrays[array_handle] = iq
            return iq
        
        @iq.setter
        def iq(self, iq):
            self.iq[...] = iq
        
        @property
        def kam(self):
            """
            Element kam ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1764
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__kam(self._handle)
            if array_handle in self._arrays:
                kam = self._arrays[array_handle]
            else:
                kam = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__kam)
                self._arrays[array_handle] = kam
            return kam
        
        @kam.setter
        def kam(self, kam):
            self.kam[...] = kam
        
        @property
        def osm(self):
            """
            Element osm ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1765
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__osm(self._handle)
            if array_handle in self._arrays:
                osm = self._arrays[array_handle]
            else:
                osm = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__osm)
                self._arrays[array_handle] = osm
            return osm
        
        @osm.setter
        def osm(self, osm):
            self.osm[...] = osm
        
        @property
        def phase(self):
            """
            Element phase ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1766
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__phase(self._handle)
            if array_handle in self._arrays:
                phase = self._arrays[array_handle]
            else:
                phase = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__phase)
                self._arrays[array_handle] = phase
            return phase
        
        @phase.setter
        def phase(self, phase):
            self.phase[...] = phase
        
        @property
        def phi1(self):
            """
            Element phi1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1767
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__phi1(self._handle)
            if array_handle in self._arrays:
                phi1 = self._arrays[array_handle]
            else:
                phi1 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__phi1)
                self._arrays[array_handle] = phi1
            return phi1
        
        @phi1.setter
        def phi1(self, phi1):
            self.phi1[...] = phi1
        
        @property
        def phi(self):
            """
            Element phi ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1768
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__phi(self._handle)
            if array_handle in self._arrays:
                phi = self._arrays[array_handle]
            else:
                phi = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__phi)
                self._arrays[array_handle] = phi
            return phi
        
        @phi.setter
        def phi(self, phi):
            self.phi[...] = phi
        
        @property
        def phi2(self):
            """
            Element phi2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1769
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__phi2(self._handle)
            if array_handle in self._arrays:
                phi2 = self._arrays[array_handle]
            else:
                phi2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__phi2)
                self._arrays[array_handle] = phi2
            return phi2
        
        @phi2.setter
        def phi2(self, phi2):
            self.phi2[...] = phi2
        
        @property
        def semsignal(self):
            """
            Element semsignal ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1770
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__semsignal(self._handle)
            if array_handle in self._arrays:
                semsignal = self._arrays[array_handle]
            else:
                semsignal = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__semsignal)
                self._arrays[array_handle] = semsignal
            return semsignal
        
        @semsignal.setter
        def semsignal(self, semsignal):
            self.semsignal[...] = semsignal
        
        @property
        def topdotproductlist(self):
            """
            Element topdotproductlist ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1771
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__topdotproductlist(self._handle)
            if array_handle in self._arrays:
                topdotproductlist = self._arrays[array_handle]
            else:
                topdotproductlist = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__topdotproductlist)
                self._arrays[array_handle] = topdotproductlist
            return topdotproductlist
        
        @topdotproductlist.setter
        def topdotproductlist(self, topdotproductlist):
            self.topdotproductlist[...] = topdotproductlist
        
        @property
        def topmatchindices(self):
            """
            Element topmatchindices ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1772
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__topmatchindices(self._handle)
            if array_handle in self._arrays:
                topmatchindices = self._arrays[array_handle]
            else:
                topmatchindices = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__topmatchindices)
                self._arrays[array_handle] = topmatchindices
            return topmatchindices
        
        @topmatchindices.setter
        def topmatchindices(self, topmatchindices):
            self.topmatchindices[...] = topmatchindices
        
        @property
        def valid(self):
            """
            Element valid ftype=integer(kind=irg) pytype=int
            
            
            Defined at typedefs.f90 line 1773
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__valid(self._handle)
            if array_handle in self._arrays:
                valid = self._arrays[array_handle]
            else:
                valid = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__valid)
                self._arrays[array_handle] = valid
            return valid
        
        @valid.setter
        def valid(self, valid):
            self.valid[...] = valid
        
        @property
        def xposition(self):
            """
            Element xposition ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1774
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__xposition(self._handle)
            if array_handle in self._arrays:
                xposition = self._arrays[array_handle]
            else:
                xposition = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__xposition)
                self._arrays[array_handle] = xposition
            return xposition
        
        @xposition.setter
        def xposition(self, xposition):
            self.xposition[...] = xposition
        
        @property
        def yposition(self):
            """
            Element yposition ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1775
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__yposition(self._handle)
            if array_handle in self._arrays:
                yposition = self._arrays[array_handle]
            else:
                yposition = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__yposition)
                self._arrays[array_handle] = yposition
            return yposition
        
        @yposition.setter
        def yposition(self, yposition):
            self.yposition[...] = yposition
        
        @property
        def refinedeulerangles(self):
            """
            Element refinedeulerangles ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1776
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__refinedeulerangles(self._handle)
            if array_handle in self._arrays:
                refinedeulerangles = self._arrays[array_handle]
            else:
                refinedeulerangles = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__refinedeulerangles)
                self._arrays[array_handle] = refinedeulerangles
            return refinedeulerangles
        
        @refinedeulerangles.setter
        def refinedeulerangles(self, refinedeulerangles):
            self.refinedeulerangles[...] = refinedeulerangles
        
        @property
        def refineddotproducts(self):
            """
            Element refineddotproducts ftype=real(kind=sgl) pytype=float
            
            
            Defined at typedefs.f90 line 1777
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddidatatype__array__refineddotproducts(self._handle)
            if array_handle in self._arrays:
                refineddotproducts = self._arrays[array_handle]
            else:
                refineddotproducts = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddidatatype__array__refineddotproducts)
                self._arrays[array_handle] = refineddotproducts
            return refineddotproducts
        
        @refineddotproducts.setter
        def refineddotproducts(self, refineddotproducts):
            self.refineddotproducts[...] = refineddotproducts
        
        def __str__(self):
            ret = ['<ebsddidatatype>{\n']
            ret.append('    fzcnt : ')
            ret.append(repr(self.fzcnt))
            ret.append(',\n    nexp : ')
            ret.append(repr(self.nexp))
            ret.append(',\n    pgnum : ')
            ret.append(repr(self.pgnum))
            ret.append(',\n    adp : ')
            ret.append(repr(self.adp))
            ret.append(',\n    averageorientations : ')
            ret.append(repr(self.averageorientations))
            ret.append(',\n    ci : ')
            ret.append(repr(self.ci))
            ret.append(',\n    eulerangles : ')
            ret.append(repr(self.eulerangles))
            ret.append(',\n    dictionaryeulerangles : ')
            ret.append(repr(self.dictionaryeulerangles))
            ret.append(',\n    fit : ')
            ret.append(repr(self.fit))
            ret.append(',\n    iq : ')
            ret.append(repr(self.iq))
            ret.append(',\n    kam : ')
            ret.append(repr(self.kam))
            ret.append(',\n    osm : ')
            ret.append(repr(self.osm))
            ret.append(',\n    phase : ')
            ret.append(repr(self.phase))
            ret.append(',\n    phi1 : ')
            ret.append(repr(self.phi1))
            ret.append(',\n    phi : ')
            ret.append(repr(self.phi))
            ret.append(',\n    phi2 : ')
            ret.append(repr(self.phi2))
            ret.append(',\n    semsignal : ')
            ret.append(repr(self.semsignal))
            ret.append(',\n    topdotproductlist : ')
            ret.append(repr(self.topdotproductlist))
            ret.append(',\n    topmatchindices : ')
            ret.append(repr(self.topmatchindices))
            ret.append(',\n    valid : ')
            ret.append(repr(self.valid))
            ret.append(',\n    xposition : ')
            ret.append(repr(self.xposition))
            ret.append(',\n    yposition : ')
            ret.append(repr(self.yposition))
            ret.append(',\n    refinedeulerangles : ')
            ret.append(repr(self.refinedeulerangles))
            ret.append(',\n    refineddotproducts : ')
            ret.append(repr(self.refineddotproducts))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @property
    def maxpasym(self):
        """
        Element maxpasym ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 76
        
        """
        return _pyEMsoft.f90wrap_typedefs__get__maxpasym()
    
    @property
    def maxdefects(self):
        """
        Element maxdefects ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 79
        
        """
        return _pyEMsoft.f90wrap_typedefs__get__maxdefects()
    
    @property
    def sym_sgname(self):
        """
        Element sym_sgname ftype=character(11) pytype=str
        
        
        Defined at typedefs.f90 line 203
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__sym_sgname(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            sym_sgname = self._arrays[array_handle]
        else:
            sym_sgname = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__sym_sgname)
            self._arrays[array_handle] = sym_sgname
        return sym_sgname
    
    @sym_sgname.setter
    def sym_sgname(self, sym_sgname):
        self.sym_sgname[...] = sym_sgname
    
    @property
    def extendedorthsettings(self):
        """
        Element extendedorthsettings ftype=character(8) pytype=str
        
        
        Defined at typedefs.f90 line 207
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__extendedorthsettings(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            extendedorthsettings = self._arrays[array_handle]
        else:
            extendedorthsettings = \
                f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__extendedorthsettings)
            self._arrays[array_handle] = extendedorthsettings
        return extendedorthsettings
    
    @extendedorthsettings.setter
    def extendedorthsettings(self, extendedorthsettings):
        self.extendedorthsettings[...] = extendedorthsettings
    
    @property
    def extendedhmorthsymbols(self):
        """
        Element extendedhmorthsymbols ftype=character(11) pytype=str
        
        
        Defined at typedefs.f90 line 268
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__extendedhmorthsymbols(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            extendedhmorthsymbols = self._arrays[array_handle]
        else:
            extendedhmorthsymbols = \
                f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__extendedhmorthsymbols)
            self._arrays[array_handle] = extendedhmorthsymbols
        return extendedhmorthsymbols
    
    @extendedhmorthsymbols.setter
    def extendedhmorthsymbols(self, extendedhmorthsymbols):
        self.extendedhmorthsymbols[...] = extendedhmorthsymbols
    
    @property
    def sym_gl(self):
        """
        Element sym_gl ftype=character(40) pytype=str
        
        
        Defined at typedefs.f90 line 350
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__sym_gl(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            sym_gl = self._arrays[array_handle]
        else:
            sym_gl = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__sym_gl)
            self._arrays[array_handle] = sym_gl
        return sym_gl
    
    @sym_gl.setter
    def sym_gl(self, sym_gl):
        self.sym_gl[...] = sym_gl
    
    @property
    def sgxsym(self):
        """
        Element sgxsym ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 353
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__sgxsym(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            sgxsym = self._arrays[array_handle]
        else:
            sgxsym = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__sgxsym)
            self._arrays[array_handle] = sgxsym
        return sgxsym
    
    @sgxsym.setter
    def sgxsym(self, sgxsym):
        self.sgxsym[...] = sgxsym
    
    @property
    def sgpg(self):
        """
        Element sgpg ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 358
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__sgpg(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            sgpg = self._arrays[array_handle]
        else:
            sgpg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__sgpg)
            self._arrays[array_handle] = sgpg
        return sgpg
    
    @sgpg.setter
    def sgpg(self, sgpg):
        self.sgpg[...] = sgpg
    
    @property
    def sgsym(self):
        """
        Element sgsym ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 366
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__sgsym(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            sgsym = self._arrays[array_handle]
        else:
            sgsym = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__sgsym)
            self._arrays[array_handle] = sgsym
        return sgsym
    
    @sgsym.setter
    def sgsym(self, sgsym):
        self.sgsym[...] = sgsym
    
    @property
    def sgsymnum(self):
        """
        Element sgsymnum ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 394
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__sgsymnum(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            sgsymnum = self._arrays[array_handle]
        else:
            sgsymnum = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__sgsymnum)
            self._arrays[array_handle] = sgsymnum
        return sgsymnum
    
    @sgsymnum.setter
    def sgsymnum(self, sgsymnum):
        self.sgsymnum[...] = sgsymnum
    
    @property
    def pgtwd(self):
        """
        Element pgtwd ftype=character(10) pytype=str
        
        
        Defined at typedefs.f90 line 400
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__pgtwd(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            pgtwd = self._arrays[array_handle]
        else:
            pgtwd = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__pgtwd)
            self._arrays[array_handle] = pgtwd
        return pgtwd
    
    @pgtwd.setter
    def pgtwd(self, pgtwd):
        self.pgtwd[...] = pgtwd
    
    @property
    def pgtwdorder(self):
        """
        Element pgtwdorder ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 403
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__pgtwdorder(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            pgtwdorder = self._arrays[array_handle]
        else:
            pgtwdorder = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__pgtwdorder)
            self._arrays[array_handle] = pgtwdorder
        return pgtwdorder
    
    @pgtwdorder.setter
    def pgtwdorder(self, pgtwdorder):
        self.pgtwdorder[...] = pgtwdorder
    
    @property
    def pgtwdinverse(self):
        """
        Element pgtwdinverse ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 412
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__pgtwdinverse(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            pgtwdinverse = self._arrays[array_handle]
        else:
            pgtwdinverse = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__pgtwdinverse)
            self._arrays[array_handle] = pgtwdinverse
        return pgtwdinverse
    
    @pgtwdinverse.setter
    def pgtwdinverse(self, pgtwdinverse):
        self.pgtwdinverse[...] = pgtwdinverse
    
    @property
    def pgthd(self):
        """
        Element pgthd ftype=character(5) pytype=str
        
        
        Defined at typedefs.f90 line 421
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__pgthd(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            pgthd = self._arrays[array_handle]
        else:
            pgthd = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__pgthd)
            self._arrays[array_handle] = pgthd
        return pgthd
    
    @pgthd.setter
    def pgthd(self, pgthd):
        self.pgthd[...] = pgthd
    
    @property
    def pgthdorder(self):
        """
        Element pgthdorder ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 427
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__pgthdorder(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            pgthdorder = self._arrays[array_handle]
        else:
            pgthdorder = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__pgthdorder)
            self._arrays[array_handle] = pgthdorder
        return pgthdorder
    
    @pgthdorder.setter
    def pgthdorder(self, pgthdorder):
        self.pgthdorder[...] = pgthdorder
    
    @property
    def pgrot(self):
        """
        Element pgrot ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 431
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__pgrot(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            pgrot = self._arrays[array_handle]
        else:
            pgrot = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__pgrot)
            self._arrays[array_handle] = pgrot
        return pgrot
    
    @pgrot.setter
    def pgrot(self, pgrot):
        self.pgrot[...] = pgrot
    
    @property
    def pglaue(self):
        """
        Element pglaue ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 435
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__pglaue(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            pglaue = self._arrays[array_handle]
        else:
            pglaue = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__pglaue)
            self._arrays[array_handle] = pglaue
        return pglaue
    
    @pglaue.setter
    def pglaue(self, pglaue):
        self.pglaue[...] = pglaue
    
    @property
    def pglaueinv(self):
        """
        Element pglaueinv ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 439
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__pglaueinv(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            pglaueinv = self._arrays[array_handle]
        else:
            pglaueinv = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__pglaueinv)
            self._arrays[array_handle] = pglaueinv
        return pglaueinv
    
    @pglaueinv.setter
    def pglaueinv(self, pglaueinv):
        self.pglaueinv[...] = pglaueinv
    
    @property
    def pgsamplingtype(self):
        """
        Element pgsamplingtype ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 445
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__pgsamplingtype(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            pgsamplingtype = self._arrays[array_handle]
        else:
            pgsamplingtype = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__pgsamplingtype)
            self._arrays[array_handle] = pgsamplingtype
        return pgsamplingtype
    
    @pgsamplingtype.setter
    def pgsamplingtype(self, pgsamplingtype):
        self.pgsamplingtype[...] = pgsamplingtype
    
    @property
    def dg(self):
        """
        Element dg ftype=character(5) pytype=str
        
        
        Defined at typedefs.f90 line 453
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__dg(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            dg = self._arrays[array_handle]
        else:
            dg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__dg)
            self._arrays[array_handle] = dg
        return dg
    
    @dg.setter
    def dg(self, dg):
        self.dg[...] = dg
    
    @property
    def dgorder(self):
        """
        Element dgorder ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 458
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__dgorder(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            dgorder = self._arrays[array_handle]
        else:
            dgorder = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__dgorder)
            self._arrays[array_handle] = dgorder
        return dgorder
    
    @dgorder.setter
    def dgorder(self, dgorder):
        self.dgorder[...] = dgorder
    
    @property
    def bfpg(self):
        """
        Element bfpg ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 461
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__bfpg(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            bfpg = self._arrays[array_handle]
        else:
            bfpg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__bfpg)
            self._arrays[array_handle] = bfpg
        return bfpg
    
    @bfpg.setter
    def bfpg(self, bfpg):
        self.bfpg[...] = bfpg
    
    @property
    def wppg(self):
        """
        Element wppg ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 464
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__wppg(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            wppg = self._arrays[array_handle]
        else:
            wppg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__wppg)
            self._arrays[array_handle] = wppg
        return wppg
    
    @wppg.setter
    def wppg(self, wppg):
        self.wppg[...] = wppg
    
    @property
    def dfgn(self):
        """
        Element dfgn ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 467
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__dfgn(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            dfgn = self._arrays[array_handle]
        else:
            dfgn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__dfgn)
            self._arrays[array_handle] = dfgn
        return dfgn
    
    @dfgn.setter
    def dfgn(self, dfgn):
        self.dfgn[...] = dfgn
    
    @property
    def dfsp(self):
        """
        Element dfsp ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 470
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__dfsp(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            dfsp = self._arrays[array_handle]
        else:
            dfsp = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__dfsp)
            self._arrays[array_handle] = dfsp
        return dfsp
    
    @dfsp.setter
    def dfsp(self, dfsp):
        self.dfsp[...] = dfsp
    
    @property
    def pdg(self):
        """
        Element pdg ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 474
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__pdg(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            pdg = self._arrays[array_handle]
        else:
            pdg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__pdg)
            self._arrays[array_handle] = pdg
        return pdg
    
    @pdg.setter
    def pdg(self, pdg):
        self.pdg[...] = pdg
    
    @property
    def dgpg(self):
        """
        Element dgpg ftype=logical pytype=bool
        
        
        Defined at typedefs.f90 line 514
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__dgpg(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            dgpg = self._arrays[array_handle]
        else:
            dgpg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__dgpg)
            self._arrays[array_handle] = dgpg
        return dgpg
    
    @dgpg.setter
    def dgpg(self, dgpg):
        self.dgpg[...] = dgpg
    
    @property
    def sht_zrot(self):
        """
        Element sht_zrot ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 528
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__sht_zrot(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            sht_zrot = self._arrays[array_handle]
        else:
            sht_zrot = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__sht_zrot)
            self._arrays[array_handle] = sht_zrot
        return sht_zrot
    
    @sht_zrot.setter
    def sht_zrot(self, sht_zrot):
        self.sht_zrot[...] = sht_zrot
    
    @property
    def sht_mirinv(self):
        """
        Element sht_mirinv ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 540
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__sht_mirinv(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            sht_mirinv = self._arrays[array_handle]
        else:
            sht_mirinv = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__sht_mirinv)
            self._arrays[array_handle] = sht_mirinv
        return sht_mirinv
    
    @sht_mirinv.setter
    def sht_mirinv(self, sht_mirinv):
        self.sht_mirinv[...] = sht_mirinv
    
    @property
    def sym_qsymop(self):
        """
        Element sym_qsymop ftype=real(kind=dbl) pytype=float
        
        
        Defined at typedefs.f90 line 734
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__sym_qsymop(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            sym_qsymop = self._arrays[array_handle]
        else:
            sym_qsymop = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__sym_qsymop)
            self._arrays[array_handle] = sym_qsymop
        return sym_qsymop
    
    @sym_qsymop.setter
    def sym_qsymop(self, sym_qsymop):
        self.sym_qsymop[...] = sym_qsymop
    
    @property
    def tslsymtype(self):
        """
        Element tslsymtype ftype=character(2) pytype=str
        
        
        Defined at typedefs.f90 line 759
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__tslsymtype(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            tslsymtype = self._arrays[array_handle]
        else:
            tslsymtype = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__tslsymtype)
            self._arrays[array_handle] = tslsymtype
        return tslsymtype
    
    @tslsymtype.setter
    def tslsymtype(self, tslsymtype):
        self.tslsymtype[...] = tslsymtype
    
    @property
    def fztypetable(self):
        """
        Element fztypetable ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 819
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__fztypetable(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            fztypetable = self._arrays[array_handle]
        else:
            fztypetable = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__fztypetable)
            self._arrays[array_handle] = fztypetable
        return fztypetable
    
    @fztypetable.setter
    def fztypetable(self, fztypetable):
        self.fztypetable[...] = fztypetable
    
    @property
    def cslnumberdefined(self):
        """
        Element cslnumberdefined ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 1587
        
        """
        return _pyEMsoft.f90wrap_typedefs__get__cslnumberdefined()
    
    @property
    def csllabels(self):
        """
        Element csllabels ftype=character(3) pytype=str
        
        
        Defined at typedefs.f90 line 1592
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__csllabels(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            csllabels = self._arrays[array_handle]
        else:
            csllabels = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__csllabels)
            self._arrays[array_handle] = csllabels
        return csllabels
    
    @csllabels.setter
    def csllabels(self, csllabels):
        self.csllabels[...] = csllabels
    
    @property
    def cslintegers(self):
        """
        Element cslintegers ftype=integer(kind=irg) pytype=int
        
        
        Defined at typedefs.f90 line 1622
        
        """
        array_ndim, array_type, array_shape, array_handle = \
            _pyEMsoft.f90wrap_typedefs__array__cslintegers(f90wrap.runtime.empty_handle)
        if array_handle in self._arrays:
            cslintegers = self._arrays[array_handle]
        else:
            cslintegers = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                    f90wrap.runtime.empty_handle,
                                    _pyEMsoft.f90wrap_typedefs__array__cslintegers)
            self._arrays[array_handle] = cslintegers
        return cslintegers
    
    @cslintegers.setter
    def cslintegers(self, cslintegers):
        self.cslintegers[...] = cslintegers
    
    def __str__(self):
        ret = ['<typedefs>{\n']
        ret.append('    maxpasym : ')
        ret.append(repr(self.maxpasym))
        ret.append(',\n    maxdefects : ')
        ret.append(repr(self.maxdefects))
        ret.append(',\n    sym_sgname : ')
        ret.append(repr(self.sym_sgname))
        ret.append(',\n    extendedorthsettings : ')
        ret.append(repr(self.extendedorthsettings))
        ret.append(',\n    extendedhmorthsymbols : ')
        ret.append(repr(self.extendedhmorthsymbols))
        ret.append(',\n    sym_gl : ')
        ret.append(repr(self.sym_gl))
        ret.append(',\n    sgxsym : ')
        ret.append(repr(self.sgxsym))
        ret.append(',\n    sgpg : ')
        ret.append(repr(self.sgpg))
        ret.append(',\n    sgsym : ')
        ret.append(repr(self.sgsym))
        ret.append(',\n    sgsymnum : ')
        ret.append(repr(self.sgsymnum))
        ret.append(',\n    pgtwd : ')
        ret.append(repr(self.pgtwd))
        ret.append(',\n    pgtwdorder : ')
        ret.append(repr(self.pgtwdorder))
        ret.append(',\n    pgtwdinverse : ')
        ret.append(repr(self.pgtwdinverse))
        ret.append(',\n    pgthd : ')
        ret.append(repr(self.pgthd))
        ret.append(',\n    pgthdorder : ')
        ret.append(repr(self.pgthdorder))
        ret.append(',\n    pgrot : ')
        ret.append(repr(self.pgrot))
        ret.append(',\n    pglaue : ')
        ret.append(repr(self.pglaue))
        ret.append(',\n    pglaueinv : ')
        ret.append(repr(self.pglaueinv))
        ret.append(',\n    pgsamplingtype : ')
        ret.append(repr(self.pgsamplingtype))
        ret.append(',\n    dg : ')
        ret.append(repr(self.dg))
        ret.append(',\n    dgorder : ')
        ret.append(repr(self.dgorder))
        ret.append(',\n    bfpg : ')
        ret.append(repr(self.bfpg))
        ret.append(',\n    wppg : ')
        ret.append(repr(self.wppg))
        ret.append(',\n    dfgn : ')
        ret.append(repr(self.dfgn))
        ret.append(',\n    dfsp : ')
        ret.append(repr(self.dfsp))
        ret.append(',\n    pdg : ')
        ret.append(repr(self.pdg))
        ret.append(',\n    dgpg : ')
        ret.append(repr(self.dgpg))
        ret.append(',\n    sht_zrot : ')
        ret.append(repr(self.sht_zrot))
        ret.append(',\n    sht_mirinv : ')
        ret.append(repr(self.sht_mirinv))
        ret.append(',\n    sym_qsymop : ')
        ret.append(repr(self.sym_qsymop))
        ret.append(',\n    tslsymtype : ')
        ret.append(repr(self.tslsymtype))
        ret.append(',\n    fztypetable : ')
        ret.append(repr(self.fztypetable))
        ret.append(',\n    cslnumberdefined : ')
        ret.append(repr(self.cslnumberdefined))
        ret.append(',\n    csllabels : ')
        ret.append(repr(self.csllabels))
        ret.append(',\n    cslintegers : ')
        ret.append(repr(self.cslintegers))
        ret.append('}')
        return ''.join(ret)
    
    _dt_array_initialisers = []
    

typedefs = Typedefs()

class Crystal(f90wrap.runtime.FortranModule):
    """
    Module crystal
    
    
    Defined at crystal.f90 lines 52-1868
    
    """
    @staticmethod
    def getemsoftxtalsystem(isg):
        """
        xs = getemsoftxtalsystem(isg)
        
        
        Defined at crystal.f90 lines 91-110
        
        Parameters
        ----------
        isg : int
        
        Returns
        -------
        xs : int
        
        """
        xs = _pyEMsoft.f90wrap_getemsoftxtalsystem(isg=isg)
        return xs
    
    @staticmethod
    def resetcell(self):
        """
        resetcell(self)
        
        
        Defined at crystal.f90 lines 128-171
        
        Parameters
        ----------
        cell : Unitcell
        
        """
        _pyEMsoft.f90wrap_resetcell(cell=self._handle)
    
    @staticmethod
    def calcmatrices(self):
        """
        calcmatrices(self)
        
        
        Defined at crystal.f90 lines 191-275
        
        Parameters
        ----------
        cell : Unitcell
        
        """
        _pyEMsoft.f90wrap_calcmatrices(cell=self._handle)
    
    @staticmethod
    def transcoor(self, t, d, talpha, space, direction):
        """
        transcoor(self, t, d, talpha, space, direction)
        
        
        Defined at crystal.f90 lines 458-486
        
        Parameters
        ----------
        cell : Unitcell
        t : float array
        d : float array
        talpha : float array
        space : str
        direction : str
        
        """
        _pyEMsoft.f90wrap_transcoor(cell=self._handle, t=t, d=d, talpha=talpha, \
            space=space, direction=direction)
    
    @staticmethod
    def milbrav(p, q, d):
        """
        milbrav(p, q, d)
        
        
        Defined at crystal.f90 lines 995-1036
        
        Parameters
        ----------
        p : int array
        q : int array
        d : str
        
        """
        _pyEMsoft.f90wrap_milbrav(p=p, q=q, d=d)
    
    @staticmethod
    def getlatparm(self):
        """
        getlatparm(self)
        
        
        Defined at crystal.f90 lines 1066-1182
        
        Parameters
        ----------
        cell : Unitcell
        
        """
        _pyEMsoft.f90wrap_getlatparm(cell=self._handle)
    
    @staticmethod
    def getasympos(self):
        """
        getasympos(self)
        
        
        Defined at crystal.f90 lines 1203-1249
        
        Parameters
        ----------
        cell : Unitcell
        
        """
        _pyEMsoft.f90wrap_getasympos(cell=self._handle)
    
    @staticmethod
    def displayelements():
        """
        displayelements()
        
        
        Defined at crystal.f90 lines 1267-1292
        
        
        """
        _pyEMsoft.f90wrap_displayelements()
    
    @staticmethod
    def extractposition(list, pt):
        """
        extractposition(list, pt)
        
        
        Defined at crystal.f90 lines 1315-1426
        
        Parameters
        ----------
        list : str array
        pt : float array
        
        """
        _pyEMsoft.f90wrap_extractposition(list=list, pt=pt)
    
    @staticmethod
    def calcdensity(self):
        """
        dens, avz, ava = calcdensity(self)
        
        
        Defined at crystal.f90 lines 1452-1484
        
        Parameters
        ----------
        cell : Unitcell
        
        Returns
        -------
        dens : float
        avz : float
        ava : float
        
        """
        dens, avz, ava = _pyEMsoft.f90wrap_calcdensity(cell=self._handle)
        return dens, avz, ava
    
    @staticmethod
    def getor():
        """
        orel = getor()
        
        
        Defined at crystal.f90 lines 1509-1537
        
        
        Returns
        -------
        orel : Orientation
        
        """
        orel = _pyEMsoft.f90wrap_getor()
        orel = f90wrap.runtime.lookup_class("pyEMsoft.orientation").from_handle(orel, \
            alloc=True)
        return orel
    
    @staticmethod
    def computeor(self, cella, cellb, direction):
        """
        tt = computeor(self, cella, cellb, direction)
        
        
        Defined at crystal.f90 lines 1557-1612
        
        Parameters
        ----------
        orel : Orientation
        cella : Unitcell
        cellb : Unitcell
        direction : str
        
        Returns
        -------
        tt : float array
        
        =============NEW==================
        """
        tt = _pyEMsoft.f90wrap_computeor(orel=self._handle, cella=cella._handle, \
            cellb=cellb._handle, direction=direction)
        return tt
    
    @staticmethod
    def calcsgholz(self, holzdata, gg, kt, lambda_):
        """
        exer = calcsgholz(self, holzdata, gg, kt, lambda_)
        
        
        Defined at crystal.f90 lines 1634-1661
        
        Parameters
        ----------
        cell : Unitcell
        holzdata : Holzentries
        gg : float array
        kt : float array
        lambda_ : float
        
        Returns
        -------
        exer : float
        
        """
        exer = _pyEMsoft.f90wrap_calcsgholz(cell=self._handle, \
            holzdata=holzdata._handle, gg=gg, kt=kt, lambda_=lambda_)
        return exer
    
    @staticmethod
    def getholzgeometry(self, holzdata, g1, g2, uvw, fn):
        """
        getholzgeometry(self, holzdata, g1, g2, uvw, fn)
        
        
        Defined at crystal.f90 lines 1684-1764
        
        Parameters
        ----------
        cell : Unitcell
        holzdata : Holzentries
        g1 : float array
        g2 : float array
        uvw : int array
        fn : int array
        
        """
        _pyEMsoft.f90wrap_getholzgeometry(cell=self._handle, holzdata=holzdata._handle, \
            g1=g1, g2=g2, uvw=uvw, fn=fn)
    
    @staticmethod
    def getholzcoordinates(self, holzdata, gg, kt, lambda_):
        """
        pxy = getholzcoordinates(self, holzdata, gg, kt, lambda_)
        
        
        Defined at crystal.f90 lines 1786-1814
        
        Parameters
        ----------
        cell : Unitcell
        holzdata : Holzentries
        gg : float array
        kt : float array
        lambda_ : float
        
        Returns
        -------
        pxy : float array
        
        """
        pxy = _pyEMsoft.f90wrap_getholzcoordinates(cell=self._handle, \
            holzdata=holzdata._handle, gg=gg, kt=kt, lambda_=lambda_)
        return pxy
    
    @staticmethod
    def convert_kgs_to_substrate(self, cells, kg, ttinv, fn):
        """
        kgs = convert_kgs_to_substrate(self, cells, kg, ttinv, fn)
        
        
        Defined at crystal.f90 lines 1836-1868
        
        Parameters
        ----------
        cell : Unitcell
        cells : Unitcell
        kg : float array
        ttinv : float array
        fn : float array
        
        Returns
        -------
        kgs : float array
        
        """
        kgs = _pyEMsoft.f90wrap_convert_kgs_to_substrate(cell=self._handle, \
            cells=cells._handle, kg=kg, ttinv=ttinv, fn=fn)
        return kgs
    
    @staticmethod
    def _transspacesingle(self, t, d, inspace, outspace):
        """
        _transspacesingle(self, t, d, inspace, outspace)
        
        
        Defined at crystal.f90 lines 375-423
        
        Parameters
        ----------
        cell : Unitcell
        t : float array
        d : float array
        inspace : str
        outspace : str
        
        """
        _pyEMsoft.f90wrap_transspacesingle(cell=self._handle, t=t, d=d, inspace=inspace, \
            outspace=outspace)
    
    @staticmethod
    def _transspacedouble(self, t, d, inspace, outspace):
        """
        _transspacedouble(self, t, d, inspace, outspace)
        
        
        Defined at crystal.f90 lines 300-348
        
        Parameters
        ----------
        cell : Unitcell
        t : float array
        d : float array
        inspace : str
        outspace : str
        
        """
        _pyEMsoft.f90wrap_transspacedouble(cell=self._handle, t=t, d=d, inspace=inspace, \
            outspace=outspace)
    
    @staticmethod
    def transspace(*args, **kwargs):
        """
        transspace(*args, **kwargs)
        
        
        Defined at crystal.f90 lines 56-58
        
        Overloaded interface containing the following procedures:
          _transspacesingle
          _transspacedouble
        
        """
        for proc in [Crystal._transspacesingle, Crystal._transspacedouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _calcdotsingle(self, p, q, space):
        """
        cdot = _calcdotsingle(self, p, q, space)
        
        
        Defined at crystal.f90 lines 511-522
        
        Parameters
        ----------
        cell : Unitcell
        p : float array
        q : float array
        space : str
        
        Returns
        -------
        cdot : float
        
        """
        cdot = _pyEMsoft.f90wrap_calcdotsingle(cell=self._handle, p=p, q=q, space=space)
        return cdot
    
    @staticmethod
    def _calcdotdouble(self, p, q, space):
        """
        cdot = _calcdotdouble(self, p, q, space)
        
        
        Defined at crystal.f90 lines 547-558
        
        Parameters
        ----------
        cell : Unitcell
        p : float array
        q : float array
        space : str
        
        Returns
        -------
        cdot : float
        
        """
        cdot = _pyEMsoft.f90wrap_calcdotdouble(cell=self._handle, p=p, q=q, space=space)
        return cdot
    
    @staticmethod
    def calcdot(*args, **kwargs):
        """
        calcdot(*args, **kwargs)
        
        
        Defined at crystal.f90 lines 60-62
        
        Overloaded interface containing the following procedures:
          _calcdotsingle
          _calcdotdouble
        
        """
        for proc in [Crystal._calcdotsingle, Crystal._calcdotdouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _normvecsingle(self, p, space):
        """
        _normvecsingle(self, p, space)
        
        
        Defined at crystal.f90 lines 585-598
        
        Parameters
        ----------
        cell : Unitcell
        p : float array
        space : str
        
        """
        _pyEMsoft.f90wrap_normvecsingle(cell=self._handle, p=p, space=space)
    
    @staticmethod
    def _normvecdouble(self, p, space):
        """
        _normvecdouble(self, p, space)
        
        
        Defined at crystal.f90 lines 622-635
        
        Parameters
        ----------
        cell : Unitcell
        p : float array
        space : str
        
        """
        _pyEMsoft.f90wrap_normvecdouble(cell=self._handle, p=p, space=space)
    
    @staticmethod
    def normvec(*args, **kwargs):
        """
        normvec(*args, **kwargs)
        
        
        Defined at crystal.f90 lines 64-66
        
        Overloaded interface containing the following procedures:
          _normvecsingle
          _normvecdouble
        
        """
        for proc in [Crystal._normvecsingle, Crystal._normvecdouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _calclengthsingle(self, p, space):
        """
        x = _calclengthsingle(self, p, space)
        
        
        Defined at crystal.f90 lines 659-666
        
        Parameters
        ----------
        cell : Unitcell
        p : float array
        space : str
        
        Returns
        -------
        x : float
        
        """
        x = _pyEMsoft.f90wrap_calclengthsingle(cell=self._handle, p=p, space=space)
        return x
    
    @staticmethod
    def _calclengthdouble(self, p, space):
        """
        x = _calclengthdouble(self, p, space)
        
        
        Defined at crystal.f90 lines 690-697
        
        Parameters
        ----------
        cell : Unitcell
        p : float array
        space : str
        
        Returns
        -------
        x : float
        
        """
        x = _pyEMsoft.f90wrap_calclengthdouble(cell=self._handle, p=p, space=space)
        return x
    
    @staticmethod
    def calclength(*args, **kwargs):
        """
        calclength(*args, **kwargs)
        
        
        Defined at crystal.f90 lines 68-70
        
        Overloaded interface containing the following procedures:
          _calclengthsingle
          _calclengthdouble
        
        """
        for proc in [Crystal._calclengthsingle, Crystal._calclengthdouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _calcanglesingle(self, p, q, space):
        """
        a = _calcanglesingle(self, p, q, space)
        
        
        Defined at crystal.f90 lines 722-750
        
        Parameters
        ----------
        cell : Unitcell
        p : float array
        q : float array
        space : str
        
        Returns
        -------
        a : float
        
        """
        a = _pyEMsoft.f90wrap_calcanglesingle(cell=self._handle, p=p, q=q, space=space)
        return a
    
    @staticmethod
    def _calcangledouble(self, p, q, space):
        """
        a = _calcangledouble(self, p, q, space)
        
        
        Defined at crystal.f90 lines 775-803
        
        Parameters
        ----------
        cell : Unitcell
        p : float array
        q : float array
        space : str
        
        Returns
        -------
        a : float
        
        """
        a = _pyEMsoft.f90wrap_calcangledouble(cell=self._handle, p=p, q=q, space=space)
        return a
    
    @staticmethod
    def calcangle(*args, **kwargs):
        """
        calcangle(*args, **kwargs)
        
        
        Defined at crystal.f90 lines 72-74
        
        Overloaded interface containing the following procedures:
          _calcanglesingle
          _calcangledouble
        
        """
        for proc in [Crystal._calcanglesingle, Crystal._calcangledouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _calccrosssingle(self, p, q, r, inspace, outspace, iv):
        """
        _calccrosssingle(self, p, q, r, inspace, outspace, iv)
        
        
        Defined at crystal.f90 lines 837-888
        
        Parameters
        ----------
        cell : Unitcell
        p : float array
        q : float array
        r : float array
        inspace : str
        outspace : str
        iv : int
        
        """
        _pyEMsoft.f90wrap_calccrosssingle(cell=self._handle, p=p, q=q, r=r, \
            inspace=inspace, outspace=outspace, iv=iv)
    
    @staticmethod
    def _calccrossdouble(self, p, q, r, inspace, outspace, iv):
        """
        _calccrossdouble(self, p, q, r, inspace, outspace, iv)
        
        
        Defined at crystal.f90 lines 921-971
        
        Parameters
        ----------
        cell : Unitcell
        p : float array
        q : float array
        r : float array
        inspace : str
        outspace : str
        iv : int
        
        """
        _pyEMsoft.f90wrap_calccrossdouble(cell=self._handle, p=p, q=q, r=r, \
            inspace=inspace, outspace=outspace, iv=iv)
    
    @staticmethod
    def calccross(*args, **kwargs):
        """
        calccross(*args, **kwargs)
        
        
        Defined at crystal.f90 lines 76-78
        
        Overloaded interface containing the following procedures:
          _calccrosssingle
          _calccrossdouble
        
        """
        for proc in [Crystal._calccrosssingle, Crystal._calccrossdouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    _dt_array_initialisers = []
    

crystal = Crystal()

class Symmetry(f90wrap.runtime.FortranModule):
    """
    Module symmetry
    
    
    Defined at symmetry.f90 lines 49-2703
    
    """
    @staticmethod
    def sym_fillgen(self, t, isgn):
        """
        sym_fillgen(self, t, isgn)
        
        
        Defined at symmetry.f90 lines 73-119
        
        Parameters
        ----------
        cell : Unitcell
        t : str array
        isgn : int
        
        """
        _pyEMsoft.f90wrap_sym_fillgen(cell=self._handle, t=t, isgn=isgn)
    
    @staticmethod
    def makegenerators(self):
        """
        makegenerators(self)
        
        
        Defined at symmetry.f90 lines 140-225
        
        Parameters
        ----------
        cell : Unitcell
        
        """
        _pyEMsoft.f90wrap_makegenerators(cell=self._handle)
    
    @staticmethod
    def matrixmult(self, k1, k2):
        """
        matrixmult(self, k1, k2)
        
        
        Defined at symmetry.f90 lines 251-282
        
        Parameters
        ----------
        cell : Unitcell
        k1 : int
        k2 : int
        
        """
        _pyEMsoft.f90wrap_matrixmult(cell=self._handle, k1=k1, k2=k2)
    
    @staticmethod
    def isitnew(self, nsym):
        """
        isitnew = isitnew(self, nsym)
        
        
        Defined at symmetry.f90 lines 304-325
        
        Parameters
        ----------
        cell : Unitcell
        nsym : int
        
        Returns
        -------
        isitnew : bool
        
        """
        isitnew = _pyEMsoft.f90wrap_isitnew(cell=self._handle, nsym=nsym)
        return isitnew
    
    @staticmethod
    def generatesymmetry(self, dopg):
        """
        generatesymmetry(self, dopg)
        
        
        Defined at symmetry.f90 lines 349-421
        
        Parameters
        ----------
        cell : Unitcell
        dopg : bool
        
        """
        _pyEMsoft.f90wrap_generatesymmetry(cell=self._handle, dopg=dopg)
    
    @staticmethod
    def calcfamily(self, ind, space, itmp):
        """
        num = calcfamily(self, ind, space, itmp)
        
        
        Defined at symmetry.f90 lines 444-487
        
        Parameters
        ----------
        cell : Unitcell
        ind : int array
        space : str
        itmp : int array
        
        Returns
        -------
        num : int
        
        """
        num = _pyEMsoft.f90wrap_calcfamily(cell=self._handle, ind=ind, space=space, \
            itmp=itmp)
        return num
    
    @staticmethod
    def calcorbit(self, m, ctmp):
        """
        n = calcorbit(self, m, ctmp)
        
        
        Defined at symmetry.f90 lines 511-570
        
        Parameters
        ----------
        cell : Unitcell
        m : int
        ctmp : float array
        
        Returns
        -------
        n : int
        
        """
        n = _pyEMsoft.f90wrap_calcorbit(cell=self._handle, m=m, ctmp=ctmp)
        return n
    
    @staticmethod
    def calcequivpos(self, site, n, ctmp):
        """
        calcequivpos(self, site, n, ctmp)
        
        
        Defined at symmetry.f90 lines 587-644
        
        Parameters
        ----------
        cell : Unitcell
        site : float array
        n : int
        ctmp : float array
        
        """
        _pyEMsoft.f90wrap_calcequivpos(cell=self._handle, site=site, n=n, ctmp=ctmp)
    
    @staticmethod
    def calcstar(self, kk, stmp, space):
        """
        n = calcstar(self, kk, stmp, space)
        
        
        Defined at symmetry.f90 lines 671-714
        
        Parameters
        ----------
        cell : Unitcell
        kk : float array
        stmp : float array
        space : str
        
        Returns
        -------
        n : int
        
        """
        n = _pyEMsoft.f90wrap_calcstar(cell=self._handle, kk=kk, stmp=stmp, space=space)
        return n
    
    @staticmethod
    def calcpositions(self, switch_bn):
        """
        calcpositions(self, switch_bn)
        
        
        Defined at symmetry.f90 lines 738-816
        
        Parameters
        ----------
        cell : Unitcell
        switch_bn : str
        
        """
        _pyEMsoft.f90wrap_calcpositions(cell=self._handle, switch_bn=switch_bn)
    
    @staticmethod
    def getsetting(self):
        """
        iset = getsetting(self)
        
        
        Defined at symmetry.f90 lines 840-884
        
        Parameters
        ----------
        cell : Unitcell
        
        Returns
        -------
        iset : int
        
        """
        iset = _pyEMsoft.f90wrap_getsetting(cell=self._handle)
        return iset
    
    @staticmethod
    def listpointgroups():
        """
        listpointgroups()
        
        
        Defined at symmetry.f90 lines 896-910
        
        
        """
        _pyEMsoft.f90wrap_listpointgroups()
    
    @staticmethod
    def getspacegroup(self):
        """
        getspacegroup(self)
        
        
        Defined at symmetry.f90 lines 947-1014
        
        Parameters
        ----------
        cell : Unitcell
        
        """
        _pyEMsoft.f90wrap_getspacegroup(cell=self._handle)
    
    @staticmethod
    def getorder(k, il, num, itmp):
        """
        jcnt = getorder(k, il, num, itmp)
        
        
        Defined at symmetry.f90 lines 1039-1057
        
        Parameters
        ----------
        k : float array
        il : int array
        num : int
        itmp : int array
        
        Returns
        -------
        jcnt : int
        
        """
        jcnt = _pyEMsoft.f90wrap_getorder(k=k, il=il, num=num, itmp=itmp)
        return jcnt
    
    @staticmethod
    def shortestg(self, k, gone, gtwo, isym):
        """
        shortestg(self, k, gone, gtwo, isym)
        
        
        Defined at symmetry.f90 lines 1109-1269
        
        Parameters
        ----------
        cell : Unitcell
        k : int array
        gone : int array
        gtwo : int array
        isym : int
        
        """
        _pyEMsoft.f90wrap_shortestg(cell=self._handle, k=k, gone=gone, gtwo=gtwo, \
            isym=isym)
    
    @staticmethod
    def isgallowed(self, g):
        """
        isgallowed = isgallowed(self, g)
        
        
        Defined at symmetry.f90 lines 1292-1313
        
        Parameters
        ----------
        cell : Unitcell
        g : int array
        
        Returns
        -------
        isgallowed : bool
        
        """
        isgallowed = _pyEMsoft.f90wrap_isgallowed(cell=self._handle, g=g)
        return isgallowed
    
    @staticmethod
    def bfsymmetry(self, uvw, j):
        """
        isym, ir = bfsymmetry(self, uvw, j)
        
        
        Defined at symmetry.f90 lines 1349-1370
        
        Parameters
        ----------
        cell : Unitcell
        uvw : int array
        j : int
        
        Returns
        -------
        isym : int
        ir : int
        
        """
        isym, ir = _pyEMsoft.f90wrap_bfsymmetry(cell=self._handle, uvw=uvw, j=j)
        return isym, ir
    
    @staticmethod
    def getpatternsymmetry(self, uvw, pgnum, verbose=None):
        """
        dgn = getpatternsymmetry(self, uvw, pgnum[, verbose])
        
        
        Defined at symmetry.f90 lines 1389-1418
        
        Parameters
        ----------
        cell : Unitcell
        uvw : int array
        pgnum : int
        verbose : bool
        
        Returns
        -------
        dgn : int
        
        """
        dgn = _pyEMsoft.f90wrap_getpatternsymmetry(cell=self._handle, uvw=uvw, \
            pgnum=pgnum, verbose=verbose)
        return dgn
    
    @staticmethod
    def getdiffractiongroup(self, uvw, pgn):
        """
        dgn = getdiffractiongroup(self, uvw, pgn)
        
        
        Defined at symmetry.f90 lines 1448-1972
        
        Parameters
        ----------
        cell : Unitcell
        uvw : int array
        pgn : int
        
        Returns
        -------
        dgn : int
        
        ------------
        """
        dgn = _pyEMsoft.f90wrap_getdiffractiongroup(cell=self._handle, uvw=uvw, pgn=pgn)
        return dgn
    
    @staticmethod
    def generate2dsymmetry(tdpg, pgn):
        """
        generate2dsymmetry(tdpg, pgn)
        
        
        Defined at symmetry.f90 lines 1991-2099
        
        Parameters
        ----------
        tdpg : Symdata2D
        pgn : int
        
        ------------
        """
        _pyEMsoft.f90wrap_generate2dsymmetry(tdpg=tdpg._handle, pgn=pgn)
    
    @staticmethod
    def checkpatternsymmetry(self, k, ga, isym):
        """
        thetam = checkpatternsymmetry(self, k, ga, isym)
        
        
        Defined at symmetry.f90 lines 2128-2167
        
        Parameters
        ----------
        cell : Unitcell
        k : int array
        ga : int array
        isym : int
        
        Returns
        -------
        thetam : float
        
        """
        thetam = _pyEMsoft.f90wrap_checkpatternsymmetry(cell=self._handle, k=k, ga=ga, \
            isym=isym)
        return thetam
    
    @staticmethod
    def gethexvsrho(self, pgnum):
        """
        stnum = gethexvsrho(self, pgnum)
        
        
        Defined at symmetry.f90 lines 2185-2231
        
        Parameters
        ----------
        cell : Unitcell
        pgnum : int
        
        Returns
        -------
        stnum : int
        
        """
        stnum = _pyEMsoft.f90wrap_gethexvsrho(cell=self._handle, pgnum=pgnum)
        return stnum
    
    @staticmethod
    def sym_getmultiplicity(t):
        """
        stmult = sym_getmultiplicity(t)
        
        
        Defined at symmetry.f90 lines 2245-2271
        
        Parameters
        ----------
        t : str
        
        Returns
        -------
        stmult : str
        
        """
        stmult = _pyEMsoft.f90wrap_sym_getmultiplicity(t=t)
        return stmult
    
    @staticmethod
    def sym_getposition(t):
        """
        st = sym_getposition(t)
        
        
        Defined at symmetry.f90 lines 2285-2329
        
        Parameters
        ----------
        t : str
        
        Returns
        -------
        st : str
        
        """
        st = _pyEMsoft.f90wrap_sym_getposition(t=t)
        return st
    
    @staticmethod
    def interpretwyckoffletter(t, x, y, z):
        """
        st = interpretwyckoffletter(t, x, y, z)
        
        
        Defined at symmetry.f90 lines 2344-2380
        
        Parameters
        ----------
        t : str
        x : float
        y : float
        z : float
        
        Returns
        -------
        st : float
        
        """
        st = _pyEMsoft.f90wrap_interpretwyckoffletter(t=t, x=x, y=y, z=z)
        return st
    
    @staticmethod
    def sym_getwpstring(sgnum, wpstring):
        """
        sym_getwpstring(sgnum, wpstring)
        
        
        Defined at symmetry.f90 lines 2395-2424
        
        Parameters
        ----------
        sgnum : int
        wpstring : str
        
        """
        _pyEMsoft.f90wrap_sym_getwpstring(sgnum=sgnum, wpstring=wpstring)
    
    @staticmethod
    def sym_printwyckoffpositions(sgnum, wpstring, wyckofflist=None):
        """
        sym_printwyckoffpositions(sgnum, wpstring[, wyckofflist])
        
        
        Defined at symmetry.f90 lines 2440-2499
        
        Parameters
        ----------
        sgnum : int
        wpstring : str
        wyckofflist : str array
        
        """
        _pyEMsoft.f90wrap_sym_printwyckoffpositions(sgnum=sgnum, wpstring=wpstring, \
            wyckofflist=wyckofflist)
    
    @staticmethod
    def getasymposwyckoff(self):
        """
        getasymposwyckoff(self)
        
        
        Defined at symmetry.f90 lines 2516-2590
        
        Parameters
        ----------
        cell : Unitcell
        
        """
        _pyEMsoft.f90wrap_getasymposwyckoff(cell=self._handle)
    
    @staticmethod
    def extractwyckoffposition(wyckoffpos, pt):
        """
        extractwyckoffposition(wyckoffpos, pt)
        
        
        Defined at symmetry.f90 lines 2608-2659
        
        Parameters
        ----------
        wyckoffpos : str
        pt : float array
        
        """
        _pyEMsoft.f90wrap_extractwyckoffposition(wyckoffpos=wyckoffpos, pt=pt)
    
    @staticmethod
    def getlauegroupnumber(sgnum):
        """
        lgn = getlauegroupnumber(sgnum)
        
        
        Defined at symmetry.f90 lines 2673-2703
        
        Parameters
        ----------
        sgnum : int
        
        Returns
        -------
        lgn : int
        
        """
        lgn = _pyEMsoft.f90wrap_getlauegroupnumber(sgnum=sgnum)
        return lgn
    
    _dt_array_initialisers = []
    

symmetry = Symmetry()

class Files(f90wrap.runtime.FortranModule):
    """
    Module files
    
    
    Defined at files.f90 lines 49-568
    
    """
    @staticmethod
    def dumpxtalinfo(self):
        """
        dumpxtalinfo(self)
        
        
        Defined at files.f90 lines 73-135
        
        Parameters
        ----------
        cell : Unitcell
        
        """
        _pyEMsoft.f90wrap_dumpxtalinfo(cell=self._handle)
    
    @staticmethod
    def convertwiki2pdf(nt, wikilist):
        """
        convertwiki2pdf(nt, wikilist)
        
        
        Defined at files.f90 lines 150-234
        
        Parameters
        ----------
        nt : int
        wikilist : int array
        
        """
        _pyEMsoft.f90wrap_convertwiki2pdf(nt=nt, wikilist=wikilist)
    
    @staticmethod
    def copytemplatefiles(nt, templatelist, json=None):
        """
        copytemplatefiles(nt, templatelist[, json])
        
        
        Defined at files.f90 lines 260-361
        
        Parameters
        ----------
        nt : int
        templatelist : int array
        json : bool
        
        """
        _pyEMsoft.f90wrap_copytemplatefiles(nt=nt, templatelist=templatelist, json=json)
    
    @staticmethod
    def _interpret_program_arguments_with_nml(nmldefault, numt, templatelist, \
        progname):
        """
        _interpret_program_arguments_with_nml(nmldefault, numt, templatelist, progname)
        
        
        Defined at files.f90 lines 387-474
        
        Parameters
        ----------
        nmldefault : str
        numt : int
        templatelist : int array
        progname : str
        
        """
        _pyEMsoft.f90wrap_interpret_program_arguments_with_nml(nmldefault=nmldefault, \
            numt=numt, templatelist=templatelist, progname=progname)
    
    @staticmethod
    def _interpret_program_arguments_no_nml(numt, templatelist, progname, \
        flagset=None):
        """
        _interpret_program_arguments_no_nml(numt, templatelist, progname[, flagset])
        
        
        Defined at files.f90 lines 497-568
        
        Parameters
        ----------
        numt : int
        templatelist : int array
        progname : str
        flagset : str
        
        """
        _pyEMsoft.f90wrap_interpret_program_arguments_no_nml(numt=numt, \
            templatelist=templatelist, progname=progname, flagset=flagset)
    
    @staticmethod
    def interpret_program_arguments(*args, **kwargs):
        """
        interpret_program_arguments(*args, **kwargs)
        
        
        Defined at files.f90 lines 52-54
        
        Overloaded interface containing the following procedures:
          _interpret_program_arguments_with_nml
          _interpret_program_arguments_no_nml
        
        """
        for proc in [Files._interpret_program_arguments_with_nml, \
            Files._interpret_program_arguments_no_nml]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    _dt_array_initialisers = []
    

files = Files()

class Others(f90wrap.runtime.FortranModule):
    """
    Module others
    
    
    Defined at others.f90 lines 49-1151
    
    """
    @staticmethod
    def fscatt(g, ul, z, symbol, accvlt, absflg, accflg, dwflg):
        """
        fscatt = fscatt(g, ul, z, symbol, accvlt, absflg, accflg, dwflg)
        
        
        Defined at others.f90 lines 67-161
        
        Parameters
        ----------
        g : float
        ul : float
        z : int
        symbol : str
        accvlt : float
        absflg : int
        accflg : bool
        dwflg : bool
        
        Returns
        -------
        fscatt : complex
        
        """
        fscatt = _pyEMsoft.f90wrap_fscatt(g=g, ul=ul, z=z, symbol=symbol, accvlt=accvlt, \
            absflg=absflg, accflg=accflg, dwflg=dwflg)
        return fscatt
    
    @staticmethod
    def weko(a, b, s):
        """
        weko = weko(a, b, s)
        
        
        Defined at others.f90 lines 164-183
        
        Parameters
        ----------
        a : float array
        b : float array
        s : float
        
        Returns
        -------
        weko : float
        
        """
        weko = _pyEMsoft.f90wrap_weko(a=a, b=b, s=s)
        return weko
    
    @staticmethod
    def fphon(g, ul, a, b):
        """
        fphon = fphon(g, ul, a, b)
        
        
        Defined at others.f90 lines 186-205
        
        Parameters
        ----------
        g : float
        ul : float
        a : float array
        b : float array
        
        Returns
        -------
        fphon : float
        
        """
        fphon = _pyEMsoft.f90wrap_fphon(g=g, ul=ul, a=a, b=b)
        return fphon
    
    @staticmethod
    def ri1(bi, bj, g):
        """
        ri1 = ri1(bi, bj, g)
        
        
        Defined at others.f90 lines 208-239
        
        Parameters
        ----------
        bi : float
        bj : float
        g : float
        
        Returns
        -------
        ri1 : float
        
        """
        ri1 = _pyEMsoft.f90wrap_ri1(bi=bi, bj=bj, g=g)
        return ri1
    
    @staticmethod
    def ri2(bi, bj, g, u):
        """
        ri2 = ri2(bi, bj, g, u)
        
        
        Defined at others.f90 lines 242-292
        
        Parameters
        ----------
        bi : float
        bj : float
        g : float
        u : float
        
        Returns
        -------
        ri2 : float
        
        """
        ri2 = _pyEMsoft.f90wrap_ri2(bi=bi, bj=bj, g=g, u=u)
        return ri2
    
    @staticmethod
    def rih1(x1, x2, x3):
        """
        rih1 = rih1(x1, x2, x3)
        
        
        Defined at others.f90 lines 295-311
        
        Parameters
        ----------
        x1 : float
        x2 : float
        x3 : float
        
        Returns
        -------
        rih1 : float
        
        """
        rih1 = _pyEMsoft.f90wrap_rih1(x1=x1, x2=x2, x3=x3)
        return rih1
    
    @staticmethod
    def rih2(x):
        """
        rih2 = rih2(x)
        
        
        Defined at others.f90 lines 314-326
        
        Parameters
        ----------
        x : float
        
        Returns
        -------
        rih2 : float
        
        """
        rih2 = _pyEMsoft.f90wrap_rih2(x=x)
        return rih2
    
    @staticmethod
    def rih3(x):
        """
        rih3 = rih3(x)
        
        
        Defined at others.f90 lines 329-337
        
        Parameters
        ----------
        x : float
        
        Returns
        -------
        rih3 : float
        
        """
        rih3 = _pyEMsoft.f90wrap_rih3(x=x)
        return rih3
    
    @staticmethod
    def ei(x):
        """
        ei = ei(x)
        
        
        Defined at others.f90 lines 340-370
        
        Parameters
        ----------
        x : float
        
        Returns
        -------
        ei : float
        
        """
        ei = _pyEMsoft.f90wrap_ei(x=x)
        return ei
    
    @staticmethod
    def getwk(z, symbol, a, b):
        """
        getwk(z, symbol, a, b)
        
        
        Defined at others.f90 lines 373-592
        
        Parameters
        ----------
        z : int
        symbol : str
        a : float array
        b : float array
        
        """
        _pyEMsoft.f90wrap_getwk(z=z, symbol=symbol, a=a, b=b)
    
    @staticmethod
    def fcore(g, z, accvlt):
        """
        fcore = fcore(g, z, accvlt)
        
        
        Defined at others.f90 lines 595-665
        
        Parameters
        ----------
        g : float
        z : int
        accvlt : float
        
        Returns
        -------
        fcore : float
        
        """
        fcore = _pyEMsoft.f90wrap_fcore(g=g, z=z, accvlt=accvlt)
        return fcore
    
    @staticmethod
    def ssort(x, y, n, kflag):
        """
        ssort(x, y, n, kflag)
        
        
        Defined at others.f90 lines 680-999
        
        Parameters
        ----------
        x : float array
        y : int array
        n : int
        kflag : int
        
        """
        _pyEMsoft.f90wrap_ssort(x=x, y=y, n=n, kflag=kflag)
    
    @staticmethod
    def qsortd(x, ind, n):
        """
        qsortd(x, ind, n)
        
        
        Defined at others.f90 lines 1001-1151
        
        Parameters
        ----------
        x : float array
        ind : int array
        n : int
        
        """
        _pyEMsoft.f90wrap_qsortd(x=x, ind=ind, n=n)
    
    _dt_array_initialisers = []
    

others = Others()

class Quaternions(f90wrap.runtime.FortranModule):
    """
    Module quaternions
    
    
    Defined at quaternions.f90 lines 127-659
    
    """
    @staticmethod
    def quat_marsaglia(self):
        """
        q = quat_marsaglia(self)
        
        
        Defined at quaternions.f90 lines 630-659
        
        Parameters
        ----------
        seed : Rng_T
        
        Returns
        -------
        q : float array
        
        """
        q = _pyEMsoft.f90wrap_quat_marsaglia(seed=self._handle)
        return q
    
    @staticmethod
    def _quaternion_print(q):
        """
        _quaternion_print(q)
        
        
        Defined at quaternions.f90 lines 200-204
        
        Parameters
        ----------
        q : float array
        
        """
        _pyEMsoft.f90wrap_quaternion_print(q=q)
    
    @staticmethod
    def _quaternion_print_d(q):
        """
        _quaternion_print_d(q)
        
        
        Defined at quaternions.f90 lines 219-223
        
        Parameters
        ----------
        q : float array
        
        """
        _pyEMsoft.f90wrap_quaternion_print_d(q=q)
    
    @staticmethod
    def quaternion_print(*args, **kwargs):
        """
        quaternion_print(*args, **kwargs)
        
        
        Defined at quaternions.f90 lines 132-134
        
        Overloaded interface containing the following procedures:
          _quaternion_print
          _quaternion_print_d
        
        """
        for proc in [Quaternions._quaternion_print, Quaternions._quaternion_print_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _quat_mult(x, y):
        """
        res = _quat_mult(x, y)
        
        
        Defined at quaternions.f90 lines 240-266
        
        Parameters
        ----------
        x : float array
        y : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_quat_mult(x=x, y=y)
        return res
    
    @staticmethod
    def _quat_mult_d(x, y):
        """
        res = _quat_mult_d(x, y)
        
        
        Defined at quaternions.f90 lines 282-290
        
        Parameters
        ----------
        x : float array
        y : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_quat_mult_d(x=x, y=y)
        return res
    
    @staticmethod
    def quat_mult(*args, **kwargs):
        """
        quat_mult(*args, **kwargs)
        
        
        Defined at quaternions.f90 lines 138-140
        
        Overloaded interface containing the following procedures:
          _quat_mult
          _quat_mult_d
        
        """
        for proc in [Quaternions._quat_mult, Quaternions._quat_mult_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _quat_conjg(x):
        """
        res = _quat_conjg(x)
        
        
        Defined at quaternions.f90 lines 305-309
        
        Parameters
        ----------
        x : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_quat_conjg(x=x)
        return res
    
    @staticmethod
    def _quat_conjg_d(x):
        """
        res = _quat_conjg_d(x)
        
        
        Defined at quaternions.f90 lines 324-328
        
        Parameters
        ----------
        x : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_quat_conjg_d(x=x)
        return res
    
    @staticmethod
    def conjg(*args, **kwargs):
        """
        conjg(*args, **kwargs)
        
        
        Defined at quaternions.f90 lines 145-147
        
        Overloaded interface containing the following procedures:
          _quat_conjg
          _quat_conjg_d
        
        """
        for proc in [Quaternions._quat_conjg, Quaternions._quat_conjg_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _quat_norm(x):
        """
        res = _quat_norm(x)
        
        
        Defined at quaternions.f90 lines 343-347
        
        Parameters
        ----------
        x : float array
        
        Returns
        -------
        res : float
        
        """
        res = _pyEMsoft.f90wrap_quat_norm(x=x)
        return res
    
    @staticmethod
    def _quat_norm_d(x):
        """
        res = _quat_norm_d(x)
        
        
        Defined at quaternions.f90 lines 362-366
        
        Parameters
        ----------
        x : float array
        
        Returns
        -------
        res : float
        
        """
        res = _pyEMsoft.f90wrap_quat_norm_d(x=x)
        return res
    
    @staticmethod
    def cabs(*args, **kwargs):
        """
        cabs(*args, **kwargs)
        
        
        Defined at quaternions.f90 lines 152-154
        
        Overloaded interface containing the following procedures:
          _quat_norm
          _quat_norm_d
        
        """
        for proc in [Quaternions._quat_norm, Quaternions._quat_norm_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _quat_div(x, y):
        """
        res = _quat_div(x, y)
        
        
        Defined at quaternions.f90 lines 382-388
        
        Parameters
        ----------
        x : float array
        y : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_quat_div(x=x, y=y)
        return res
    
    @staticmethod
    def _quat_div_d(x, y):
        """
        res = _quat_div_d(x, y)
        
        
        Defined at quaternions.f90 lines 404-410
        
        Parameters
        ----------
        x : float array
        y : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_quat_div_d(x=x, y=y)
        return res
    
    @staticmethod
    def quat_div(*args, **kwargs):
        """
        quat_div(*args, **kwargs)
        
        
        Defined at quaternions.f90 lines 158-160
        
        Overloaded interface containing the following procedures:
          _quat_div
          _quat_div_d
        
        """
        for proc in [Quaternions._quat_div, Quaternions._quat_div_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _quat_innerproduct(x, y):
        """
        res = _quat_innerproduct(x, y)
        
        
        Defined at quaternions.f90 lines 426-430
        
        Parameters
        ----------
        x : float array
        y : float array
        
        Returns
        -------
        res : float
        
        """
        res = _pyEMsoft.f90wrap_quat_innerproduct(x=x, y=y)
        return res
    
    @staticmethod
    def _quat_innerproduct_d(x, y):
        """
        res = _quat_innerproduct_d(x, y)
        
        
        Defined at quaternions.f90 lines 446-450
        
        Parameters
        ----------
        x : float array
        y : float array
        
        Returns
        -------
        res : float
        
        """
        res = _pyEMsoft.f90wrap_quat_innerproduct_d(x=x, y=y)
        return res
    
    @staticmethod
    def quat_innerproduct(*args, **kwargs):
        """
        quat_innerproduct(*args, **kwargs)
        
        
        Defined at quaternions.f90 lines 164-166
        
        Overloaded interface containing the following procedures:
          _quat_innerproduct
          _quat_innerproduct_d
        
        """
        for proc in [Quaternions._quat_innerproduct, Quaternions._quat_innerproduct_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _quat_angle(x, y):
        """
        res = _quat_angle(x, y)
        
        
        Defined at quaternions.f90 lines 466-471
        
        Parameters
        ----------
        x : float array
        y : float array
        
        Returns
        -------
        res : float
        
        """
        res = _pyEMsoft.f90wrap_quat_angle(x=x, y=y)
        return res
    
    @staticmethod
    def _quat_angle_d(x, y):
        """
        res = _quat_angle_d(x, y)
        
        
        Defined at quaternions.f90 lines 487-492
        
        Parameters
        ----------
        x : float array
        y : float array
        
        Returns
        -------
        res : float
        
        """
        res = _pyEMsoft.f90wrap_quat_angle_d(x=x, y=y)
        return res
    
    @staticmethod
    def quat_angle(*args, **kwargs):
        """
        quat_angle(*args, **kwargs)
        
        
        Defined at quaternions.f90 lines 170-172
        
        Overloaded interface containing the following procedures:
          _quat_angle
          _quat_angle_d
        
        """
        for proc in [Quaternions._quat_angle, Quaternions._quat_angle_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _quat_lp(q, v):
        """
        res = _quat_lp(q, v)
        
        
        Defined at quaternions.f90 lines 509-517
        
        Parameters
        ----------
        q : float array
        v : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_quat_lp(q=q, v=v)
        return res
    
    @staticmethod
    def _quat_lp_d(q, v):
        """
        res = _quat_lp_d(q, v)
        
        
        Defined at quaternions.f90 lines 534-542
        
        Parameters
        ----------
        q : float array
        v : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_quat_lp_d(q=q, v=v)
        return res
    
    @staticmethod
    def quat_lp(*args, **kwargs):
        """
        quat_lp(*args, **kwargs)
        
        
        Defined at quaternions.f90 lines 176-178
        
        Overloaded interface containing the following procedures:
          _quat_lp
          _quat_lp_d
        
        """
        for proc in [Quaternions._quat_lp, Quaternions._quat_lp_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _quat_slerp(qa, qb, n):
        """
        res = _quat_slerp(qa, qb, n)
        
        
        Defined at quaternions.f90 lines 558-579
        
        Parameters
        ----------
        qa : float array
        qb : float array
        n : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_quat_slerp(qa=qa, qb=qb, n=n)
        return res
    
    @staticmethod
    def _quat_slerp_d(qa, qb, n):
        """
        res = _quat_slerp_d(qa, qb, n)
        
        
        Defined at quaternions.f90 lines 595-616
        
        Parameters
        ----------
        qa : float array
        qb : float array
        n : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_quat_slerp_d(qa=qa, qb=qb, n=n)
        return res
    
    @staticmethod
    def quat_slerp(*args, **kwargs):
        """
        quat_slerp(*args, **kwargs)
        
        
        Defined at quaternions.f90 lines 182-184
        
        Overloaded interface containing the following procedures:
          _quat_slerp
          _quat_slerp_d
        
        """
        for proc in [Quaternions._quat_slerp, Quaternions._quat_slerp_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    _dt_array_initialisers = []
    

quaternions = Quaternions()

class Lambert(f90wrap.runtime.FortranModule):
    """
    Module lambert
    
    
    Defined at Lambert.f90 lines 58-2474
    
    """
    @staticmethod
    def getsextantsingle(xy):
        """
        res = getsextantsingle(xy)
        
        
        Defined at Lambert.f90 lines 655-682
        
        Parameters
        ----------
        xy : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_getsextantsingle(xy=xy)
        return res
    
    @staticmethod
    def getsextantdouble(xy):
        """
        res = getsextantdouble(xy)
        
        
        Defined at Lambert.f90 lines 697-724
        
        Parameters
        ----------
        xy : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_getsextantdouble(xy=xy)
        return res
    
    @staticmethod
    def getpyramidsingle(xyz):
        """
        res = getpyramidsingle(xyz)
        
        
        Defined at Lambert.f90 lines 1101-1142
        
        Parameters
        ----------
        xyz : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_getpyramidsingle(xyz=xyz)
        return res
    
    @staticmethod
    def getpyramiddouble(xyz):
        """
        res = getpyramiddouble(xyz)
        
        
        Defined at Lambert.f90 lines 1156-1197
        
        Parameters
        ----------
        xyz : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_getpyramiddouble(xyz=xyz)
        return res
    
    @staticmethod
    def apply2dlauesymmetry(ipx, ipy, isym, iequiv):
        """
        nequiv = apply2dlauesymmetry(ipx, ipy, isym, iequiv)
        
        
        Defined at Lambert.f90 lines 1690-1781
        
        Parameters
        ----------
        ipx : int
        ipy : int
        isym : int
        iequiv : int array
        
        Returns
        -------
        nequiv : int
        
        """
        nequiv = _pyEMsoft.f90wrap_apply2dlauesymmetry(ipx=ipx, ipy=ipy, isym=isym, \
            iequiv=iequiv)
        return nequiv
    
    @staticmethod
    def apply2dpgsymmetry(self, ipx, ipy, isym, iequiv):
        """
        nequiv = apply2dpgsymmetry(self, ipx, ipy, isym, iequiv)
        
        
        Defined at Lambert.f90 lines 1805-1851
        
        Parameters
        ----------
        tdpg : Symdata2D
        ipx : int
        ipy : int
        isym : int
        iequiv : int array
        
        Returns
        -------
        nequiv : int
        
        """
        nequiv = _pyEMsoft.f90wrap_apply2dpgsymmetry(tdpg=self._handle, ipx=ipx, \
            ipy=ipy, isym=isym, iequiv=iequiv)
        return nequiv
    
    @staticmethod
    def apply3dpgsymmetry(self, ipx, ipy, ipz, npx, iequiv, usehex=None, \
        stereographic=None, cubictype=None):
        """
        nequiv = apply3dpgsymmetry(self, ipx, ipy, ipz, npx, iequiv[, usehex, \
            stereographic, cubictype])
        
        
        Defined at Lambert.f90 lines 1876-1998
        
        Parameters
        ----------
        cell : Unitcell
        ipx : int
        ipy : int
        ipz : int
        npx : int
        iequiv : int array
        usehex : bool
        stereographic : bool
        cubictype : int
        
        Returns
        -------
        nequiv : int
        
        """
        nequiv = _pyEMsoft.f90wrap_apply3dpgsymmetry(cell=self._handle, ipx=ipx, \
            ipy=ipy, ipz=ipz, npx=npx, iequiv=iequiv, usehex=usehex, \
            stereographic=stereographic, cubictype=cubictype)
        return nequiv
    
    @staticmethod
    def samplevmf(mu, kappa, vmfscale, inten, npx, nix, niy, w, mlpnh, mlpsh, \
        legendrearray):
        """
        samplevmf(mu, kappa, vmfscale, inten, npx, nix, niy, w, mlpnh, mlpsh, \
            legendrearray)
        
        
        Defined at Lambert.f90 lines 2360-2400
        
        Parameters
        ----------
        mu : float array
        kappa : float
        vmfscale : float
        inten : float
        npx : int
        nix : int
        niy : int
        w : int
        mlpnh : float array
        mlpsh : float array
        legendrearray : float array
        
        """
        _pyEMsoft.f90wrap_samplevmf(mu=mu, kappa=kappa, vmfscale=vmfscale, inten=inten, \
            npx=npx, nix=nix, niy=niy, w=w, mlpnh=mlpnh, mlpsh=mlpsh, \
            legendrearray=legendrearray)
    
    @staticmethod
    def hemicheck(ix, iy, npx, north):
        """
        xyz = hemicheck(ix, iy, npx, north)
        
        
        Defined at Lambert.f90 lines 2416-2473
        
        Parameters
        ----------
        ix : int
        iy : int
        npx : int
        north : bool
        
        Returns
        -------
        xyz : float array
        
        """
        xyz = _pyEMsoft.f90wrap_hemicheck(ix=ix, iy=iy, npx=npx, north=north)
        return xyz
    
    @staticmethod
    def _lambert2dsquareforwardsingle(xy, ierr):
        """
        res = _lambert2dsquareforwardsingle(xy, ierr)
        
        
        Defined at Lambert.f90 lines 181-214
        
        Parameters
        ----------
        xy : float array
        ierr : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambert2dsquareforwardsingle(xy=xy, ierr=ierr)
        return res
    
    @staticmethod
    def _lambert2dsquareforwarddouble(xy, ierr):
        """
        res = _lambert2dsquareforwarddouble(xy, ierr)
        
        
        Defined at Lambert.f90 lines 230-263
        
        Parameters
        ----------
        xy : float array
        ierr : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambert2dsquareforwarddouble(xy=xy, ierr=ierr)
        return res
    
    @staticmethod
    def lambertsquaretosphere(*args, **kwargs):
        """
        lambertsquaretosphere(*args, **kwargs)
        
        
        Defined at Lambert.f90 lines 68-70
        
        Overloaded interface containing the following procedures:
          _lambert2dsquareforwardsingle
          _lambert2dsquareforwarddouble
        
        """
        for proc in [Lambert._lambert2dsquareforwardsingle, \
            Lambert._lambert2dsquareforwarddouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _lambert2dsquareinversesingle(xyz, ierr):
        """
        res = _lambert2dsquareinversesingle(xyz, ierr)
        
        
        Defined at Lambert.f90 lines 282-309
        
        Parameters
        ----------
        xyz : float array
        ierr : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambert2dsquareinversesingle(xyz=xyz, ierr=ierr)
        return res
    
    @staticmethod
    def _lambert2dsquareinversedouble(xyz, ierr):
        """
        res = _lambert2dsquareinversedouble(xyz, ierr)
        
        
        Defined at Lambert.f90 lines 328-355
        
        Parameters
        ----------
        xyz : float array
        ierr : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambert2dsquareinversedouble(xyz=xyz, ierr=ierr)
        return res
    
    @staticmethod
    def lambertspheretosquare(*args, **kwargs):
        """
        lambertspheretosquare(*args, **kwargs)
        
        
        Defined at Lambert.f90 lines 73-75
        
        Overloaded interface containing the following procedures:
          _lambert2dsquareinversesingle
          _lambert2dsquareinversedouble
        
        """
        for proc in [Lambert._lambert2dsquareinversesingle, \
            Lambert._lambert2dsquareinversedouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _lambert2dhexforwardsingle(xy, ierr):
        """
        res = _lambert2dhexforwardsingle(xy, ierr)
        
        
        Defined at Lambert.f90 lines 381-426
        
        Parameters
        ----------
        xy : float array
        ierr : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambert2dhexforwardsingle(xy=xy, ierr=ierr)
        return res
    
    @staticmethod
    def _lambert2dhexforwarddouble(xy, ierr):
        """
        res = _lambert2dhexforwarddouble(xy, ierr)
        
        
        Defined at Lambert.f90 lines 443-488
        
        Parameters
        ----------
        xy : float array
        ierr : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambert2dhexforwarddouble(xy=xy, ierr=ierr)
        return res
    
    @staticmethod
    def lamberthextosphere(*args, **kwargs):
        """
        lamberthextosphere(*args, **kwargs)
        
        
        Defined at Lambert.f90 lines 79-81
        
        Overloaded interface containing the following procedures:
          _lambert2dhexforwardsingle
          _lambert2dhexforwarddouble
        
        """
        for proc in [Lambert._lambert2dhexforwardsingle, \
            Lambert._lambert2dhexforwarddouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _lambert2dhexinversesingle(xyz, ierr):
        """
        res = _lambert2dhexinversesingle(xyz, ierr)
        
        
        Defined at Lambert.f90 lines 509-564
        
        Parameters
        ----------
        xyz : float array
        ierr : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambert2dhexinversesingle(xyz=xyz, ierr=ierr)
        return res
    
    @staticmethod
    def _lambert2dhexinversedouble(xyz, ierr):
        """
        res = _lambert2dhexinversedouble(xyz, ierr)
        
        
        Defined at Lambert.f90 lines 585-640
        
        Parameters
        ----------
        xyz : float array
        ierr : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambert2dhexinversedouble(xyz=xyz, ierr=ierr)
        return res
    
    @staticmethod
    def lambertspheretohex(*args, **kwargs):
        """
        lambertspheretohex(*args, **kwargs)
        
        
        Defined at Lambert.f90 lines 84-86
        
        Overloaded interface containing the following procedures:
          _lambert2dhexinversesingle
          _lambert2dhexinversedouble
        
        """
        for proc in [Lambert._lambert2dhexinversesingle, \
            Lambert._lambert2dhexinversedouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _lambert3dcubeforwardsingle(xyzin, ierr):
        """
        res = _lambert3dcubeforwardsingle(xyzin, ierr)
        
        
        Defined at Lambert.f90 lines 750-817
        
        Parameters
        ----------
        xyzin : float array
        ierr : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambert3dcubeforwardsingle(xyzin=xyzin, ierr=ierr)
        return res
    
    @staticmethod
    def _lambert3dcubeforwarddouble(xyzin, ierr):
        """
        res = _lambert3dcubeforwarddouble(xyzin, ierr)
        
        
        Defined at Lambert.f90 lines 833-901
        
        Parameters
        ----------
        xyzin : float array
        ierr : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambert3dcubeforwarddouble(xyzin=xyzin, ierr=ierr)
        return res
    
    @staticmethod
    def lambertcubetoball(*args, **kwargs):
        """
        lambertcubetoball(*args, **kwargs)
        
        
        Defined at Lambert.f90 lines 93-95
        
        Overloaded interface containing the following procedures:
          _lambert3dcubeforwardsingle
          _lambert3dcubeforwarddouble
        
        """
        for proc in [Lambert._lambert3dcubeforwardsingle, \
            Lambert._lambert3dcubeforwarddouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _lambert3dcubeinversesingle(xyz, ierr):
        """
        res = _lambert3dcubeinversesingle(xyz, ierr)
        
        
        Defined at Lambert.f90 lines 917-994
        
        Parameters
        ----------
        xyz : float array
        ierr : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambert3dcubeinversesingle(xyz=xyz, ierr=ierr)
        return res
    
    @staticmethod
    def _lambert3dcubeinversedouble(xyz, ierr):
        """
        res = _lambert3dcubeinversedouble(xyz, ierr)
        
        
        Defined at Lambert.f90 lines 1010-1087
        
        Parameters
        ----------
        xyz : float array
        ierr : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambert3dcubeinversedouble(xyz=xyz, ierr=ierr)
        return res
    
    @staticmethod
    def lambertballtocube(*args, **kwargs):
        """
        lambertballtocube(*args, **kwargs)
        
        
        Defined at Lambert.f90 lines 98-100
        
        Overloaded interface containing the following procedures:
          _lambert3dcubeinversesingle
          _lambert3dcubeinversedouble
        
        """
        for proc in [Lambert._lambert3dcubeinversesingle, \
            Lambert._lambert3dcubeinversedouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _lambert3dballtoquaternionsingle(xyz, ierr):
        """
        res = _lambert3dballtoquaternionsingle(xyz, ierr)
        
        
        Defined at Lambert.f90 lines 1215-1249
        
        Parameters
        ----------
        xyz : float array
        ierr : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambert3dballtoquaternionsingle(xyz=xyz, ierr=ierr)
        return res
    
    @staticmethod
    def _lambert3dballtoquaterniondouble(xyz, ierr):
        """
        res = _lambert3dballtoquaterniondouble(xyz, ierr)
        
        
        Defined at Lambert.f90 lines 1264-1298
        
        Parameters
        ----------
        xyz : float array
        ierr : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambert3dballtoquaterniondouble(xyz=xyz, ierr=ierr)
        return res
    
    @staticmethod
    def lambertballtoquaternion(*args, **kwargs):
        """
        lambertballtoquaternion(*args, **kwargs)
        
        
        Defined at Lambert.f90 lines 104-106
        
        Overloaded interface containing the following procedures:
          _lambert3dballtoquaternionsingle
          _lambert3dballtoquaterniondouble
        
        """
        for proc in [Lambert._lambert3dballtoquaternionsingle, \
            Lambert._lambert3dballtoquaterniondouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _lambert3dcubetoquaternionsingle(xyz, ierr):
        """
        res = _lambert3dcubetoquaternionsingle(xyz, ierr)
        
        
        Defined at Lambert.f90 lines 1313-1323
        
        Parameters
        ----------
        xyz : float array
        ierr : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambert3dcubetoquaternionsingle(xyz=xyz, ierr=ierr)
        return res
    
    @staticmethod
    def _lambert3dcubetoquaterniondouble(xyz, ierr):
        """
        res = _lambert3dcubetoquaterniondouble(xyz, ierr)
        
        
        Defined at Lambert.f90 lines 1338-1348
        
        Parameters
        ----------
        xyz : float array
        ierr : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambert3dcubetoquaterniondouble(xyz=xyz, ierr=ierr)
        return res
    
    @staticmethod
    def lambertcubetoquaternion(*args, **kwargs):
        """
        lambertcubetoquaternion(*args, **kwargs)
        
        
        Defined at Lambert.f90 lines 115-117
        
        Overloaded interface containing the following procedures:
          _lambert3dcubetoquaternionsingle
          _lambert3dcubetoquaterniondouble
        
        """
        for proc in [Lambert._lambert3dcubetoquaternionsingle, \
            Lambert._lambert3dcubetoquaterniondouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _stereographicforwardsingle(xyz, ierr, radius=None):
        """
        res = _stereographicforwardsingle(xyz, ierr[, radius])
        
        
        Defined at Lambert.f90 lines 1366-1385
        
        Parameters
        ----------
        xyz : float array
        ierr : int
        radius : float
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_stereographicforwardsingle(xyz=xyz, ierr=ierr, \
            radius=radius)
        return res
    
    @staticmethod
    def _stereographicforwarddouble(xyz, ierr, radius=None):
        """
        res = _stereographicforwarddouble(xyz, ierr[, radius])
        
        
        Defined at Lambert.f90 lines 1400-1419
        
        Parameters
        ----------
        xyz : float array
        ierr : int
        radius : float
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_stereographicforwarddouble(xyz=xyz, ierr=ierr, \
            radius=radius)
        return res
    
    @staticmethod
    def stereographicforward(*args, **kwargs):
        """
        stereographicforward(*args, **kwargs)
        
        
        Defined at Lambert.f90 lines 132-134
        
        Overloaded interface containing the following procedures:
          _stereographicforwardsingle
          _stereographicforwarddouble
        
        """
        for proc in [Lambert._stereographicforwardsingle, \
            Lambert._stereographicforwarddouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _stereographicinversesingle(xy, ierr, radius, quat=None):
        """
        res = _stereographicinversesingle(xy, ierr, radius[, quat])
        
        
        Defined at Lambert.f90 lines 1434-1463
        
        Parameters
        ----------
        xy : float array
        ierr : int
        radius : float
        quat : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_stereographicinversesingle(xy=xy, ierr=ierr, \
            radius=radius, quat=quat)
        return res
    
    @staticmethod
    def _stereographicinversedouble(xy, ierr, radius, quat=None):
        """
        res = _stereographicinversedouble(xy, ierr, radius[, quat])
        
        
        Defined at Lambert.f90 lines 1478-1507
        
        Parameters
        ----------
        xy : float array
        ierr : int
        radius : float
        quat : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_stereographicinversedouble(xy=xy, ierr=ierr, \
            radius=radius, quat=quat)
        return res
    
    @staticmethod
    def stereographicinverse(*args, **kwargs):
        """
        stereographicinverse(*args, **kwargs)
        
        
        Defined at Lambert.f90 lines 137-139
        
        Overloaded interface containing the following procedures:
          _stereographicinversesingle
          _stereographicinversedouble
        
        """
        for proc in [Lambert._stereographicinversesingle, \
            Lambert._stereographicinversedouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _lambertforwardsingle(xyz, ierr, radius=None):
        """
        res = _lambertforwardsingle(xyz, ierr[, radius])
        
        
        Defined at Lambert.f90 lines 1525-1551
        
        Parameters
        ----------
        xyz : float array
        ierr : int
        radius : float
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambertforwardsingle(xyz=xyz, ierr=ierr, radius=radius)
        return res
    
    @staticmethod
    def _lambertforwarddouble(xyz, ierr, radius=None):
        """
        res = _lambertforwarddouble(xyz, ierr[, radius])
        
        
        Defined at Lambert.f90 lines 1566-1592
        
        Parameters
        ----------
        xyz : float array
        ierr : int
        radius : float
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambertforwarddouble(xyz=xyz, ierr=ierr, radius=radius)
        return res
    
    @staticmethod
    def lambertforward(*args, **kwargs):
        """
        lambertforward(*args, **kwargs)
        
        
        Defined at Lambert.f90 lines 143-145
        
        Overloaded interface containing the following procedures:
          _lambertforwardsingle
          _lambertforwarddouble
        
        """
        for proc in [Lambert._lambertforwardsingle, Lambert._lambertforwarddouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _lambertinversesingle(xy, ierr, radius=None):
        """
        res = _lambertinversesingle(xy, ierr[, radius])
        
        
        Defined at Lambert.f90 lines 1607-1626
        
        Parameters
        ----------
        xy : float array
        ierr : int
        radius : float
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambertinversesingle(xy=xy, ierr=ierr, radius=radius)
        return res
    
    @staticmethod
    def _lambertinversedouble(xy, ierr, radius=None):
        """
        res = _lambertinversedouble(xy, ierr[, radius])
        
        
        Defined at Lambert.f90 lines 1641-1660
        
        Parameters
        ----------
        xy : float array
        ierr : int
        radius : float
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_lambertinversedouble(xy=xy, ierr=ierr, radius=radius)
        return res
    
    @staticmethod
    def lambertinverse(*args, **kwargs):
        """
        lambertinverse(*args, **kwargs)
        
        
        Defined at Lambert.f90 lines 148-150
        
        Overloaded interface containing the following procedures:
          _lambertinversesingle
          _lambertinversedouble
        
        """
        for proc in [Lambert._lambertinversesingle, Lambert._lambertinversedouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _lambertgetinterpolationsingle(dc, scl, npx, npy, swap=None):
        """
        nix, niy, nixp, niyp, dx, dy, dxm, dym = _lambertgetinterpolationsingle(dc, scl, \
            npx, npy[, swap])
        
        
        Defined at Lambert.f90 lines 2026-2071
        
        Parameters
        ----------
        dc : float array
        scl : float
        npx : int
        npy : int
        swap : bool
        
        Returns
        -------
        nix : int
        niy : int
        nixp : int
        niyp : int
        dx : float
        dy : float
        dxm : float
        dym : float
        
        """
        nix, niy, nixp, niyp, dx, dy, dxm, dym = \
            _pyEMsoft.f90wrap_lambertgetinterpolationsingle(dc=dc, scl=scl, npx=npx, \
            npy=npy, swap=swap)
        return nix, niy, nixp, niyp, dx, dy, dxm, dym
    
    @staticmethod
    def _lambertgetinterpolationdouble(dc, scl, npx, npy, swap=None):
        """
        nix, niy, nixp, niyp, dx, dy, dxm, dym = _lambertgetinterpolationdouble(dc, scl, \
            npx, npy[, swap])
        
        
        Defined at Lambert.f90 lines 2099-2146
        
        Parameters
        ----------
        dc : float array
        scl : float
        npx : int
        npy : int
        swap : bool
        
        Returns
        -------
        nix : int
        niy : int
        nixp : int
        niyp : int
        dx : float
        dy : float
        dxm : float
        dym : float
        
        """
        nix, niy, nixp, niyp, dx, dy, dxm, dym = \
            _pyEMsoft.f90wrap_lambertgetinterpolationdouble(dc=dc, scl=scl, npx=npx, \
            npy=npy, swap=swap)
        return nix, niy, nixp, niyp, dx, dy, dxm, dym
    
    @staticmethod
    def lambertgetinterpolation(*args, **kwargs):
        """
        lambertgetinterpolation(*args, **kwargs)
        
        
        Defined at Lambert.f90 lines 153-155
        
        Overloaded interface containing the following procedures:
          _lambertgetinterpolationsingle
          _lambertgetinterpolationdouble
        
        """
        for proc in [Lambert._lambertgetinterpolationsingle, \
            Lambert._lambertgetinterpolationdouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _interpolationlambert2dsingle(dc, m, npx):
        """
        res = _interpolationlambert2dsingle(dc, m, npx)
        
        
        Defined at Lambert.f90 lines 2162-2176
        
        Parameters
        ----------
        dc : float array
        m : float array
        npx : int
        
        Returns
        -------
        res : float
        
        """
        res = _pyEMsoft.f90wrap_interpolationlambert2dsingle(dc=dc, m=m, npx=npx)
        return res
    
    @staticmethod
    def _interpolationlambert2ddouble(dc, m, npx):
        """
        res = _interpolationlambert2ddouble(dc, m, npx)
        
        
        Defined at Lambert.f90 lines 2192-2206
        
        Parameters
        ----------
        dc : float array
        m : float array
        npx : int
        
        Returns
        -------
        res : float
        
        """
        res = _pyEMsoft.f90wrap_interpolationlambert2ddouble(dc=dc, m=m, npx=npx)
        return res
    
    @staticmethod
    def _interpolationlambert3dsingle(dc, m, npx, nn):
        """
        res = _interpolationlambert3dsingle(dc, m, npx, nn)
        
        
        Defined at Lambert.f90 lines 2223-2239
        
        Parameters
        ----------
        dc : float array
        m : float array
        npx : int
        nn : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_interpolationlambert3dsingle(dc=dc, m=m, npx=npx, nn=nn)
        return res
    
    @staticmethod
    def _interpolationlambert3dinteger(dc, m, npx, nn):
        """
        res = _interpolationlambert3dinteger(dc, m, npx, nn)
        
        
        Defined at Lambert.f90 lines 2256-2272
        
        Parameters
        ----------
        dc : float array
        m : int array
        npx : int
        nn : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_interpolationlambert3dinteger(dc=dc, m=m, npx=npx, \
            nn=nn)
        return res
    
    @staticmethod
    def _interpolationlambert4dsingle(dc, m, npx, nn):
        """
        res = _interpolationlambert4dsingle(dc, m, npx, nn)
        
        
        Defined at Lambert.f90 lines 2289-2306
        
        Parameters
        ----------
        dc : float array
        m : float array
        npx : int
        nn : int
        
        Returns
        -------
        res : float
        
        """
        res = _pyEMsoft.f90wrap_interpolationlambert4dsingle(dc=dc, m=m, npx=npx, nn=nn)
        return res
    
    @staticmethod
    def _interpolationlambert4ddouble4b4(dc, m, npx):
        """
        res = _interpolationlambert4ddouble4b4(dc, m, npx)
        
        
        Defined at Lambert.f90 lines 2322-2337
        
        Parameters
        ----------
        dc : float array
        m : float array
        npx : int
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_interpolationlambert4ddouble4b4(dc=dc, m=m, npx=npx)
        return res
    
    @staticmethod
    def interpolatelambert(*args, **kwargs):
        """
        interpolatelambert(*args, **kwargs)
        
        
        Defined at Lambert.f90 lines 158-164
        
        Overloaded interface containing the following procedures:
          _interpolationlambert2dsingle
          _interpolationlambert2ddouble
          _interpolationlambert3dsingle
          _interpolationlambert3dinteger
          _interpolationlambert4dsingle
          _interpolationlambert4ddouble4b4
        
        """
        for proc in [Lambert._interpolationlambert2dsingle, \
            Lambert._interpolationlambert2ddouble, \
            Lambert._interpolationlambert3dsingle, \
            Lambert._interpolationlambert3dinteger, \
            Lambert._interpolationlambert4dsingle, \
            Lambert._interpolationlambert4ddouble4b4]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    _dt_array_initialisers = []
    

lambert = Lambert()

class Rotations(f90wrap.runtime.FortranModule):
    """
    Module rotations
    
    
    Defined at rotations.f90 lines 114-6274
    
    """
    pass
    @staticmethod
    def _eu_check(eu):
        """
        res = _eu_check(eu)
        
        
        Defined at rotations.f90 lines 727-745
        
        Parameters
        ----------
        eu : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_eu_check(eu=eu)
        return res
    
    @staticmethod
    def _eu_check_d(eu):
        """
        res = _eu_check_d(eu)
        
        
        Defined at rotations.f90 lines 760-778
        
        Parameters
        ----------
        eu : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_eu_check_d(eu=eu)
        return res
    
    @staticmethod
    def eu_check(*args, **kwargs):
        """
        eu_check(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 122-124
        
        Overloaded interface containing the following procedures:
          _eu_check
          _eu_check_d
        
        """
        for proc in [Rotations._eu_check, Rotations._eu_check_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ro_check(ro):
        """
        res = _ro_check(ro)
        
        
        Defined at rotations.f90 lines 793-809
        
        Parameters
        ----------
        ro : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_ro_check(ro=ro)
        return res
    
    @staticmethod
    def _ro_check_d(ro):
        """
        res = _ro_check_d(ro)
        
        
        Defined at rotations.f90 lines 824-840
        
        Parameters
        ----------
        ro : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_ro_check_d(ro=ro)
        return res
    
    @staticmethod
    def ro_check(*args, **kwargs):
        """
        ro_check(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 127-129
        
        Overloaded interface containing the following procedures:
          _ro_check
          _ro_check_d
        
        """
        for proc in [Rotations._ro_check, Rotations._ro_check_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ho_check(ho):
        """
        res = _ho_check(ho)
        
        
        Defined at rotations.f90 lines 855-869
        
        Parameters
        ----------
        ho : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_ho_check(ho=ho)
        return res
    
    @staticmethod
    def _ho_check_d(ho):
        """
        res = _ho_check_d(ho)
        
        
        Defined at rotations.f90 lines 884-898
        
        Parameters
        ----------
        ho : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_ho_check_d(ho=ho)
        return res
    
    @staticmethod
    def ho_check(*args, **kwargs):
        """
        ho_check(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 132-134
        
        Overloaded interface containing the following procedures:
          _ho_check
          _ho_check_d
        
        """
        for proc in [Rotations._ho_check, Rotations._ho_check_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _cu_check(cu):
        """
        res = _cu_check(cu)
        
        
        Defined at rotations.f90 lines 913-927
        
        Parameters
        ----------
        cu : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_cu_check(cu=cu)
        return res
    
    @staticmethod
    def _cu_check_d(cu):
        """
        res = _cu_check_d(cu)
        
        
        Defined at rotations.f90 lines 942-956
        
        Parameters
        ----------
        cu : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_cu_check_d(cu=cu)
        return res
    
    @staticmethod
    def cu_check(*args, **kwargs):
        """
        cu_check(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 137-139
        
        Overloaded interface containing the following procedures:
          _cu_check
          _cu_check_d
        
        """
        for proc in [Rotations._cu_check, Rotations._cu_check_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _qu_check(qu):
        """
        res = _qu_check(qu)
        
        
        Defined at rotations.f90 lines 971-989
        
        Parameters
        ----------
        qu : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_qu_check(qu=qu)
        return res
    
    @staticmethod
    def _qu_check_d(qu):
        """
        res = _qu_check_d(qu)
        
        
        Defined at rotations.f90 lines 1004-1022
        
        Parameters
        ----------
        qu : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_qu_check_d(qu=qu)
        return res
    
    @staticmethod
    def qu_check(*args, **kwargs):
        """
        qu_check(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 142-144
        
        Overloaded interface containing the following procedures:
          _qu_check
          _qu_check_d
        
        """
        for proc in [Rotations._qu_check, Rotations._qu_check_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ax_check(ax):
        """
        res = _ax_check(ax)
        
        
        Defined at rotations.f90 lines 1095-1113
        
        Parameters
        ----------
        ax : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_ax_check(ax=ax)
        return res
    
    @staticmethod
    def _ax_check_d(ax):
        """
        res = _ax_check_d(ax)
        
        
        Defined at rotations.f90 lines 1128-1146
        
        Parameters
        ----------
        ax : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_ax_check_d(ax=ax)
        return res
    
    @staticmethod
    def ax_check(*args, **kwargs):
        """
        ax_check(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 147-149
        
        Overloaded interface containing the following procedures:
          _ax_check
          _ax_check_d
        
        """
        for proc in [Rotations._ax_check, Rotations._ax_check_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _om_check(om):
        """
        res = _om_check(om)
        
        
        Defined at rotations.f90 lines 1161-1187
        
        Parameters
        ----------
        om : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_om_check(om=om)
        return res
    
    @staticmethod
    def _om_check_d(om):
        """
        res = _om_check_d(om)
        
        
        Defined at rotations.f90 lines 1202-1228
        
        Parameters
        ----------
        om : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_om_check_d(om=om)
        return res
    
    @staticmethod
    def om_check(*args, **kwargs):
        """
        om_check(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 152-154
        
        Overloaded interface containing the following procedures:
          _om_check
          _om_check_d
        
        """
        for proc in [Rotations._om_check, Rotations._om_check_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _st_check(st):
        """
        res = _st_check(st)
        
        
        Defined at rotations.f90 lines 1036-1051
        
        Parameters
        ----------
        st : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_st_check(st=st)
        return res
    
    @staticmethod
    def _st_check_d(st):
        """
        res = _st_check_d(st)
        
        
        Defined at rotations.f90 lines 1065-1080
        
        Parameters
        ----------
        st : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_st_check_d(st=st)
        return res
    
    @staticmethod
    def st_check(*args, **kwargs):
        """
        st_check(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 157-159
        
        Overloaded interface containing the following procedures:
          _st_check
          _st_check_d
        
        """
        for proc in [Rotations._st_check, Rotations._st_check_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _rv_check(rv):
        """
        res = _rv_check(rv)
        
        
        Defined at rotations.f90 lines 1243-1258
        
        Parameters
        ----------
        rv : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_rv_check(rv=rv)
        return res
    
    @staticmethod
    def _rv_check_d(rv):
        """
        res = _rv_check_d(rv)
        
        
        Defined at rotations.f90 lines 1273-1288
        
        Parameters
        ----------
        rv : float array
        
        Returns
        -------
        res : int
        
        """
        res = _pyEMsoft.f90wrap_rv_check_d(rv=rv)
        return res
    
    @staticmethod
    def rv_check(*args, **kwargs):
        """
        rv_check(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 162-164
        
        Overloaded interface containing the following procedures:
          _rv_check
          _rv_check_d
        
        """
        for proc in [Rotations._rv_check, Rotations._rv_check_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _genrot(av, omega):
        """
        res = _genrot(av, omega)
        
        
        Defined at rotations.f90 lines 1309-1335
        
        Parameters
        ----------
        av : float array
        omega : float
        
        Returns
        -------
        res : Orientationtype
        
        """
        res = _pyEMsoft.f90wrap_genrot(av=av, omega=omega)
        res = f90wrap.runtime.lookup_class("pyEMsoft.orientationtype").from_handle(res, \
            alloc=True)
        return res
    
    @staticmethod
    def _genrot_d(av, omega):
        """
        res = _genrot_d(av, omega)
        
        
        Defined at rotations.f90 lines 1351-1377
        
        Parameters
        ----------
        av : float array
        omega : float
        
        Returns
        -------
        res : Orientationtyped
        
        """
        res = _pyEMsoft.f90wrap_genrot_d(av=av, omega=omega)
        res = f90wrap.runtime.lookup_class("pyEMsoft.orientationtyped").from_handle(res, \
            alloc=True)
        return res
    
    @staticmethod
    def genrot(*args, **kwargs):
        """
        genrot(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 170-172
        
        Overloaded interface containing the following procedures:
          _genrot
          _genrot_d
        
        """
        for proc in [Rotations._genrot, Rotations._genrot_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _init_orientation(orient, intype, rotcheck=None):
        """
        res = _init_orientation(orient, intype[, rotcheck])
        
        
        Defined at rotations.f90 lines 1394-1516
        
        Parameters
        ----------
        orient : float array
        intype : str
        rotcheck : bool
        
        Returns
        -------
        res : Orientationtype
        
        """
        res = _pyEMsoft.f90wrap_init_orientation(orient=orient, intype=intype, \
            rotcheck=rotcheck)
        res = f90wrap.runtime.lookup_class("pyEMsoft.orientationtype").from_handle(res, \
            alloc=True)
        return res
    
    @staticmethod
    def _init_orientation_om(orient, intype, rotcheck=None):
        """
        res = _init_orientation_om(orient, intype[, rotcheck])
        
        
        Defined at rotations.f90 lines 1675-1699
        
        Parameters
        ----------
        orient : float array
        intype : str
        rotcheck : bool
        
        Returns
        -------
        res : Orientationtype
        
        """
        res = _pyEMsoft.f90wrap_init_orientation_om(orient=orient, intype=intype, \
            rotcheck=rotcheck)
        res = f90wrap.runtime.lookup_class("pyEMsoft.orientationtype").from_handle(res, \
            alloc=True)
        return res
    
    @staticmethod
    def _init_orientation_d(orient, intype, rotcheck=None):
        """
        res = _init_orientation_d(orient, intype[, rotcheck])
        
        
        Defined at rotations.f90 lines 1534-1658
        
        Parameters
        ----------
        orient : float array
        intype : str
        rotcheck : bool
        
        Returns
        -------
        res : Orientationtyped
        
        """
        res = _pyEMsoft.f90wrap_init_orientation_d(orient=orient, intype=intype, \
            rotcheck=rotcheck)
        res = f90wrap.runtime.lookup_class("pyEMsoft.orientationtyped").from_handle(res, \
            alloc=True)
        return res
    
    @staticmethod
    def _init_orientation_om_d(orient, intype, rotcheck=None):
        """
        res = _init_orientation_om_d(orient, intype[, rotcheck])
        
        
        Defined at rotations.f90 lines 1716-1740
        
        Parameters
        ----------
        orient : float array
        intype : str
        rotcheck : bool
        
        Returns
        -------
        res : Orientationtyped
        
        """
        res = _pyEMsoft.f90wrap_init_orientation_om_d(orient=orient, intype=intype, \
            rotcheck=rotcheck)
        res = f90wrap.runtime.lookup_class("pyEMsoft.orientationtyped").from_handle(res, \
            alloc=True)
        return res
    
    @staticmethod
    def init_orientation(*args, **kwargs):
        """
        init_orientation(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 176-180
        
        Overloaded interface containing the following procedures:
          _init_orientation
          _init_orientation_om
          _init_orientation_d
          _init_orientation_om_d
        
        """
        for proc in [Rotations._init_orientation, Rotations._init_orientation_om, \
            Rotations._init_orientation_d, Rotations._init_orientation_om_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _eu2om(e):
        """
        res = _eu2om(e)
        
        
        Defined at rotations.f90 lines 1761-1789
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_eu2om(e=e)
        return res
    
    @staticmethod
    def _eu2om_d(e):
        """
        res = _eu2om_d(e)
        
        
        Defined at rotations.f90 lines 1805-1833
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_eu2om_d(e=e)
        return res
    
    @staticmethod
    def eu2om(*args, **kwargs):
        """
        eu2om(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 185-187
        
        Overloaded interface containing the following procedures:
          _eu2om
          _eu2om_d
        
        """
        for proc in [Rotations._eu2om, Rotations._eu2om_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _eu2ax(e):
        """
        res = _eu2ax(e)
        
        
        Defined at rotations.f90 lines 1851-1876
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_eu2ax(e=e)
        return res
    
    @staticmethod
    def _eu2ax_d(e):
        """
        res = _eu2ax_d(e)
        
        
        Defined at rotations.f90 lines 1893-1918
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_eu2ax_d(e=e)
        return res
    
    @staticmethod
    def eu2ax(*args, **kwargs):
        """
        eu2ax(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 191-193
        
        Overloaded interface containing the following procedures:
          _eu2ax
          _eu2ax_d
        
        """
        for proc in [Rotations._eu2ax, Rotations._eu2ax_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _eu2ro(e):
        """
        res = _eu2ro(e)
        
        
        Defined at rotations.f90 lines 1933-1954
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_eu2ro(e=e)
        return res
    
    @staticmethod
    def _eu2ro_d(e):
        """
        res = _eu2ro_d(e)
        
        
        Defined at rotations.f90 lines 1969-1990
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_eu2ro_d(e=e)
        return res
    
    @staticmethod
    def eu2ro(*args, **kwargs):
        """
        eu2ro(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 197-199
        
        Overloaded interface containing the following procedures:
          _eu2ro
          _eu2ro_d
        
        """
        for proc in [Rotations._eu2ro, Rotations._eu2ro_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _eu2qu(e):
        """
        res = _eu2qu(e)
        
        
        Defined at rotations.f90 lines 2008-2026
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_eu2qu(e=e)
        return res
    
    @staticmethod
    def _eu2qu_d(e):
        """
        res = _eu2qu_d(e)
        
        
        Defined at rotations.f90 lines 2044-2062
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_eu2qu_d(e=e)
        return res
    
    @staticmethod
    def eu2qu(*args, **kwargs):
        """
        eu2qu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 203-205
        
        Overloaded interface containing the following procedures:
          _eu2qu
          _eu2qu_d
        
        """
        for proc in [Rotations._eu2qu, Rotations._eu2qu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _eu2ho(e):
        """
        res = _eu2ho(e)
        
        
        Defined at rotations.f90 lines 3450-3455
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_eu2ho(e=e)
        return res
    
    @staticmethod
    def _eu2ho_d(e):
        """
        res = _eu2ho_d(e)
        
        
        Defined at rotations.f90 lines 3470-3475
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_eu2ho_d(e=e)
        return res
    
    @staticmethod
    def eu2ho(*args, **kwargs):
        """
        eu2ho(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 209-211
        
        Overloaded interface containing the following procedures:
          _eu2ho
          _eu2ho_d
        
        """
        for proc in [Rotations._eu2ho, Rotations._eu2ho_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _eu2cu(e):
        """
        res = _eu2cu(e)
        
        
        Defined at rotations.f90 lines 3855-3860
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_eu2cu(e=e)
        return res
    
    @staticmethod
    def _eu2cu_d(e):
        """
        res = _eu2cu_d(e)
        
        
        Defined at rotations.f90 lines 3876-3881
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_eu2cu_d(e=e)
        return res
    
    @staticmethod
    def eu2cu(*args, **kwargs):
        """
        eu2cu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 215-217
        
        Overloaded interface containing the following procedures:
          _eu2cu
          _eu2cu_d
        
        """
        for proc in [Rotations._eu2cu, Rotations._eu2cu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _eu2st(c):
        """
        res = _eu2st(c)
        
        
        Defined at rotations.f90 lines 4486-4491
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_eu2st(c=c)
        return res
    
    @staticmethod
    def _eu2st_d(c):
        """
        res = _eu2st_d(c)
        
        
        Defined at rotations.f90 lines 4506-4511
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_eu2st_d(c=c)
        return res
    
    @staticmethod
    def eu2st(*args, **kwargs):
        """
        eu2st(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 221-223
        
        Overloaded interface containing the following procedures:
          _eu2st
          _eu2st_d
        
        """
        for proc in [Rotations._eu2st, Rotations._eu2st_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _eu2rv(e):
        """
        res = _eu2rv(e)
        
        
        Defined at rotations.f90 lines 5021-5030
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_eu2rv(e=e)
        return res
    
    @staticmethod
    def _eu2rv_d(e):
        """
        res = _eu2rv_d(e)
        
        
        Defined at rotations.f90 lines 5044-5053
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_eu2rv_d(e=e)
        return res
    
    @staticmethod
    def eu2rv(*args, **kwargs):
        """
        eu2rv(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 227-229
        
        Overloaded interface containing the following procedures:
          _eu2rv
          _eu2rv_d
        
        """
        for proc in [Rotations._eu2rv, Rotations._eu2rv_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _om2eu(o):
        """
        res = _om2eu(o)
        
        
        Defined at rotations.f90 lines 2079-2107
        
        Parameters
        ----------
        o : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_om2eu(o=o)
        return res
    
    @staticmethod
    def _om2eu_d(o):
        """
        res = _om2eu_d(o)
        
        
        Defined at rotations.f90 lines 2124-2152
        
        Parameters
        ----------
        o : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_om2eu_d(o=o)
        return res
    
    @staticmethod
    def om2eu(*args, **kwargs):
        """
        om2eu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 234-236
        
        Overloaded interface containing the following procedures:
          _om2eu
          _om2eu_d
        
        """
        for proc in [Rotations._om2eu, Rotations._om2eu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _om2ax(om):
        """
        res = _om2ax(om)
        
        
        Defined at rotations.f90 lines 2497-2548
        
        Parameters
        ----------
        om : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_om2ax(om=om)
        return res
    
    @staticmethod
    def _om2ax_d(om):
        """
        res = _om2ax_d(om)
        
        
        Defined at rotations.f90 lines 2566-2616
        
        Parameters
        ----------
        om : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_om2ax_d(om=om)
        return res
    
    @staticmethod
    def om2ax(*args, **kwargs):
        """
        om2ax(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 240-242
        
        Overloaded interface containing the following procedures:
          _om2ax
          _om2ax_d
        
        """
        for proc in [Rotations._om2ax, Rotations._om2ax_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _om2ro(om):
        """
        res = _om2ro(om)
        
        
        Defined at rotations.f90 lines 3490-3495
        
        Parameters
        ----------
        om : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_om2ro(om=om)
        return res
    
    @staticmethod
    def _om2ro_d(om):
        """
        res = _om2ro_d(om)
        
        
        Defined at rotations.f90 lines 3510-3515
        
        Parameters
        ----------
        om : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_om2ro_d(om=om)
        return res
    
    @staticmethod
    def om2ro(*args, **kwargs):
        """
        om2ro(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 246-248
        
        Overloaded interface containing the following procedures:
          _om2ro
          _om2ro_d
        
        """
        for proc in [Rotations._om2ro, Rotations._om2ro_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _om2qu(x):
        """
        res = _om2qu(x)
        
        
        Defined at rotations.f90 lines 2966-3003
        
        Parameters
        ----------
        x : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_om2qu(x=x)
        return res
    
    @staticmethod
    def _om2qu_d(x):
        """
        res = _om2qu_d(x)
        
        
        Defined at rotations.f90 lines 3018-3058
        
        Parameters
        ----------
        x : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_om2qu_d(x=x)
        return res
    
    @staticmethod
    def om2qu(*args, **kwargs):
        """
        om2qu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 252-254
        
        Overloaded interface containing the following procedures:
          _om2qu
          _om2qu_d
        
        """
        for proc in [Rotations._om2qu, Rotations._om2qu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _om2ho(om):
        """
        res = _om2ho(om)
        
        
        Defined at rotations.f90 lines 3531-3536
        
        Parameters
        ----------
        om : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_om2ho(om=om)
        return res
    
    @staticmethod
    def _om2ho_d(om):
        """
        res = _om2ho_d(om)
        
        
        Defined at rotations.f90 lines 3552-3557
        
        Parameters
        ----------
        om : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_om2ho_d(om=om)
        return res
    
    @staticmethod
    def om2ho(*args, **kwargs):
        """
        om2ho(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 258-260
        
        Overloaded interface containing the following procedures:
          _om2ho
          _om2ho_d
        
        """
        for proc in [Rotations._om2ho, Rotations._om2ho_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _om2cu(o):
        """
        res = _om2cu(o)
        
        
        Defined at rotations.f90 lines 3897-3902
        
        Parameters
        ----------
        o : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_om2cu(o=o)
        return res
    
    @staticmethod
    def _om2cu_d(o):
        """
        res = _om2cu_d(o)
        
        
        Defined at rotations.f90 lines 3918-3923
        
        Parameters
        ----------
        o : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_om2cu_d(o=o)
        return res
    
    @staticmethod
    def om2cu(*args, **kwargs):
        """
        om2cu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 264-266
        
        Overloaded interface containing the following procedures:
          _om2cu
          _om2cu_d
        
        """
        for proc in [Rotations._om2cu, Rotations._om2cu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _om2st(c):
        """
        res = _om2st(c)
        
        
        Defined at rotations.f90 lines 4286-4291
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_om2st(c=c)
        return res
    
    @staticmethod
    def _om2st_d(c):
        """
        res = _om2st_d(c)
        
        
        Defined at rotations.f90 lines 4306-4311
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_om2st_d(c=c)
        return res
    
    @staticmethod
    def om2st(*args, **kwargs):
        """
        om2st(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 270-272
        
        Overloaded interface containing the following procedures:
          _om2st
          _om2st_d
        
        """
        for proc in [Rotations._om2st, Rotations._om2st_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _om2rv(o):
        """
        res = _om2rv(o)
        
        
        Defined at rotations.f90 lines 5067-5075
        
        Parameters
        ----------
        o : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_om2rv(o=o)
        return res
    
    @staticmethod
    def _om2rv_d(o):
        """
        res = _om2rv_d(o)
        
        
        Defined at rotations.f90 lines 5089-5097
        
        Parameters
        ----------
        o : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_om2rv_d(o=o)
        return res
    
    @staticmethod
    def om2rv(*args, **kwargs):
        """
        om2rv(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 276-278
        
        Overloaded interface containing the following procedures:
          _om2rv
          _om2rv_d
        
        """
        for proc in [Rotations._om2rv, Rotations._om2rv_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ax2eu(a):
        """
        res = _ax2eu(a)
        
        
        Defined at rotations.f90 lines 3573-3578
        
        Parameters
        ----------
        a : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ax2eu(a=a)
        return res
    
    @staticmethod
    def _ax2eu_d(a):
        """
        res = _ax2eu_d(a)
        
        
        Defined at rotations.f90 lines 3594-3599
        
        Parameters
        ----------
        a : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ax2eu_d(a=a)
        return res
    
    @staticmethod
    def ax2eu(*args, **kwargs):
        """
        ax2eu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 283-285
        
        Overloaded interface containing the following procedures:
          _ax2eu
          _ax2eu_d
        
        """
        for proc in [Rotations._ax2eu, Rotations._ax2eu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ax2om(a):
        """
        res = _ax2om(a)
        
        
        Defined at rotations.f90 lines 2169-2193
        
        Parameters
        ----------
        a : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ax2om(a=a)
        return res
    
    @staticmethod
    def _ax2om_d(a):
        """
        res = _ax2om_d(a)
        
        
        Defined at rotations.f90 lines 2210-2234
        
        Parameters
        ----------
        a : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ax2om_d(a=a)
        return res
    
    @staticmethod
    def ax2om(*args, **kwargs):
        """
        ax2om(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 289-291
        
        Overloaded interface containing the following procedures:
          _ax2om
          _ax2om_d
        
        """
        for proc in [Rotations._ax2om, Rotations._ax2om_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ax2ro(a):
        """
        res = _ax2ro(a)
        
        
        Defined at rotations.f90 lines 2704-2723
        
        Parameters
        ----------
        a : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ax2ro(a=a)
        return res
    
    @staticmethod
    def _ax2ro_d(a):
        """
        res = _ax2ro_d(a)
        
        
        Defined at rotations.f90 lines 2740-2759
        
        Parameters
        ----------
        a : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ax2ro_d(a=a)
        return res
    
    @staticmethod
    def ax2ro(*args, **kwargs):
        """
        ax2ro(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 295-297
        
        Overloaded interface containing the following procedures:
          _ax2ro
          _ax2ro_d
        
        """
        for proc in [Rotations._ax2ro, Rotations._ax2ro_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ax2qu(a):
        """
        res = _ax2qu(a)
        
        
        Defined at rotations.f90 lines 2775-2786
        
        Parameters
        ----------
        a : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ax2qu(a=a)
        return res
    
    @staticmethod
    def _ax2qu_d(a):
        """
        res = _ax2qu_d(a)
        
        
        Defined at rotations.f90 lines 2802-2813
        
        Parameters
        ----------
        a : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ax2qu_d(a=a)
        return res
    
    @staticmethod
    def ax2qu(*args, **kwargs):
        """
        ax2qu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 301-303
        
        Overloaded interface containing the following procedures:
          _ax2qu
          _ax2qu_d
        
        """
        for proc in [Rotations._ax2qu, Rotations._ax2qu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ax2ho(a):
        """
        res = _ax2ho(a)
        
        
        Defined at rotations.f90 lines 2345-2356
        
        Parameters
        ----------
        a : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ax2ho(a=a)
        return res
    
    @staticmethod
    def _ax2ho_d(a):
        """
        res = _ax2ho_d(a)
        
        
        Defined at rotations.f90 lines 2371-2381
        
        Parameters
        ----------
        a : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ax2ho_d(a=a)
        return res
    
    @staticmethod
    def ax2ho(*args, **kwargs):
        """
        ax2ho(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 307-309
        
        Overloaded interface containing the following procedures:
          _ax2ho
          _ax2ho_d
        
        """
        for proc in [Rotations._ax2ho, Rotations._ax2ho_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ax2cu(a):
        """
        res = _ax2cu(a)
        
        
        Defined at rotations.f90 lines 3939-3944
        
        Parameters
        ----------
        a : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ax2cu(a=a)
        return res
    
    @staticmethod
    def _ax2cu_d(a):
        """
        res = _ax2cu_d(a)
        
        
        Defined at rotations.f90 lines 3960-3965
        
        Parameters
        ----------
        a : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ax2cu_d(a=a)
        return res
    
    @staticmethod
    def ax2cu(*args, **kwargs):
        """
        ax2cu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 313-315
        
        Overloaded interface containing the following procedures:
          _ax2cu
          _ax2cu_d
        
        """
        for proc in [Rotations._ax2cu, Rotations._ax2cu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ax2st(c):
        """
        res = _ax2st(c)
        
        
        Defined at rotations.f90 lines 4326-4331
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ax2st(c=c)
        return res
    
    @staticmethod
    def _ax2st_d(c):
        """
        res = _ax2st_d(c)
        
        
        Defined at rotations.f90 lines 4346-4351
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ax2st_d(c=c)
        return res
    
    @staticmethod
    def ax2st(*args, **kwargs):
        """
        ax2st(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 319-321
        
        Overloaded interface containing the following procedures:
          _ax2st
          _ax2st_d
        
        """
        for proc in [Rotations._ax2st, Rotations._ax2st_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ax2rv(a):
        """
        res = _ax2rv(a)
        
        
        Defined at rotations.f90 lines 5243-5252
        
        Parameters
        ----------
        a : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ax2rv(a=a)
        return res
    
    @staticmethod
    def _ax2rv_d(a):
        """
        res = _ax2rv_d(a)
        
        
        Defined at rotations.f90 lines 5266-5275
        
        Parameters
        ----------
        a : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ax2rv_d(a=a)
        return res
    
    @staticmethod
    def ax2rv(*args, **kwargs):
        """
        ax2rv(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 325-327
        
        Overloaded interface containing the following procedures:
          _ax2rv
          _ax2rv_d
        
        """
        for proc in [Rotations._ax2rv, Rotations._ax2rv_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ro2eu(r):
        """
        res = _ro2eu(r)
        
        
        Defined at rotations.f90 lines 3386-3402
        
        Parameters
        ----------
        r : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ro2eu(r=r)
        return res
    
    @staticmethod
    def _ro2eu_d(r):
        """
        res = _ro2eu_d(r)
        
        
        Defined at rotations.f90 lines 3419-3435
        
        Parameters
        ----------
        r : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ro2eu_d(r=r)
        return res
    
    @staticmethod
    def ro2eu(*args, **kwargs):
        """
        ro2eu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 332-334
        
        Overloaded interface containing the following procedures:
          _ro2eu
          _ro2eu_d
        
        """
        for proc in [Rotations._ro2eu, Rotations._ro2eu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ro2om(r):
        """
        res = _ro2om(r)
        
        
        Defined at rotations.f90 lines 3614-3619
        
        Parameters
        ----------
        r : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ro2om(r=r)
        return res
    
    @staticmethod
    def _ro2om_d(r):
        """
        res = _ro2om_d(r)
        
        
        Defined at rotations.f90 lines 3634-3639
        
        Parameters
        ----------
        r : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ro2om_d(r=r)
        return res
    
    @staticmethod
    def ro2om(*args, **kwargs):
        """
        ro2om(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 338-340
        
        Overloaded interface containing the following procedures:
          _ro2om
          _ro2om_d
        
        """
        for proc in [Rotations._ro2om, Rotations._ro2om_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ro2ax(r):
        """
        res = _ro2ax(r)
        
        
        Defined at rotations.f90 lines 2632-2652
        
        Parameters
        ----------
        r : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ro2ax(r=r)
        return res
    
    @staticmethod
    def _ro2ax_d(r):
        """
        res = _ro2ax_d(r)
        
        
        Defined at rotations.f90 lines 2668-2687
        
        Parameters
        ----------
        r : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ro2ax_d(r=r)
        return res
    
    @staticmethod
    def ro2ax(*args, **kwargs):
        """
        ro2ax(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 344-346
        
        Overloaded interface containing the following procedures:
          _ro2ax
          _ro2ax_d
        
        """
        for proc in [Rotations._ro2ax, Rotations._ro2ax_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ro2qu(r):
        """
        res = _ro2qu(r)
        
        
        Defined at rotations.f90 lines 3654-3659
        
        Parameters
        ----------
        r : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ro2qu(r=r)
        return res
    
    @staticmethod
    def _ro2qu_d(r):
        """
        res = _ro2qu_d(r)
        
        
        Defined at rotations.f90 lines 3674-3679
        
        Parameters
        ----------
        r : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ro2qu_d(r=r)
        return res
    
    @staticmethod
    def ro2qu(*args, **kwargs):
        """
        ro2qu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 350-352
        
        Overloaded interface containing the following procedures:
          _ro2qu
          _ro2qu_d
        
        """
        for proc in [Rotations._ro2qu, Rotations._ro2qu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ro2ho(r):
        """
        res = _ro2ho(r)
        
        
        Defined at rotations.f90 lines 2830-2847
        
        Parameters
        ----------
        r : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ro2ho(r=r)
        return res
    
    @staticmethod
    def _ro2ho_d(r):
        """
        res = _ro2ho_d(r)
        
        
        Defined at rotations.f90 lines 2863-2880
        
        Parameters
        ----------
        r : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ro2ho_d(r=r)
        return res
    
    @staticmethod
    def ro2ho(*args, **kwargs):
        """
        ro2ho(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 356-358
        
        Overloaded interface containing the following procedures:
          _ro2ho
          _ro2ho_d
        
        """
        for proc in [Rotations._ro2ho, Rotations._ro2ho_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ro2cu(r):
        """
        res = _ro2cu(r)
        
        
        Defined at rotations.f90 lines 3981-3986
        
        Parameters
        ----------
        r : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ro2cu(r=r)
        return res
    
    @staticmethod
    def _ro2cu_d(r):
        """
        res = _ro2cu_d(r)
        
        
        Defined at rotations.f90 lines 4002-4007
        
        Parameters
        ----------
        r : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ro2cu_d(r=r)
        return res
    
    @staticmethod
    def ro2cu(*args, **kwargs):
        """
        ro2cu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 362-364
        
        Overloaded interface containing the following procedures:
          _ro2cu
          _ro2cu_d
        
        """
        for proc in [Rotations._ro2cu, Rotations._ro2cu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ro2st(c):
        """
        res = _ro2st(c)
        
        
        Defined at rotations.f90 lines 4366-4371
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ro2st(c=c)
        return res
    
    @staticmethod
    def _ro2st_d(c):
        """
        res = _ro2st_d(c)
        
        
        Defined at rotations.f90 lines 4386-4391
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ro2st_d(c=c)
        return res
    
    @staticmethod
    def ro2st(*args, **kwargs):
        """
        ro2st(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 368-370
        
        Overloaded interface containing the following procedures:
          _ro2st
          _ro2st_d
        
        """
        for proc in [Rotations._ro2st, Rotations._ro2st_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ro2rv(r):
        """
        res = _ro2rv(r)
        
        
        Defined at rotations.f90 lines 5111-5119
        
        Parameters
        ----------
        r : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ro2rv(r=r)
        return res
    
    @staticmethod
    def _ro2rv_d(r):
        """
        res = _ro2rv_d(r)
        
        
        Defined at rotations.f90 lines 5133-5141
        
        Parameters
        ----------
        r : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ro2rv_d(r=r)
        return res
    
    @staticmethod
    def ro2rv(*args, **kwargs):
        """
        ro2rv(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 374-376
        
        Overloaded interface containing the following procedures:
          _ro2rv
          _ro2rv_d
        
        """
        for proc in [Rotations._ro2rv, Rotations._ro2rv_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _qu2eu(q):
        """
        res = _qu2eu(q)
        
        
        Defined at rotations.f90 lines 2250-2282
        
        Parameters
        ----------
        q : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_qu2eu(q=q)
        return res
    
    @staticmethod
    def _qu2eu_d(q):
        """
        res = _qu2eu_d(q)
        
        
        Defined at rotations.f90 lines 2298-2330
        
        Parameters
        ----------
        q : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_qu2eu_d(q=q)
        return res
    
    @staticmethod
    def qu2eu(*args, **kwargs):
        """
        qu2eu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 381-383
        
        Overloaded interface containing the following procedures:
          _qu2eu
          _qu2eu_d
        
        """
        for proc in [Rotations._qu2eu, Rotations._qu2eu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _qu2om(q):
        """
        res = _qu2om(q)
        
        
        Defined at rotations.f90 lines 2897-2915
        
        Parameters
        ----------
        q : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_qu2om(q=q)
        return res
    
    @staticmethod
    def _qu2om_d(q):
        """
        res = _qu2om_d(q)
        
        
        Defined at rotations.f90 lines 2932-2950
        
        Parameters
        ----------
        q : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_qu2om_d(q=q)
        return res
    
    @staticmethod
    def qu2om(*args, **kwargs):
        """
        qu2om(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 387-389
        
        Overloaded interface containing the following procedures:
          _qu2om
          _qu2om_d
        
        """
        for proc in [Rotations._qu2om, Rotations._qu2om_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _qu2ax(q):
        """
        res = _qu2ax(q)
        
        
        Defined at rotations.f90 lines 3074-3092
        
        Parameters
        ----------
        q : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_qu2ax(q=q)
        return res
    
    @staticmethod
    def _qu2ax_d(q):
        """
        res = _qu2ax_d(q)
        
        
        Defined at rotations.f90 lines 3108-3125
        
        Parameters
        ----------
        q : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_qu2ax_d(q=q)
        return res
    
    @staticmethod
    def qu2ax(*args, **kwargs):
        """
        qu2ax(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 393-395
        
        Overloaded interface containing the following procedures:
          _qu2ax
          _qu2ax_d
        
        """
        for proc in [Rotations._qu2ax, Rotations._qu2ax_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _qu2ro(q):
        """
        res = _qu2ro(q)
        
        
        Defined at rotations.f90 lines 3141-3161
        
        Parameters
        ----------
        q : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_qu2ro(q=q)
        return res
    
    @staticmethod
    def _qu2ro_d(q):
        """
        res = _qu2ro_d(q)
        
        
        Defined at rotations.f90 lines 3178-3198
        
        Parameters
        ----------
        q : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_qu2ro_d(q=q)
        return res
    
    @staticmethod
    def qu2ro(*args, **kwargs):
        """
        qu2ro(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 399-401
        
        Overloaded interface containing the following procedures:
          _qu2ro
          _qu2ro_d
        
        """
        for proc in [Rotations._qu2ro, Rotations._qu2ro_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _qu2ho(q):
        """
        res = _qu2ho(q)
        
        
        Defined at rotations.f90 lines 3214-3228
        
        Parameters
        ----------
        q : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_qu2ho(q=q)
        return res
    
    @staticmethod
    def _qu2ho_d(q):
        """
        res = _qu2ho_d(q)
        
        
        Defined at rotations.f90 lines 3244-3258
        
        Parameters
        ----------
        q : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_qu2ho_d(q=q)
        return res
    
    @staticmethod
    def qu2ho(*args, **kwargs):
        """
        qu2ho(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 405-407
        
        Overloaded interface containing the following procedures:
          _qu2ho
          _qu2ho_d
        
        """
        for proc in [Rotations._qu2ho, Rotations._qu2ho_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _qu2cu(q):
        """
        res = _qu2cu(q)
        
        
        Defined at rotations.f90 lines 4023-4028
        
        Parameters
        ----------
        q : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_qu2cu(q=q)
        return res
    
    @staticmethod
    def _qu2cu_d(q):
        """
        res = _qu2cu_d(q)
        
        
        Defined at rotations.f90 lines 4044-4049
        
        Parameters
        ----------
        q : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_qu2cu_d(q=q)
        return res
    
    @staticmethod
    def qu2cu(*args, **kwargs):
        """
        qu2cu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 411-413
        
        Overloaded interface containing the following procedures:
          _qu2cu
          _qu2cu_d
        
        """
        for proc in [Rotations._qu2cu, Rotations._qu2cu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _qu2st(c):
        """
        res = _qu2st(c)
        
        
        Defined at rotations.f90 lines 4526-4534
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_qu2st(c=c)
        return res
    
    @staticmethod
    def _qu2st_d(c):
        """
        res = _qu2st_d(c)
        
        
        Defined at rotations.f90 lines 4549-4557
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_qu2st_d(c=c)
        return res
    
    @staticmethod
    def qu2st(*args, **kwargs):
        """
        qu2st(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 417-419
        
        Overloaded interface containing the following procedures:
          _qu2st
          _qu2st_d
        
        """
        for proc in [Rotations._qu2st, Rotations._qu2st_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _qu2rv(q):
        """
        res = _qu2rv(q)
        
        
        Defined at rotations.f90 lines 5155-5163
        
        Parameters
        ----------
        q : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_qu2rv(q=q)
        return res
    
    @staticmethod
    def _qu2rv_d(q):
        """
        res = _qu2rv_d(q)
        
        
        Defined at rotations.f90 lines 5177-5185
        
        Parameters
        ----------
        q : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_qu2rv_d(q=q)
        return res
    
    @staticmethod
    def qu2rv(*args, **kwargs):
        """
        qu2rv(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 423-425
        
        Overloaded interface containing the following procedures:
          _qu2rv
          _qu2rv_d
        
        """
        for proc in [Rotations._qu2rv, Rotations._qu2rv_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ho2eu(h):
        """
        res = _ho2eu(h)
        
        
        Defined at rotations.f90 lines 3694-3699
        
        Parameters
        ----------
        h : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ho2eu(h=h)
        return res
    
    @staticmethod
    def _ho2eu_d(h):
        """
        res = _ho2eu_d(h)
        
        
        Defined at rotations.f90 lines 3714-3719
        
        Parameters
        ----------
        h : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ho2eu_d(h=h)
        return res
    
    @staticmethod
    def ho2eu(*args, **kwargs):
        """
        ho2eu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 430-432
        
        Overloaded interface containing the following procedures:
          _ho2eu
          _ho2eu_d
        
        """
        for proc in [Rotations._ho2eu, Rotations._ho2eu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ho2om(h):
        """
        res = _ho2om(h)
        
        
        Defined at rotations.f90 lines 3734-3739
        
        Parameters
        ----------
        h : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ho2om(h=h)
        return res
    
    @staticmethod
    def _ho2om_d(h):
        """
        res = _ho2om_d(h)
        
        
        Defined at rotations.f90 lines 3754-3759
        
        Parameters
        ----------
        h : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ho2om_d(h=h)
        return res
    
    @staticmethod
    def ho2om(*args, **kwargs):
        """
        ho2om(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 436-438
        
        Overloaded interface containing the following procedures:
          _ho2om
          _ho2om_d
        
        """
        for proc in [Rotations._ho2om, Rotations._ho2om_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ho2ax(h):
        """
        res = _ho2ax(h)
        
        
        Defined at rotations.f90 lines 2399-2430
        
        Parameters
        ----------
        h : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ho2ax(h=h)
        return res
    
    @staticmethod
    def _ho2ax_d(h):
        """
        res = _ho2ax_d(h)
        
        
        Defined at rotations.f90 lines 2447-2477
        
        Parameters
        ----------
        h : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ho2ax_d(h=h)
        return res
    
    @staticmethod
    def ho2ax(*args, **kwargs):
        """
        ho2ax(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 442-444
        
        Overloaded interface containing the following procedures:
          _ho2ax
          _ho2ax_d
        
        """
        for proc in [Rotations._ho2ax, Rotations._ho2ax_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ho2ro(h):
        """
        res = _ho2ro(h)
        
        
        Defined at rotations.f90 lines 3774-3779
        
        Parameters
        ----------
        h : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ho2ro(h=h)
        return res
    
    @staticmethod
    def _ho2ro_d(h):
        """
        res = _ho2ro_d(h)
        
        
        Defined at rotations.f90 lines 3794-3799
        
        Parameters
        ----------
        h : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ho2ro_d(h=h)
        return res
    
    @staticmethod
    def ho2ro(*args, **kwargs):
        """
        ho2ro(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 448-450
        
        Overloaded interface containing the following procedures:
          _ho2ro
          _ho2ro_d
        
        """
        for proc in [Rotations._ho2ro, Rotations._ho2ro_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ho2qu(h):
        """
        res = _ho2qu(h)
        
        
        Defined at rotations.f90 lines 3814-3819
        
        Parameters
        ----------
        h : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ho2qu(h=h)
        return res
    
    @staticmethod
    def _ho2qu_d(h):
        """
        res = _ho2qu_d(h)
        
        
        Defined at rotations.f90 lines 3834-3839
        
        Parameters
        ----------
        h : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ho2qu_d(h=h)
        return res
    
    @staticmethod
    def ho2qu(*args, **kwargs):
        """
        ho2qu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 454-456
        
        Overloaded interface containing the following procedures:
          _ho2qu
          _ho2qu_d
        
        """
        for proc in [Rotations._ho2qu, Rotations._ho2qu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ho2cu(h):
        """
        res = _ho2cu(h)
        
        
        Defined at rotations.f90 lines 3273-3282
        
        Parameters
        ----------
        h : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ho2cu(h=h)
        return res
    
    @staticmethod
    def _ho2cu_d(h):
        """
        res = _ho2cu_d(h)
        
        
        Defined at rotations.f90 lines 3297-3306
        
        Parameters
        ----------
        h : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ho2cu_d(h=h)
        return res
    
    @staticmethod
    def ho2cu(*args, **kwargs):
        """
        ho2cu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 460-462
        
        Overloaded interface containing the following procedures:
          _ho2cu
          _ho2cu_d
        
        """
        for proc in [Rotations._ho2cu, Rotations._ho2cu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ho2st(c):
        """
        res = _ho2st(c)
        
        
        Defined at rotations.f90 lines 4406-4411
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ho2st(c=c)
        return res
    
    @staticmethod
    def _ho2st_d(c):
        """
        res = _ho2st_d(c)
        
        
        Defined at rotations.f90 lines 4426-4431
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ho2st_d(c=c)
        return res
    
    @staticmethod
    def ho2st(*args, **kwargs):
        """
        ho2st(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 466-468
        
        Overloaded interface containing the following procedures:
          _ho2st
          _ho2st_d
        
        """
        for proc in [Rotations._ho2st, Rotations._ho2st_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _ho2rv(h):
        """
        res = _ho2rv(h)
        
        
        Defined at rotations.f90 lines 5289-5297
        
        Parameters
        ----------
        h : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ho2rv(h=h)
        return res
    
    @staticmethod
    def _ho2rv_d(h):
        """
        res = _ho2rv_d(h)
        
        
        Defined at rotations.f90 lines 5311-5319
        
        Parameters
        ----------
        h : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_ho2rv_d(h=h)
        return res
    
    @staticmethod
    def ho2rv(*args, **kwargs):
        """
        ho2rv(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 472-474
        
        Overloaded interface containing the following procedures:
          _ho2rv
          _ho2rv_d
        
        """
        for proc in [Rotations._ho2rv, Rotations._ho2rv_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _cu2eu(c):
        """
        res = _cu2eu(c)
        
        
        Defined at rotations.f90 lines 4065-4070
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cu2eu(c=c)
        return res
    
    @staticmethod
    def _cu2eu_d(c):
        """
        res = _cu2eu_d(c)
        
        
        Defined at rotations.f90 lines 4086-4091
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cu2eu_d(c=c)
        return res
    
    @staticmethod
    def cu2eu(*args, **kwargs):
        """
        cu2eu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 479-481
        
        Overloaded interface containing the following procedures:
          _cu2eu
          _cu2eu_d
        
        """
        for proc in [Rotations._cu2eu, Rotations._cu2eu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _cu2om(c):
        """
        res = _cu2om(c)
        
        
        Defined at rotations.f90 lines 4107-4112
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cu2om(c=c)
        return res
    
    @staticmethod
    def _cu2om_d(c):
        """
        res = _cu2om_d(c)
        
        
        Defined at rotations.f90 lines 4128-4133
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cu2om_d(c=c)
        return res
    
    @staticmethod
    def cu2om(*args, **kwargs):
        """
        cu2om(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 485-487
        
        Overloaded interface containing the following procedures:
          _cu2om
          _cu2om_d
        
        """
        for proc in [Rotations._cu2om, Rotations._cu2om_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _cu2ax(c):
        """
        res = _cu2ax(c)
        
        
        Defined at rotations.f90 lines 4149-4154
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cu2ax(c=c)
        return res
    
    @staticmethod
    def _cu2ax_d(c):
        """
        res = _cu2ax_d(c)
        
        
        Defined at rotations.f90 lines 4170-4175
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cu2ax_d(c=c)
        return res
    
    @staticmethod
    def cu2ax(*args, **kwargs):
        """
        cu2ax(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 491-493
        
        Overloaded interface containing the following procedures:
          _cu2ax
          _cu2ax_d
        
        """
        for proc in [Rotations._cu2ax, Rotations._cu2ax_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _cu2ro(c):
        """
        res = _cu2ro(c)
        
        
        Defined at rotations.f90 lines 4191-4200
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cu2ro(c=c)
        return res
    
    @staticmethod
    def _cu2ro_d(c):
        """
        res = _cu2ro_d(c)
        
        
        Defined at rotations.f90 lines 4216-4225
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cu2ro_d(c=c)
        return res
    
    @staticmethod
    def cu2ro(*args, **kwargs):
        """
        cu2ro(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 497-499
        
        Overloaded interface containing the following procedures:
          _cu2ro
          _cu2ro_d
        
        """
        for proc in [Rotations._cu2ro, Rotations._cu2ro_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _cu2qu(c):
        """
        res = _cu2qu(c)
        
        
        Defined at rotations.f90 lines 4241-4246
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cu2qu(c=c)
        return res
    
    @staticmethod
    def _cu2qu_d(c):
        """
        res = _cu2qu_d(c)
        
        
        Defined at rotations.f90 lines 4261-4266
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cu2qu_d(c=c)
        return res
    
    @staticmethod
    def cu2qu(*args, **kwargs):
        """
        cu2qu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 503-505
        
        Overloaded interface containing the following procedures:
          _cu2qu
          _cu2qu_d
        
        """
        for proc in [Rotations._cu2qu, Rotations._cu2qu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _cu2ho(c):
        """
        res = _cu2ho(c)
        
        
        Defined at rotations.f90 lines 3322-3331
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cu2ho(c=c)
        return res
    
    @staticmethod
    def _cu2ho_d(c):
        """
        res = _cu2ho_d(c)
        
        
        Defined at rotations.f90 lines 3347-3356
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cu2ho_d(c=c)
        return res
    
    @staticmethod
    def cu2ho(*args, **kwargs):
        """
        cu2ho(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 509-511
        
        Overloaded interface containing the following procedures:
          _cu2ho
          _cu2ho_d
        
        """
        for proc in [Rotations._cu2ho, Rotations._cu2ho_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _cu2st(c):
        """
        res = _cu2st(c)
        
        
        Defined at rotations.f90 lines 4446-4451
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cu2st(c=c)
        return res
    
    @staticmethod
    def _cu2st_d(c):
        """
        res = _cu2st_d(c)
        
        
        Defined at rotations.f90 lines 4466-4471
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cu2st_d(c=c)
        return res
    
    @staticmethod
    def cu2st(*args, **kwargs):
        """
        cu2st(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 515-517
        
        Overloaded interface containing the following procedures:
          _cu2st
          _cu2st_d
        
        """
        for proc in [Rotations._cu2st, Rotations._cu2st_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _cu2rv(c):
        """
        res = _cu2rv(c)
        
        
        Defined at rotations.f90 lines 5199-5207
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cu2rv(c=c)
        return res
    
    @staticmethod
    def _cu2rv_d(c):
        """
        res = _cu2rv_d(c)
        
        
        Defined at rotations.f90 lines 5221-5229
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_cu2rv_d(c=c)
        return res
    
    @staticmethod
    def cu2rv(*args, **kwargs):
        """
        cu2rv(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 521-523
        
        Overloaded interface containing the following procedures:
          _cu2rv
          _cu2rv_d
        
        """
        for proc in [Rotations._cu2rv, Rotations._cu2rv_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _st2eu(c):
        """
        res = _st2eu(c)
        
        
        Defined at rotations.f90 lines 4645-4664
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_st2eu(c=c)
        return res
    
    @staticmethod
    def _st2eu_d(c):
        """
        res = _st2eu_d(c)
        
        
        Defined at rotations.f90 lines 4679-4697
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_st2eu_d(c=c)
        return res
    
    @staticmethod
    def st2eu(*args, **kwargs):
        """
        st2eu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 528-530
        
        Overloaded interface containing the following procedures:
          _st2eu
          _st2eu_d
        
        """
        for proc in [Rotations._st2eu, Rotations._st2eu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _st2om(c):
        """
        res = _st2om(c)
        
        
        Defined at rotations.f90 lines 4572-4594
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_st2om(c=c)
        return res
    
    @staticmethod
    def _st2om_d(c):
        """
        res = _st2om_d(c)
        
        
        Defined at rotations.f90 lines 4609-4630
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_st2om_d(c=c)
        return res
    
    @staticmethod
    def st2om(*args, **kwargs):
        """
        st2om(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 534-536
        
        Overloaded interface containing the following procedures:
          _st2om
          _st2om_d
        
        """
        for proc in [Rotations._st2om, Rotations._st2om_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _st2ax(c):
        """
        res = _st2ax(c)
        
        
        Defined at rotations.f90 lines 4779-4797
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_st2ax(c=c)
        return res
    
    @staticmethod
    def _st2ax_d(c):
        """
        res = _st2ax_d(c)
        
        
        Defined at rotations.f90 lines 4812-4829
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_st2ax_d(c=c)
        return res
    
    @staticmethod
    def st2ax(*args, **kwargs):
        """
        st2ax(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 540-542
        
        Overloaded interface containing the following procedures:
          _st2ax
          _st2ax_d
        
        """
        for proc in [Rotations._st2ax, Rotations._st2ax_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _st2ro(c):
        """
        res = _st2ro(c)
        
        
        Defined at rotations.f90 lines 4844-4862
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_st2ro(c=c)
        return res
    
    @staticmethod
    def _st2ro_d(c):
        """
        res = _st2ro_d(c)
        
        
        Defined at rotations.f90 lines 4877-4895
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_st2ro_d(c=c)
        return res
    
    @staticmethod
    def st2ro(*args, **kwargs):
        """
        st2ro(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 546-548
        
        Overloaded interface containing the following procedures:
          _st2ro
          _st2ro_d
        
        """
        for proc in [Rotations._st2ro, Rotations._st2ro_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _st2qu(c):
        """
        res = _st2qu(c)
        
        
        Defined at rotations.f90 lines 4712-4731
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_st2qu(c=c)
        return res
    
    @staticmethod
    def _st2qu_d(c):
        """
        res = _st2qu_d(c)
        
        
        Defined at rotations.f90 lines 4746-4764
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_st2qu_d(c=c)
        return res
    
    @staticmethod
    def st2qu(*args, **kwargs):
        """
        st2qu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 552-554
        
        Overloaded interface containing the following procedures:
          _st2qu
          _st2qu_d
        
        """
        for proc in [Rotations._st2qu, Rotations._st2qu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _st2ho(c):
        """
        res = _st2ho(c)
        
        
        Defined at rotations.f90 lines 4910-4923
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_st2ho(c=c)
        return res
    
    @staticmethod
    def _st2ho_d(c):
        """
        res = _st2ho_d(c)
        
        
        Defined at rotations.f90 lines 4938-4951
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_st2ho_d(c=c)
        return res
    
    @staticmethod
    def st2ho(*args, **kwargs):
        """
        st2ho(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 558-560
        
        Overloaded interface containing the following procedures:
          _st2ho
          _st2ho_d
        
        """
        for proc in [Rotations._st2ho, Rotations._st2ho_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _st2cu(c):
        """
        res = _st2cu(c)
        
        
        Defined at rotations.f90 lines 4966-4979
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_st2cu(c=c)
        return res
    
    @staticmethod
    def _st2cu_d(c):
        """
        res = _st2cu_d(c)
        
        
        Defined at rotations.f90 lines 4994-5007
        
        Parameters
        ----------
        c : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_st2cu_d(c=c)
        return res
    
    @staticmethod
    def st2cu(*args, **kwargs):
        """
        st2cu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 564-566
        
        Overloaded interface containing the following procedures:
          _st2cu
          _st2cu_d
        
        """
        for proc in [Rotations._st2cu, Rotations._st2cu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _st2rv(s):
        """
        res = _st2rv(s)
        
        
        Defined at rotations.f90 lines 5333-5341
        
        Parameters
        ----------
        s : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_st2rv(s=s)
        return res
    
    @staticmethod
    def _st2rv_d(s):
        """
        res = _st2rv_d(s)
        
        
        Defined at rotations.f90 lines 5355-5363
        
        Parameters
        ----------
        s : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_st2rv_d(s=s)
        return res
    
    @staticmethod
    def st2rv(*args, **kwargs):
        """
        st2rv(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 570-572
        
        Overloaded interface containing the following procedures:
          _st2rv
          _st2rv_d
        
        """
        for proc in [Rotations._st2rv, Rotations._st2rv_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _rv2ax(e):
        """
        res = _rv2ax(e)
        
        
        Defined at rotations.f90 lines 5377-5392
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rv2ax(e=e)
        return res
    
    @staticmethod
    def _rv2ax_d(e):
        """
        res = _rv2ax_d(e)
        
        
        Defined at rotations.f90 lines 5406-5421
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rv2ax_d(e=e)
        return res
    
    @staticmethod
    def rv2ax(*args, **kwargs):
        """
        rv2ax(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 577-579
        
        Overloaded interface containing the following procedures:
          _rv2ax
          _rv2ax_d
        
        """
        for proc in [Rotations._rv2ax, Rotations._rv2ax_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _rv2qu(e):
        """
        res = _rv2qu(e)
        
        
        Defined at rotations.f90 lines 5519-5526
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rv2qu(e=e)
        return res
    
    @staticmethod
    def _rv2qu_d(e):
        """
        res = _rv2qu_d(e)
        
        
        Defined at rotations.f90 lines 5540-5547
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rv2qu_d(e=e)
        return res
    
    @staticmethod
    def rv2qu(*args, **kwargs):
        """
        rv2qu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 583-585
        
        Overloaded interface containing the following procedures:
          _rv2qu
          _rv2qu_d
        
        """
        for proc in [Rotations._rv2qu, Rotations._rv2qu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _rv2eu(e):
        """
        res = _rv2eu(e)
        
        
        Defined at rotations.f90 lines 5477-5484
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rv2eu(e=e)
        return res
    
    @staticmethod
    def _rv2eu_d(e):
        """
        res = _rv2eu_d(e)
        
        
        Defined at rotations.f90 lines 5498-5505
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rv2eu_d(e=e)
        return res
    
    @staticmethod
    def rv2eu(*args, **kwargs):
        """
        rv2eu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 589-591
        
        Overloaded interface containing the following procedures:
          _rv2eu
          _rv2eu_d
        
        """
        for proc in [Rotations._rv2eu, Rotations._rv2eu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _rv2ro(e):
        """
        res = _rv2ro(e)
        
        
        Defined at rotations.f90 lines 5561-5568
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rv2ro(e=e)
        return res
    
    @staticmethod
    def _rv2ro_d(e):
        """
        res = _rv2ro_d(e)
        
        
        Defined at rotations.f90 lines 5582-5589
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rv2ro_d(e=e)
        return res
    
    @staticmethod
    def rv2ro(*args, **kwargs):
        """
        rv2ro(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 595-597
        
        Overloaded interface containing the following procedures:
          _rv2ro
          _rv2ro_d
        
        """
        for proc in [Rotations._rv2ro, Rotations._rv2ro_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _rv2om(e):
        """
        res = _rv2om(e)
        
        
        Defined at rotations.f90 lines 5435-5442
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rv2om(e=e)
        return res
    
    @staticmethod
    def _rv2om_d(e):
        """
        res = _rv2om_d(e)
        
        
        Defined at rotations.f90 lines 5456-5463
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rv2om_d(e=e)
        return res
    
    @staticmethod
    def rv2om(*args, **kwargs):
        """
        rv2om(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 601-603
        
        Overloaded interface containing the following procedures:
          _rv2om
          _rv2om_d
        
        """
        for proc in [Rotations._rv2om, Rotations._rv2om_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _rv2cu(e):
        """
        res = _rv2cu(e)
        
        
        Defined at rotations.f90 lines 5603-5610
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rv2cu(e=e)
        return res
    
    @staticmethod
    def _rv2cu_d(e):
        """
        res = _rv2cu_d(e)
        
        
        Defined at rotations.f90 lines 5624-5631
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rv2cu_d(e=e)
        return res
    
    @staticmethod
    def rv2cu(*args, **kwargs):
        """
        rv2cu(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 607-609
        
        Overloaded interface containing the following procedures:
          _rv2cu
          _rv2cu_d
        
        """
        for proc in [Rotations._rv2cu, Rotations._rv2cu_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _rv2st(e):
        """
        res = _rv2st(e)
        
        
        Defined at rotations.f90 lines 5687-5694
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rv2st(e=e)
        return res
    
    @staticmethod
    def _rv2st_d(e):
        """
        res = _rv2st_d(e)
        
        
        Defined at rotations.f90 lines 5708-5715
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rv2st_d(e=e)
        return res
    
    @staticmethod
    def rv2st(*args, **kwargs):
        """
        rv2st(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 613-615
        
        Overloaded interface containing the following procedures:
          _rv2st
          _rv2st_d
        
        """
        for proc in [Rotations._rv2st, Rotations._rv2st_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _rv2ho(e):
        """
        res = _rv2ho(e)
        
        
        Defined at rotations.f90 lines 5645-5652
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rv2ho(e=e)
        return res
    
    @staticmethod
    def _rv2ho_d(e):
        """
        res = _rv2ho_d(e)
        
        
        Defined at rotations.f90 lines 5666-5673
        
        Parameters
        ----------
        e : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rv2ho_d(e=e)
        return res
    
    @staticmethod
    def rv2ho(*args, **kwargs):
        """
        rv2ho(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 619-621
        
        Overloaded interface containing the following procedures:
          _rv2ho
          _rv2ho_d
        
        """
        for proc in [Rotations._rv2ho, Rotations._rv2ho_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _rodriguesproduct(roa, rob):
        """
        res = _rodriguesproduct(roa, rob)
        
        
        Defined at rotations.f90 lines 5735-5742
        
        Parameters
        ----------
        roa : float array
        rob : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rodriguesproduct(roa=roa, rob=rob)
        return res
    
    @staticmethod
    def _rodriguesproduct_d(roa, rob):
        """
        res = _rodriguesproduct_d(roa, rob)
        
        
        Defined at rotations.f90 lines 5757-5764
        
        Parameters
        ----------
        roa : float array
        rob : float array
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rodriguesproduct_d(roa=roa, rob=rob)
        return res
    
    @staticmethod
    def rodriguesproduct(*args, **kwargs):
        """
        rodriguesproduct(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 626-628
        
        Overloaded interface containing the following procedures:
          _rodriguesproduct
          _rodriguesproduct_d
        
        """
        for proc in [Rotations._rodriguesproduct, Rotations._rodriguesproduct_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _rotvec_om(vec, om, ap):
        """
        res = _rotvec_om(vec, om, ap)
        
        
        Defined at rotations.f90 lines 5787-5798
        
        Parameters
        ----------
        vec : float array
        om : float array
        ap : str
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rotvec_om(vec=vec, om=om, ap=ap)
        return res
    
    @staticmethod
    def _rotvec_om_d(vec, om, ap):
        """
        res = _rotvec_om_d(vec, om, ap)
        
        
        Defined at rotations.f90 lines 5821-5832
        
        Parameters
        ----------
        vec : float array
        om : float array
        ap : str
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rotvec_om_d(vec=vec, om=om, ap=ap)
        return res
    
    @staticmethod
    def rotatevector(*args, **kwargs):
        """
        rotatevector(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 632-634
        
        Overloaded interface containing the following procedures:
          _rotvec_om
          _rotvec_om_d
        
        """
        for proc in [Rotations._rotvec_om, Rotations._rotvec_om_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _rottensor2_om(tensor, om, ap):
        """
        res = _rottensor2_om(tensor, om, ap)
        
        
        Defined at rotations.f90 lines 5849-5860
        
        Parameters
        ----------
        tensor : float array
        om : float array
        ap : str
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rottensor2_om(tensor=tensor, om=om, ap=ap)
        return res
    
    @staticmethod
    def _rottensor2_om_d(tensor, om, ap):
        """
        res = _rottensor2_om_d(tensor, om, ap)
        
        
        Defined at rotations.f90 lines 5877-5888
        
        Parameters
        ----------
        tensor : float array
        om : float array
        ap : str
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_rottensor2_om_d(tensor=tensor, om=om, ap=ap)
        return res
    
    @staticmethod
    def rotatetensor2(*args, **kwargs):
        """
        rotatetensor2(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 638-640
        
        Overloaded interface containing the following procedures:
          _rottensor2_om
          _rottensor2_om_d
        
        """
        for proc in [Rotations._rottensor2_om, Rotations._rottensor2_om_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _quat_average(qlist, numq, qstdev, tmatrix=None):
        """
        res = _quat_average(qlist, numq, qstdev[, tmatrix])
        
        
        Defined at rotations.f90 lines 5911-5981
        
        Parameters
        ----------
        qlist : float array
        numq : int
        qstdev : float array
        tmatrix : bool
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_quat_average(qlist=qlist, numq=numq, qstdev=qstdev, \
            tmatrix=tmatrix)
        return res
    
    @staticmethod
    def _quat_average_d(qlist, numq, qstdev, tmatrix=None):
        """
        res = _quat_average_d(qlist, numq, qstdev[, tmatrix])
        
        
        Defined at rotations.f90 lines 5999-6069
        
        Parameters
        ----------
        qlist : float array
        numq : int
        qstdev : float array
        tmatrix : bool
        
        Returns
        -------
        res : float array
        
        """
        res = _pyEMsoft.f90wrap_quat_average_d(qlist=qlist, numq=numq, qstdev=qstdev, \
            tmatrix=tmatrix)
        return res
    
    @staticmethod
    def quat_average(*args, **kwargs):
        """
        quat_average(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 644-646
        
        Overloaded interface containing the following procedures:
          _quat_average
          _quat_average_d
        
        """
        for proc in [Rotations._quat_average, Rotations._quat_average_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _print_orientation(self, outtype=None, pretext=None):
        """
        _print_orientation(self[, outtype, pretext])
        
        
        Defined at rotations.f90 lines 6090-6174
        
        Parameters
        ----------
        o : Orientationtype
        outtype : str
        pretext : str
        
        """
        _pyEMsoft.f90wrap_print_orientation(o=self._handle, outtype=outtype, \
            pretext=pretext)
    
    @staticmethod
    def _print_orientation_d(self, outtype=None, pretext=None):
        """
        _print_orientation_d(self[, outtype, pretext])
        
        
        Defined at rotations.f90 lines 6190-6274
        
        Parameters
        ----------
        o : Orientationtyped
        outtype : str
        pretext : str
        
        """
        _pyEMsoft.f90wrap_print_orientation_d(o=self._handle, outtype=outtype, \
            pretext=pretext)
    
    @staticmethod
    def print_orientation(*args, **kwargs):
        """
        print_orientation(*args, **kwargs)
        
        
        Defined at rotations.f90 lines 651-653
        
        Overloaded interface containing the following procedures:
          _print_orientation
          _print_orientation_d
        
        """
        for proc in [Rotations._print_orientation, Rotations._print_orientation_d]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    _dt_array_initialisers = []
    

rotations = Rotations()

class Diffraction(f90wrap.runtime.FortranModule):
    """
    Module diffraction
    
    
    Defined at diffraction.f90 lines 47-1891
    
    """
    @staticmethod
    def getvoltage(self, rlp, verbose=None):
        """
        getvoltage(self, rlp[, verbose])
        
        
        Defined at diffraction.f90 lines 178-194
        
        Parameters
        ----------
        cell : Unitcell
        rlp : Gnode
        verbose : bool
        
        """
        _pyEMsoft.f90wrap_getvoltage(cell=self._handle, rlp=rlp._handle, \
            verbose=verbose)
    
    @staticmethod
    def calcwavelength(self, rlp, skip=None, verbose=None):
        """
        calcwavelength(self, rlp[, skip, verbose])
        
        
        Defined at diffraction.f90 lines 218-281
        
        Parameters
        ----------
        cell : Unitcell
        rlp : Gnode
        skip : int
        verbose : bool
        
        """
        _pyEMsoft.f90wrap_calcwavelength(cell=self._handle, rlp=rlp._handle, skip=skip, \
            verbose=verbose)
    
    @staticmethod
    def calcdiffangle(self, h, k, l):
        """
        tt = calcdiffangle(self, h, k, l)
        
        
        Defined at diffraction.f90 lines 300-307
        
        Parameters
        ----------
        cell : Unitcell
        h : int
        k : int
        l : int
        
        Returns
        -------
        tt : float
        
        """
        tt = _pyEMsoft.f90wrap_calcdiffangle(cell=self._handle, h=h, k=k, l=l)
        return tt
    
    @staticmethod
    def lorentzpf(theta, hedm=None):
        """
        tt = lorentzpf(theta[, hedm])
        
        
        Defined at diffraction.f90 lines 322-333
        
        Parameters
        ----------
        theta : float
        hedm : str
        
        Returns
        -------
        tt : float
        
        """
        tt = _pyEMsoft.f90wrap_lorentzpf(theta=theta, hedm=hedm)
        return tt
    
    @staticmethod
    def calcucg(self, rlp, hkl, applyqgshift=None, interpolate=None):
        """
        calcucg(self, rlp, hkl[, applyqgshift, interpolate])
        
        
        Defined at diffraction.f90 lines 367-656
        
        Parameters
        ----------
        cell : Unitcell
        rlp : Gnode
        hkl : int array
        applyqgshift : bool
        interpolate : bool
        
        ----------------------------------
         first the simplest case: kinematical X-ray scattering factors
         this option was added to accomodate the HEDM forward projector needs
        """
        _pyEMsoft.f90wrap_calcucg(cell=self._handle, rlp=rlp._handle, hkl=hkl, \
            applyqgshift=applyqgshift, interpolate=interpolate)
    
    @staticmethod
    def precalcfscatt(self, dmin, gstep):
        """
        precalcfscatt(self, dmin, gstep)
        
        
        Defined at diffraction.f90 lines 672-720
        
        Parameters
        ----------
        cell : Unitcell
        dmin : float
        gstep : float
        
        """
        _pyEMsoft.f90wrap_precalcfscatt(cell=self._handle, dmin=dmin, gstep=gstep)
    
    @staticmethod
    def getscatfac(self, s, sfarray, ntypes):
        """
        getscatfac(self, s, sfarray, ntypes)
        
        
        Defined at diffraction.f90 lines 736-760
        
        Parameters
        ----------
        cell : Unitcell
        s : float
        sfarray : complex array
        ntypes : int
        
        """
        _pyEMsoft.f90wrap_getscatfac(cell=self._handle, s=s, sfarray=sfarray, \
            ntypes=ntypes)
    
    @staticmethod
    def tbcalcsm(ar, ai, sg, z, xig, xigp, xizero, betag):
        """
        tbcalcsm(ar, ai, sg, z, xig, xigp, xizero, betag)
        
        
        Defined at diffraction.f90 lines 864-921
        
        Parameters
        ----------
        ar : float array
        ai : float array
        sg : float
        z : float
        xig : float
        xigp : float
        xizero : float
        betag : float
        
        """
        _pyEMsoft.f90wrap_tbcalcsm(ar=ar, ai=ai, sg=sg, z=z, xig=xig, xigp=xigp, \
            xizero=xizero, betag=betag)
    
    @staticmethod
    def tbcalcinten(sg, z, xig, xigp, xizero, betag):
        """
        it, is_ = tbcalcinten(sg, z, xig, xigp, xizero, betag)
        
        
        Defined at diffraction.f90 lines 951-992
        
        Parameters
        ----------
        sg : float
        z : float
        xig : float
        xigp : float
        xizero : float
        betag : float
        
        Returns
        -------
        it : float
        is_ : float
        
        """
        it, is_ = _pyEMsoft.f90wrap_tbcalcinten(sg=sg, z=z, xig=xig, xigp=xigp, \
            xizero=xizero, betag=betag)
        return it, is_
    
    @staticmethod
    def diffpage(self, cell, rlp, camlen):
        """
        diffpage(self, cell, rlp, camlen)
        
        
        Defined at diffraction.f90 lines 1013-1287
        
        Parameters
        ----------
        ps : Postscript_Type
        cell : Unitcell
        rlp : Gnode
        camlen : float
        
        """
        _pyEMsoft.f90wrap_diffpage(ps=self._handle, cell=cell._handle, rlp=rlp._handle, \
            camlen=camlen)
    
    @staticmethod
    def dumpzap(self, cell, xo, yo, u, v, w, p, np, first, indi, lal, icnt, dbdiff, \
        vg, vgsave, rg, rfamily, rnumfam, hhcc):
        """
        dumpzap(self, cell, xo, yo, u, v, w, p, np, first, indi, lal, icnt, dbdiff, vg, \
            vgsave, rg, rfamily, rnumfam, hhcc)
        
        
        Defined at diffraction.f90 lines 1318-1447
        
        Parameters
        ----------
        ps : Postscript_Type
        cell : Unitcell
        xo : float
        yo : float
        u : int
        v : int
        w : int
        p : int
        np : bool
        first : bool
        indi : int
        lal : float
        icnt : int
        dbdiff : bool array
        vg : float array
        vgsave : float array
        rg : float array
        rfamily : int array
        rnumfam : int array
        hhcc : int
        
        """
        _pyEMsoft.f90wrap_dumpzap(ps=self._handle, cell=cell._handle, xo=xo, yo=yo, u=u, \
            v=v, w=w, p=p, np=np, first=first, indi=indi, lal=lal, icnt=icnt, \
            dbdiff=dbdiff, vg=vg, vgsave=vgsave, rg=rg, rfamily=rfamily, \
            rnumfam=rnumfam, hhcc=hhcc)
    
    @staticmethod
    def dumppp(self, cell, xo, yo, np, lal, icnt, vgsave, rg, rnumfam):
        """
        dumppp(self, cell, xo, yo, np, lal, icnt, vgsave, rg, rnumfam)
        
        
        Defined at diffraction.f90 lines 1471-1536
        
        Parameters
        ----------
        ps : Postscript_Type
        cell : Unitcell
        xo : float
        yo : float
        np : bool
        lal : float
        icnt : int
        vgsave : float array
        rg : float array
        rnumfam : int array
        
        """
        _pyEMsoft.f90wrap_dumppp(ps=self._handle, cell=cell._handle, xo=xo, yo=yo, \
            np=np, lal=lal, icnt=icnt, vgsave=vgsave, rg=rg, rnumfam=rnumfam)
    
    @staticmethod
    def studylist(list, slect, ppat):
        """
        np = studylist(list, slect, ppat)
        
        
        Defined at diffraction.f90 lines 1559-1638
        
        Parameters
        ----------
        list : str array
        slect : int array
        ppat : bool
        
        Returns
        -------
        np : int
        
        """
        np = _pyEMsoft.f90wrap_studylist(list=list, slect=slect, ppat=ppat)
        return np
    
    @staticmethod
    def bwsolve(m, w, cgg, cginv, nn, ipiv):
        """
        bwsolve(m, w, cgg, cginv, nn, ipiv)
        
        
        Defined at diffraction.f90 lines 1672-1737
        
        Parameters
        ----------
        m : complex array
        w : complex array
        cgg : complex array
        cginv : complex array
        nn : int
        ipiv : int array
        
        """
        _pyEMsoft.f90wrap_bwsolve(m=m, w=w, cgg=cgg, cginv=cginv, nn=nn, ipiv=ipiv)
    
    @staticmethod
    def calcfresnelpropagator(beam, dimi, dimj, dz, scl, propname, lambda_):
        """
        calcfresnelpropagator(beam, dimi, dimj, dz, scl, propname, lambda_)
        
        
        Defined at diffraction.f90 lines 1843-1891
        
        Parameters
        ----------
        beam : float array
        dimi : int
        dimj : int
        dz : float
        scl : float
        propname : str
        lambda_ : float
        
        """
        _pyEMsoft.f90wrap_calcfresnelpropagator(beam=beam, dimi=dimi, dimj=dimj, dz=dz, \
            scl=scl, propname=propname, lambda_=lambda_)
    
    @staticmethod
    def _calcsgsingle(self, gg, kk, fn):
        """
        sg = _calcsgsingle(self, gg, kk, fn)
        
        
        Defined at diffraction.f90 lines 781-798
        
        Parameters
        ----------
        cell : Unitcell
        gg : float array
        kk : float array
        fn : float array
        
        Returns
        -------
        sg : float
        
        """
        sg = _pyEMsoft.f90wrap_calcsgsingle(cell=self._handle, gg=gg, kk=kk, fn=fn)
        return sg
    
    @staticmethod
    def _calcsgdouble(self, gg, kk, fn):
        """
        sg = _calcsgdouble(self, gg, kk, fn)
        
        
        Defined at diffraction.f90 lines 819-836
        
        Parameters
        ----------
        cell : Unitcell
        gg : float array
        kk : float array
        fn : float array
        
        Returns
        -------
        sg : float
        
        """
        sg = _pyEMsoft.f90wrap_calcsgdouble(cell=self._handle, gg=gg, kk=kk, fn=fn)
        return sg
    
    @staticmethod
    def calcsg(*args, **kwargs):
        """
        calcsg(*args, **kwargs)
        
        
        Defined at diffraction.f90 lines 159-161
        
        Overloaded interface containing the following procedures:
          _calcsgsingle
          _calcsgdouble
        
        """
        for proc in [Diffraction._calcsgsingle, Diffraction._calcsgdouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    _dt_array_initialisers = []
    

diffraction = Diffraction()

class So3(f90wrap.runtime.FortranModule):
    """
    Module so3
    
    
    Defined at so3.f90 lines 48-1817
    
    """
    @staticmethod
    def getfztypeandorder(pgnum1, pgnum2=None):
        """
        fztype, fzorder = getfztypeandorder(pgnum1[, pgnum2])
        
        
        Defined at so3.f90 lines 86-148
        
        Parameters
        ----------
        pgnum1 : int
        pgnum2 : int
        
        Returns
        -------
        fztype : int
        fzorder : int
        
        """
        fztype, fzorder = _pyEMsoft.f90wrap_getfztypeandorder(pgnum1=pgnum1, \
            pgnum2=pgnum2)
        return fztype, fzorder
    
    @staticmethod
    def isinsidefz(rod, fztype, fzorder, qfz=None):
        """
        insidefz = isinsidefz(rod, fztype, fzorder[, qfz])
        
        
        Defined at so3.f90 lines 179-222
        
        Parameters
        ----------
        rod : float array
        fztype : int
        fzorder : int
        qfz : float array
        
        Returns
        -------
        insidefz : bool
        
        """
        insidefz = _pyEMsoft.f90wrap_isinsidefz(rod=rod, fztype=fztype, fzorder=fzorder, \
            qfz=qfz)
        return insidefz
    
    @staticmethod
    def insideicosahedralfz(rod):
        """
        res = insideicosahedralfz(rod)
        
        
        Defined at so3.f90 lines 236-250
        
        Parameters
        ----------
        rod : float array
        
        Returns
        -------
        res : bool
        
        """
        res = _pyEMsoft.f90wrap_insideicosahedralfz(rod=rod)
        return res
    
    @staticmethod
    def insidecyclicfz(rod, fztype, fzorder):
        """
        res = insidecyclicfz(rod, fztype, fzorder)
        
        
        Defined at so3.f90 lines 268-292
        
        Parameters
        ----------
        rod : float array
        fztype : int
        fzorder : int
        
        Returns
        -------
        res : bool
        
        """
        res = _pyEMsoft.f90wrap_insidecyclicfz(rod=rod, fztype=fztype, fzorder=fzorder)
        return res
    
    @staticmethod
    def insidedihedralfz(rod, order):
        """
        res = insidedihedralfz(rod, order)
        
        
        Defined at so3.f90 lines 312-374
        
        Parameters
        ----------
        rod : float array
        order : int
        
        Returns
        -------
        res : bool
        
        """
        res = _pyEMsoft.f90wrap_insidedihedralfz(rod=rod, order=order)
        return res
    
    @staticmethod
    def insidecubicfz(rod, ot):
        """
        res = insidecubicfz(rod, ot)
        
        
        Defined at so3.f90 lines 392-413
        
        Parameters
        ----------
        rod : float array
        ot : str
        
        Returns
        -------
        res : bool
        
        """
        res = _pyEMsoft.f90wrap_insidecubicfz(rod=rod, ot=ot)
        return res
    
    @staticmethod
    def insidecubehexfz(rod):
        """
        res = insidecubehexfz(rod)
        
        
        Defined at so3.f90 lines 431-447
        
        Parameters
        ----------
        rod : float array
        
        Returns
        -------
        res : bool
        
        """
        res = _pyEMsoft.f90wrap_insidecubehexfz(rod=rod)
        return res
    
    @staticmethod
    def cubochoricneighbors(cubneighbor, nn, cub, stepsize):
        """
        cubochoricneighbors(cubneighbor, nn, cub, stepsize)
        
        
        Defined at so3.f90 lines 656-683
        
        Parameters
        ----------
        cubneighbor : float array
        nn : int
        cub : float array
        stepsize : float
        
        """
        _pyEMsoft.f90wrap_cubochoricneighbors(cubneighbor=cubneighbor, nn=nn, cub=cub, \
            stepsize=stepsize)
    
    @staticmethod
    def isinsidemfz(rod, mfztype, mfzorder):
        """
        insidemfz = isinsidemfz(rod, mfztype, mfzorder)
        
        
        Defined at so3.f90 lines 1433-1453
        
        Parameters
        ----------
        rod : float array
        mfztype : int
        mfzorder : int
        
        Returns
        -------
        insidemfz : bool
        
        """
        insidemfz = _pyEMsoft.f90wrap_isinsidemfz(rod=rod, mfztype=mfztype, \
            mfzorder=mfzorder)
        return insidemfz
    
    @staticmethod
    def insidecubicmfz(rod, ot):
        """
        res = insidecubicmfz(rod, ot)
        
        
        Defined at so3.f90 lines 1468-1492
        
        Parameters
        ----------
        rod : float array
        ot : str
        
        Returns
        -------
        res : bool
        
        """
        res = _pyEMsoft.f90wrap_insidecubicmfz(rod=rod, ot=ot)
        return res
    
    @staticmethod
    def insidedihedralmfz(rod, mfzorder):
        """
        res = insidedihedralmfz(rod, mfzorder)
        
        
        Defined at so3.f90 lines 1508-1537
        
        Parameters
        ----------
        rod : float array
        mfzorder : int
        
        Returns
        -------
        res : bool
        
        """
        res = _pyEMsoft.f90wrap_insidedihedralmfz(rod=rod, mfzorder=mfzorder)
        return res
    
    @staticmethod
    def getvertex(order, vertex):
        """
        getvertex(order, vertex)
        
        
        Defined at so3.f90 lines 1552-1563
        
        Parameters
        ----------
        order : int
        vertex : float array
        
        """
        _pyEMsoft.f90wrap_getvertex(order=order, vertex=vertex)
    
    @staticmethod
    def pnpoly(px, py, xx, yy, n):
        """
        inout = pnpoly(px, py, xx, yy, n)
        
        
        Defined at so3.f90 lines 1611-1644
        
        Parameters
        ----------
        px : float
        py : float
        xx : float array
        yy : float array
        n : int
        
        Returns
        -------
        inout : int
        
        """
        inout = _pyEMsoft.f90wrap_pnpoly(px=px, py=py, xx=xx, yy=yy, n=n)
        return inout
    
    @staticmethod
    def mkcc(a, b, c):
        """
        cc = mkcc(a, b, c)
        
        
        Defined at so3.f90 lines 1662-1670
        
        Parameters
        ----------
        a : float
        b : float
        c : float
        
        Returns
        -------
        cc : float
        
        """
        cc = _pyEMsoft.f90wrap_mkcc(a=a, b=b, c=c)
        return cc
    
    @staticmethod
    def mks2(a, b, c):
        """
        s2 = mks2(a, b, c)
        
        
        Defined at so3.f90 lines 1688-1696
        
        Parameters
        ----------
        a : float
        b : float
        c : float
        
        Returns
        -------
        s2 : float
        
        """
        s2 = _pyEMsoft.f90wrap_mks2(a=a, b=b, c=c)
        return s2
    
    @staticmethod
    def getmackenziedistribution(pgnum, nmisor, misor, mk):
        """
        getmackenziedistribution(pgnum, nmisor, misor, mk)
        
        
        Defined at so3.f90 lines 1715-1817
        
        Parameters
        ----------
        pgnum : int
        nmisor : int
        misor : float array
        mk : float array
        
        """
        _pyEMsoft.f90wrap_getmackenziedistribution(pgnum=pgnum, nmisor=nmisor, \
            misor=misor, mk=mk)
    
    _dt_array_initialisers = []
    

so3 = So3()

class Dictmod(f90wrap.runtime.FortranModule):
    """
    Module dictmod
    
    
    Defined at dictmod.f90 lines 107-1700
    
    """
    @staticmethod
    def di_sampledd(n, seed, mu, kappa, dtype):
        """
        sdd = di_sampledd(n, seed, mu, kappa, dtype)
        
        
        Defined at dictmod.f90 lines 221-252
        
        Parameters
        ----------
        n : int
        seed : int
        mu : float array
        kappa : float
        dtype : str
        
        Returns
        -------
        sdd : float array
        
        """
        sdd = _pyEMsoft.f90wrap_di_sampledd(n=n, seed=seed, mu=mu, kappa=kappa, \
            dtype=dtype)
        return sdd
    
    @staticmethod
    def di_init(self, dtype):
        """
        di_init(self, dtype)
        
        
        Defined at dictmod.f90 lines 464-605
        
        Parameters
        ----------
        dict : Dicttype
        dtype : str
        
        ------------
         IMPORTANT NOTE: the original von Mises-Fischer (VMF) approach requires that q \
             and -q are considered to
         be separate quaternions, so the original Matlab code included the negatives of \
             all quaternion symmetry operators
         as well, leading to a cardinality of twice the rotational point group order. It \
             appears that we do not have to
         do so if we replace the exponential in the VMF by a hyperbolic cosine function, \
             which would account directly
         for the q, -q duplicity... Alternatively, one can use the axial Watson \
             distribution.
        ------------
         identity operator is part of all point groups
        """
        _pyEMsoft.f90wrap_di_init(dict=self._handle, dtype=dtype)
    
    @staticmethod
    def di_emfordd(x, dict, nums, seed, muhat, dtype):
        """
        kappahat = di_emfordd(x, dict, nums, seed, muhat, dtype)
        
        
        Defined at dictmod.f90 lines 629-732
        
        Parameters
        ----------
        x : float array
        dict : Dicttype
        nums : int
        seed : int
        muhat : float array
        dtype : str
        
        Returns
        -------
        kappahat : float
        
        """
        kappahat = _pyEMsoft.f90wrap_di_emfordd(x=x, dict=dict._handle, nums=nums, \
            seed=seed, muhat=muhat, dtype=dtype)
        return kappahat
    
    @staticmethod
    def dd_density(x, nums, mu, kappa, c, dtype):
        """
        y = dd_density(x, nums, mu, kappa, c, dtype)
        
        
        Defined at dictmod.f90 lines 970-991
        
        Parameters
        ----------
        x : float array
        nums : int
        mu : float array
        kappa : float
        c : float
        dtype : str
        
        Returns
        -------
        y : float array
        
        """
        y = _pyEMsoft.f90wrap_dd_density(x=x, nums=nums, mu=mu, kappa=kappa, c=c, \
            dtype=dtype)
        return y
    
    @staticmethod
    def di_similarity_classifier(array, k, npx, npy, returnarr):
        """
        di_similarity_classifier(array, k, npx, npy, returnarr)
        
        
        Defined at dictmod.f90 lines 1073-1102
        
        Parameters
        ----------
        array : int array
        k : int
        npx : int
        npy : int
        returnarr : float array
        
        """
        _pyEMsoft.f90wrap_di_similarity_classifier(array=array, k=k, npx=npx, npy=npy, \
            returnarr=returnarr)
    
    @staticmethod
    def reducedisorientationtomfz(ro, cell, fztype, fzorder, romfz):
        """
        reducedisorientationtomfz(ro, cell, fztype, fzorder, romfz)
        
        
        Defined at dictmod.f90 lines 1163-1203
        
        Parameters
        ----------
        ro : float array
        cell : Unitcell
        fztype : int
        fzorder : int
        romfz : float array
        
        """
        _pyEMsoft.f90wrap_reducedisorientationtomfz(ro=ro, cell=cell._handle, \
            fztype=fztype, fzorder=fzorder, romfz=romfz)
    
    @staticmethod
    def reduceorientationtocubicefz(eu, dict, eufz):
        """
        reduceorientationtocubicefz(eu, dict, eufz)
        
        
        Defined at dictmod.f90 lines 1219-1247
        
        Parameters
        ----------
        eu : float array
        dict : Dicttype
        eufz : float array
        
        """
        _pyEMsoft.f90wrap_reduceorientationtocubicefz(eu=eu, dict=dict._handle, \
            eufz=eufz)
    
    @staticmethod
    def reduceorientationtorfz(eu, dict, fztype, fzorder, eufz, mfz=None):
        """
        reduceorientationtorfz(eu, dict, fztype, fzorder, eufz[, mfz])
        
        
        Defined at dictmod.f90 lines 1268-1310
        
        Parameters
        ----------
        eu : float array
        dict : Dicttype
        fztype : int
        fzorder : int
        eufz : float array
        mfz : bool
        
        """
        _pyEMsoft.f90wrap_reduceorientationtorfz(eu=eu, dict=dict._handle, \
            fztype=fztype, fzorder=fzorder, eufz=eufz, mfz=mfz)
    
    @staticmethod
    def getdisorientationangleaxis(eu1, eu2, dict, disax):
        """
        getdisorientationangleaxis(eu1, eu2, dict, disax)
        
        
        Defined at dictmod.f90 lines 1459-1504
        
        Parameters
        ----------
        eu1 : float array
        eu2 : float array
        dict : Dicttype
        disax : float array
        
        """
        _pyEMsoft.f90wrap_getdisorientationangleaxis(eu1=eu1, eu2=eu2, \
            dict=dict._handle, disax=disax)
    
    @staticmethod
    def getdisorientationangleaxistwophases(eu1, eu2, dict1, dict2, disax):
        """
        getdisorientationangleaxistwophases(eu1, eu2, dict1, dict2, disax)
        
        
        Defined at dictmod.f90 lines 1522-1562
        
        Parameters
        ----------
        eu1 : float array
        eu2 : float array
        dict1 : Dicttype
        dict2 : Dicttype
        disax : float array
        
        """
        _pyEMsoft.f90wrap_getdisorientationangleaxistwophases(eu1=eu1, eu2=eu2, \
            dict1=dict1._handle, dict2=dict2._handle, disax=disax)
    
    @staticmethod
    def _getdisorientationanglesingle(eu1, eu2, dict, ax=None):
        """
        disang = _getdisorientationanglesingle(eu1, eu2, dict[, ax])
        
        
        Defined at dictmod.f90 lines 1393-1443
        
        Parameters
        ----------
        eu1 : float array
        eu2 : float array
        dict : Dicttype
        ax : float array
        
        Returns
        -------
        disang : float
        
        """
        disang = _pyEMsoft.f90wrap_getdisorientationanglesingle(eu1=eu1, eu2=eu2, \
            dict=dict._handle, ax=ax)
        return disang
    
    @staticmethod
    def _getdisorientationangledouble(eu1, eu2, dict, ax=None):
        """
        disang = _getdisorientationangledouble(eu1, eu2, dict[, ax])
        
        
        Defined at dictmod.f90 lines 1327-1376
        
        Parameters
        ----------
        eu1 : float array
        eu2 : float array
        dict : Dicttype
        ax : float array
        
        Returns
        -------
        disang : float
        
        """
        disang = _pyEMsoft.f90wrap_getdisorientationangledouble(eu1=eu1, eu2=eu2, \
            dict=dict._handle, ax=ax)
        return disang
    
    @staticmethod
    def getdisorientationangle(*args, **kwargs):
        """
        getdisorientationangle(*args, **kwargs)
        
        
        Defined at dictmod.f90 lines 114-116
        
        Overloaded interface containing the following procedures:
          _getdisorientationanglesingle
          _getdisorientationangledouble
        
        """
        for proc in [Dictmod._getdisorientationanglesingle, \
            Dictmod._getdisorientationangledouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    @staticmethod
    def _getaveragedisorientationmapsingle(eulers, dict, wd, ht, admap):
        """
        _getaveragedisorientationmapsingle(eulers, dict, wd, ht, admap)
        
        
        Defined at dictmod.f90 lines 1580-1631
        
        Parameters
        ----------
        eulers : float array
        dict : Dicttype
        wd : int
        ht : int
        admap : float array
        
        """
        _pyEMsoft.f90wrap_getaveragedisorientationmapsingle(eulers=eulers, \
            dict=dict._handle, wd=wd, ht=ht, admap=admap)
    
    @staticmethod
    def _getaveragedisorientationmapdouble(eulers, dict, wd, ht, admap):
        """
        _getaveragedisorientationmapdouble(eulers, dict, wd, ht, admap)
        
        
        Defined at dictmod.f90 lines 1649-1700
        
        Parameters
        ----------
        eulers : float array
        dict : Dicttype
        wd : int
        ht : int
        admap : float array
        
        """
        _pyEMsoft.f90wrap_getaveragedisorientationmapdouble(eulers=eulers, \
            dict=dict._handle, wd=wd, ht=ht, admap=admap)
    
    @staticmethod
    def getaveragedisorientationmap(*args, **kwargs):
        """
        getaveragedisorientationmap(*args, **kwargs)
        
        
        Defined at dictmod.f90 lines 118-120
        
        Overloaded interface containing the following procedures:
          _getaveragedisorientationmapsingle
          _getaveragedisorientationmapdouble
        
        """
        for proc in [Dictmod._getaveragedisorientationmapsingle, \
            Dictmod._getaveragedisorientationmapdouble]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    _dt_array_initialisers = []
    

dictmod = Dictmod()

class Filters(f90wrap.runtime.FortranModule):
    """
    Module filters
    
    
    Defined at filters.f90 lines 44-1069
    
    """
    @staticmethod
    def applygaussianbeamspread(ipar, fpar, vxyz, w, verbose=None):
        """
        applygaussianbeamspread(ipar, fpar, vxyz, w[, verbose])
        
        
        Defined at filters.f90 lines 63-125
        
        Parameters
        ----------
        ipar : int array
        fpar : float array
        vxyz : int array
        w : float
        verbose : bool
        
        """
        _pyEMsoft.f90wrap_applygaussianbeamspread(ipar=ipar, fpar=fpar, vxyz=vxyz, w=w, \
            verbose=verbose)
    
    @staticmethod
    def applypoissonnoise(image, nx, ny, idum):
        """
        noisy = applypoissonnoise(image, nx, ny, idum)
        
        
        Defined at filters.f90 lines 141-158
        
        Parameters
        ----------
        image : float array
        nx : int
        ny : int
        idum : int
        
        Returns
        -------
        noisy : float array
        
        """
        noisy = _pyEMsoft.f90wrap_applypoissonnoise(image=image, nx=nx, ny=ny, \
            idum=idum)
        return noisy
    
    @staticmethod
    def image_histogram(nx, ny, im):
        """
        h = image_histogram(nx, ny, im)
        
        
        Defined at filters.f90 lines 174-189
        
        Parameters
        ----------
        nx : int
        ny : int
        im : int array
        
        Returns
        -------
        h : int array
        
        """
        h = _pyEMsoft.f90wrap_image_histogram(nx=nx, ny=ny, im=im)
        return h
    
    @staticmethod
    def image_jointhistogram(nx, ny, im1, im2):
        """
        h = image_jointhistogram(nx, ny, im1, im2)
        
        
        Defined at filters.f90 lines 206-222
        
        Parameters
        ----------
        nx : int
        ny : int
        im1 : int array
        im2 : int array
        
        Returns
        -------
        h : int array
        
        """
        h = _pyEMsoft.f90wrap_image_jointhistogram(nx=nx, ny=ny, im1=im1, im2=im2)
        return h
    
    @staticmethod
    def cumul_histogram(nx, ny, im):
        """
        h = cumul_histogram(nx, ny, im)
        
        
        Defined at filters.f90 lines 238-275
        
        Parameters
        ----------
        nx : int
        ny : int
        im : int array
        
        Returns
        -------
        h : int array
        
        """
        h = _pyEMsoft.f90wrap_cumul_histogram(nx=nx, ny=ny, im=im)
        return h
    
    @staticmethod
    def image_entropy(h):
        """
        e = image_entropy(h)
        
        
        Defined at filters.f90 lines 289-305
        
        Parameters
        ----------
        h : int array
        
        Returns
        -------
        e : float
        
        """
        e = _pyEMsoft.f90wrap_image_entropy(h=h)
        return e
    
    @staticmethod
    def image_jointentropy(h):
        """
        e = image_jointentropy(h)
        
        
        Defined at filters.f90 lines 319-337
        
        Parameters
        ----------
        h : int array
        
        Returns
        -------
        e : float
        
        """
        e = _pyEMsoft.f90wrap_image_jointentropy(h=h)
        return e
    
    @staticmethod
    def image_mutualinformation(nx, ny, im1, im2):
        """
        mi = image_mutualinformation(nx, ny, im1, im2)
        
        
        Defined at filters.f90 lines 353-367
        
        Parameters
        ----------
        nx : int
        ny : int
        im1 : int array
        im2 : int array
        
        Returns
        -------
        mi : float
        
        """
        mi = _pyEMsoft.f90wrap_image_mutualinformation(nx=nx, ny=ny, im1=im1, im2=im2)
        return mi
    
    @staticmethod
    def adhisteq(nr, dimx, dimy, im, verbose=None):
        """
        output = adhisteq(nr, dimx, dimy, im[, verbose])
        
        
        Defined at filters.f90 lines 389-492
        
        Parameters
        ----------
        nr : int
        dimx : int
        dimy : int
        im : int array
        verbose : bool
        
        Returns
        -------
        output : int array
        
        """
        output = _pyEMsoft.f90wrap_adhisteq(nr=nr, dimx=dimx, dimy=dimy, im=im, \
            verbose=verbose)
        return output
    
    @staticmethod
    def getadpmap(iunit, nexpt, l, wd, ht, dpmap):
        """
        getadpmap(iunit, nexpt, l, wd, ht, dpmap)
        
        
        Defined at filters.f90 lines 511-567
        
        Parameters
        ----------
        iunit : int
        nexpt : int
        l : int
        wd : int
        ht : int
        dpmap : float array
        
        """
        _pyEMsoft.f90wrap_getadpmap(iunit=iunit, nexpt=nexpt, l=l, wd=wd, ht=ht, \
            dpmap=dpmap)
    
    @staticmethod
    def getadpmapram(epatterns, nexpt, cs, l, wd, ht, dpmap):
        """
        getadpmapram(epatterns, nexpt, cs, l, wd, ht, dpmap)
        
        
        Defined at filters.f90 lines 586-643
        
        Parameters
        ----------
        epatterns : float array
        nexpt : int
        cs : int
        l : int
        wd : int
        ht : int
        dpmap : float array
        
        """
        _pyEMsoft.f90wrap_getadpmapram(epatterns=epatterns, nexpt=nexpt, cs=cs, l=l, \
            wd=wd, ht=ht, dpmap=dpmap)
    
    @staticmethod
    def calchoughlut(dimx, lut):
        """
        calchoughlut(dimx, lut)
        
        
        Defined at filters.f90 lines 658-693
        
        Parameters
        ----------
        dimx : int
        lut : float array
        
        """
        _pyEMsoft.f90wrap_calchoughlut(dimx=dimx, lut=lut)
    
    @staticmethod
    def houghtransform(dimx, lut, im, ht):
        """
        houghtransform(dimx, lut, im, ht)
        
        
        Defined at filters.f90 lines 710-726
        
        Parameters
        ----------
        dimx : int
        lut : float array
        im : float array
        ht : float array
        
        """
        _pyEMsoft.f90wrap_houghtransform(dimx=dimx, lut=lut, im=im, ht=ht)
    
    @staticmethod
    def butterflymask9x9(input, output, dims):
        """
        butterflymask9x9(input, output, dims)
        
        
        Defined at filters.f90 lines 1004-1030
        
        Parameters
        ----------
        input : float array
        output : float array
        dims : int
        
        """
        _pyEMsoft.f90wrap_butterflymask9x9(input=input, output=output, dims=dims)
    
    @staticmethod
    def inversiondivision(input, output, dims):
        """
        inversiondivision(input, output, dims)
        
        
        Defined at filters.f90 lines 1046-1069
        
        Parameters
        ----------
        input : float array
        output : float array
        dims : int
        
        """
        _pyEMsoft.f90wrap_inversiondivision(input=input, output=output, dims=dims)
    
    _dt_array_initialisers = []
    

filters = Filters()

class Detectors(f90wrap.runtime.FortranModule):
    """
    Module detectors
    
    
    Defined at detectors.f90 lines 40-573
    
    """
    @staticmethod
    def generateebsddetector(self, mcnl, ebsdmcdata, ebsddetector, verbose=None):
        """
        generateebsddetector(self, mcnl, ebsdmcdata, ebsddetector[, verbose])
        
        
        Defined at detectors.f90 lines 65-209
        
        Parameters
        ----------
        enl : Ebsdnamelisttype
        mcnl : Mcclnamelisttype
        ebsdmcdata : Ebsdmcdatatype
        ebsddetector : Ebsddetectortype
        verbose : bool
        
        ====================================
         ------ generate the detector arrays
        ====================================
         This needs to be done only once for a given detector geometry
        """
        _pyEMsoft.f90wrap_generateebsddetector(enl=self._handle, mcnl=mcnl._handle, \
            ebsdmcdata=ebsdmcdata._handle, ebsddetector=ebsddetector._handle, \
            verbose=verbose)
    
    @staticmethod
    def generatemyebsddetector(self, mcnl, ebsdmcdata, nsx, nsy, nume, tgx, tgy, \
        tgz, accum_e_detector, patcntr, bg=None):
        """
        generatemyebsddetector(self, mcnl, ebsdmcdata, nsx, nsy, nume, tgx, tgy, tgz, \
            accum_e_detector, patcntr[, bg])
        
        
        Defined at detectors.f90 lines 228-387
        
        Parameters
        ----------
        enl : Ebsdnamelisttype
        mcnl : Mcclnamelisttype
        ebsdmcdata : Ebsdmcdatatype
        nsx : int
        nsy : int
        nume : int
        tgx : float array
        tgy : float array
        tgz : float array
        accum_e_detector : float array
        patcntr : float array
        bg : bool
        
        ====================================
         ------ generate the detector arrays
        ====================================
        """
        _pyEMsoft.f90wrap_generatemyebsddetector(enl=self._handle, mcnl=mcnl._handle, \
            ebsdmcdata=ebsdmcdata._handle, nsx=nsx, nsy=nsy, nume=nume, tgx=tgx, \
            tgy=tgy, tgz=tgz, accum_e_detector=accum_e_detector, patcntr=patcntr, bg=bg)
    
    @staticmethod
    def generatedefectebsddetector(self, mcnl, nsx, nsy, tgx, tgy, tgz, patcntr):
        """
        generatedefectebsddetector(self, mcnl, nsx, nsy, tgx, tgy, tgz, patcntr)
        
        
        Defined at detectors.f90 lines 401-472
        
        Parameters
        ----------
        enl : Ebsddefectnamelisttype
        mcnl : Mcclnamelisttype
        nsx : int
        nsy : int
        tgx : float array
        tgy : float array
        tgz : float array
        patcntr : float array
        
        ====================================
         ------ generate the detector arrays
        ====================================
        """
        _pyEMsoft.f90wrap_generatedefectebsddetector(enl=self._handle, \
            mcnl=mcnl._handle, nsx=nsx, nsy=nsy, tgx=tgx, tgy=tgy, tgz=tgz, \
            patcntr=patcntr)
    
    @staticmethod
    def ebsdfullgeneratedetector(self, ebsddetector, numebins, numzbins, \
        verbose=None):
        """
        ebsdfullgeneratedetector(self, ebsddetector, numebins, numzbins[, verbose])
        
        
        Defined at detectors.f90 lines 490-573
        
        Parameters
        ----------
        enl : Ebsdfullnamelisttype
        ebsddetector : Ebsddetectortype
        numebins : int
        numzbins : int
        verbose : bool
        
        ====================================
         ------ generate the detector arrays
        ====================================
         This needs to be done only once for a given detector geometry
        """
        _pyEMsoft.f90wrap_ebsdfullgeneratedetector(enl=self._handle, \
            ebsddetector=ebsddetector._handle, numebins=numebins, numzbins=numzbins, \
            verbose=verbose)
    
    _dt_array_initialisers = []
    

detectors = Detectors()

class Namelisttypedefs(f90wrap.runtime.FortranModule):
    """
    Module namelisttypedefs
    
    
    Defined at NameListTypedefs.f90 lines 42-2068
    
    """
    @f90wrap.runtime.register_class("pyEMsoft.GrainVizNameListType")
    class GrainVizNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=grainviznamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 46-53
        
        """
        def __init__(self, handle=None):
            """
            self = Grainviznamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 46-53
            
            
            Returns
            -------
            this : Grainviznamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for grainviznamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_grainviznamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Grainviznamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 46-53
            
            Parameters
            ----------
            this : Grainviznamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for grainviznamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_grainviznamelisttype_finalise(this=self._handle)
        
        @property
        def fraction(self):
            """
            Element fraction ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 47
            
            """
            return _pyEMsoft.f90wrap_grainviznamelisttype__get__fraction(self._handle)
        
        @fraction.setter
        def fraction(self, fraction):
            _pyEMsoft.f90wrap_grainviznamelisttype__set__fraction(self._handle, fraction)
        
        @property
        def pa(self):
            """
            Element pa ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 48
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_grainviznamelisttype__array__pa(self._handle)
            if array_handle in self._arrays:
                pa = self._arrays[array_handle]
            else:
                pa = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_grainviznamelisttype__array__pa)
                self._arrays[array_handle] = pa
            return pa
        
        @pa.setter
        def pa(self, pa):
            self.pa[...] = pa
        
        @property
        def numbins(self):
            """
            Element numbins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 49
            
            """
            return _pyEMsoft.f90wrap_grainviznamelisttype__get__numbins(self._handle)
        
        @numbins.setter
        def numbins(self, numbins):
            _pyEMsoft.f90wrap_grainviznamelisttype__set__numbins(self._handle, numbins)
        
        @property
        def inside(self):
            """
            Element inside ftype=character(6) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 50
            
            """
            return _pyEMsoft.f90wrap_grainviznamelisttype__get__inside(self._handle)
        
        @inside.setter
        def inside(self, inside):
            _pyEMsoft.f90wrap_grainviznamelisttype__set__inside(self._handle, inside)
        
        @property
        def qafilename(self):
            """
            Element qafilename ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 51
            
            """
            return _pyEMsoft.f90wrap_grainviznamelisttype__get__qafilename(self._handle)
        
        @qafilename.setter
        def qafilename(self, qafilename):
            _pyEMsoft.f90wrap_grainviznamelisttype__set__qafilename(self._handle, \
                qafilename)
        
        @property
        def qbfilename(self):
            """
            Element qbfilename ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 52
            
            """
            return _pyEMsoft.f90wrap_grainviznamelisttype__get__qbfilename(self._handle)
        
        @qbfilename.setter
        def qbfilename(self, qbfilename):
            _pyEMsoft.f90wrap_grainviznamelisttype__set__qbfilename(self._handle, \
                qbfilename)
        
        @property
        def povname(self):
            """
            Element povname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 53
            
            """
            return _pyEMsoft.f90wrap_grainviznamelisttype__get__povname(self._handle)
        
        @povname.setter
        def povname(self, povname):
            _pyEMsoft.f90wrap_grainviznamelisttype__set__povname(self._handle, povname)
        
        def __str__(self):
            ret = ['<grainviznamelisttype>{\n']
            ret.append('    fraction : ')
            ret.append(repr(self.fraction))
            ret.append(',\n    pa : ')
            ret.append(repr(self.pa))
            ret.append(',\n    numbins : ')
            ret.append(repr(self.numbins))
            ret.append(',\n    inside : ')
            ret.append(repr(self.inside))
            ret.append(',\n    qafilename : ')
            ret.append(repr(self.qafilename))
            ret.append(',\n    qbfilename : ')
            ret.append(repr(self.qbfilename))
            ret.append(',\n    povname : ')
            ret.append(repr(self.povname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.CTFNameListType")
    class CTFNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ctfnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 56-61
        
        """
        def __init__(self, handle=None):
            """
            self = Ctfnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 56-61
            
            
            Returns
            -------
            this : Ctfnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ctfnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ctfnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ctfnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 56-61
            
            Parameters
            ----------
            this : Ctfnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ctfnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ctfnamelisttype_finalise(this=self._handle)
        
        @property
        def modality(self):
            """
            Element modality ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 57
            
            """
            return _pyEMsoft.f90wrap_ctfnamelisttype__get__modality(self._handle)
        
        @modality.setter
        def modality(self, modality):
            _pyEMsoft.f90wrap_ctfnamelisttype__set__modality(self._handle, modality)
        
        @property
        def angledataset(self):
            """
            Element angledataset ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 58
            
            """
            return _pyEMsoft.f90wrap_ctfnamelisttype__get__angledataset(self._handle)
        
        @angledataset.setter
        def angledataset(self, angledataset):
            _pyEMsoft.f90wrap_ctfnamelisttype__set__angledataset(self._handle, angledataset)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 59
            
            """
            return _pyEMsoft.f90wrap_ctfnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_ctfnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def newctffile(self):
            """
            Element newctffile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 60
            
            """
            return _pyEMsoft.f90wrap_ctfnamelisttype__get__newctffile(self._handle)
        
        @newctffile.setter
        def newctffile(self, newctffile):
            _pyEMsoft.f90wrap_ctfnamelisttype__set__newctffile(self._handle, newctffile)
        
        @property
        def dotproductfile(self):
            """
            Element dotproductfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 61
            
            """
            return _pyEMsoft.f90wrap_ctfnamelisttype__get__dotproductfile(self._handle)
        
        @dotproductfile.setter
        def dotproductfile(self, dotproductfile):
            _pyEMsoft.f90wrap_ctfnamelisttype__set__dotproductfile(self._handle, \
                dotproductfile)
        
        def __str__(self):
            ret = ['<ctfnamelisttype>{\n']
            ret.append('    modality : ')
            ret.append(repr(self.modality))
            ret.append(',\n    angledataset : ')
            ret.append(repr(self.angledataset))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    newctffile : ')
            ret.append(repr(self.newctffile))
            ret.append(',\n    dotproductfile : ')
            ret.append(repr(self.dotproductfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.ANGNameListType")
    class ANGNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=angnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 64-69
        
        """
        def __init__(self, handle=None):
            """
            self = Angnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 64-69
            
            
            Returns
            -------
            this : Angnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for angnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_angnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Angnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 64-69
            
            Parameters
            ----------
            this : Angnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for angnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_angnamelisttype_finalise(this=self._handle)
        
        @property
        def modality(self):
            """
            Element modality ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 65
            
            """
            return _pyEMsoft.f90wrap_angnamelisttype__get__modality(self._handle)
        
        @modality.setter
        def modality(self, modality):
            _pyEMsoft.f90wrap_angnamelisttype__set__modality(self._handle, modality)
        
        @property
        def angledataset(self):
            """
            Element angledataset ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 66
            
            """
            return _pyEMsoft.f90wrap_angnamelisttype__get__angledataset(self._handle)
        
        @angledataset.setter
        def angledataset(self, angledataset):
            _pyEMsoft.f90wrap_angnamelisttype__set__angledataset(self._handle, angledataset)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 67
            
            """
            return _pyEMsoft.f90wrap_angnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_angnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def newangfile(self):
            """
            Element newangfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 68
            
            """
            return _pyEMsoft.f90wrap_angnamelisttype__get__newangfile(self._handle)
        
        @newangfile.setter
        def newangfile(self, newangfile):
            _pyEMsoft.f90wrap_angnamelisttype__set__newangfile(self._handle, newangfile)
        
        @property
        def dotproductfile(self):
            """
            Element dotproductfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 69
            
            """
            return _pyEMsoft.f90wrap_angnamelisttype__get__dotproductfile(self._handle)
        
        @dotproductfile.setter
        def dotproductfile(self, dotproductfile):
            _pyEMsoft.f90wrap_angnamelisttype__set__dotproductfile(self._handle, \
                dotproductfile)
        
        def __str__(self):
            ret = ['<angnamelisttype>{\n']
            ret.append('    modality : ')
            ret.append(repr(self.modality))
            ret.append(',\n    angledataset : ')
            ret.append(repr(self.angledataset))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    newangfile : ')
            ret.append(repr(self.newangfile))
            ret.append(',\n    dotproductfile : ')
            ret.append(repr(self.dotproductfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EulersNameListType")
    class EulersNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=eulersnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 72-78
        
        """
        def __init__(self, handle=None):
            """
            self = Eulersnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 72-78
            
            
            Returns
            -------
            this : Eulersnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for eulersnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_eulersnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Eulersnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 72-78
            
            Parameters
            ----------
            this : Eulersnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for eulersnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_eulersnamelisttype_finalise(this=self._handle)
        
        @property
        def angledataset(self):
            """
            Element angledataset ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 73
            
            """
            return _pyEMsoft.f90wrap_eulersnamelisttype__get__angledataset(self._handle)
        
        @angledataset.setter
        def angledataset(self, angledataset):
            _pyEMsoft.f90wrap_eulersnamelisttype__set__angledataset(self._handle, \
                angledataset)
        
        @property
        def raddeg(self):
            """
            Element raddeg ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 74
            
            """
            return _pyEMsoft.f90wrap_eulersnamelisttype__get__raddeg(self._handle)
        
        @raddeg.setter
        def raddeg(self, raddeg):
            _pyEMsoft.f90wrap_eulersnamelisttype__set__raddeg(self._handle, raddeg)
        
        @property
        def txtfile(self):
            """
            Element txtfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 75
            
            """
            return _pyEMsoft.f90wrap_eulersnamelisttype__get__txtfile(self._handle)
        
        @txtfile.setter
        def txtfile(self, txtfile):
            _pyEMsoft.f90wrap_eulersnamelisttype__set__txtfile(self._handle, txtfile)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 76
            
            """
            return _pyEMsoft.f90wrap_eulersnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_eulersnamelisttype__set__datafile(self._handle, datafile)
        
        @property
        def emebsdnmlfile(self):
            """
            Element emebsdnmlfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 77
            
            """
            return _pyEMsoft.f90wrap_eulersnamelisttype__get__emebsdnmlfile(self._handle)
        
        @emebsdnmlfile.setter
        def emebsdnmlfile(self, emebsdnmlfile):
            _pyEMsoft.f90wrap_eulersnamelisttype__set__emebsdnmlfile(self._handle, \
                emebsdnmlfile)
        
        @property
        def dotproductfile(self):
            """
            Element dotproductfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 78
            
            """
            return _pyEMsoft.f90wrap_eulersnamelisttype__get__dotproductfile(self._handle)
        
        @dotproductfile.setter
        def dotproductfile(self, dotproductfile):
            _pyEMsoft.f90wrap_eulersnamelisttype__set__dotproductfile(self._handle, \
                dotproductfile)
        
        def __str__(self):
            ret = ['<eulersnamelisttype>{\n']
            ret.append('    angledataset : ')
            ret.append(repr(self.angledataset))
            ret.append(',\n    raddeg : ')
            ret.append(repr(self.raddeg))
            ret.append(',\n    txtfile : ')
            ret.append(repr(self.txtfile))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    emebsdnmlfile : ')
            ret.append(repr(self.emebsdnmlfile))
            ret.append(',\n    dotproductfile : ')
            ret.append(repr(self.dotproductfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.GBONameListType")
    class GBONameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=gbonamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 81-89
        
        """
        def __init__(self, handle=None):
            """
            self = Gbonamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 81-89
            
            
            Returns
            -------
            this : Gbonamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for gbonamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_gbonamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Gbonamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 81-89
            
            Parameters
            ----------
            this : Gbonamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for gbonamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_gbonamelisttype_finalise(this=self._handle)
        
        @property
        def pgnum(self):
            """
            Element pgnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 82
            
            """
            return _pyEMsoft.f90wrap_gbonamelisttype__get__pgnum(self._handle)
        
        @pgnum.setter
        def pgnum(self, pgnum):
            _pyEMsoft.f90wrap_gbonamelisttype__set__pgnum(self._handle, pgnum)
        
        @property
        def numsamples(self):
            """
            Element numsamples ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 83
            
            """
            return _pyEMsoft.f90wrap_gbonamelisttype__get__numsamples(self._handle)
        
        @numsamples.setter
        def numsamples(self, numsamples):
            _pyEMsoft.f90wrap_gbonamelisttype__set__numsamples(self._handle, numsamples)
        
        @property
        def numbins(self):
            """
            Element numbins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 84
            
            """
            return _pyEMsoft.f90wrap_gbonamelisttype__get__numbins(self._handle)
        
        @numbins.setter
        def numbins(self, numbins):
            _pyEMsoft.f90wrap_gbonamelisttype__set__numbins(self._handle, numbins)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 85
            
            """
            return _pyEMsoft.f90wrap_gbonamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_gbonamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def csltype(self):
            """
            Element csltype ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 86
            
            """
            return _pyEMsoft.f90wrap_gbonamelisttype__get__csltype(self._handle)
        
        @csltype.setter
        def csltype(self, csltype):
            _pyEMsoft.f90wrap_gbonamelisttype__set__csltype(self._handle, csltype)
        
        @property
        def fixedab(self):
            """
            Element fixedab ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 87
            
            """
            return _pyEMsoft.f90wrap_gbonamelisttype__get__fixedab(self._handle)
        
        @fixedab.setter
        def fixedab(self, fixedab):
            _pyEMsoft.f90wrap_gbonamelisttype__set__fixedab(self._handle, fixedab)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 88
            
            """
            return _pyEMsoft.f90wrap_gbonamelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_gbonamelisttype__set__outname(self._handle, outname)
        
        @property
        def octonions(self):
            """
            Element octonions ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 89
            
            """
            return _pyEMsoft.f90wrap_gbonamelisttype__get__octonions(self._handle)
        
        @octonions.setter
        def octonions(self, octonions):
            _pyEMsoft.f90wrap_gbonamelisttype__set__octonions(self._handle, octonions)
        
        def __str__(self):
            ret = ['<gbonamelisttype>{\n']
            ret.append('    pgnum : ')
            ret.append(repr(self.pgnum))
            ret.append(',\n    numsamples : ')
            ret.append(repr(self.numsamples))
            ret.append(',\n    numbins : ')
            ret.append(repr(self.numbins))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    csltype : ')
            ret.append(repr(self.csltype))
            ret.append(',\n    fixedab : ')
            ret.append(repr(self.fixedab))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append(',\n    octonions : ')
            ret.append(repr(self.octonions))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.GBOdmNameListType")
    class GBOdmNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=gbodmnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 92-99
        
        """
        def __init__(self, handle=None):
            """
            self = Gbodmnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 92-99
            
            
            Returns
            -------
            this : Gbodmnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for gbodmnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_gbodmnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Gbodmnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 92-99
            
            Parameters
            ----------
            this : Gbodmnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for gbodmnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_gbodmnamelisttype_finalise(this=self._handle)
        
        @property
        def pgnum(self):
            """
            Element pgnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 93
            
            """
            return _pyEMsoft.f90wrap_gbodmnamelisttype__get__pgnum(self._handle)
        
        @pgnum.setter
        def pgnum(self, pgnum):
            _pyEMsoft.f90wrap_gbodmnamelisttype__set__pgnum(self._handle, pgnum)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 94
            
            """
            return _pyEMsoft.f90wrap_gbodmnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_gbodmnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def refine(self):
            """
            Element refine ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 95
            
            """
            return _pyEMsoft.f90wrap_gbodmnamelisttype__get__refine(self._handle)
        
        @refine.setter
        def refine(self, refine):
            _pyEMsoft.f90wrap_gbodmnamelisttype__set__refine(self._handle, refine)
        
        @property
        def workmode(self):
            """
            Element workmode ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 96
            
            """
            return _pyEMsoft.f90wrap_gbodmnamelisttype__get__workmode(self._handle)
        
        @workmode.setter
        def workmode(self, workmode):
            _pyEMsoft.f90wrap_gbodmnamelisttype__set__workmode(self._handle, workmode)
        
        @property
        def metric(self):
            """
            Element metric ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 97
            
            """
            return _pyEMsoft.f90wrap_gbodmnamelisttype__get__metric(self._handle)
        
        @metric.setter
        def metric(self, metric):
            _pyEMsoft.f90wrap_gbodmnamelisttype__set__metric(self._handle, metric)
        
        @property
        def inname(self):
            """
            Element inname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 98
            
            """
            return _pyEMsoft.f90wrap_gbodmnamelisttype__get__inname(self._handle)
        
        @inname.setter
        def inname(self, inname):
            _pyEMsoft.f90wrap_gbodmnamelisttype__set__inname(self._handle, inname)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 99
            
            """
            return _pyEMsoft.f90wrap_gbodmnamelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_gbodmnamelisttype__set__outname(self._handle, outname)
        
        def __str__(self):
            ret = ['<gbodmnamelisttype>{\n']
            ret.append('    pgnum : ')
            ret.append(repr(self.pgnum))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    refine : ')
            ret.append(repr(self.refine))
            ret.append(',\n    workmode : ')
            ret.append(repr(self.workmode))
            ret.append(',\n    metric : ')
            ret.append(repr(self.metric))
            ret.append(',\n    inname : ')
            ret.append(repr(self.inname))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.oSLERPNameListType")
    class oSLERPNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=oslerpnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 102-115
        
        """
        def __init__(self, handle=None):
            """
            self = Oslerpnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 102-115
            
            
            Returns
            -------
            this : Oslerpnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for oslerpnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_oslerpnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Oslerpnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 102-115
            
            Parameters
            ----------
            this : Oslerpnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for oslerpnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_oslerpnamelisttype_finalise(this=self._handle)
        
        @property
        def framesize(self):
            """
            Element framesize ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 103
            
            """
            return _pyEMsoft.f90wrap_oslerpnamelisttype__get__framesize(self._handle)
        
        @framesize.setter
        def framesize(self, framesize):
            _pyEMsoft.f90wrap_oslerpnamelisttype__set__framesize(self._handle, framesize)
        
        @property
        def qm(self):
            """
            Element qm ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 104
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_oslerpnamelisttype__array__qm(self._handle)
            if array_handle in self._arrays:
                qm = self._arrays[array_handle]
            else:
                qm = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_oslerpnamelisttype__array__qm)
                self._arrays[array_handle] = qm
            return qm
        
        @qm.setter
        def qm(self, qm):
            self.qm[...] = qm
        
        @property
        def ma(self):
            """
            Element ma ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 105
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_oslerpnamelisttype__array__ma(self._handle)
            if array_handle in self._arrays:
                ma = self._arrays[array_handle]
            else:
                ma = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_oslerpnamelisttype__array__ma)
                self._arrays[array_handle] = ma
            return ma
        
        @ma.setter
        def ma(self, ma):
            self.ma[...] = ma
        
        @property
        def mc(self):
            """
            Element mc ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 106
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_oslerpnamelisttype__array__mc(self._handle)
            if array_handle in self._arrays:
                mc = self._arrays[array_handle]
            else:
                mc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_oslerpnamelisttype__array__mc)
                self._arrays[array_handle] = mc
            return mc
        
        @mc.setter
        def mc(self, mc):
            self.mc[...] = mc
        
        @property
        def o1(self):
            """
            Element o1 ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 107
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_oslerpnamelisttype__array__o1(self._handle)
            if array_handle in self._arrays:
                o1 = self._arrays[array_handle]
            else:
                o1 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_oslerpnamelisttype__array__o1)
                self._arrays[array_handle] = o1
            return o1
        
        @o1.setter
        def o1(self, o1):
            self.o1[...] = o1
        
        @property
        def o2(self):
            """
            Element o2 ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 108
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_oslerpnamelisttype__array__o2(self._handle)
            if array_handle in self._arrays:
                o2 = self._arrays[array_handle]
            else:
                o2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_oslerpnamelisttype__array__o2)
                self._arrays[array_handle] = o2
            return o2
        
        @o2.setter
        def o2(self, o2):
            self.o2[...] = o2
        
        @property
        def domega(self):
            """
            Element domega ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 109
            
            """
            return _pyEMsoft.f90wrap_oslerpnamelisttype__get__domega(self._handle)
        
        @domega.setter
        def domega(self, domega):
            _pyEMsoft.f90wrap_oslerpnamelisttype__set__domega(self._handle, domega)
        
        @property
        def rendermode(self):
            """
            Element rendermode ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 110
            
            """
            return _pyEMsoft.f90wrap_oslerpnamelisttype__get__rendermode(self._handle)
        
        @rendermode.setter
        def rendermode(self, rendermode):
            _pyEMsoft.f90wrap_oslerpnamelisttype__set__rendermode(self._handle, rendermode)
        
        @property
        def gbmode(self):
            """
            Element gbmode ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 111
            
            """
            return _pyEMsoft.f90wrap_oslerpnamelisttype__get__gbmode(self._handle)
        
        @gbmode.setter
        def gbmode(self, gbmode):
            _pyEMsoft.f90wrap_oslerpnamelisttype__set__gbmode(self._handle, gbmode)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 112
            
            """
            return _pyEMsoft.f90wrap_oslerpnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_oslerpnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def povrayfile(self):
            """
            Element povrayfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 113
            
            """
            return _pyEMsoft.f90wrap_oslerpnamelisttype__get__povrayfile(self._handle)
        
        @povrayfile.setter
        def povrayfile(self, povrayfile):
            _pyEMsoft.f90wrap_oslerpnamelisttype__set__povrayfile(self._handle, povrayfile)
        
        @property
        def framefolder(self):
            """
            Element framefolder ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 114
            
            """
            return _pyEMsoft.f90wrap_oslerpnamelisttype__get__framefolder(self._handle)
        
        @framefolder.setter
        def framefolder(self, framefolder):
            _pyEMsoft.f90wrap_oslerpnamelisttype__set__framefolder(self._handle, \
                framefolder)
        
        @property
        def moviename(self):
            """
            Element moviename ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 115
            
            """
            return _pyEMsoft.f90wrap_oslerpnamelisttype__get__moviename(self._handle)
        
        @moviename.setter
        def moviename(self, moviename):
            _pyEMsoft.f90wrap_oslerpnamelisttype__set__moviename(self._handle, moviename)
        
        def __str__(self):
            ret = ['<oslerpnamelisttype>{\n']
            ret.append('    framesize : ')
            ret.append(repr(self.framesize))
            ret.append(',\n    qm : ')
            ret.append(repr(self.qm))
            ret.append(',\n    ma : ')
            ret.append(repr(self.ma))
            ret.append(',\n    mc : ')
            ret.append(repr(self.mc))
            ret.append(',\n    o1 : ')
            ret.append(repr(self.o1))
            ret.append(',\n    o2 : ')
            ret.append(repr(self.o2))
            ret.append(',\n    domega : ')
            ret.append(repr(self.domega))
            ret.append(',\n    rendermode : ')
            ret.append(repr(self.rendermode))
            ret.append(',\n    gbmode : ')
            ret.append(repr(self.gbmode))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    povrayfile : ')
            ret.append(repr(self.povrayfile))
            ret.append(',\n    framefolder : ')
            ret.append(repr(self.framefolder))
            ret.append(',\n    moviename : ')
            ret.append(repr(self.moviename))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.ChangeSettingNameListType")
    class ChangeSettingNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=changesettingnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 118-122
        
        """
        def __init__(self, handle=None):
            """
            self = Changesettingnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 118-122
            
            
            Returns
            -------
            this : Changesettingnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for changesettingnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_changesettingnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Changesettingnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 118-122
            
            Parameters
            ----------
            this : Changesettingnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for changesettingnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_changesettingnamelisttype_finalise(this=self._handle)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 119
            
            """
            return _pyEMsoft.f90wrap_changesettingnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_changesettingnamelisttype__set__nthreads(self._handle, \
                nthreads)
        
        @property
        def orthorhombicsetting(self):
            """
            Element orthorhombicsetting ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 120
            
            """
            return \
                _pyEMsoft.f90wrap_changesettingnamelisttype__get__orthorhombicsetting(self._handle)
        
        @orthorhombicsetting.setter
        def orthorhombicsetting(self, orthorhombicsetting):
            \
                _pyEMsoft.f90wrap_changesettingnamelisttype__set__orthorhombicsetting(self._handle, \
                orthorhombicsetting)
        
        @property
        def dotproductfile(self):
            """
            Element dotproductfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 121
            
            """
            return \
                _pyEMsoft.f90wrap_changesettingnamelisttype__get__dotproductfile(self._handle)
        
        @dotproductfile.setter
        def dotproductfile(self, dotproductfile):
            _pyEMsoft.f90wrap_changesettingnamelisttype__set__dotproductfile(self._handle, \
                dotproductfile)
        
        @property
        def newctffile(self):
            """
            Element newctffile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 122
            
            """
            return \
                _pyEMsoft.f90wrap_changesettingnamelisttype__get__newctffile(self._handle)
        
        @newctffile.setter
        def newctffile(self, newctffile):
            _pyEMsoft.f90wrap_changesettingnamelisttype__set__newctffile(self._handle, \
                newctffile)
        
        def __str__(self):
            ret = ['<changesettingnamelisttype>{\n']
            ret.append('    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    orthorhombicsetting : ')
            ret.append(repr(self.orthorhombicsetting))
            ret.append(',\n    dotproductfile : ')
            ret.append(repr(self.dotproductfile))
            ret.append(',\n    newctffile : ')
            ret.append(repr(self.newctffile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.LorentzNameListType")
    class LorentzNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=lorentznamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 125-150
        
        """
        def __init__(self, handle=None):
            """
            self = Lorentznamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 125-150
            
            
            Returns
            -------
            this : Lorentznamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for lorentznamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_lorentznamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Lorentznamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 125-150
            
            Parameters
            ----------
            this : Lorentznamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for lorentznamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_lorentznamelisttype_finalise(this=self._handle)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 126
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def numappos(self):
            """
            Element numappos ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 127
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__numappos(self._handle)
        
        @numappos.setter
        def numappos(self, numappos):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__numappos(self._handle, numappos)
        
        @property
        def numdefocus(self):
            """
            Element numdefocus ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 128
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__numdefocus(self._handle)
        
        @numdefocus.setter
        def numdefocus(self, numdefocus):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__numdefocus(self._handle, numdefocus)
        
        @property
        def numtilts(self):
            """
            Element numtilts ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 129
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__numtilts(self._handle)
        
        @numtilts.setter
        def numtilts(self, numtilts):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__numtilts(self._handle, numtilts)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 130
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def apertureradius(self):
            """
            Element apertureradius ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 131
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__apertureradius(self._handle)
        
        @apertureradius.setter
        def apertureradius(self, apertureradius):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__apertureradius(self._handle, \
                apertureradius)
        
        @property
        def apertureposition(self):
            """
            Element apertureposition ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 132
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_lorentznamelisttype__array__apertureposition(self._handle)
            if array_handle in self._arrays:
                apertureposition = self._arrays[array_handle]
            else:
                apertureposition = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_lorentznamelisttype__array__apertureposition)
                self._arrays[array_handle] = apertureposition
            return apertureposition
        
        @apertureposition.setter
        def apertureposition(self, apertureposition):
            self.apertureposition[...] = apertureposition
        
        @property
        def defocusstart(self):
            """
            Element defocusstart ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 133
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__defocusstart(self._handle)
        
        @defocusstart.setter
        def defocusstart(self, defocusstart):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__defocusstart(self._handle, \
                defocusstart)
        
        @property
        def defocusstep(self):
            """
            Element defocusstep ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 134
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__defocusstep(self._handle)
        
        @defocusstep.setter
        def defocusstep(self, defocusstep):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__defocusstep(self._handle, \
                defocusstep)
        
        @property
        def defocusspread(self):
            """
            Element defocusspread ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 135
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__defocusspread(self._handle)
        
        @defocusspread.setter
        def defocusspread(self, defocusspread):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__defocusspread(self._handle, \
                defocusspread)
        
        @property
        def thetac(self):
            """
            Element thetac ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 136
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__thetac(self._handle)
        
        @thetac.setter
        def thetac(self, thetac):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__thetac(self._handle, thetac)
        
        @property
        def astigmatism(self):
            """
            Element astigmatism ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 137
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_lorentznamelisttype__array__astigmatism(self._handle)
            if array_handle in self._arrays:
                astigmatism = self._arrays[array_handle]
            else:
                astigmatism = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_lorentznamelisttype__array__astigmatism)
                self._arrays[array_handle] = astigmatism
            return astigmatism
        
        @astigmatism.setter
        def astigmatism(self, astigmatism):
            self.astigmatism[...] = astigmatism
        
        @property
        def beamdc(self):
            """
            Element beamdc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 138
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_lorentznamelisttype__array__beamdc(self._handle)
            if array_handle in self._arrays:
                beamdc = self._arrays[array_handle]
            else:
                beamdc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_lorentznamelisttype__array__beamdc)
                self._arrays[array_handle] = beamdc
            return beamdc
        
        @beamdc.setter
        def beamdc(self, beamdc):
            self.beamdc[...] = beamdc
        
        @property
        def tiltaxis(self):
            """
            Element tiltaxis ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 139
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_lorentznamelisttype__array__tiltaxis(self._handle)
            if array_handle in self._arrays:
                tiltaxis = self._arrays[array_handle]
            else:
                tiltaxis = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_lorentznamelisttype__array__tiltaxis)
                self._arrays[array_handle] = tiltaxis
            return tiltaxis
        
        @tiltaxis.setter
        def tiltaxis(self, tiltaxis):
            self.tiltaxis[...] = tiltaxis
        
        @property
        def tiltstart(self):
            """
            Element tiltstart ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 140
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__tiltstart(self._handle)
        
        @tiltstart.setter
        def tiltstart(self, tiltstart):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__tiltstart(self._handle, tiltstart)
        
        @property
        def tiltstepsize(self):
            """
            Element tiltstepsize ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 141
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__tiltstepsize(self._handle)
        
        @tiltstepsize.setter
        def tiltstepsize(self, tiltstepsize):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__tiltstepsize(self._handle, \
                tiltstepsize)
        
        @property
        def phasemethod(self):
            """
            Element phasemethod ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 142
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__phasemethod(self._handle)
        
        @phasemethod.setter
        def phasemethod(self, phasemethod):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__phasemethod(self._handle, \
                phasemethod)
        
        @property
        def frfo(self):
            """
            Element frfo ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 143
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__frfo(self._handle)
        
        @frfo.setter
        def frfo(self, frfo):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__frfo(self._handle, frfo)
        
        @property
        def magfile(self):
            """
            Element magfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 144
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__magfile(self._handle)
        
        @magfile.setter
        def magfile(self, magfile):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__magfile(self._handle, magfile)
        
        @property
        def outputfile(self):
            """
            Element outputfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 145
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__outputfile(self._handle)
        
        @outputfile.setter
        def outputfile(self, outputfile):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__outputfile(self._handle, outputfile)
        
        @property
        def phiefile(self):
            """
            Element phiefile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 146
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__phiefile(self._handle)
        
        @phiefile.setter
        def phiefile(self, phiefile):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__phiefile(self._handle, phiefile)
        
        @property
        def phimfile(self):
            """
            Element phimfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 147
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__phimfile(self._handle)
        
        @phimfile.setter
        def phimfile(self, phimfile):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__phimfile(self._handle, phimfile)
        
        @property
        def intbxfile(self):
            """
            Element intbxfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 148
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__intbxfile(self._handle)
        
        @intbxfile.setter
        def intbxfile(self, intbxfile):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__intbxfile(self._handle, intbxfile)
        
        @property
        def intbyfile(self):
            """
            Element intbyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 149
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__intbyfile(self._handle)
        
        @intbyfile.setter
        def intbyfile(self, intbyfile):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__intbyfile(self._handle, intbyfile)
        
        @property
        def colormapfile(self):
            """
            Element colormapfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 150
            
            """
            return _pyEMsoft.f90wrap_lorentznamelisttype__get__colormapfile(self._handle)
        
        @colormapfile.setter
        def colormapfile(self, colormapfile):
            _pyEMsoft.f90wrap_lorentznamelisttype__set__colormapfile(self._handle, \
                colormapfile)
        
        def __str__(self):
            ret = ['<lorentznamelisttype>{\n']
            ret.append('    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    numappos : ')
            ret.append(repr(self.numappos))
            ret.append(',\n    numdefocus : ')
            ret.append(repr(self.numdefocus))
            ret.append(',\n    numtilts : ')
            ret.append(repr(self.numtilts))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    apertureradius : ')
            ret.append(repr(self.apertureradius))
            ret.append(',\n    apertureposition : ')
            ret.append(repr(self.apertureposition))
            ret.append(',\n    defocusstart : ')
            ret.append(repr(self.defocusstart))
            ret.append(',\n    defocusstep : ')
            ret.append(repr(self.defocusstep))
            ret.append(',\n    defocusspread : ')
            ret.append(repr(self.defocusspread))
            ret.append(',\n    thetac : ')
            ret.append(repr(self.thetac))
            ret.append(',\n    astigmatism : ')
            ret.append(repr(self.astigmatism))
            ret.append(',\n    beamdc : ')
            ret.append(repr(self.beamdc))
            ret.append(',\n    tiltaxis : ')
            ret.append(repr(self.tiltaxis))
            ret.append(',\n    tiltstart : ')
            ret.append(repr(self.tiltstart))
            ret.append(',\n    tiltstepsize : ')
            ret.append(repr(self.tiltstepsize))
            ret.append(',\n    phasemethod : ')
            ret.append(repr(self.phasemethod))
            ret.append(',\n    frfo : ')
            ret.append(repr(self.frfo))
            ret.append(',\n    magfile : ')
            ret.append(repr(self.magfile))
            ret.append(',\n    outputfile : ')
            ret.append(repr(self.outputfile))
            ret.append(',\n    phiefile : ')
            ret.append(repr(self.phiefile))
            ret.append(',\n    phimfile : ')
            ret.append(repr(self.phimfile))
            ret.append(',\n    intbxfile : ')
            ret.append(repr(self.intbxfile))
            ret.append(',\n    intbyfile : ')
            ret.append(repr(self.intbyfile))
            ret.append(',\n    colormapfile : ')
            ret.append(repr(self.colormapfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.MultiPhaseNameListType")
    class MultiPhaseNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=multiphasenamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 153-158
        
        """
        def __init__(self, handle=None):
            """
            self = Multiphasenamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 153-158
            
            
            Returns
            -------
            this : Multiphasenamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for multiphasenamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_multiphasenamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Multiphasenamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 153-158
            
            Parameters
            ----------
            this : Multiphasenamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for multiphasenamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_multiphasenamelisttype_finalise(this=self._handle)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 154
            
            """
            return _pyEMsoft.f90wrap_multiphasenamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_multiphasenamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def dp1file(self):
            """
            Element dp1file ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 155
            
            """
            return _pyEMsoft.f90wrap_multiphasenamelisttype__get__dp1file(self._handle)
        
        @dp1file.setter
        def dp1file(self, dp1file):
            _pyEMsoft.f90wrap_multiphasenamelisttype__set__dp1file(self._handle, dp1file)
        
        @property
        def dp2file(self):
            """
            Element dp2file ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 156
            
            """
            return _pyEMsoft.f90wrap_multiphasenamelisttype__get__dp2file(self._handle)
        
        @dp2file.setter
        def dp2file(self, dp2file):
            _pyEMsoft.f90wrap_multiphasenamelisttype__set__dp2file(self._handle, dp2file)
        
        @property
        def dp3file(self):
            """
            Element dp3file ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 157
            
            """
            return _pyEMsoft.f90wrap_multiphasenamelisttype__get__dp3file(self._handle)
        
        @dp3file.setter
        def dp3file(self, dp3file):
            _pyEMsoft.f90wrap_multiphasenamelisttype__set__dp3file(self._handle, dp3file)
        
        @property
        def outputfile(self):
            """
            Element outputfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 158
            
            """
            return _pyEMsoft.f90wrap_multiphasenamelisttype__get__outputfile(self._handle)
        
        @outputfile.setter
        def outputfile(self, outputfile):
            _pyEMsoft.f90wrap_multiphasenamelisttype__set__outputfile(self._handle, \
                outputfile)
        
        def __str__(self):
            ret = ['<multiphasenamelisttype>{\n']
            ret.append('    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    dp1file : ')
            ret.append(repr(self.dp1file))
            ret.append(',\n    dp2file : ')
            ret.append(repr(self.dp2file))
            ret.append(',\n    dp3file : ')
            ret.append(repr(self.dp3file))
            ret.append(',\n    outputfile : ')
            ret.append(repr(self.outputfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.KosselNameListType")
    class KosselNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=kosselnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 161-176
        
        """
        def __init__(self, handle=None):
            """
            self = Kosselnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 161-176
            
            
            Returns
            -------
            this : Kosselnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for kosselnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_kosselnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Kosselnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 161-176
            
            Parameters
            ----------
            this : Kosselnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for kosselnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_kosselnamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 162
            
            """
            return _pyEMsoft.f90wrap_kosselnamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_kosselnamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def numthick(self):
            """
            Element numthick ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 163
            
            """
            return _pyEMsoft.f90wrap_kosselnamelisttype__get__numthick(self._handle)
        
        @numthick.setter
        def numthick(self, numthick):
            _pyEMsoft.f90wrap_kosselnamelisttype__set__numthick(self._handle, numthick)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 164
            
            """
            return _pyEMsoft.f90wrap_kosselnamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_kosselnamelisttype__set__npix(self._handle, npix)
        
        @property
        def maxholz(self):
            """
            Element maxholz ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 165
            
            """
            return _pyEMsoft.f90wrap_kosselnamelisttype__get__maxholz(self._handle)
        
        @maxholz.setter
        def maxholz(self, maxholz):
            _pyEMsoft.f90wrap_kosselnamelisttype__set__maxholz(self._handle, maxholz)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 166
            
            """
            return _pyEMsoft.f90wrap_kosselnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_kosselnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def k(self):
            """
            Element k ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 167
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_kosselnamelisttype__array__k(self._handle)
            if array_handle in self._arrays:
                k = self._arrays[array_handle]
            else:
                k = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_kosselnamelisttype__array__k)
                self._arrays[array_handle] = k
            return k
        
        @k.setter
        def k(self, k):
            self.k[...] = k
        
        @property
        def fn(self):
            """
            Element fn ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 168
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_kosselnamelisttype__array__fn(self._handle)
            if array_handle in self._arrays:
                fn = self._arrays[array_handle]
            else:
                fn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_kosselnamelisttype__array__fn)
                self._arrays[array_handle] = fn
            return fn
        
        @fn.setter
        def fn(self, fn):
            self.fn[...] = fn
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 169
            
            """
            return _pyEMsoft.f90wrap_kosselnamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_kosselnamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 170
            
            """
            return _pyEMsoft.f90wrap_kosselnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_kosselnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def convergence(self):
            """
            Element convergence ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 171
            
            """
            return _pyEMsoft.f90wrap_kosselnamelisttype__get__convergence(self._handle)
        
        @convergence.setter
        def convergence(self, convergence):
            _pyEMsoft.f90wrap_kosselnamelisttype__set__convergence(self._handle, \
                convergence)
        
        @property
        def startthick(self):
            """
            Element startthick ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 172
            
            """
            return _pyEMsoft.f90wrap_kosselnamelisttype__get__startthick(self._handle)
        
        @startthick.setter
        def startthick(self, startthick):
            _pyEMsoft.f90wrap_kosselnamelisttype__set__startthick(self._handle, startthick)
        
        @property
        def thickinc(self):
            """
            Element thickinc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 173
            
            """
            return _pyEMsoft.f90wrap_kosselnamelisttype__get__thickinc(self._handle)
        
        @thickinc.setter
        def thickinc(self, thickinc):
            _pyEMsoft.f90wrap_kosselnamelisttype__set__thickinc(self._handle, thickinc)
        
        @property
        def minten(self):
            """
            Element minten ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 174
            
            """
            return _pyEMsoft.f90wrap_kosselnamelisttype__get__minten(self._handle)
        
        @minten.setter
        def minten(self, minten):
            _pyEMsoft.f90wrap_kosselnamelisttype__set__minten(self._handle, minten)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 175
            
            """
            return _pyEMsoft.f90wrap_kosselnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_kosselnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 176
            
            """
            return _pyEMsoft.f90wrap_kosselnamelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_kosselnamelisttype__set__outname(self._handle, outname)
        
        def __str__(self):
            ret = ['<kosselnamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    numthick : ')
            ret.append(repr(self.numthick))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    maxholz : ')
            ret.append(repr(self.maxholz))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    k : ')
            ret.append(repr(self.k))
            ret.append(',\n    fn : ')
            ret.append(repr(self.fn))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    convergence : ')
            ret.append(repr(self.convergence))
            ret.append(',\n    startthick : ')
            ret.append(repr(self.startthick))
            ret.append(',\n    thickinc : ')
            ret.append(repr(self.thickinc))
            ret.append(',\n    minten : ')
            ret.append(repr(self.minten))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.KosselMasterNameListType")
    class KosselMasterNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=kosselmasternamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 179-191
        
        """
        def __init__(self, handle=None):
            """
            self = Kosselmasternamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 179-191
            
            
            Returns
            -------
            this : Kosselmasternamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for kosselmasternamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_kosselmasternamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Kosselmasternamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 179-191
            
            Parameters
            ----------
            this : Kosselmasternamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for kosselmasternamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_kosselmasternamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 180
            
            """
            return _pyEMsoft.f90wrap_kosselmasternamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_kosselmasternamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def numthick(self):
            """
            Element numthick ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 181
            
            """
            return _pyEMsoft.f90wrap_kosselmasternamelisttype__get__numthick(self._handle)
        
        @numthick.setter
        def numthick(self, numthick):
            _pyEMsoft.f90wrap_kosselmasternamelisttype__set__numthick(self._handle, \
                numthick)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 182
            
            """
            return _pyEMsoft.f90wrap_kosselmasternamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_kosselmasternamelisttype__set__npx(self._handle, npx)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 183
            
            """
            return _pyEMsoft.f90wrap_kosselmasternamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_kosselmasternamelisttype__set__nthreads(self._handle, \
                nthreads)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 184
            
            """
            return _pyEMsoft.f90wrap_kosselmasternamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_kosselmasternamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 185
            
            """
            return _pyEMsoft.f90wrap_kosselmasternamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_kosselmasternamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def startthick(self):
            """
            Element startthick ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 186
            
            """
            return _pyEMsoft.f90wrap_kosselmasternamelisttype__get__startthick(self._handle)
        
        @startthick.setter
        def startthick(self, startthick):
            _pyEMsoft.f90wrap_kosselmasternamelisttype__set__startthick(self._handle, \
                startthick)
        
        @property
        def thickinc(self):
            """
            Element thickinc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 187
            
            """
            return _pyEMsoft.f90wrap_kosselmasternamelisttype__get__thickinc(self._handle)
        
        @thickinc.setter
        def thickinc(self, thickinc):
            _pyEMsoft.f90wrap_kosselmasternamelisttype__set__thickinc(self._handle, \
                thickinc)
        
        @property
        def tfraction(self):
            """
            Element tfraction ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 188
            
            """
            return _pyEMsoft.f90wrap_kosselmasternamelisttype__get__tfraction(self._handle)
        
        @tfraction.setter
        def tfraction(self, tfraction):
            _pyEMsoft.f90wrap_kosselmasternamelisttype__set__tfraction(self._handle, \
                tfraction)
        
        @property
        def kosselmode(self):
            """
            Element kosselmode ftype=character(6) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 189
            
            """
            return _pyEMsoft.f90wrap_kosselmasternamelisttype__get__kosselmode(self._handle)
        
        @kosselmode.setter
        def kosselmode(self, kosselmode):
            _pyEMsoft.f90wrap_kosselmasternamelisttype__set__kosselmode(self._handle, \
                kosselmode)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 190
            
            """
            return _pyEMsoft.f90wrap_kosselmasternamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_kosselmasternamelisttype__set__xtalname(self._handle, \
                xtalname)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 191
            
            """
            return _pyEMsoft.f90wrap_kosselmasternamelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_kosselmasternamelisttype__set__outname(self._handle, outname)
        
        def __str__(self):
            ret = ['<kosselmasternamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    numthick : ')
            ret.append(repr(self.numthick))
            ret.append(',\n    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    startthick : ')
            ret.append(repr(self.startthick))
            ret.append(',\n    thickinc : ')
            ret.append(repr(self.thickinc))
            ret.append(',\n    tfraction : ')
            ret.append(repr(self.tfraction))
            ret.append(',\n    kosselmode : ')
            ret.append(repr(self.kosselmode))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.MCNameListType")
    class MCNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=mcnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 194-211
        
        """
        def __init__(self, handle=None):
            """
            self = Mcnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 194-211
            
            
            Returns
            -------
            this : Mcnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for mcnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_mcnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Mcnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 194-211
            
            Parameters
            ----------
            this : Mcnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for mcnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_mcnamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 195
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_mcnamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 196
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_mcnamelisttype__set__numsx(self._handle, numsx)
        
        @property
        def primeseed(self):
            """
            Element primeseed ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 197
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__primeseed(self._handle)
        
        @primeseed.setter
        def primeseed(self, primeseed):
            _pyEMsoft.f90wrap_mcnamelisttype__set__primeseed(self._handle, primeseed)
        
        @property
        def num_el(self):
            """
            Element num_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 198
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__num_el(self._handle)
        
        @num_el.setter
        def num_el(self, num_el):
            _pyEMsoft.f90wrap_mcnamelisttype__set__num_el(self._handle, num_el)
        
        @property
        def totnum_el(self):
            """
            Element totnum_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 199
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__totnum_el(self._handle)
        
        @totnum_el.setter
        def totnum_el(self, totnum_el):
            _pyEMsoft.f90wrap_mcnamelisttype__set__totnum_el(self._handle, totnum_el)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 200
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_mcnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def sig(self):
            """
            Element sig ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 201
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__sig(self._handle)
        
        @sig.setter
        def sig(self, sig):
            _pyEMsoft.f90wrap_mcnamelisttype__set__sig(self._handle, sig)
        
        @property
        def omega(self):
            """
            Element omega ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 202
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__omega(self._handle)
        
        @omega.setter
        def omega(self, omega):
            _pyEMsoft.f90wrap_mcnamelisttype__set__omega(self._handle, omega)
        
        @property
        def ekev(self):
            """
            Element ekev ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 203
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__ekev(self._handle)
        
        @ekev.setter
        def ekev(self, ekev):
            _pyEMsoft.f90wrap_mcnamelisttype__set__ekev(self._handle, ekev)
        
        @property
        def ehistmin(self):
            """
            Element ehistmin ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 204
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__ehistmin(self._handle)
        
        @ehistmin.setter
        def ehistmin(self, ehistmin):
            _pyEMsoft.f90wrap_mcnamelisttype__set__ehistmin(self._handle, ehistmin)
        
        @property
        def ebinsize(self):
            """
            Element ebinsize ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 205
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__ebinsize(self._handle)
        
        @ebinsize.setter
        def ebinsize(self, ebinsize):
            _pyEMsoft.f90wrap_mcnamelisttype__set__ebinsize(self._handle, ebinsize)
        
        @property
        def depthmax(self):
            """
            Element depthmax ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 206
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__depthmax(self._handle)
        
        @depthmax.setter
        def depthmax(self, depthmax):
            _pyEMsoft.f90wrap_mcnamelisttype__set__depthmax(self._handle, depthmax)
        
        @property
        def depthstep(self):
            """
            Element depthstep ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 207
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__depthstep(self._handle)
        
        @depthstep.setter
        def depthstep(self, depthstep):
            _pyEMsoft.f90wrap_mcnamelisttype__set__depthstep(self._handle, depthstep)
        
        @property
        def mcmode(self):
            """
            Element mcmode ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 208
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__mcmode(self._handle)
        
        @mcmode.setter
        def mcmode(self, mcmode):
            _pyEMsoft.f90wrap_mcnamelisttype__set__mcmode(self._handle, mcmode)
        
        @property
        def mode(self):
            """
            Element mode ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 209
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__mode(self._handle)
        
        @mode.setter
        def mode(self, mode):
            _pyEMsoft.f90wrap_mcnamelisttype__set__mode(self._handle, mode)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 210
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_mcnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def dataname(self):
            """
            Element dataname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 211
            
            """
            return _pyEMsoft.f90wrap_mcnamelisttype__get__dataname(self._handle)
        
        @dataname.setter
        def dataname(self, dataname):
            _pyEMsoft.f90wrap_mcnamelisttype__set__dataname(self._handle, dataname)
        
        def __str__(self):
            ret = ['<mcnamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    primeseed : ')
            ret.append(repr(self.primeseed))
            ret.append(',\n    num_el : ')
            ret.append(repr(self.num_el))
            ret.append(',\n    totnum_el : ')
            ret.append(repr(self.totnum_el))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    sig : ')
            ret.append(repr(self.sig))
            ret.append(',\n    omega : ')
            ret.append(repr(self.omega))
            ret.append(',\n    ekev : ')
            ret.append(repr(self.ekev))
            ret.append(',\n    ehistmin : ')
            ret.append(repr(self.ehistmin))
            ret.append(',\n    ebinsize : ')
            ret.append(repr(self.ebinsize))
            ret.append(',\n    depthmax : ')
            ret.append(repr(self.depthmax))
            ret.append(',\n    depthstep : ')
            ret.append(repr(self.depthstep))
            ret.append(',\n    mcmode : ')
            ret.append(repr(self.mcmode))
            ret.append(',\n    mode : ')
            ret.append(repr(self.mode))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    dataname : ')
            ret.append(repr(self.dataname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.CPLMmasterNameListType")
    class CPLMmasterNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=cplmmasternamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 214-226
        
        """
        def __init__(self, handle=None):
            """
            self = Cplmmasternamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 214-226
            
            
            Returns
            -------
            this : Cplmmasternamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for cplmmasternamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_cplmmasternamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Cplmmasternamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 214-226
            
            Parameters
            ----------
            this : Cplmmasternamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for cplmmasternamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_cplmmasternamelisttype_finalise(this=self._handle)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 215
            
            """
            return _pyEMsoft.f90wrap_cplmmasternamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_cplmmasternamelisttype__set__npx(self._handle, npx)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 216
            
            """
            return _pyEMsoft.f90wrap_cplmmasternamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_cplmmasternamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def eps1re(self):
            """
            Element eps1re ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 217
            
            """
            return _pyEMsoft.f90wrap_cplmmasternamelisttype__get__eps1re(self._handle)
        
        @eps1re.setter
        def eps1re(self, eps1re):
            _pyEMsoft.f90wrap_cplmmasternamelisttype__set__eps1re(self._handle, eps1re)
        
        @property
        def eps1im(self):
            """
            Element eps1im ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 218
            
            """
            return _pyEMsoft.f90wrap_cplmmasternamelisttype__get__eps1im(self._handle)
        
        @eps1im.setter
        def eps1im(self, eps1im):
            _pyEMsoft.f90wrap_cplmmasternamelisttype__set__eps1im(self._handle, eps1im)
        
        @property
        def eps2re(self):
            """
            Element eps2re ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 219
            
            """
            return _pyEMsoft.f90wrap_cplmmasternamelisttype__get__eps2re(self._handle)
        
        @eps2re.setter
        def eps2re(self, eps2re):
            _pyEMsoft.f90wrap_cplmmasternamelisttype__set__eps2re(self._handle, eps2re)
        
        @property
        def eps2im(self):
            """
            Element eps2im ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 220
            
            """
            return _pyEMsoft.f90wrap_cplmmasternamelisttype__get__eps2im(self._handle)
        
        @eps2im.setter
        def eps2im(self, eps2im):
            _pyEMsoft.f90wrap_cplmmasternamelisttype__set__eps2im(self._handle, eps2im)
        
        @property
        def wl(self):
            """
            Element wl ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 221
            
            """
            return _pyEMsoft.f90wrap_cplmmasternamelisttype__get__wl(self._handle)
        
        @wl.setter
        def wl(self, wl):
            _pyEMsoft.f90wrap_cplmmasternamelisttype__set__wl(self._handle, wl)
        
        @property
        def theta(self):
            """
            Element theta ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 222
            
            """
            return _pyEMsoft.f90wrap_cplmmasternamelisttype__get__theta(self._handle)
        
        @theta.setter
        def theta(self, theta):
            _pyEMsoft.f90wrap_cplmmasternamelisttype__set__theta(self._handle, theta)
        
        @property
        def normalize(self):
            """
            Element normalize ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 223
            
            """
            return _pyEMsoft.f90wrap_cplmmasternamelisttype__get__normalize(self._handle)
        
        @normalize.setter
        def normalize(self, normalize):
            _pyEMsoft.f90wrap_cplmmasternamelisttype__set__normalize(self._handle, \
                normalize)
        
        @property
        def notify(self):
            """
            Element notify ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 224
            
            """
            return _pyEMsoft.f90wrap_cplmmasternamelisttype__get__notify(self._handle)
        
        @notify.setter
        def notify(self, notify):
            _pyEMsoft.f90wrap_cplmmasternamelisttype__set__notify(self._handle, notify)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 225
            
            """
            return _pyEMsoft.f90wrap_cplmmasternamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_cplmmasternamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def masterfile(self):
            """
            Element masterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 226
            
            """
            return _pyEMsoft.f90wrap_cplmmasternamelisttype__get__masterfile(self._handle)
        
        @masterfile.setter
        def masterfile(self, masterfile):
            _pyEMsoft.f90wrap_cplmmasternamelisttype__set__masterfile(self._handle, \
                masterfile)
        
        def __str__(self):
            ret = ['<cplmmasternamelisttype>{\n']
            ret.append('    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    eps1re : ')
            ret.append(repr(self.eps1re))
            ret.append(',\n    eps1im : ')
            ret.append(repr(self.eps1im))
            ret.append(',\n    eps2re : ')
            ret.append(repr(self.eps2re))
            ret.append(',\n    eps2im : ')
            ret.append(repr(self.eps2im))
            ret.append(',\n    wl : ')
            ret.append(repr(self.wl))
            ret.append(',\n    theta : ')
            ret.append(repr(self.theta))
            ret.append(',\n    normalize : ')
            ret.append(repr(self.normalize))
            ret.append(',\n    notify : ')
            ret.append(repr(self.notify))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    masterfile : ')
            ret.append(repr(self.masterfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.CPLMNameListType")
    class CPLMNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=cplmnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 229-236
        
        """
        def __init__(self, handle=None):
            """
            self = Cplmnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 229-236
            
            
            Returns
            -------
            this : Cplmnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for cplmnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_cplmnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Cplmnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 229-236
            
            Parameters
            ----------
            this : Cplmnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for cplmnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_cplmnamelisttype_finalise(this=self._handle)
        
        @property
        def phinum(self):
            """
            Element phinum ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 230
            
            """
            return _pyEMsoft.f90wrap_cplmnamelisttype__get__phinum(self._handle)
        
        @phinum.setter
        def phinum(self, phinum):
            _pyEMsoft.f90wrap_cplmnamelisttype__set__phinum(self._handle, phinum)
        
        @property
        def numpx(self):
            """
            Element numpx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 231
            
            """
            return _pyEMsoft.f90wrap_cplmnamelisttype__get__numpx(self._handle)
        
        @numpx.setter
        def numpx(self, numpx):
            _pyEMsoft.f90wrap_cplmnamelisttype__set__numpx(self._handle, numpx)
        
        @property
        def numpy(self):
            """
            Element numpy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 232
            
            """
            return _pyEMsoft.f90wrap_cplmnamelisttype__get__numpy(self._handle)
        
        @numpy.setter
        def numpy(self, numpy):
            _pyEMsoft.f90wrap_cplmnamelisttype__set__numpy(self._handle, numpy)
        
        @property
        def masterfile(self):
            """
            Element masterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 233
            
            """
            return _pyEMsoft.f90wrap_cplmnamelisttype__get__masterfile(self._handle)
        
        @masterfile.setter
        def masterfile(self, masterfile):
            _pyEMsoft.f90wrap_cplmnamelisttype__set__masterfile(self._handle, masterfile)
        
        @property
        def anglefile(self):
            """
            Element anglefile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 234
            
            """
            return _pyEMsoft.f90wrap_cplmnamelisttype__get__anglefile(self._handle)
        
        @anglefile.setter
        def anglefile(self, anglefile):
            _pyEMsoft.f90wrap_cplmnamelisttype__set__anglefile(self._handle, anglefile)
        
        @property
        def outputfile(self):
            """
            Element outputfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 235
            
            """
            return _pyEMsoft.f90wrap_cplmnamelisttype__get__outputfile(self._handle)
        
        @outputfile.setter
        def outputfile(self, outputfile):
            _pyEMsoft.f90wrap_cplmnamelisttype__set__outputfile(self._handle, outputfile)
        
        @property
        def tiffprefix(self):
            """
            Element tiffprefix ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 236
            
            """
            return _pyEMsoft.f90wrap_cplmnamelisttype__get__tiffprefix(self._handle)
        
        @tiffprefix.setter
        def tiffprefix(self, tiffprefix):
            _pyEMsoft.f90wrap_cplmnamelisttype__set__tiffprefix(self._handle, tiffprefix)
        
        def __str__(self):
            ret = ['<cplmnamelisttype>{\n']
            ret.append('    phinum : ')
            ret.append(repr(self.phinum))
            ret.append(',\n    numpx : ')
            ret.append(repr(self.numpx))
            ret.append(',\n    numpy : ')
            ret.append(repr(self.numpy))
            ret.append(',\n    masterfile : ')
            ret.append(repr(self.masterfile))
            ret.append(',\n    anglefile : ')
            ret.append(repr(self.anglefile))
            ret.append(',\n    outputfile : ')
            ret.append(repr(self.outputfile))
            ret.append(',\n    tiffprefix : ')
            ret.append(repr(self.tiffprefix))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.LaueMasterNameListType")
    class LaueMasterNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=lauemasternamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 239-256
        
        """
        def __init__(self, handle=None):
            """
            self = Lauemasternamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 239-256
            
            
            Returns
            -------
            this : Lauemasternamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for lauemasternamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_lauemasternamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Lauemasternamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 239-256
            
            Parameters
            ----------
            this : Lauemasternamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for lauemasternamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_lauemasternamelisttype_finalise(this=self._handle)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 240
            
            """
            return _pyEMsoft.f90wrap_lauemasternamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_lauemasternamelisttype__set__npx(self._handle, npx)
        
        @property
        def patchw(self):
            """
            Element patchw ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 241
            
            """
            return _pyEMsoft.f90wrap_lauemasternamelisttype__get__patchw(self._handle)
        
        @patchw.setter
        def patchw(self, patchw):
            _pyEMsoft.f90wrap_lauemasternamelisttype__set__patchw(self._handle, patchw)
        
        @property
        def lambdamin(self):
            """
            Element lambdamin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 242
            
            """
            return _pyEMsoft.f90wrap_lauemasternamelisttype__get__lambdamin(self._handle)
        
        @lambdamin.setter
        def lambdamin(self, lambdamin):
            _pyEMsoft.f90wrap_lauemasternamelisttype__set__lambdamin(self._handle, \
                lambdamin)
        
        @property
        def lambdamax(self):
            """
            Element lambdamax ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 243
            
            """
            return _pyEMsoft.f90wrap_lauemasternamelisttype__get__lambdamax(self._handle)
        
        @lambdamax.setter
        def lambdamax(self, lambdamax):
            _pyEMsoft.f90wrap_lauemasternamelisttype__set__lambdamax(self._handle, \
                lambdamax)
        
        @property
        def kappavmf(self):
            """
            Element kappavmf ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 244
            
            """
            return _pyEMsoft.f90wrap_lauemasternamelisttype__get__kappavmf(self._handle)
        
        @kappavmf.setter
        def kappavmf(self, kappavmf):
            _pyEMsoft.f90wrap_lauemasternamelisttype__set__kappavmf(self._handle, kappavmf)
        
        @property
        def intfactor(self):
            """
            Element intfactor ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 245
            
            """
            return _pyEMsoft.f90wrap_lauemasternamelisttype__get__intfactor(self._handle)
        
        @intfactor.setter
        def intfactor(self, intfactor):
            _pyEMsoft.f90wrap_lauemasternamelisttype__set__intfactor(self._handle, \
                intfactor)
        
        @property
        def outformat(self):
            """
            Element outformat ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 246
            
            """
            return _pyEMsoft.f90wrap_lauemasternamelisttype__get__outformat(self._handle)
        
        @outformat.setter
        def outformat(self, outformat):
            _pyEMsoft.f90wrap_lauemasternamelisttype__set__outformat(self._handle, \
                outformat)
        
        @property
        def binarize(self):
            """
            Element binarize ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 247
            
            """
            return _pyEMsoft.f90wrap_lauemasternamelisttype__get__binarize(self._handle)
        
        @binarize.setter
        def binarize(self, binarize):
            _pyEMsoft.f90wrap_lauemasternamelisttype__set__binarize(self._handle, binarize)
        
        @property
        def sht_folder(self):
            """
            Element sht_folder ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 248
            
            """
            return _pyEMsoft.f90wrap_lauemasternamelisttype__get__sht_folder(self._handle)
        
        @sht_folder.setter
        def sht_folder(self, sht_folder):
            _pyEMsoft.f90wrap_lauemasternamelisttype__set__sht_folder(self._handle, \
                sht_folder)
        
        @property
        def sht_formula(self):
            """
            Element sht_formula ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 249
            
            """
            return _pyEMsoft.f90wrap_lauemasternamelisttype__get__sht_formula(self._handle)
        
        @sht_formula.setter
        def sht_formula(self, sht_formula):
            _pyEMsoft.f90wrap_lauemasternamelisttype__set__sht_formula(self._handle, \
                sht_formula)
        
        @property
        def sht_name(self):
            """
            Element sht_name ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 250
            
            """
            return _pyEMsoft.f90wrap_lauemasternamelisttype__get__sht_name(self._handle)
        
        @sht_name.setter
        def sht_name(self, sht_name):
            _pyEMsoft.f90wrap_lauemasternamelisttype__set__sht_name(self._handle, sht_name)
        
        @property
        def sht_structuresymbol(self):
            """
            Element sht_structuresymbol ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 251
            
            """
            return \
                _pyEMsoft.f90wrap_lauemasternamelisttype__get__sht_structuresymbol(self._handle)
        
        @sht_structuresymbol.setter
        def sht_structuresymbol(self, sht_structuresymbol):
            \
                _pyEMsoft.f90wrap_lauemasternamelisttype__set__sht_structuresymbol(self._handle, \
                sht_structuresymbol)
        
        @property
        def addtokilthub(self):
            """
            Element addtokilthub ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 252
            
            """
            return _pyEMsoft.f90wrap_lauemasternamelisttype__get__addtokilthub(self._handle)
        
        @addtokilthub.setter
        def addtokilthub(self, addtokilthub):
            _pyEMsoft.f90wrap_lauemasternamelisttype__set__addtokilthub(self._handle, \
                addtokilthub)
        
        @property
        def usedoi(self):
            """
            Element usedoi ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 253
            
            """
            return _pyEMsoft.f90wrap_lauemasternamelisttype__get__usedoi(self._handle)
        
        @usedoi.setter
        def usedoi(self, usedoi):
            _pyEMsoft.f90wrap_lauemasternamelisttype__set__usedoi(self._handle, usedoi)
        
        @property
        def hdfname(self):
            """
            Element hdfname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 254
            
            """
            return _pyEMsoft.f90wrap_lauemasternamelisttype__get__hdfname(self._handle)
        
        @hdfname.setter
        def hdfname(self, hdfname):
            _pyEMsoft.f90wrap_lauemasternamelisttype__set__hdfname(self._handle, hdfname)
        
        @property
        def tiffname(self):
            """
            Element tiffname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 255
            
            """
            return _pyEMsoft.f90wrap_lauemasternamelisttype__get__tiffname(self._handle)
        
        @tiffname.setter
        def tiffname(self, tiffname):
            _pyEMsoft.f90wrap_lauemasternamelisttype__set__tiffname(self._handle, tiffname)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 256
            
            """
            return _pyEMsoft.f90wrap_lauemasternamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_lauemasternamelisttype__set__xtalname(self._handle, xtalname)
        
        def __str__(self):
            ret = ['<lauemasternamelisttype>{\n']
            ret.append('    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    patchw : ')
            ret.append(repr(self.patchw))
            ret.append(',\n    lambdamin : ')
            ret.append(repr(self.lambdamin))
            ret.append(',\n    lambdamax : ')
            ret.append(repr(self.lambdamax))
            ret.append(',\n    kappavmf : ')
            ret.append(repr(self.kappavmf))
            ret.append(',\n    intfactor : ')
            ret.append(repr(self.intfactor))
            ret.append(',\n    outformat : ')
            ret.append(repr(self.outformat))
            ret.append(',\n    binarize : ')
            ret.append(repr(self.binarize))
            ret.append(',\n    sht_folder : ')
            ret.append(repr(self.sht_folder))
            ret.append(',\n    sht_formula : ')
            ret.append(repr(self.sht_formula))
            ret.append(',\n    sht_name : ')
            ret.append(repr(self.sht_name))
            ret.append(',\n    sht_structuresymbol : ')
            ret.append(repr(self.sht_structuresymbol))
            ret.append(',\n    addtokilthub : ')
            ret.append(repr(self.addtokilthub))
            ret.append(',\n    usedoi : ')
            ret.append(repr(self.usedoi))
            ret.append(',\n    hdfname : ')
            ret.append(repr(self.hdfname))
            ret.append(',\n    tiffname : ')
            ret.append(repr(self.tiffname))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.LaueNameListType")
    class LaueNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=lauenamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 259-275
        
        """
        def __init__(self, handle=None):
            """
            self = Lauenamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 259-275
            
            
            Returns
            -------
            this : Lauenamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for lauenamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_lauenamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Lauenamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 259-275
            
            Parameters
            ----------
            this : Lauenamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for lauenamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_lauenamelisttype_finalise(this=self._handle)
        
        @property
        def numpx(self):
            """
            Element numpx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 260
            
            """
            return _pyEMsoft.f90wrap_lauenamelisttype__get__numpx(self._handle)
        
        @numpx.setter
        def numpx(self, numpx):
            _pyEMsoft.f90wrap_lauenamelisttype__set__numpx(self._handle, numpx)
        
        @property
        def numpy(self):
            """
            Element numpy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 261
            
            """
            return _pyEMsoft.f90wrap_lauenamelisttype__get__numpy(self._handle)
        
        @numpy.setter
        def numpy(self, numpy):
            _pyEMsoft.f90wrap_lauenamelisttype__set__numpy(self._handle, numpy)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 262
            
            """
            return _pyEMsoft.f90wrap_lauenamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_lauenamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def bpx(self):
            """
            Element bpx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 263
            
            """
            return _pyEMsoft.f90wrap_lauenamelisttype__get__bpx(self._handle)
        
        @bpx.setter
        def bpx(self, bpx):
            _pyEMsoft.f90wrap_lauenamelisttype__set__bpx(self._handle, bpx)
        
        @property
        def spotw(self):
            """
            Element spotw ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 264
            
            """
            return _pyEMsoft.f90wrap_lauenamelisttype__get__spotw(self._handle)
        
        @spotw.setter
        def spotw(self, spotw):
            _pyEMsoft.f90wrap_lauenamelisttype__set__spotw(self._handle, spotw)
        
        @property
        def pixelsize(self):
            """
            Element pixelsize ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 265
            
            """
            return _pyEMsoft.f90wrap_lauenamelisttype__get__pixelsize(self._handle)
        
        @pixelsize.setter
        def pixelsize(self, pixelsize):
            _pyEMsoft.f90wrap_lauenamelisttype__set__pixelsize(self._handle, pixelsize)
        
        @property
        def maxvoltage(self):
            """
            Element maxvoltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 266
            
            """
            return _pyEMsoft.f90wrap_lauenamelisttype__get__maxvoltage(self._handle)
        
        @maxvoltage.setter
        def maxvoltage(self, maxvoltage):
            _pyEMsoft.f90wrap_lauenamelisttype__set__maxvoltage(self._handle, maxvoltage)
        
        @property
        def minvoltage(self):
            """
            Element minvoltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 267
            
            """
            return _pyEMsoft.f90wrap_lauenamelisttype__get__minvoltage(self._handle)
        
        @minvoltage.setter
        def minvoltage(self, minvoltage):
            _pyEMsoft.f90wrap_lauenamelisttype__set__minvoltage(self._handle, minvoltage)
        
        @property
        def sddistance(self):
            """
            Element sddistance ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 268
            
            """
            return _pyEMsoft.f90wrap_lauenamelisttype__get__sddistance(self._handle)
        
        @sddistance.setter
        def sddistance(self, sddistance):
            _pyEMsoft.f90wrap_lauenamelisttype__set__sddistance(self._handle, sddistance)
        
        @property
        def gammavalue(self):
            """
            Element gammavalue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 269
            
            """
            return _pyEMsoft.f90wrap_lauenamelisttype__get__gammavalue(self._handle)
        
        @gammavalue.setter
        def gammavalue(self, gammavalue):
            _pyEMsoft.f90wrap_lauenamelisttype__set__gammavalue(self._handle, gammavalue)
        
        @property
        def backprojection(self):
            """
            Element backprojection ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 270
            
            """
            return _pyEMsoft.f90wrap_lauenamelisttype__get__backprojection(self._handle)
        
        @backprojection.setter
        def backprojection(self, backprojection):
            _pyEMsoft.f90wrap_lauenamelisttype__set__backprojection(self._handle, \
                backprojection)
        
        @property
        def lauemode(self):
            """
            Element lauemode ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 271
            
            """
            return _pyEMsoft.f90wrap_lauenamelisttype__get__lauemode(self._handle)
        
        @lauemode.setter
        def lauemode(self, lauemode):
            _pyEMsoft.f90wrap_lauenamelisttype__set__lauemode(self._handle, lauemode)
        
        @property
        def orientationfile(self):
            """
            Element orientationfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 272
            
            """
            return _pyEMsoft.f90wrap_lauenamelisttype__get__orientationfile(self._handle)
        
        @orientationfile.setter
        def orientationfile(self, orientationfile):
            _pyEMsoft.f90wrap_lauenamelisttype__set__orientationfile(self._handle, \
                orientationfile)
        
        @property
        def tiffprefix(self):
            """
            Element tiffprefix ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 273
            
            """
            return _pyEMsoft.f90wrap_lauenamelisttype__get__tiffprefix(self._handle)
        
        @tiffprefix.setter
        def tiffprefix(self, tiffprefix):
            _pyEMsoft.f90wrap_lauenamelisttype__set__tiffprefix(self._handle, tiffprefix)
        
        @property
        def hdfname(self):
            """
            Element hdfname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 274
            
            """
            return _pyEMsoft.f90wrap_lauenamelisttype__get__hdfname(self._handle)
        
        @hdfname.setter
        def hdfname(self, hdfname):
            _pyEMsoft.f90wrap_lauenamelisttype__set__hdfname(self._handle, hdfname)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 275
            
            """
            return _pyEMsoft.f90wrap_lauenamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_lauenamelisttype__set__xtalname(self._handle, xtalname)
        
        def __str__(self):
            ret = ['<lauenamelisttype>{\n']
            ret.append('    numpx : ')
            ret.append(repr(self.numpx))
            ret.append(',\n    numpy : ')
            ret.append(repr(self.numpy))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    bpx : ')
            ret.append(repr(self.bpx))
            ret.append(',\n    spotw : ')
            ret.append(repr(self.spotw))
            ret.append(',\n    pixelsize : ')
            ret.append(repr(self.pixelsize))
            ret.append(',\n    maxvoltage : ')
            ret.append(repr(self.maxvoltage))
            ret.append(',\n    minvoltage : ')
            ret.append(repr(self.minvoltage))
            ret.append(',\n    sddistance : ')
            ret.append(repr(self.sddistance))
            ret.append(',\n    gammavalue : ')
            ret.append(repr(self.gammavalue))
            ret.append(',\n    backprojection : ')
            ret.append(repr(self.backprojection))
            ret.append(',\n    lauemode : ')
            ret.append(repr(self.lauemode))
            ret.append(',\n    orientationfile : ')
            ret.append(repr(self.orientationfile))
            ret.append(',\n    tiffprefix : ')
            ret.append(repr(self.tiffprefix))
            ret.append(',\n    hdfname : ')
            ret.append(repr(self.hdfname))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.LaueSlitNameListType")
    class LaueSlitNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=laueslitnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 278-310
        
        """
        def __init__(self, handle=None):
            """
            self = Laueslitnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 278-310
            
            
            Returns
            -------
            this : Laueslitnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for laueslitnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_laueslitnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Laueslitnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 278-310
            
            Parameters
            ----------
            this : Laueslitnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for laueslitnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_laueslitnamelisttype_finalise(this=self._handle)
        
        @property
        def lw(self):
            """
            Element lw ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 279
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__lw(self._handle)
        
        @lw.setter
        def lw(self, lw):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__lw(self._handle, lw)
        
        @property
        def lh(self):
            """
            Element lh ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 280
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__lh(self._handle)
        
        @lh.setter
        def lh(self, lh):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__lh(self._handle, lh)
        
        @property
        def lx(self):
            """
            Element lx ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 281
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__lx(self._handle)
        
        @lx.setter
        def lx(self, lx):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__lx(self._handle, lx)
        
        @property
        def ly(self):
            """
            Element ly ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 282
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__ly(self._handle)
        
        @ly.setter
        def ly(self, ly):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__ly(self._handle, ly)
        
        @property
        def lz(self):
            """
            Element lz ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 283
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__lz(self._handle)
        
        @lz.setter
        def lz(self, lz):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__lz(self._handle, lz)
        
        @property
        def voltageh(self):
            """
            Element voltageh ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 284
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__voltageh(self._handle)
        
        @voltageh.setter
        def voltageh(self, voltageh):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__voltageh(self._handle, voltageh)
        
        @property
        def voltagel(self):
            """
            Element voltagel ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 285
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__voltagel(self._handle)
        
        @voltagel.setter
        def voltagel(self, voltagel):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__voltagel(self._handle, voltagel)
        
        @property
        def sx(self):
            """
            Element sx ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 286
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__sx(self._handle)
        
        @sx.setter
        def sx(self, sx):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__sx(self._handle, sx)
        
        @property
        def sampletodetector(self):
            """
            Element sampletodetector ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 287
            
            """
            return \
                _pyEMsoft.f90wrap_laueslitnamelisttype__get__sampletodetector(self._handle)
        
        @sampletodetector.setter
        def sampletodetector(self, sampletodetector):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__sampletodetector(self._handle, \
                sampletodetector)
        
        @property
        def samplethickness(self):
            """
            Element samplethickness ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 288
            
            """
            return \
                _pyEMsoft.f90wrap_laueslitnamelisttype__get__samplethickness(self._handle)
        
        @samplethickness.setter
        def samplethickness(self, samplethickness):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__samplethickness(self._handle, \
                samplethickness)
        
        @property
        def ps(self):
            """
            Element ps ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 289
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__ps(self._handle)
        
        @ps.setter
        def ps(self, ps):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__ps(self._handle, ps)
        
        @property
        def ny(self):
            """
            Element ny ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 290
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__ny(self._handle)
        
        @ny.setter
        def ny(self, ny):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__ny(self._handle, ny)
        
        @property
        def nz(self):
            """
            Element nz ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 291
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__nz(self._handle)
        
        @nz.setter
        def nz(self, nz):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__nz(self._handle, nz)
        
        @property
        def dx(self):
            """
            Element dx ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 292
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__dx(self._handle)
        
        @dx.setter
        def dx(self, dx):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__dx(self._handle, dx)
        
        @property
        def dy(self):
            """
            Element dy ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 293
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__dy(self._handle)
        
        @dy.setter
        def dy(self, dy):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__dy(self._handle, dy)
        
        @property
        def dz(self):
            """
            Element dz ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 294
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__dz(self._handle)
        
        @dz.setter
        def dz(self, dz):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__dz(self._handle, dz)
        
        @property
        def vs(self):
            """
            Element vs ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 295
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__vs(self._handle)
        
        @vs.setter
        def vs(self, vs):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__vs(self._handle, vs)
        
        @property
        def absl(self):
            """
            Element absl ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 296
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__absl(self._handle)
        
        @absl.setter
        def absl(self, absl):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__absl(self._handle, absl)
        
        @property
        def beamstopatf(self):
            """
            Element beamstopatf ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 297
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__beamstopatf(self._handle)
        
        @beamstopatf.setter
        def beamstopatf(self, beamstopatf):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__beamstopatf(self._handle, \
                beamstopatf)
        
        @property
        def spotw(self):
            """
            Element spotw ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 298
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__spotw(self._handle)
        
        @spotw.setter
        def spotw(self, spotw):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__spotw(self._handle, spotw)
        
        @property
        def sampletilt(self):
            """
            Element sampletilt ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 299
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__sampletilt(self._handle)
        
        @sampletilt.setter
        def sampletilt(self, sampletilt):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__sampletilt(self._handle, \
                sampletilt)
        
        @property
        def gammavalue(self):
            """
            Element gammavalue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 300
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__gammavalue(self._handle)
        
        @gammavalue.setter
        def gammavalue(self, gammavalue):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__gammavalue(self._handle, \
                gammavalue)
        
        @property
        def intcutoffratio(self):
            """
            Element intcutoffratio ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 301
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__intcutoffratio(self._handle)
        
        @intcutoffratio.setter
        def intcutoffratio(self, intcutoffratio):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__intcutoffratio(self._handle, \
                intcutoffratio)
        
        @property
        def bpx(self):
            """
            Element bpx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 302
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__bpx(self._handle)
        
        @bpx.setter
        def bpx(self, bpx):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__bpx(self._handle, bpx)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 303
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def binarize(self):
            """
            Element binarize ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 304
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__binarize(self._handle)
        
        @binarize.setter
        def binarize(self, binarize):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__binarize(self._handle, binarize)
        
        @property
        def projectionmode(self):
            """
            Element projectionmode ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 305
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__projectionmode(self._handle)
        
        @projectionmode.setter
        def projectionmode(self, projectionmode):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__projectionmode(self._handle, \
                projectionmode)
        
        @property
        def backprojection(self):
            """
            Element backprojection ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 306
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__backprojection(self._handle)
        
        @backprojection.setter
        def backprojection(self, backprojection):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__backprojection(self._handle, \
                backprojection)
        
        @property
        def orientationfile(self):
            """
            Element orientationfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 307
            
            """
            return \
                _pyEMsoft.f90wrap_laueslitnamelisttype__get__orientationfile(self._handle)
        
        @orientationfile.setter
        def orientationfile(self, orientationfile):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__orientationfile(self._handle, \
                orientationfile)
        
        @property
        def tiffprefix(self):
            """
            Element tiffprefix ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 308
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__tiffprefix(self._handle)
        
        @tiffprefix.setter
        def tiffprefix(self, tiffprefix):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__tiffprefix(self._handle, \
                tiffprefix)
        
        @property
        def hdfname(self):
            """
            Element hdfname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 309
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__hdfname(self._handle)
        
        @hdfname.setter
        def hdfname(self, hdfname):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__hdfname(self._handle, hdfname)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 310
            
            """
            return _pyEMsoft.f90wrap_laueslitnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_laueslitnamelisttype__set__xtalname(self._handle, xtalname)
        
        def __str__(self):
            ret = ['<laueslitnamelisttype>{\n']
            ret.append('    lw : ')
            ret.append(repr(self.lw))
            ret.append(',\n    lh : ')
            ret.append(repr(self.lh))
            ret.append(',\n    lx : ')
            ret.append(repr(self.lx))
            ret.append(',\n    ly : ')
            ret.append(repr(self.ly))
            ret.append(',\n    lz : ')
            ret.append(repr(self.lz))
            ret.append(',\n    voltageh : ')
            ret.append(repr(self.voltageh))
            ret.append(',\n    voltagel : ')
            ret.append(repr(self.voltagel))
            ret.append(',\n    sx : ')
            ret.append(repr(self.sx))
            ret.append(',\n    sampletodetector : ')
            ret.append(repr(self.sampletodetector))
            ret.append(',\n    samplethickness : ')
            ret.append(repr(self.samplethickness))
            ret.append(',\n    ps : ')
            ret.append(repr(self.ps))
            ret.append(',\n    ny : ')
            ret.append(repr(self.ny))
            ret.append(',\n    nz : ')
            ret.append(repr(self.nz))
            ret.append(',\n    dx : ')
            ret.append(repr(self.dx))
            ret.append(',\n    dy : ')
            ret.append(repr(self.dy))
            ret.append(',\n    dz : ')
            ret.append(repr(self.dz))
            ret.append(',\n    vs : ')
            ret.append(repr(self.vs))
            ret.append(',\n    absl : ')
            ret.append(repr(self.absl))
            ret.append(',\n    beamstopatf : ')
            ret.append(repr(self.beamstopatf))
            ret.append(',\n    spotw : ')
            ret.append(repr(self.spotw))
            ret.append(',\n    sampletilt : ')
            ret.append(repr(self.sampletilt))
            ret.append(',\n    gammavalue : ')
            ret.append(repr(self.gammavalue))
            ret.append(',\n    intcutoffratio : ')
            ret.append(repr(self.intcutoffratio))
            ret.append(',\n    bpx : ')
            ret.append(repr(self.bpx))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    binarize : ')
            ret.append(repr(self.binarize))
            ret.append(',\n    projectionmode : ')
            ret.append(repr(self.projectionmode))
            ret.append(',\n    backprojection : ')
            ret.append(repr(self.backprojection))
            ret.append(',\n    orientationfile : ')
            ret.append(repr(self.orientationfile))
            ret.append(',\n    tiffprefix : ')
            ret.append(repr(self.tiffprefix))
            ret.append(',\n    hdfname : ')
            ret.append(repr(self.hdfname))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.MCLIPSSNameListType")
    class MCLIPSSNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=mclipssnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 313-333
        
        """
        def __init__(self, handle=None):
            """
            self = Mclipssnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 313-333
            
            
            Returns
            -------
            this : Mclipssnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for mclipssnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_mclipssnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Mclipssnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 313-333
            
            Parameters
            ----------
            this : Mclipssnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for mclipssnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_mclipssnamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 314
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 315
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__numsx(self._handle, numsx)
        
        @property
        def primeseed(self):
            """
            Element primeseed ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 316
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__primeseed(self._handle)
        
        @primeseed.setter
        def primeseed(self, primeseed):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__primeseed(self._handle, primeseed)
        
        @property
        def num_el(self):
            """
            Element num_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 317
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__num_el(self._handle)
        
        @num_el.setter
        def num_el(self, num_el):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__num_el(self._handle, num_el)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 318
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def sig(self):
            """
            Element sig ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 319
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__sig(self._handle)
        
        @sig.setter
        def sig(self, sig):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__sig(self._handle, sig)
        
        @property
        def omega(self):
            """
            Element omega ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 320
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__omega(self._handle)
        
        @omega.setter
        def omega(self, omega):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__omega(self._handle, omega)
        
        @property
        def ekev(self):
            """
            Element ekev ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 321
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__ekev(self._handle)
        
        @ekev.setter
        def ekev(self, ekev):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__ekev(self._handle, ekev)
        
        @property
        def ehistmin(self):
            """
            Element ehistmin ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 322
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__ehistmin(self._handle)
        
        @ehistmin.setter
        def ehistmin(self, ehistmin):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__ehistmin(self._handle, ehistmin)
        
        @property
        def ebinsize(self):
            """
            Element ebinsize ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 323
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__ebinsize(self._handle)
        
        @ebinsize.setter
        def ebinsize(self, ebinsize):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__ebinsize(self._handle, ebinsize)
        
        @property
        def depthmax(self):
            """
            Element depthmax ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 324
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__depthmax(self._handle)
        
        @depthmax.setter
        def depthmax(self, depthmax):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__depthmax(self._handle, depthmax)
        
        @property
        def depthstep(self):
            """
            Element depthstep ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 325
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__depthstep(self._handle)
        
        @depthstep.setter
        def depthstep(self, depthstep):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__depthstep(self._handle, depthstep)
        
        @property
        def lipssamp(self):
            """
            Element lipssamp ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 326
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__lipssamp(self._handle)
        
        @lipssamp.setter
        def lipssamp(self, lipssamp):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__lipssamp(self._handle, lipssamp)
        
        @property
        def lipsswave(self):
            """
            Element lipsswave ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 327
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__lipsswave(self._handle)
        
        @lipsswave.setter
        def lipsswave(self, lipsswave):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__lipsswave(self._handle, lipsswave)
        
        @property
        def scaled(self):
            """
            Element scaled ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 328
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__scaled(self._handle)
        
        @scaled.setter
        def scaled(self, scaled):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__scaled(self._handle, scaled)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 329
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__npx(self._handle, npx)
        
        @property
        def vis(self):
            """
            Element vis ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 330
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__vis(self._handle)
        
        @vis.setter
        def vis(self, vis):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__vis(self._handle, vis)
        
        @property
        def mcmode(self):
            """
            Element mcmode ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 331
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__mcmode(self._handle)
        
        @mcmode.setter
        def mcmode(self, mcmode):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__mcmode(self._handle, mcmode)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 332
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def dataname(self):
            """
            Element dataname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 333
            
            """
            return _pyEMsoft.f90wrap_mclipssnamelisttype__get__dataname(self._handle)
        
        @dataname.setter
        def dataname(self, dataname):
            _pyEMsoft.f90wrap_mclipssnamelisttype__set__dataname(self._handle, dataname)
        
        def __str__(self):
            ret = ['<mclipssnamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    primeseed : ')
            ret.append(repr(self.primeseed))
            ret.append(',\n    num_el : ')
            ret.append(repr(self.num_el))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    sig : ')
            ret.append(repr(self.sig))
            ret.append(',\n    omega : ')
            ret.append(repr(self.omega))
            ret.append(',\n    ekev : ')
            ret.append(repr(self.ekev))
            ret.append(',\n    ehistmin : ')
            ret.append(repr(self.ehistmin))
            ret.append(',\n    ebinsize : ')
            ret.append(repr(self.ebinsize))
            ret.append(',\n    depthmax : ')
            ret.append(repr(self.depthmax))
            ret.append(',\n    depthstep : ')
            ret.append(repr(self.depthstep))
            ret.append(',\n    lipssamp : ')
            ret.append(repr(self.lipssamp))
            ret.append(',\n    lipsswave : ')
            ret.append(repr(self.lipsswave))
            ret.append(',\n    scaled : ')
            ret.append(repr(self.scaled))
            ret.append(',\n    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    vis : ')
            ret.append(repr(self.vis))
            ret.append(',\n    mcmode : ')
            ret.append(repr(self.mcmode))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    dataname : ')
            ret.append(repr(self.dataname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.reflectorNameListType")
    class reflectorNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=reflectornamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 336-344
        
        """
        def __init__(self, handle=None):
            """
            self = Reflectornamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 336-344
            
            
            Returns
            -------
            this : Reflectornamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for reflectornamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_reflectornamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Reflectornamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 336-344
            
            Parameters
            ----------
            this : Reflectornamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for reflectornamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_reflectornamelisttype_finalise(this=self._handle)
        
        @property
        def increment(self):
            """
            Element increment ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 337
            
            """
            return _pyEMsoft.f90wrap_reflectornamelisttype__get__increment(self._handle)
        
        @increment.setter
        def increment(self, increment):
            _pyEMsoft.f90wrap_reflectornamelisttype__set__increment(self._handle, increment)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 338
            
            """
            return _pyEMsoft.f90wrap_reflectornamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_reflectornamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def numlist(self):
            """
            Element numlist ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 339
            
            """
            return _pyEMsoft.f90wrap_reflectornamelisttype__get__numlist(self._handle)
        
        @numlist.setter
        def numlist(self, numlist):
            _pyEMsoft.f90wrap_reflectornamelisttype__set__numlist(self._handle, numlist)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 340
            
            """
            return _pyEMsoft.f90wrap_reflectornamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_reflectornamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def outputformat(self):
            """
            Element outputformat ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 341
            
            """
            return _pyEMsoft.f90wrap_reflectornamelisttype__get__outputformat(self._handle)
        
        @outputformat.setter
        def outputformat(self, outputformat):
            _pyEMsoft.f90wrap_reflectornamelisttype__set__outputformat(self._handle, \
                outputformat)
        
        @property
        def masterfile(self):
            """
            Element masterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 342
            
            """
            return _pyEMsoft.f90wrap_reflectornamelisttype__get__masterfile(self._handle)
        
        @masterfile.setter
        def masterfile(self, masterfile):
            _pyEMsoft.f90wrap_reflectornamelisttype__set__masterfile(self._handle, \
                masterfile)
        
        @property
        def listfile(self):
            """
            Element listfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 343
            
            """
            return _pyEMsoft.f90wrap_reflectornamelisttype__get__listfile(self._handle)
        
        @listfile.setter
        def listfile(self, listfile):
            _pyEMsoft.f90wrap_reflectornamelisttype__set__listfile(self._handle, listfile)
        
        @property
        def kinematical(self):
            """
            Element kinematical ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 344
            
            """
            return _pyEMsoft.f90wrap_reflectornamelisttype__get__kinematical(self._handle)
        
        @kinematical.setter
        def kinematical(self, kinematical):
            _pyEMsoft.f90wrap_reflectornamelisttype__set__kinematical(self._handle, \
                kinematical)
        
        def __str__(self):
            ret = ['<reflectornamelisttype>{\n']
            ret.append('    increment : ')
            ret.append(repr(self.increment))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    numlist : ')
            ret.append(repr(self.numlist))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    outputformat : ')
            ret.append(repr(self.outputformat))
            ret.append(',\n    masterfile : ')
            ret.append(repr(self.masterfile))
            ret.append(',\n    listfile : ')
            ret.append(repr(self.listfile))
            ret.append(',\n    kinematical : ')
            ret.append(repr(self.kinematical))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.kinematicalNameListType")
    class kinematicalNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=kinematicalnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 347-353
        
        """
        def __init__(self, handle=None):
            """
            self = Kinematicalnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 347-353
            
            
            Returns
            -------
            this : Kinematicalnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for kinematicalnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_kinematicalnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Kinematicalnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 347-353
            
            Parameters
            ----------
            this : Kinematicalnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for kinematicalnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_kinematicalnamelisttype_finalise(this=self._handle)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 348
            
            """
            return _pyEMsoft.f90wrap_kinematicalnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_kinematicalnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def thr(self):
            """
            Element thr ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 349
            
            """
            return _pyEMsoft.f90wrap_kinematicalnamelisttype__get__thr(self._handle)
        
        @thr.setter
        def thr(self, thr):
            _pyEMsoft.f90wrap_kinematicalnamelisttype__set__thr(self._handle, thr)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 350
            
            """
            return _pyEMsoft.f90wrap_kinematicalnamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_kinematicalnamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 351
            
            """
            return _pyEMsoft.f90wrap_kinematicalnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_kinematicalnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 352
            
            """
            return _pyEMsoft.f90wrap_kinematicalnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_kinematicalnamelisttype__set__datafile(self._handle, datafile)
        
        @property
        def mode(self):
            """
            Element mode ftype=character(5) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 353
            
            """
            return _pyEMsoft.f90wrap_kinematicalnamelisttype__get__mode(self._handle)
        
        @mode.setter
        def mode(self, mode):
            _pyEMsoft.f90wrap_kinematicalnamelisttype__set__mode(self._handle, mode)
        
        def __str__(self):
            ret = ['<kinematicalnamelisttype>{\n']
            ret.append('    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    thr : ')
            ret.append(repr(self.thr))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    mode : ')
            ret.append(repr(self.mode))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.OrientationVizNameListType")
    class OrientationVizNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=orientationviznamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 355-377
        
        """
        def __init__(self, handle=None):
            """
            self = Orientationviznamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 355-377
            
            
            Returns
            -------
            this : Orientationviznamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for orientationviznamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_orientationviznamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Orientationviznamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 355-377
            
            Parameters
            ----------
            this : Orientationviznamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for orientationviznamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_orientationviznamelisttype_finalise(this=self._handle)
        
        @property
        def cubochoric(self):
            """
            Element cubochoric ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 356
            
            """
            return \
                _pyEMsoft.f90wrap_orientationviznamelisttype__get__cubochoric(self._handle)
        
        @cubochoric.setter
        def cubochoric(self, cubochoric):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__cubochoric(self._handle, \
                cubochoric)
        
        @property
        def homochoric(self):
            """
            Element homochoric ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 357
            
            """
            return \
                _pyEMsoft.f90wrap_orientationviznamelisttype__get__homochoric(self._handle)
        
        @homochoric.setter
        def homochoric(self, homochoric):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__homochoric(self._handle, \
                homochoric)
        
        @property
        def rodrigues(self):
            """
            Element rodrigues ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 358
            
            """
            return \
                _pyEMsoft.f90wrap_orientationviznamelisttype__get__rodrigues(self._handle)
        
        @rodrigues.setter
        def rodrigues(self, rodrigues):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__rodrigues(self._handle, \
                rodrigues)
        
        @property
        def stereographic(self):
            """
            Element stereographic ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 359
            
            """
            return \
                _pyEMsoft.f90wrap_orientationviznamelisttype__get__stereographic(self._handle)
        
        @stereographic.setter
        def stereographic(self, stereographic):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__stereographic(self._handle, \
                stereographic)
        
        @property
        def eulerspace(self):
            """
            Element eulerspace ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 360
            
            """
            return \
                _pyEMsoft.f90wrap_orientationviznamelisttype__get__eulerspace(self._handle)
        
        @eulerspace.setter
        def eulerspace(self, eulerspace):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__eulerspace(self._handle, \
                eulerspace)
        
        @property
        def reducetorfz(self):
            """
            Element reducetorfz ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 361
            
            """
            return \
                _pyEMsoft.f90wrap_orientationviznamelisttype__get__reducetorfz(self._handle)
        
        @reducetorfz.setter
        def reducetorfz(self, reducetorfz):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__reducetorfz(self._handle, \
                reducetorfz)
        
        @property
        def nx(self):
            """
            Element nx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 362
            
            """
            return _pyEMsoft.f90wrap_orientationviznamelisttype__get__nx(self._handle)
        
        @nx.setter
        def nx(self, nx):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__nx(self._handle, nx)
        
        @property
        def ny(self):
            """
            Element ny ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 363
            
            """
            return _pyEMsoft.f90wrap_orientationviznamelisttype__get__ny(self._handle)
        
        @ny.setter
        def ny(self, ny):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__ny(self._handle, ny)
        
        @property
        def nz(self):
            """
            Element nz ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 364
            
            """
            return _pyEMsoft.f90wrap_orientationviznamelisttype__get__nz(self._handle)
        
        @nz.setter
        def nz(self, nz):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__nz(self._handle, nz)
        
        @property
        def overridepgnum(self):
            """
            Element overridepgnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 365
            
            """
            return \
                _pyEMsoft.f90wrap_orientationviznamelisttype__get__overridepgnum(self._handle)
        
        @overridepgnum.setter
        def overridepgnum(self, overridepgnum):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__overridepgnum(self._handle, \
                overridepgnum)
        
        @property
        def mackenziecell(self):
            """
            Element mackenziecell ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 366
            
            """
            return \
                _pyEMsoft.f90wrap_orientationviznamelisttype__get__mackenziecell(self._handle)
        
        @mackenziecell.setter
        def mackenziecell(self, mackenziecell):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__mackenziecell(self._handle, \
                mackenziecell)
        
        @property
        def rgb(self):
            """
            Element rgb ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 367
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_orientationviznamelisttype__array__rgb(self._handle)
            if array_handle in self._arrays:
                rgb = self._arrays[array_handle]
            else:
                rgb = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_orientationviznamelisttype__array__rgb)
                self._arrays[array_handle] = rgb
            return rgb
        
        @rgb.setter
        def rgb(self, rgb):
            self.rgb[...] = rgb
        
        @property
        def sphrad(self):
            """
            Element sphrad ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 368
            
            """
            return _pyEMsoft.f90wrap_orientationviznamelisttype__get__sphrad(self._handle)
        
        @sphrad.setter
        def sphrad(self, sphrad):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__sphrad(self._handle, sphrad)
        
        @property
        def distance(self):
            """
            Element distance ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 369
            
            """
            return _pyEMsoft.f90wrap_orientationviznamelisttype__get__distance(self._handle)
        
        @distance.setter
        def distance(self, distance):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__distance(self._handle, \
                distance)
        
        @property
        def scalingmode(self):
            """
            Element scalingmode ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 370
            
            """
            return \
                _pyEMsoft.f90wrap_orientationviznamelisttype__get__scalingmode(self._handle)
        
        @scalingmode.setter
        def scalingmode(self, scalingmode):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__scalingmode(self._handle, \
                scalingmode)
        
        @property
        def mrcmode(self):
            """
            Element mrcmode ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 371
            
            """
            return _pyEMsoft.f90wrap_orientationviznamelisttype__get__mrcmode(self._handle)
        
        @mrcmode.setter
        def mrcmode(self, mrcmode):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__mrcmode(self._handle, \
                mrcmode)
        
        @property
        def df3file(self):
            """
            Element df3file ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 372
            
            """
            return _pyEMsoft.f90wrap_orientationviznamelisttype__get__df3file(self._handle)
        
        @df3file.setter
        def df3file(self, df3file):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__df3file(self._handle, \
                df3file)
        
        @property
        def mrcfile(self):
            """
            Element mrcfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 373
            
            """
            return _pyEMsoft.f90wrap_orientationviznamelisttype__get__mrcfile(self._handle)
        
        @mrcfile.setter
        def mrcfile(self, mrcfile):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__mrcfile(self._handle, \
                mrcfile)
        
        @property
        def framemrcfile(self):
            """
            Element framemrcfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 374
            
            """
            return \
                _pyEMsoft.f90wrap_orientationviznamelisttype__get__framemrcfile(self._handle)
        
        @framemrcfile.setter
        def framemrcfile(self, framemrcfile):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__framemrcfile(self._handle, \
                framemrcfile)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 375
            
            """
            return _pyEMsoft.f90wrap_orientationviznamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__xtalname(self._handle, \
                xtalname)
        
        @property
        def povrayfile(self):
            """
            Element povrayfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 376
            
            """
            return \
                _pyEMsoft.f90wrap_orientationviznamelisttype__get__povrayfile(self._handle)
        
        @povrayfile.setter
        def povrayfile(self, povrayfile):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__povrayfile(self._handle, \
                povrayfile)
        
        @property
        def anglefile(self):
            """
            Element anglefile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 377
            
            """
            return \
                _pyEMsoft.f90wrap_orientationviznamelisttype__get__anglefile(self._handle)
        
        @anglefile.setter
        def anglefile(self, anglefile):
            _pyEMsoft.f90wrap_orientationviznamelisttype__set__anglefile(self._handle, \
                anglefile)
        
        def __str__(self):
            ret = ['<orientationviznamelisttype>{\n']
            ret.append('    cubochoric : ')
            ret.append(repr(self.cubochoric))
            ret.append(',\n    homochoric : ')
            ret.append(repr(self.homochoric))
            ret.append(',\n    rodrigues : ')
            ret.append(repr(self.rodrigues))
            ret.append(',\n    stereographic : ')
            ret.append(repr(self.stereographic))
            ret.append(',\n    eulerspace : ')
            ret.append(repr(self.eulerspace))
            ret.append(',\n    reducetorfz : ')
            ret.append(repr(self.reducetorfz))
            ret.append(',\n    nx : ')
            ret.append(repr(self.nx))
            ret.append(',\n    ny : ')
            ret.append(repr(self.ny))
            ret.append(',\n    nz : ')
            ret.append(repr(self.nz))
            ret.append(',\n    overridepgnum : ')
            ret.append(repr(self.overridepgnum))
            ret.append(',\n    mackenziecell : ')
            ret.append(repr(self.mackenziecell))
            ret.append(',\n    rgb : ')
            ret.append(repr(self.rgb))
            ret.append(',\n    sphrad : ')
            ret.append(repr(self.sphrad))
            ret.append(',\n    distance : ')
            ret.append(repr(self.distance))
            ret.append(',\n    scalingmode : ')
            ret.append(repr(self.scalingmode))
            ret.append(',\n    mrcmode : ')
            ret.append(repr(self.mrcmode))
            ret.append(',\n    df3file : ')
            ret.append(repr(self.df3file))
            ret.append(',\n    mrcfile : ')
            ret.append(repr(self.mrcfile))
            ret.append(',\n    framemrcfile : ')
            ret.append(repr(self.framemrcfile))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    povrayfile : ')
            ret.append(repr(self.povrayfile))
            ret.append(',\n    anglefile : ')
            ret.append(repr(self.anglefile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.ConvertOrientationsNameListType")
    class ConvertOrientationsNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=convertorientationsnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 379-390
        
        """
        def __init__(self, handle=None):
            """
            self = Convertorientationsnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 379-390
            
            
            Returns
            -------
            this : Convertorientationsnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for convertorientationsnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_convertorientationsnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Convertorientationsnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 379-390
            
            Parameters
            ----------
            this : Convertorientationsnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for convertorientationsnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_convertorientationsnamelisttype_finalise(this=self._handle)
        
        @property
        def reducetorfz(self):
            """
            Element reducetorfz ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 380
            
            """
            return \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__get__reducetorfz(self._handle)
        
        @reducetorfz.setter
        def reducetorfz(self, reducetorfz):
            \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__set__reducetorfz(self._handle, \
                reducetorfz)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 381
            
            """
            return \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_convertorientationsnamelisttype__set__xtalname(self._handle, \
                xtalname)
        
        @property
        def cubochoric(self):
            """
            Element cubochoric ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 382
            
            """
            return \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__get__cubochoric(self._handle)
        
        @cubochoric.setter
        def cubochoric(self, cubochoric):
            \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__set__cubochoric(self._handle, \
                cubochoric)
        
        @property
        def homochoric(self):
            """
            Element homochoric ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 383
            
            """
            return \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__get__homochoric(self._handle)
        
        @homochoric.setter
        def homochoric(self, homochoric):
            \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__set__homochoric(self._handle, \
                homochoric)
        
        @property
        def rodrigues(self):
            """
            Element rodrigues ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 384
            
            """
            return \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__get__rodrigues(self._handle)
        
        @rodrigues.setter
        def rodrigues(self, rodrigues):
            _pyEMsoft.f90wrap_convertorientationsnamelisttype__set__rodrigues(self._handle, \
                rodrigues)
        
        @property
        def stereographic(self):
            """
            Element stereographic ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 385
            
            """
            return \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__get__stereographic(self._handle)
        
        @stereographic.setter
        def stereographic(self, stereographic):
            \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__set__stereographic(self._handle, \
                stereographic)
        
        @property
        def eulerangles(self):
            """
            Element eulerangles ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 386
            
            """
            return \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__get__eulerangles(self._handle)
        
        @eulerangles.setter
        def eulerangles(self, eulerangles):
            \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__set__eulerangles(self._handle, \
                eulerangles)
        
        @property
        def axisangle(self):
            """
            Element axisangle ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 387
            
            """
            return \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__get__axisangle(self._handle)
        
        @axisangle.setter
        def axisangle(self, axisangle):
            _pyEMsoft.f90wrap_convertorientationsnamelisttype__set__axisangle(self._handle, \
                axisangle)
        
        @property
        def quaternion(self):
            """
            Element quaternion ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 388
            
            """
            return \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__get__quaternion(self._handle)
        
        @quaternion.setter
        def quaternion(self, quaternion):
            \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__set__quaternion(self._handle, \
                quaternion)
        
        @property
        def rotationmatrix(self):
            """
            Element rotationmatrix ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 389
            
            """
            return \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__get__rotationmatrix(self._handle)
        
        @rotationmatrix.setter
        def rotationmatrix(self, rotationmatrix):
            \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__set__rotationmatrix(self._handle, \
                rotationmatrix)
        
        @property
        def anglefile(self):
            """
            Element anglefile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 390
            
            """
            return \
                _pyEMsoft.f90wrap_convertorientationsnamelisttype__get__anglefile(self._handle)
        
        @anglefile.setter
        def anglefile(self, anglefile):
            _pyEMsoft.f90wrap_convertorientationsnamelisttype__set__anglefile(self._handle, \
                anglefile)
        
        def __str__(self):
            ret = ['<convertorientationsnamelisttype>{\n']
            ret.append('    reducetorfz : ')
            ret.append(repr(self.reducetorfz))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    cubochoric : ')
            ret.append(repr(self.cubochoric))
            ret.append(',\n    homochoric : ')
            ret.append(repr(self.homochoric))
            ret.append(',\n    rodrigues : ')
            ret.append(repr(self.rodrigues))
            ret.append(',\n    stereographic : ')
            ret.append(repr(self.stereographic))
            ret.append(',\n    eulerangles : ')
            ret.append(repr(self.eulerangles))
            ret.append(',\n    axisangle : ')
            ret.append(repr(self.axisangle))
            ret.append(',\n    quaternion : ')
            ret.append(repr(self.quaternion))
            ret.append(',\n    rotationmatrix : ')
            ret.append(repr(self.rotationmatrix))
            ret.append(',\n    anglefile : ')
            ret.append(repr(self.anglefile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.MCCLNameListType")
    class MCCLNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=mcclnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 393-425
        
        """
        def __init__(self, handle=None):
            """
            self = Mcclnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 393-425
            
            
            Returns
            -------
            this : Mcclnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for mcclnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_mcclnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Mcclnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 393-425
            
            Parameters
            ----------
            this : Mcclnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for mcclnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_mcclnamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 394
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 395
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__numsx(self._handle, numsx)
        
        @property
        def ivolx(self):
            """
            Element ivolx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 396
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__ivolx(self._handle)
        
        @ivolx.setter
        def ivolx(self, ivolx):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__ivolx(self._handle, ivolx)
        
        @property
        def ivoly(self):
            """
            Element ivoly ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 397
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__ivoly(self._handle)
        
        @ivoly.setter
        def ivoly(self, ivoly):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__ivoly(self._handle, ivoly)
        
        @property
        def ivolz(self):
            """
            Element ivolz ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 398
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__ivolz(self._handle)
        
        @ivolz.setter
        def ivolz(self, ivolz):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__ivolz(self._handle, ivolz)
        
        @property
        def globalworkgrpsz(self):
            """
            Element globalworkgrpsz ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 399
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__globalworkgrpsz(self._handle)
        
        @globalworkgrpsz.setter
        def globalworkgrpsz(self, globalworkgrpsz):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__globalworkgrpsz(self._handle, \
                globalworkgrpsz)
        
        @property
        def num_el(self):
            """
            Element num_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 400
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__num_el(self._handle)
        
        @num_el.setter
        def num_el(self, num_el):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__num_el(self._handle, num_el)
        
        @property
        def totnum_el(self):
            """
            Element totnum_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 401
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__totnum_el(self._handle)
        
        @totnum_el.setter
        def totnum_el(self, totnum_el):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__totnum_el(self._handle, totnum_el)
        
        @property
        def multiplier(self):
            """
            Element multiplier ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 402
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__multiplier(self._handle)
        
        @multiplier.setter
        def multiplier(self, multiplier):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__multiplier(self._handle, multiplier)
        
        @property
        def devid(self):
            """
            Element devid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 403
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__devid(self._handle)
        
        @devid.setter
        def devid(self, devid):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__devid(self._handle, devid)
        
        @property
        def platid(self):
            """
            Element platid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 404
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__platid(self._handle)
        
        @platid.setter
        def platid(self, platid):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__platid(self._handle, platid)
        
        @property
        def ivolstepx(self):
            """
            Element ivolstepx ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 405
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__ivolstepx(self._handle)
        
        @ivolstepx.setter
        def ivolstepx(self, ivolstepx):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__ivolstepx(self._handle, ivolstepx)
        
        @property
        def ivolstepy(self):
            """
            Element ivolstepy ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 406
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__ivolstepy(self._handle)
        
        @ivolstepy.setter
        def ivolstepy(self, ivolstepy):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__ivolstepy(self._handle, ivolstepy)
        
        @property
        def ivolstepz(self):
            """
            Element ivolstepz ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 407
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__ivolstepz(self._handle)
        
        @ivolstepz.setter
        def ivolstepz(self, ivolstepz):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__ivolstepz(self._handle, ivolstepz)
        
        @property
        def sig(self):
            """
            Element sig ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 408
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__sig(self._handle)
        
        @sig.setter
        def sig(self, sig):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__sig(self._handle, sig)
        
        @property
        def sigstart(self):
            """
            Element sigstart ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 409
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__sigstart(self._handle)
        
        @sigstart.setter
        def sigstart(self, sigstart):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__sigstart(self._handle, sigstart)
        
        @property
        def sigend(self):
            """
            Element sigend ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 410
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__sigend(self._handle)
        
        @sigend.setter
        def sigend(self, sigend):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__sigend(self._handle, sigend)
        
        @property
        def sigstep(self):
            """
            Element sigstep ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 411
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__sigstep(self._handle)
        
        @sigstep.setter
        def sigstep(self, sigstep):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__sigstep(self._handle, sigstep)
        
        @property
        def omega(self):
            """
            Element omega ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 412
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__omega(self._handle)
        
        @omega.setter
        def omega(self, omega):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__omega(self._handle, omega)
        
        @property
        def ekev(self):
            """
            Element ekev ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 413
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__ekev(self._handle)
        
        @ekev.setter
        def ekev(self, ekev):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__ekev(self._handle, ekev)
        
        @property
        def ehistmin(self):
            """
            Element ehistmin ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 414
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__ehistmin(self._handle)
        
        @ehistmin.setter
        def ehistmin(self, ehistmin):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__ehistmin(self._handle, ehistmin)
        
        @property
        def ebinsize(self):
            """
            Element ebinsize ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 415
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__ebinsize(self._handle)
        
        @ebinsize.setter
        def ebinsize(self, ebinsize):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__ebinsize(self._handle, ebinsize)
        
        @property
        def depthmax(self):
            """
            Element depthmax ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 416
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__depthmax(self._handle)
        
        @depthmax.setter
        def depthmax(self, depthmax):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__depthmax(self._handle, depthmax)
        
        @property
        def depthstep(self):
            """
            Element depthstep ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 417
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__depthstep(self._handle)
        
        @depthstep.setter
        def depthstep(self, depthstep):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__depthstep(self._handle, depthstep)
        
        @property
        def thickness(self):
            """
            Element thickness ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 418
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__thickness(self._handle)
        
        @thickness.setter
        def thickness(self, thickness):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__thickness(self._handle, thickness)
        
        @property
        def radius(self):
            """
            Element radius ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 419
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__radius(self._handle)
        
        @radius.setter
        def radius(self, radius):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__radius(self._handle, radius)
        
        @property
        def incloc(self):
            """
            Element incloc ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 420
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__incloc(self._handle)
        
        @incloc.setter
        def incloc(self, incloc):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__incloc(self._handle, incloc)
        
        @property
        def notify(self):
            """
            Element notify ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 421
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__notify(self._handle)
        
        @notify.setter
        def notify(self, notify):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__notify(self._handle, notify)
        
        @property
        def mcmode(self):
            """
            Element mcmode ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 422
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__mcmode(self._handle)
        
        @mcmode.setter
        def mcmode(self, mcmode):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__mcmode(self._handle, mcmode)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 423
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def dataname(self):
            """
            Element dataname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 424
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__dataname(self._handle)
        
        @dataname.setter
        def dataname(self, dataname):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__dataname(self._handle, dataname)
        
        @property
        def mode(self):
            """
            Element mode ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 425
            
            """
            return _pyEMsoft.f90wrap_mcclnamelisttype__get__mode(self._handle)
        
        @mode.setter
        def mode(self, mode):
            _pyEMsoft.f90wrap_mcclnamelisttype__set__mode(self._handle, mode)
        
        def __str__(self):
            ret = ['<mcclnamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    ivolx : ')
            ret.append(repr(self.ivolx))
            ret.append(',\n    ivoly : ')
            ret.append(repr(self.ivoly))
            ret.append(',\n    ivolz : ')
            ret.append(repr(self.ivolz))
            ret.append(',\n    globalworkgrpsz : ')
            ret.append(repr(self.globalworkgrpsz))
            ret.append(',\n    num_el : ')
            ret.append(repr(self.num_el))
            ret.append(',\n    totnum_el : ')
            ret.append(repr(self.totnum_el))
            ret.append(',\n    multiplier : ')
            ret.append(repr(self.multiplier))
            ret.append(',\n    devid : ')
            ret.append(repr(self.devid))
            ret.append(',\n    platid : ')
            ret.append(repr(self.platid))
            ret.append(',\n    ivolstepx : ')
            ret.append(repr(self.ivolstepx))
            ret.append(',\n    ivolstepy : ')
            ret.append(repr(self.ivolstepy))
            ret.append(',\n    ivolstepz : ')
            ret.append(repr(self.ivolstepz))
            ret.append(',\n    sig : ')
            ret.append(repr(self.sig))
            ret.append(',\n    sigstart : ')
            ret.append(repr(self.sigstart))
            ret.append(',\n    sigend : ')
            ret.append(repr(self.sigend))
            ret.append(',\n    sigstep : ')
            ret.append(repr(self.sigstep))
            ret.append(',\n    omega : ')
            ret.append(repr(self.omega))
            ret.append(',\n    ekev : ')
            ret.append(repr(self.ekev))
            ret.append(',\n    ehistmin : ')
            ret.append(repr(self.ehistmin))
            ret.append(',\n    ebinsize : ')
            ret.append(repr(self.ebinsize))
            ret.append(',\n    depthmax : ')
            ret.append(repr(self.depthmax))
            ret.append(',\n    depthstep : ')
            ret.append(repr(self.depthstep))
            ret.append(',\n    thickness : ')
            ret.append(repr(self.thickness))
            ret.append(',\n    radius : ')
            ret.append(repr(self.radius))
            ret.append(',\n    incloc : ')
            ret.append(repr(self.incloc))
            ret.append(',\n    notify : ')
            ret.append(repr(self.notify))
            ret.append(',\n    mcmode : ')
            ret.append(repr(self.mcmode))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    dataname : ')
            ret.append(repr(self.dataname))
            ret.append(',\n    mode : ')
            ret.append(repr(self.mode))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.MCCLMultiLayerNameListType")
    class MCCLMultiLayerNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=mcclmultilayernamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 428-447
        
        """
        def __init__(self, handle=None):
            """
            self = Mcclmultilayernamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 428-447
            
            
            Returns
            -------
            this : Mcclmultilayernamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for mcclmultilayernamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_mcclmultilayernamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Mcclmultilayernamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 428-447
            
            Parameters
            ----------
            this : Mcclmultilayernamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for mcclmultilayernamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_mcclmultilayernamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 429
            
            """
            return _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 430
            
            """
            return _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__numsx(self._handle, numsx)
        
        @property
        def globalworkgrpsz(self):
            """
            Element globalworkgrpsz ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 431
            
            """
            return \
                _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__globalworkgrpsz(self._handle)
        
        @globalworkgrpsz.setter
        def globalworkgrpsz(self, globalworkgrpsz):
            \
                _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__globalworkgrpsz(self._handle, \
                globalworkgrpsz)
        
        @property
        def num_el(self):
            """
            Element num_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 432
            
            """
            return _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__num_el(self._handle)
        
        @num_el.setter
        def num_el(self, num_el):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__num_el(self._handle, num_el)
        
        @property
        def totnum_el(self):
            """
            Element totnum_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 433
            
            """
            return \
                _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__totnum_el(self._handle)
        
        @totnum_el.setter
        def totnum_el(self, totnum_el):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__totnum_el(self._handle, \
                totnum_el)
        
        @property
        def sig(self):
            """
            Element sig ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 434
            
            """
            return _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__sig(self._handle)
        
        @sig.setter
        def sig(self, sig):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__sig(self._handle, sig)
        
        @property
        def omega(self):
            """
            Element omega ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 435
            
            """
            return _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__omega(self._handle)
        
        @omega.setter
        def omega(self, omega):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__omega(self._handle, omega)
        
        @property
        def ekev(self):
            """
            Element ekev ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 436
            
            """
            return _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__ekev(self._handle)
        
        @ekev.setter
        def ekev(self, ekev):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__ekev(self._handle, ekev)
        
        @property
        def ehistmin(self):
            """
            Element ehistmin ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 437
            
            """
            return _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__ehistmin(self._handle)
        
        @ehistmin.setter
        def ehistmin(self, ehistmin):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__ehistmin(self._handle, \
                ehistmin)
        
        @property
        def ebinsize(self):
            """
            Element ebinsize ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 438
            
            """
            return _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__ebinsize(self._handle)
        
        @ebinsize.setter
        def ebinsize(self, ebinsize):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__ebinsize(self._handle, \
                ebinsize)
        
        @property
        def depthmax(self):
            """
            Element depthmax ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 439
            
            """
            return _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__depthmax(self._handle)
        
        @depthmax.setter
        def depthmax(self, depthmax):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__depthmax(self._handle, \
                depthmax)
        
        @property
        def depthstep(self):
            """
            Element depthstep ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 440
            
            """
            return \
                _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__depthstep(self._handle)
        
        @depthstep.setter
        def depthstep(self, depthstep):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__depthstep(self._handle, \
                depthstep)
        
        @property
        def filmthickness(self):
            """
            Element filmthickness ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 441
            
            """
            return \
                _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__filmthickness(self._handle)
        
        @filmthickness.setter
        def filmthickness(self, filmthickness):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__filmthickness(self._handle, \
                filmthickness)
        
        @property
        def filmstep(self):
            """
            Element filmstep ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 442
            
            """
            return _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__filmstep(self._handle)
        
        @filmstep.setter
        def filmstep(self, filmstep):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__filmstep(self._handle, \
                filmstep)
        
        @property
        def mcmode(self):
            """
            Element mcmode ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 443
            
            """
            return _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__mcmode(self._handle)
        
        @mcmode.setter
        def mcmode(self, mcmode):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__mcmode(self._handle, mcmode)
        
        @property
        def xtalname_film(self):
            """
            Element xtalname_film ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 444
            
            """
            return \
                _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__xtalname_film(self._handle)
        
        @xtalname_film.setter
        def xtalname_film(self, xtalname_film):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__xtalname_film(self._handle, \
                xtalname_film)
        
        @property
        def xtalname_subs(self):
            """
            Element xtalname_subs ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 445
            
            """
            return \
                _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__xtalname_subs(self._handle)
        
        @xtalname_subs.setter
        def xtalname_subs(self, xtalname_subs):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__xtalname_subs(self._handle, \
                xtalname_subs)
        
        @property
        def dataname(self):
            """
            Element dataname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 446
            
            """
            return _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__dataname(self._handle)
        
        @dataname.setter
        def dataname(self, dataname):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__dataname(self._handle, \
                dataname)
        
        @property
        def mode(self):
            """
            Element mode ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 447
            
            """
            return _pyEMsoft.f90wrap_mcclmultilayernamelisttype__get__mode(self._handle)
        
        @mode.setter
        def mode(self, mode):
            _pyEMsoft.f90wrap_mcclmultilayernamelisttype__set__mode(self._handle, mode)
        
        def __str__(self):
            ret = ['<mcclmultilayernamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    globalworkgrpsz : ')
            ret.append(repr(self.globalworkgrpsz))
            ret.append(',\n    num_el : ')
            ret.append(repr(self.num_el))
            ret.append(',\n    totnum_el : ')
            ret.append(repr(self.totnum_el))
            ret.append(',\n    sig : ')
            ret.append(repr(self.sig))
            ret.append(',\n    omega : ')
            ret.append(repr(self.omega))
            ret.append(',\n    ekev : ')
            ret.append(repr(self.ekev))
            ret.append(',\n    ehistmin : ')
            ret.append(repr(self.ehistmin))
            ret.append(',\n    ebinsize : ')
            ret.append(repr(self.ebinsize))
            ret.append(',\n    depthmax : ')
            ret.append(repr(self.depthmax))
            ret.append(',\n    depthstep : ')
            ret.append(repr(self.depthstep))
            ret.append(',\n    filmthickness : ')
            ret.append(repr(self.filmthickness))
            ret.append(',\n    filmstep : ')
            ret.append(repr(self.filmstep))
            ret.append(',\n    mcmode : ')
            ret.append(repr(self.mcmode))
            ret.append(',\n    xtalname_film : ')
            ret.append(repr(self.xtalname_film))
            ret.append(',\n    xtalname_subs : ')
            ret.append(repr(self.xtalname_subs))
            ret.append(',\n    dataname : ')
            ret.append(repr(self.dataname))
            ret.append(',\n    mode : ')
            ret.append(repr(self.mode))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDMasterNameListType")
    class EBSDMasterNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdmasternamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 450-465
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdmasternamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 450-465
            
            
            Returns
            -------
            this : Ebsdmasternamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdmasternamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdmasternamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdmasternamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 450-465
            
            Parameters
            ----------
            this : Ebsdmasternamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdmasternamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdmasternamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 451
            
            """
            return _pyEMsoft.f90wrap_ebsdmasternamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_ebsdmasternamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 452
            
            """
            return _pyEMsoft.f90wrap_ebsdmasternamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_ebsdmasternamelisttype__set__npx(self._handle, npx)
        
        @property
        def esel(self):
            """
            Element esel ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 453
            
            """
            return _pyEMsoft.f90wrap_ebsdmasternamelisttype__get__esel(self._handle)
        
        @esel.setter
        def esel(self, esel):
            _pyEMsoft.f90wrap_ebsdmasternamelisttype__set__esel(self._handle, esel)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 454
            
            """
            return _pyEMsoft.f90wrap_ebsdmasternamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ebsdmasternamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 455
            
            """
            return _pyEMsoft.f90wrap_ebsdmasternamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_ebsdmasternamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def notify(self):
            """
            Element notify ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 456
            
            """
            return _pyEMsoft.f90wrap_ebsdmasternamelisttype__get__notify(self._handle)
        
        @notify.setter
        def notify(self, notify):
            _pyEMsoft.f90wrap_ebsdmasternamelisttype__set__notify(self._handle, notify)
        
        @property
        def copyfromenergyfile(self):
            """
            Element copyfromenergyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 457
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdmasternamelisttype__get__copyfromenergyfile(self._handle)
        
        @copyfromenergyfile.setter
        def copyfromenergyfile(self, copyfromenergyfile):
            _pyEMsoft.f90wrap_ebsdmasternamelisttype__set__copyfromenergyfile(self._handle, \
                copyfromenergyfile)
        
        @property
        def h5copypath(self):
            """
            Element h5copypath ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 458
            
            """
            return _pyEMsoft.f90wrap_ebsdmasternamelisttype__get__h5copypath(self._handle)
        
        @h5copypath.setter
        def h5copypath(self, h5copypath):
            _pyEMsoft.f90wrap_ebsdmasternamelisttype__set__h5copypath(self._handle, \
                h5copypath)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 459
            
            """
            return _pyEMsoft.f90wrap_ebsdmasternamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_ebsdmasternamelisttype__set__energyfile(self._handle, \
                energyfile)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 460
            
            """
            return _pyEMsoft.f90wrap_ebsdmasternamelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_ebsdmasternamelisttype__set__outname(self._handle, outname)
        
        @property
        def betheparametersfile(self):
            """
            Element betheparametersfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 461
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdmasternamelisttype__get__betheparametersfile(self._handle)
        
        @betheparametersfile.setter
        def betheparametersfile(self, betheparametersfile):
            \
                _pyEMsoft.f90wrap_ebsdmasternamelisttype__set__betheparametersfile(self._handle, \
                betheparametersfile)
        
        @property
        def useenergyweighting(self):
            """
            Element useenergyweighting ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 462
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdmasternamelisttype__get__useenergyweighting(self._handle)
        
        @useenergyweighting.setter
        def useenergyweighting(self, useenergyweighting):
            _pyEMsoft.f90wrap_ebsdmasternamelisttype__set__useenergyweighting(self._handle, \
                useenergyweighting)
        
        @property
        def combinesites(self):
            """
            Element combinesites ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 463
            
            """
            return _pyEMsoft.f90wrap_ebsdmasternamelisttype__get__combinesites(self._handle)
        
        @combinesites.setter
        def combinesites(self, combinesites):
            _pyEMsoft.f90wrap_ebsdmasternamelisttype__set__combinesites(self._handle, \
                combinesites)
        
        @property
        def restart(self):
            """
            Element restart ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 464
            
            """
            return _pyEMsoft.f90wrap_ebsdmasternamelisttype__get__restart(self._handle)
        
        @restart.setter
        def restart(self, restart):
            _pyEMsoft.f90wrap_ebsdmasternamelisttype__set__restart(self._handle, restart)
        
        @property
        def uniform(self):
            """
            Element uniform ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 465
            
            """
            return _pyEMsoft.f90wrap_ebsdmasternamelisttype__get__uniform(self._handle)
        
        @uniform.setter
        def uniform(self, uniform):
            _pyEMsoft.f90wrap_ebsdmasternamelisttype__set__uniform(self._handle, uniform)
        
        def __str__(self):
            ret = ['<ebsdmasternamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    esel : ')
            ret.append(repr(self.esel))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    notify : ')
            ret.append(repr(self.notify))
            ret.append(',\n    copyfromenergyfile : ')
            ret.append(repr(self.copyfromenergyfile))
            ret.append(',\n    h5copypath : ')
            ret.append(repr(self.h5copypath))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append(',\n    betheparametersfile : ')
            ret.append(repr(self.betheparametersfile))
            ret.append(',\n    useenergyweighting : ')
            ret.append(repr(self.useenergyweighting))
            ret.append(',\n    combinesites : ')
            ret.append(repr(self.combinesites))
            ret.append(',\n    restart : ')
            ret.append(repr(self.restart))
            ret.append(',\n    uniform : ')
            ret.append(repr(self.uniform))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EECMasterNameListType")
    class EECMasterNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=eecmasternamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 468-478
        
        """
        def __init__(self, handle=None):
            """
            self = Eecmasternamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 468-478
            
            
            Returns
            -------
            this : Eecmasternamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for eecmasternamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_eecmasternamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Eecmasternamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 468-478
            
            Parameters
            ----------
            this : Eecmasternamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for eecmasternamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_eecmasternamelisttype_finalise(this=self._handle)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 469
            
            """
            return _pyEMsoft.f90wrap_eecmasternamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_eecmasternamelisttype__set__npx(self._handle, npx)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 470
            
            """
            return _pyEMsoft.f90wrap_eecmasternamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_eecmasternamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 471
            
            """
            return _pyEMsoft.f90wrap_eecmasternamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_eecmasternamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def notify(self):
            """
            Element notify ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 472
            
            """
            return _pyEMsoft.f90wrap_eecmasternamelisttype__get__notify(self._handle)
        
        @notify.setter
        def notify(self, notify):
            _pyEMsoft.f90wrap_eecmasternamelisttype__set__notify(self._handle, notify)
        
        @property
        def mpfile(self):
            """
            Element mpfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 473
            
            """
            return _pyEMsoft.f90wrap_eecmasternamelisttype__get__mpfile(self._handle)
        
        @mpfile.setter
        def mpfile(self, mpfile):
            _pyEMsoft.f90wrap_eecmasternamelisttype__set__mpfile(self._handle, mpfile)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 474
            
            """
            return _pyEMsoft.f90wrap_eecmasternamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_eecmasternamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def betheparametersfile(self):
            """
            Element betheparametersfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 475
            
            """
            return \
                _pyEMsoft.f90wrap_eecmasternamelisttype__get__betheparametersfile(self._handle)
        
        @betheparametersfile.setter
        def betheparametersfile(self, betheparametersfile):
            _pyEMsoft.f90wrap_eecmasternamelisttype__set__betheparametersfile(self._handle, \
                betheparametersfile)
        
        @property
        def isotopesite(self):
            """
            Element isotopesite ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 476
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_eecmasternamelisttype__array__isotopesite(self._handle)
            if array_handle in self._arrays:
                isotopesite = self._arrays[array_handle]
            else:
                isotopesite = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_eecmasternamelisttype__array__isotopesite)
                self._arrays[array_handle] = isotopesite
            return isotopesite
        
        @isotopesite.setter
        def isotopesite(self, isotopesite):
            self.isotopesite[...] = isotopesite
        
        @property
        def isotopeenergy(self):
            """
            Element isotopeenergy ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 477
            
            """
            return _pyEMsoft.f90wrap_eecmasternamelisttype__get__isotopeenergy(self._handle)
        
        @isotopeenergy.setter
        def isotopeenergy(self, isotopeenergy):
            _pyEMsoft.f90wrap_eecmasternamelisttype__set__isotopeenergy(self._handle, \
                isotopeenergy)
        
        @property
        def mfp(self):
            """
            Element mfp ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 478
            
            """
            return _pyEMsoft.f90wrap_eecmasternamelisttype__get__mfp(self._handle)
        
        @mfp.setter
        def mfp(self, mfp):
            _pyEMsoft.f90wrap_eecmasternamelisttype__set__mfp(self._handle, mfp)
        
        def __str__(self):
            ret = ['<eecmasternamelisttype>{\n']
            ret.append('    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    notify : ')
            ret.append(repr(self.notify))
            ret.append(',\n    mpfile : ')
            ret.append(repr(self.mpfile))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    betheparametersfile : ')
            ret.append(repr(self.betheparametersfile))
            ret.append(',\n    isotopesite : ')
            ret.append(repr(self.isotopesite))
            ret.append(',\n    isotopeenergy : ')
            ret.append(repr(self.isotopeenergy))
            ret.append(',\n    mfp : ')
            ret.append(repr(self.mfp))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDMasterSHTNameListType")
    class EBSDMasterSHTNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdmastershtnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 481-494
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdmastershtnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 481-494
            
            
            Returns
            -------
            this : Ebsdmastershtnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdmastershtnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdmastershtnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdmastershtnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 481-494
            
            Parameters
            ----------
            this : Ebsdmastershtnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdmastershtnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdmastershtnamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 482
            
            """
            return _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 483
            
            """
            return _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__set__nthreads(self._handle, \
                nthreads)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 484
            
            """
            return _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def notify(self):
            """
            Element notify ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 485
            
            """
            return _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__get__notify(self._handle)
        
        @notify.setter
        def notify(self, notify):
            _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__set__notify(self._handle, notify)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 486
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__set__energyfile(self._handle, \
                energyfile)
        
        @property
        def betheparametersfile(self):
            """
            Element betheparametersfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 487
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__get__betheparametersfile(self._handle)
        
        @betheparametersfile.setter
        def betheparametersfile(self, betheparametersfile):
            \
                _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__set__betheparametersfile(self._handle, \
                betheparametersfile)
        
        @property
        def sht_folder(self):
            """
            Element sht_folder ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 488
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__get__sht_folder(self._handle)
        
        @sht_folder.setter
        def sht_folder(self, sht_folder):
            _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__set__sht_folder(self._handle, \
                sht_folder)
        
        @property
        def sht_formula(self):
            """
            Element sht_formula ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 489
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__get__sht_formula(self._handle)
        
        @sht_formula.setter
        def sht_formula(self, sht_formula):
            _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__set__sht_formula(self._handle, \
                sht_formula)
        
        @property
        def sht_name(self):
            """
            Element sht_name ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 490
            
            """
            return _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__get__sht_name(self._handle)
        
        @sht_name.setter
        def sht_name(self, sht_name):
            _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__set__sht_name(self._handle, \
                sht_name)
        
        @property
        def sht_structuresymbol(self):
            """
            Element sht_structuresymbol ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 491
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__get__sht_structuresymbol(self._handle)
        
        @sht_structuresymbol.setter
        def sht_structuresymbol(self, sht_structuresymbol):
            \
                _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__set__sht_structuresymbol(self._handle, \
                sht_structuresymbol)
        
        @property
        def addtokilthub(self):
            """
            Element addtokilthub ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 492
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__get__addtokilthub(self._handle)
        
        @addtokilthub.setter
        def addtokilthub(self, addtokilthub):
            _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__set__addtokilthub(self._handle, \
                addtokilthub)
        
        @property
        def usedoi(self):
            """
            Element usedoi ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 493
            
            """
            return _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__get__usedoi(self._handle)
        
        @usedoi.setter
        def usedoi(self, usedoi):
            _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__set__usedoi(self._handle, usedoi)
        
        @property
        def combinesites(self):
            """
            Element combinesites ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 494
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__get__combinesites(self._handle)
        
        @combinesites.setter
        def combinesites(self, combinesites):
            _pyEMsoft.f90wrap_ebsdmastershtnamelisttype__set__combinesites(self._handle, \
                combinesites)
        
        def __str__(self):
            ret = ['<ebsdmastershtnamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    notify : ')
            ret.append(repr(self.notify))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append(',\n    betheparametersfile : ')
            ret.append(repr(self.betheparametersfile))
            ret.append(',\n    sht_folder : ')
            ret.append(repr(self.sht_folder))
            ret.append(',\n    sht_formula : ')
            ret.append(repr(self.sht_formula))
            ret.append(',\n    sht_name : ')
            ret.append(repr(self.sht_name))
            ret.append(',\n    sht_structuresymbol : ')
            ret.append(repr(self.sht_structuresymbol))
            ret.append(',\n    addtokilthub : ')
            ret.append(repr(self.addtokilthub))
            ret.append(',\n    usedoi : ')
            ret.append(repr(self.usedoi))
            ret.append(',\n    combinesites : ')
            ret.append(repr(self.combinesites))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDSingleMasterNameListType")
    class EBSDSingleMasterNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdsinglemasternamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 497-506
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdsinglemasternamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 497-506
            
            
            Returns
            -------
            this : Ebsdsinglemasternamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdsinglemasternamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdsinglemasternamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 497-506
            
            Parameters
            ----------
            this : Ebsdsinglemasternamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdsinglemasternamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype_finalise(this=self._handle)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 498
            
            """
            return _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__set__npx(self._handle, npx)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 499
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__set__nthreads(self._handle, \
                nthreads)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 500
            
            """
            return _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def kv(self):
            """
            Element kv ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 501
            
            """
            return _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__get__kv(self._handle)
        
        @kv.setter
        def kv(self, kv):
            _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__set__kv(self._handle, kv)
        
        @property
        def tstep(self):
            """
            Element tstep ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 502
            
            """
            return _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__get__tstep(self._handle)
        
        @tstep.setter
        def tstep(self, tstep):
            _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__set__tstep(self._handle, tstep)
        
        @property
        def notify(self):
            """
            Element notify ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 503
            
            """
            return _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__get__notify(self._handle)
        
        @notify.setter
        def notify(self, notify):
            _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__set__notify(self._handle, \
                notify)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 504
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__set__outname(self._handle, \
                outname)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 505
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__set__xtalname(self._handle, \
                xtalname)
        
        @property
        def combinesites(self):
            """
            Element combinesites ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 506
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__get__combinesites(self._handle)
        
        @combinesites.setter
        def combinesites(self, combinesites):
            _pyEMsoft.f90wrap_ebsdsinglemasternamelisttype__set__combinesites(self._handle, \
                combinesites)
        
        def __str__(self):
            ret = ['<ebsdsinglemasternamelisttype>{\n']
            ret.append('    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    kv : ')
            ret.append(repr(self.kv))
            ret.append(',\n    tstep : ')
            ret.append(repr(self.tstep))
            ret.append(',\n    notify : ')
            ret.append(repr(self.notify))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    combinesites : ')
            ret.append(repr(self.combinesites))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.TKDMasterNameListType")
    class TKDMasterNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=tkdmasternamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 509-519
        
        """
        def __init__(self, handle=None):
            """
            self = Tkdmasternamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 509-519
            
            
            Returns
            -------
            this : Tkdmasternamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for tkdmasternamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_tkdmasternamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Tkdmasternamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 509-519
            
            Parameters
            ----------
            this : Tkdmasternamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for tkdmasternamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_tkdmasternamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 510
            
            """
            return _pyEMsoft.f90wrap_tkdmasternamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_tkdmasternamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 511
            
            """
            return _pyEMsoft.f90wrap_tkdmasternamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_tkdmasternamelisttype__set__npx(self._handle, npx)
        
        @property
        def esel(self):
            """
            Element esel ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 512
            
            """
            return _pyEMsoft.f90wrap_tkdmasternamelisttype__get__esel(self._handle)
        
        @esel.setter
        def esel(self, esel):
            _pyEMsoft.f90wrap_tkdmasternamelisttype__set__esel(self._handle, esel)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 513
            
            """
            return _pyEMsoft.f90wrap_tkdmasternamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_tkdmasternamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 514
            
            """
            return _pyEMsoft.f90wrap_tkdmasternamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_tkdmasternamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 515
            
            """
            return _pyEMsoft.f90wrap_tkdmasternamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_tkdmasternamelisttype__set__energyfile(self._handle, \
                energyfile)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 516
            
            """
            return _pyEMsoft.f90wrap_tkdmasternamelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_tkdmasternamelisttype__set__outname(self._handle, outname)
        
        @property
        def combinesites(self):
            """
            Element combinesites ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 517
            
            """
            return _pyEMsoft.f90wrap_tkdmasternamelisttype__get__combinesites(self._handle)
        
        @combinesites.setter
        def combinesites(self, combinesites):
            _pyEMsoft.f90wrap_tkdmasternamelisttype__set__combinesites(self._handle, \
                combinesites)
        
        @property
        def restart(self):
            """
            Element restart ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 518
            
            """
            return _pyEMsoft.f90wrap_tkdmasternamelisttype__get__restart(self._handle)
        
        @restart.setter
        def restart(self, restart):
            _pyEMsoft.f90wrap_tkdmasternamelisttype__set__restart(self._handle, restart)
        
        @property
        def uniform(self):
            """
            Element uniform ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 519
            
            """
            return _pyEMsoft.f90wrap_tkdmasternamelisttype__get__uniform(self._handle)
        
        @uniform.setter
        def uniform(self, uniform):
            _pyEMsoft.f90wrap_tkdmasternamelisttype__set__uniform(self._handle, uniform)
        
        def __str__(self):
            ret = ['<tkdmasternamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    esel : ')
            ret.append(repr(self.esel))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append(',\n    combinesites : ')
            ret.append(repr(self.combinesites))
            ret.append(',\n    restart : ')
            ret.append(repr(self.restart))
            ret.append(',\n    uniform : ')
            ret.append(repr(self.uniform))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDMasterOpenCLNameListType")
    class EBSDMasterOpenCLNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdmasteropenclnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 522-534
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdmasteropenclnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 522-534
            
            
            Returns
            -------
            this : Ebsdmasteropenclnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdmasteropenclnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdmasteropenclnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 522-534
            
            Parameters
            ----------
            this : Ebsdmasteropenclnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdmasteropenclnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 523
            
            """
            return _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__set__stdout(self._handle, \
                stdout)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 524
            
            """
            return _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__set__npx(self._handle, npx)
        
        @property
        def esel(self):
            """
            Element esel ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 525
            
            """
            return _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__get__esel(self._handle)
        
        @esel.setter
        def esel(self, esel):
            _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__set__esel(self._handle, esel)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 526
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__set__nthreads(self._handle, \
                nthreads)
        
        @property
        def platid(self):
            """
            Element platid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 527
            
            """
            return _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__get__platid(self._handle)
        
        @platid.setter
        def platid(self, platid):
            _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__set__platid(self._handle, \
                platid)
        
        @property
        def devid(self):
            """
            Element devid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 528
            
            """
            return _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__get__devid(self._handle)
        
        @devid.setter
        def devid(self, devid):
            _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__set__devid(self._handle, devid)
        
        @property
        def globalworkgrpsz(self):
            """
            Element globalworkgrpsz ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 529
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__get__globalworkgrpsz(self._handle)
        
        @globalworkgrpsz.setter
        def globalworkgrpsz(self, globalworkgrpsz):
            \
                _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__set__globalworkgrpsz(self._handle, \
                globalworkgrpsz)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 530
            
            """
            return _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 531
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__set__energyfile(self._handle, \
                energyfile)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 532
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__set__outname(self._handle, \
                outname)
        
        @property
        def restart(self):
            """
            Element restart ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 533
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__get__restart(self._handle)
        
        @restart.setter
        def restart(self, restart):
            _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__set__restart(self._handle, \
                restart)
        
        @property
        def uniform(self):
            """
            Element uniform ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 534
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__get__uniform(self._handle)
        
        @uniform.setter
        def uniform(self, uniform):
            _pyEMsoft.f90wrap_ebsdmasteropenclnamelisttype__set__uniform(self._handle, \
                uniform)
        
        def __str__(self):
            ret = ['<ebsdmasteropenclnamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    esel : ')
            ret.append(repr(self.esel))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    platid : ')
            ret.append(repr(self.platid))
            ret.append(',\n    devid : ')
            ret.append(repr(self.devid))
            ret.append(',\n    globalworkgrpsz : ')
            ret.append(repr(self.globalworkgrpsz))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append(',\n    restart : ')
            ret.append(repr(self.restart))
            ret.append(',\n    uniform : ')
            ret.append(repr(self.uniform))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDNameListType")
    class EBSDNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 537-577
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 537-577
            
            
            Returns
            -------
            this : Ebsdnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 537-577
            
            Parameters
            ----------
            this : Ebsdnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdnamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 538
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 539
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__numsx(self._handle, numsx)
        
        @property
        def numsy(self):
            """
            Element numsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 540
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__numsy(self._handle)
        
        @numsy.setter
        def numsy(self, numsy):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__numsy(self._handle, numsy)
        
        @property
        def binning(self):
            """
            Element binning ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 541
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__binning(self._handle)
        
        @binning.setter
        def binning(self, binning):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__binning(self._handle, binning)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 542
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def energyaverage(self):
            """
            Element energyaverage ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 543
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__energyaverage(self._handle)
        
        @energyaverage.setter
        def energyaverage(self, energyaverage):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__energyaverage(self._handle, \
                energyaverage)
        
        @property
        def maskradius(self):
            """
            Element maskradius ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 544
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__maskradius(self._handle)
        
        @maskradius.setter
        def maskradius(self, maskradius):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__maskradius(self._handle, maskradius)
        
        @property
        def nregions(self):
            """
            Element nregions ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 545
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__nregions(self._handle)
        
        @nregions.setter
        def nregions(self, nregions):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__nregions(self._handle, nregions)
        
        @property
        def l(self):
            """
            Element l ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 546
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__l(self._handle)
        
        @l.setter
        def l(self, l):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__l(self._handle, l)
        
        @property
        def thetac(self):
            """
            Element thetac ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 547
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__thetac(self._handle)
        
        @thetac.setter
        def thetac(self, thetac):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__thetac(self._handle, thetac)
        
        @property
        def delta(self):
            """
            Element delta ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 548
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__delta(self._handle)
        
        @delta.setter
        def delta(self, delta):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__delta(self._handle, delta)
        
        @property
        def omega(self):
            """
            Element omega ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 549
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__omega(self._handle)
        
        @omega.setter
        def omega(self, omega):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__omega(self._handle, omega)
        
        @property
        def xpc(self):
            """
            Element xpc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 550
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__xpc(self._handle)
        
        @xpc.setter
        def xpc(self, xpc):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__xpc(self._handle, xpc)
        
        @property
        def ypc(self):
            """
            Element ypc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 551
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__ypc(self._handle)
        
        @ypc.setter
        def ypc(self, ypc):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__ypc(self._handle, ypc)
        
        @property
        def energymin(self):
            """
            Element energymin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 552
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__energymin(self._handle)
        
        @energymin.setter
        def energymin(self, energymin):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__energymin(self._handle, energymin)
        
        @property
        def energymax(self):
            """
            Element energymax ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 553
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__energymax(self._handle)
        
        @energymax.setter
        def energymax(self, energymax):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__energymax(self._handle, energymax)
        
        @property
        def gammavalue(self):
            """
            Element gammavalue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 554
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__gammavalue(self._handle)
        
        @gammavalue.setter
        def gammavalue(self, gammavalue):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__gammavalue(self._handle, gammavalue)
        
        @property
        def axisangle(self):
            """
            Element axisangle ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 555
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdnamelisttype__array__axisangle(self._handle)
            if array_handle in self._arrays:
                axisangle = self._arrays[array_handle]
            else:
                axisangle = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdnamelisttype__array__axisangle)
                self._arrays[array_handle] = axisangle
            return axisangle
        
        @axisangle.setter
        def axisangle(self, axisangle):
            self.axisangle[...] = axisangle
        
        @property
        def alphabd(self):
            """
            Element alphabd ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 556
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__alphabd(self._handle)
        
        @alphabd.setter
        def alphabd(self, alphabd):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__alphabd(self._handle, alphabd)
        
        @property
        def hipassw(self):
            """
            Element hipassw ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 557
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__hipassw(self._handle)
        
        @hipassw.setter
        def hipassw(self, hipassw):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__hipassw(self._handle, hipassw)
        
        @property
        def ftensor(self):
            """
            Element ftensor ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 558
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdnamelisttype__array__ftensor(self._handle)
            if array_handle in self._arrays:
                ftensor = self._arrays[array_handle]
            else:
                ftensor = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdnamelisttype__array__ftensor)
                self._arrays[array_handle] = ftensor
            return ftensor
        
        @ftensor.setter
        def ftensor(self, ftensor):
            self.ftensor[...] = ftensor
        
        @property
        def beamcurrent(self):
            """
            Element beamcurrent ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 559
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__beamcurrent(self._handle)
        
        @beamcurrent.setter
        def beamcurrent(self, beamcurrent):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__beamcurrent(self._handle, beamcurrent)
        
        @property
        def dwelltime(self):
            """
            Element dwelltime ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 560
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__dwelltime(self._handle)
        
        @dwelltime.setter
        def dwelltime(self, dwelltime):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__dwelltime(self._handle, dwelltime)
        
        @property
        def makedictionary(self):
            """
            Element makedictionary ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 561
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__makedictionary(self._handle)
        
        @makedictionary.setter
        def makedictionary(self, makedictionary):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__makedictionary(self._handle, \
                makedictionary)
        
        @property
        def poisson(self):
            """
            Element poisson ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 562
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__poisson(self._handle)
        
        @poisson.setter
        def poisson(self, poisson):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__poisson(self._handle, poisson)
        
        @property
        def includebackground(self):
            """
            Element includebackground ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 563
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__includebackground(self._handle)
        
        @includebackground.setter
        def includebackground(self, includebackground):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__includebackground(self._handle, \
                includebackground)
        
        @property
        def applydeformation(self):
            """
            Element applydeformation ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 564
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__applydeformation(self._handle)
        
        @applydeformation.setter
        def applydeformation(self, applydeformation):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__applydeformation(self._handle, \
                applydeformation)
        
        @property
        def maskpattern(self):
            """
            Element maskpattern ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 565
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__maskpattern(self._handle)
        
        @maskpattern.setter
        def maskpattern(self, maskpattern):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__maskpattern(self._handle, maskpattern)
        
        @property
        def fframe(self):
            """
            Element fframe ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 566
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__fframe(self._handle)
        
        @fframe.setter
        def fframe(self, fframe):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__fframe(self._handle, fframe)
        
        @property
        def scalingmode(self):
            """
            Element scalingmode ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 567
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__scalingmode(self._handle)
        
        @scalingmode.setter
        def scalingmode(self, scalingmode):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__scalingmode(self._handle, scalingmode)
        
        @property
        def eulerconvention(self):
            """
            Element eulerconvention ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 568
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__eulerconvention(self._handle)
        
        @eulerconvention.setter
        def eulerconvention(self, eulerconvention):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__eulerconvention(self._handle, \
                eulerconvention)
        
        @property
        def outputformat(self):
            """
            Element outputformat ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 569
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__outputformat(self._handle)
        
        @outputformat.setter
        def outputformat(self, outputformat):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__outputformat(self._handle, \
                outputformat)
        
        @property
        def spatialaverage(self):
            """
            Element spatialaverage ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 570
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__spatialaverage(self._handle)
        
        @spatialaverage.setter
        def spatialaverage(self, spatialaverage):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__spatialaverage(self._handle, \
                spatialaverage)
        
        @property
        def bitdepth(self):
            """
            Element bitdepth ftype=character(5) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 571
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__bitdepth(self._handle)
        
        @bitdepth.setter
        def bitdepth(self, bitdepth):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__bitdepth(self._handle, bitdepth)
        
        @property
        def anglefile(self):
            """
            Element anglefile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 572
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__anglefile(self._handle)
        
        @anglefile.setter
        def anglefile(self, anglefile):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__anglefile(self._handle, anglefile)
        
        @property
        def anglefiletype(self):
            """
            Element anglefiletype ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 573
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__anglefiletype(self._handle)
        
        @anglefiletype.setter
        def anglefiletype(self, anglefiletype):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__anglefiletype(self._handle, \
                anglefiletype)
        
        @property
        def masterfile(self):
            """
            Element masterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 574
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__masterfile(self._handle)
        
        @masterfile.setter
        def masterfile(self, masterfile):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__masterfile(self._handle, masterfile)
        
        @property
        def targetfile(self):
            """
            Element targetfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 575
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__targetfile(self._handle)
        
        @targetfile.setter
        def targetfile(self, targetfile):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__targetfile(self._handle, targetfile)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 576
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__energyfile(self._handle, energyfile)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 577
            
            """
            return _pyEMsoft.f90wrap_ebsdnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_ebsdnamelisttype__set__datafile(self._handle, datafile)
        
        def __str__(self):
            ret = ['<ebsdnamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    numsy : ')
            ret.append(repr(self.numsy))
            ret.append(',\n    binning : ')
            ret.append(repr(self.binning))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    energyaverage : ')
            ret.append(repr(self.energyaverage))
            ret.append(',\n    maskradius : ')
            ret.append(repr(self.maskradius))
            ret.append(',\n    nregions : ')
            ret.append(repr(self.nregions))
            ret.append(',\n    l : ')
            ret.append(repr(self.l))
            ret.append(',\n    thetac : ')
            ret.append(repr(self.thetac))
            ret.append(',\n    delta : ')
            ret.append(repr(self.delta))
            ret.append(',\n    omega : ')
            ret.append(repr(self.omega))
            ret.append(',\n    xpc : ')
            ret.append(repr(self.xpc))
            ret.append(',\n    ypc : ')
            ret.append(repr(self.ypc))
            ret.append(',\n    energymin : ')
            ret.append(repr(self.energymin))
            ret.append(',\n    energymax : ')
            ret.append(repr(self.energymax))
            ret.append(',\n    gammavalue : ')
            ret.append(repr(self.gammavalue))
            ret.append(',\n    axisangle : ')
            ret.append(repr(self.axisangle))
            ret.append(',\n    alphabd : ')
            ret.append(repr(self.alphabd))
            ret.append(',\n    hipassw : ')
            ret.append(repr(self.hipassw))
            ret.append(',\n    ftensor : ')
            ret.append(repr(self.ftensor))
            ret.append(',\n    beamcurrent : ')
            ret.append(repr(self.beamcurrent))
            ret.append(',\n    dwelltime : ')
            ret.append(repr(self.dwelltime))
            ret.append(',\n    makedictionary : ')
            ret.append(repr(self.makedictionary))
            ret.append(',\n    poisson : ')
            ret.append(repr(self.poisson))
            ret.append(',\n    includebackground : ')
            ret.append(repr(self.includebackground))
            ret.append(',\n    applydeformation : ')
            ret.append(repr(self.applydeformation))
            ret.append(',\n    maskpattern : ')
            ret.append(repr(self.maskpattern))
            ret.append(',\n    fframe : ')
            ret.append(repr(self.fframe))
            ret.append(',\n    scalingmode : ')
            ret.append(repr(self.scalingmode))
            ret.append(',\n    eulerconvention : ')
            ret.append(repr(self.eulerconvention))
            ret.append(',\n    outputformat : ')
            ret.append(repr(self.outputformat))
            ret.append(',\n    spatialaverage : ')
            ret.append(repr(self.spatialaverage))
            ret.append(',\n    bitdepth : ')
            ret.append(repr(self.bitdepth))
            ret.append(',\n    anglefile : ')
            ret.append(repr(self.anglefile))
            ret.append(',\n    anglefiletype : ')
            ret.append(repr(self.anglefiletype))
            ret.append(',\n    masterfile : ')
            ret.append(repr(self.masterfile))
            ret.append(',\n    targetfile : ')
            ret.append(repr(self.targetfile))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.BSENameListType")
    class BSENameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=bsenamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 580-598
        
        """
        def __init__(self, handle=None):
            """
            self = Bsenamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 580-598
            
            
            Returns
            -------
            this : Bsenamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for bsenamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_bsenamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Bsenamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 580-598
            
            Parameters
            ----------
            this : Bsenamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for bsenamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_bsenamelisttype_finalise(this=self._handle)
        
        @property
        def energymin(self):
            """
            Element energymin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 581
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__energymin(self._handle)
        
        @energymin.setter
        def energymin(self, energymin):
            _pyEMsoft.f90wrap_bsenamelisttype__set__energymin(self._handle, energymin)
        
        @property
        def energymax(self):
            """
            Element energymax ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 582
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__energymax(self._handle)
        
        @energymax.setter
        def energymax(self, energymax):
            _pyEMsoft.f90wrap_bsenamelisttype__set__energymax(self._handle, energymax)
        
        @property
        def incidence(self):
            """
            Element incidence ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 583
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__incidence(self._handle)
        
        @incidence.setter
        def incidence(self, incidence):
            _pyEMsoft.f90wrap_bsenamelisttype__set__incidence(self._handle, incidence)
        
        @property
        def beamcurrent(self):
            """
            Element beamcurrent ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 584
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__beamcurrent(self._handle)
        
        @beamcurrent.setter
        def beamcurrent(self, beamcurrent):
            _pyEMsoft.f90wrap_bsenamelisttype__set__beamcurrent(self._handle, beamcurrent)
        
        @property
        def dwelltime(self):
            """
            Element dwelltime ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 585
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__dwelltime(self._handle)
        
        @dwelltime.setter
        def dwelltime(self, dwelltime):
            _pyEMsoft.f90wrap_bsenamelisttype__set__dwelltime(self._handle, dwelltime)
        
        @property
        def gammavalue(self):
            """
            Element gammavalue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 586
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__gammavalue(self._handle)
        
        @gammavalue.setter
        def gammavalue(self, gammavalue):
            _pyEMsoft.f90wrap_bsenamelisttype__set__gammavalue(self._handle, gammavalue)
        
        @property
        def workingdistance(self):
            """
            Element workingdistance ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 587
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__workingdistance(self._handle)
        
        @workingdistance.setter
        def workingdistance(self, workingdistance):
            _pyEMsoft.f90wrap_bsenamelisttype__set__workingdistance(self._handle, \
                workingdistance)
        
        @property
        def bsedistance(self):
            """
            Element bsedistance ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 588
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__bsedistance(self._handle)
        
        @bsedistance.setter
        def bsedistance(self, bsedistance):
            _pyEMsoft.f90wrap_bsenamelisttype__set__bsedistance(self._handle, bsedistance)
        
        @property
        def rin(self):
            """
            Element rin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 589
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__rin(self._handle)
        
        @rin.setter
        def rin(self, rin):
            _pyEMsoft.f90wrap_bsenamelisttype__set__rin(self._handle, rin)
        
        @property
        def rout(self):
            """
            Element rout ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 590
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__rout(self._handle)
        
        @rout.setter
        def rout(self, rout):
            _pyEMsoft.f90wrap_bsenamelisttype__set__rout(self._handle, rout)
        
        @property
        def nsql(self):
            """
            Element nsql ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 591
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__nsql(self._handle)
        
        @nsql.setter
        def nsql(self, nsql):
            _pyEMsoft.f90wrap_bsenamelisttype__set__nsql(self._handle, nsql)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 592
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_bsenamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def scalingmode(self):
            """
            Element scalingmode ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 593
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__scalingmode(self._handle)
        
        @scalingmode.setter
        def scalingmode(self, scalingmode):
            _pyEMsoft.f90wrap_bsenamelisttype__set__scalingmode(self._handle, scalingmode)
        
        @property
        def useangles(self):
            """
            Element useangles ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 594
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__useangles(self._handle)
        
        @useangles.setter
        def useangles(self, useangles):
            _pyEMsoft.f90wrap_bsenamelisttype__set__useangles(self._handle, useangles)
        
        @property
        def imagefile(self):
            """
            Element imagefile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 595
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__imagefile(self._handle)
        
        @imagefile.setter
        def imagefile(self, imagefile):
            _pyEMsoft.f90wrap_bsenamelisttype__set__imagefile(self._handle, imagefile)
        
        @property
        def masterfile(self):
            """
            Element masterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 596
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__masterfile(self._handle)
        
        @masterfile.setter
        def masterfile(self, masterfile):
            _pyEMsoft.f90wrap_bsenamelisttype__set__masterfile(self._handle, masterfile)
        
        @property
        def kosselmasterfile(self):
            """
            Element kosselmasterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 597
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__kosselmasterfile(self._handle)
        
        @kosselmasterfile.setter
        def kosselmasterfile(self, kosselmasterfile):
            _pyEMsoft.f90wrap_bsenamelisttype__set__kosselmasterfile(self._handle, \
                kosselmasterfile)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 598
            
            """
            return _pyEMsoft.f90wrap_bsenamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_bsenamelisttype__set__datafile(self._handle, datafile)
        
        def __str__(self):
            ret = ['<bsenamelisttype>{\n']
            ret.append('    energymin : ')
            ret.append(repr(self.energymin))
            ret.append(',\n    energymax : ')
            ret.append(repr(self.energymax))
            ret.append(',\n    incidence : ')
            ret.append(repr(self.incidence))
            ret.append(',\n    beamcurrent : ')
            ret.append(repr(self.beamcurrent))
            ret.append(',\n    dwelltime : ')
            ret.append(repr(self.dwelltime))
            ret.append(',\n    gammavalue : ')
            ret.append(repr(self.gammavalue))
            ret.append(',\n    workingdistance : ')
            ret.append(repr(self.workingdistance))
            ret.append(',\n    bsedistance : ')
            ret.append(repr(self.bsedistance))
            ret.append(',\n    rin : ')
            ret.append(repr(self.rin))
            ret.append(',\n    rout : ')
            ret.append(repr(self.rout))
            ret.append(',\n    nsql : ')
            ret.append(repr(self.nsql))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    scalingmode : ')
            ret.append(repr(self.scalingmode))
            ret.append(',\n    useangles : ')
            ret.append(repr(self.useangles))
            ret.append(',\n    imagefile : ')
            ret.append(repr(self.imagefile))
            ret.append(',\n    masterfile : ')
            ret.append(repr(self.masterfile))
            ret.append(',\n    kosselmasterfile : ')
            ret.append(repr(self.kosselmasterfile))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDDENameListType")
    class EBSDDENameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsddenamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 600-620
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsddenamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 600-620
            
            
            Returns
            -------
            this : Ebsddenamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsddenamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsddenamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsddenamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 600-620
            
            Parameters
            ----------
            this : Ebsddenamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsddenamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsddenamelisttype_finalise(this=self._handle)
        
        @property
        def np(self):
            """
            Element np ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 601
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__np(self._handle)
        
        @np.setter
        def np(self, np):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__np(self._handle, np)
        
        @property
        def itermax(self):
            """
            Element itermax ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 602
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__itermax(self._handle)
        
        @itermax.setter
        def itermax(self, itermax):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__itermax(self._handle, itermax)
        
        @property
        def strategy(self):
            """
            Element strategy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 603
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__strategy(self._handle)
        
        @strategy.setter
        def strategy(self, strategy):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__strategy(self._handle, strategy)
        
        @property
        def refresh(self):
            """
            Element refresh ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 604
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__refresh(self._handle)
        
        @refresh.setter
        def refresh(self, refresh):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__refresh(self._handle, refresh)
        
        @property
        def iwrite(self):
            """
            Element iwrite ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 605
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__iwrite(self._handle)
        
        @iwrite.setter
        def iwrite(self, iwrite):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__iwrite(self._handle, iwrite)
        
        @property
        def method(self):
            """
            Element method ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 606
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddenamelisttype__array__method(self._handle)
            if array_handle in self._arrays:
                method = self._arrays[array_handle]
            else:
                method = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddenamelisttype__array__method)
                self._arrays[array_handle] = method
            return method
        
        @method.setter
        def method(self, method):
            self.method[...] = method
        
        @property
        def vtr(self):
            """
            Element vtr ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 607
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__vtr(self._handle)
        
        @vtr.setter
        def vtr(self, vtr):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__vtr(self._handle, vtr)
        
        @property
        def cr_xc(self):
            """
            Element cr_xc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 608
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__cr_xc(self._handle)
        
        @cr_xc.setter
        def cr_xc(self, cr_xc):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__cr_xc(self._handle, cr_xc)
        
        @property
        def f_xc(self):
            """
            Element f_xc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 609
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__f_xc(self._handle)
        
        @f_xc.setter
        def f_xc(self, f_xc):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__f_xc(self._handle, f_xc)
        
        @property
        def f_cr(self):
            """
            Element f_cr ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 610
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__f_cr(self._handle)
        
        @f_cr.setter
        def f_cr(self, f_cr):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__f_cr(self._handle, f_cr)
        
        @property
        def bound(self):
            """
            Element bound ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 611
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddenamelisttype__array__bound(self._handle)
            if array_handle in self._arrays:
                bound = self._arrays[array_handle]
            else:
                bound = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddenamelisttype__array__bound)
                self._arrays[array_handle] = bound
            return bound
        
        @bound.setter
        def bound(self, bound):
            self.bound[...] = bound
        
        @property
        def w(self):
            """
            Element w ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 612
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__w(self._handle)
        
        @w.setter
        def w(self, w):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__w(self._handle, w)
        
        @property
        def w_damp(self):
            """
            Element w_damp ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 613
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__w_damp(self._handle)
        
        @w_damp.setter
        def w_damp(self, w_damp):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__w_damp(self._handle, w_damp)
        
        @property
        def c1(self):
            """
            Element c1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 614
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__c1(self._handle)
        
        @c1.setter
        def c1(self, c1):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__c1(self._handle, c1)
        
        @property
        def c2(self):
            """
            Element c2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 615
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__c2(self._handle)
        
        @c2.setter
        def c2(self, c2):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__c2(self._handle, c2)
        
        @property
        def objective(self):
            """
            Element objective ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 616
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__objective(self._handle)
        
        @objective.setter
        def objective(self, objective):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__objective(self._handle, objective)
        
        @property
        def outputfile(self):
            """
            Element outputfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 617
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__outputfile(self._handle)
        
        @outputfile.setter
        def outputfile(self, outputfile):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__outputfile(self._handle, outputfile)
        
        @property
        def hybrid(self):
            """
            Element hybrid ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 618
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__hybrid(self._handle)
        
        @hybrid.setter
        def hybrid(self, hybrid):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__hybrid(self._handle, hybrid)
        
        @property
        def globalopt(self):
            """
            Element globalopt ftype=character(2) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 619
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__globalopt(self._handle)
        
        @globalopt.setter
        def globalopt(self, globalopt):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__globalopt(self._handle, globalopt)
        
        @property
        def single_opt(self):
            """
            Element single_opt ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 620
            
            """
            return _pyEMsoft.f90wrap_ebsddenamelisttype__get__single_opt(self._handle)
        
        @single_opt.setter
        def single_opt(self, single_opt):
            _pyEMsoft.f90wrap_ebsddenamelisttype__set__single_opt(self._handle, single_opt)
        
        def __str__(self):
            ret = ['<ebsddenamelisttype>{\n']
            ret.append('    np : ')
            ret.append(repr(self.np))
            ret.append(',\n    itermax : ')
            ret.append(repr(self.itermax))
            ret.append(',\n    strategy : ')
            ret.append(repr(self.strategy))
            ret.append(',\n    refresh : ')
            ret.append(repr(self.refresh))
            ret.append(',\n    iwrite : ')
            ret.append(repr(self.iwrite))
            ret.append(',\n    method : ')
            ret.append(repr(self.method))
            ret.append(',\n    vtr : ')
            ret.append(repr(self.vtr))
            ret.append(',\n    cr_xc : ')
            ret.append(repr(self.cr_xc))
            ret.append(',\n    f_xc : ')
            ret.append(repr(self.f_xc))
            ret.append(',\n    f_cr : ')
            ret.append(repr(self.f_cr))
            ret.append(',\n    bound : ')
            ret.append(repr(self.bound))
            ret.append(',\n    w : ')
            ret.append(repr(self.w))
            ret.append(',\n    w_damp : ')
            ret.append(repr(self.w_damp))
            ret.append(',\n    c1 : ')
            ret.append(repr(self.c1))
            ret.append(',\n    c2 : ')
            ret.append(repr(self.c2))
            ret.append(',\n    objective : ')
            ret.append(repr(self.objective))
            ret.append(',\n    outputfile : ')
            ret.append(repr(self.outputfile))
            ret.append(',\n    hybrid : ')
            ret.append(repr(self.hybrid))
            ret.append(',\n    globalopt : ')
            ret.append(repr(self.globalopt))
            ret.append(',\n    single_opt : ')
            ret.append(repr(self.single_opt))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDdefectNameListType")
    class EBSDdefectNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsddefectnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 623-642
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsddefectnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 623-642
            
            
            Returns
            -------
            this : Ebsddefectnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsddefectnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsddefectnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsddefectnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 623-642
            
            Parameters
            ----------
            this : Ebsddefectnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsddefectnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsddefectnamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 624
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 625
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__numsx(self._handle, numsx)
        
        @property
        def numsy(self):
            """
            Element numsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 626
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__numsy(self._handle)
        
        @numsy.setter
        def numsy(self, numsy):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__numsy(self._handle, numsy)
        
        @property
        def binning(self):
            """
            Element binning ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 627
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__binning(self._handle)
        
        @binning.setter
        def binning(self, binning):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__binning(self._handle, binning)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 628
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def thetac(self):
            """
            Element thetac ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 629
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__thetac(self._handle)
        
        @thetac.setter
        def thetac(self, thetac):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__thetac(self._handle, thetac)
        
        @property
        def delta(self):
            """
            Element delta ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 630
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__delta(self._handle)
        
        @delta.setter
        def delta(self, delta):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__delta(self._handle, delta)
        
        @property
        def omega(self):
            """
            Element omega ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 631
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__omega(self._handle)
        
        @omega.setter
        def omega(self, omega):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__omega(self._handle, omega)
        
        @property
        def spotsize(self):
            """
            Element spotsize ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 632
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__spotsize(self._handle)
        
        @spotsize.setter
        def spotsize(self, spotsize):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__spotsize(self._handle, spotsize)
        
        @property
        def gammavalue(self):
            """
            Element gammavalue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 633
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__gammavalue(self._handle)
        
        @gammavalue.setter
        def gammavalue(self, gammavalue):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__gammavalue(self._handle, \
                gammavalue)
        
        @property
        def beamcurrent(self):
            """
            Element beamcurrent ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 634
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__beamcurrent(self._handle)
        
        @beamcurrent.setter
        def beamcurrent(self, beamcurrent):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__beamcurrent(self._handle, \
                beamcurrent)
        
        @property
        def dwelltime(self):
            """
            Element dwelltime ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 635
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__dwelltime(self._handle)
        
        @dwelltime.setter
        def dwelltime(self, dwelltime):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__dwelltime(self._handle, \
                dwelltime)
        
        @property
        def scalingmode(self):
            """
            Element scalingmode ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 636
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__scalingmode(self._handle)
        
        @scalingmode.setter
        def scalingmode(self, scalingmode):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__scalingmode(self._handle, \
                scalingmode)
        
        @property
        def sampleinteractionvolume(self):
            """
            Element sampleinteractionvolume ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 637
            
            """
            return \
                _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__sampleinteractionvolume(self._handle)
        
        @sampleinteractionvolume.setter
        def sampleinteractionvolume(self, sampleinteractionvolume):
            \
                _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__sampleinteractionvolume(self._handle, \
                sampleinteractionvolume)
        
        @property
        def deformationfile(self):
            """
            Element deformationfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 638
            
            """
            return \
                _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__deformationfile(self._handle)
        
        @deformationfile.setter
        def deformationfile(self, deformationfile):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__deformationfile(self._handle, \
                deformationfile)
        
        @property
        def ivolfile(self):
            """
            Element ivolfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 639
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__ivolfile(self._handle)
        
        @ivolfile.setter
        def ivolfile(self, ivolfile):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__ivolfile(self._handle, ivolfile)
        
        @property
        def masterfile(self):
            """
            Element masterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 640
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__masterfile(self._handle)
        
        @masterfile.setter
        def masterfile(self, masterfile):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__masterfile(self._handle, \
                masterfile)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 641
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__datafile(self._handle, datafile)
        
        @property
        def tmpfspath(self):
            """
            Element tmpfspath ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 642
            
            """
            return _pyEMsoft.f90wrap_ebsddefectnamelisttype__get__tmpfspath(self._handle)
        
        @tmpfspath.setter
        def tmpfspath(self, tmpfspath):
            _pyEMsoft.f90wrap_ebsddefectnamelisttype__set__tmpfspath(self._handle, \
                tmpfspath)
        
        def __str__(self):
            ret = ['<ebsddefectnamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    numsy : ')
            ret.append(repr(self.numsy))
            ret.append(',\n    binning : ')
            ret.append(repr(self.binning))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    thetac : ')
            ret.append(repr(self.thetac))
            ret.append(',\n    delta : ')
            ret.append(repr(self.delta))
            ret.append(',\n    omega : ')
            ret.append(repr(self.omega))
            ret.append(',\n    spotsize : ')
            ret.append(repr(self.spotsize))
            ret.append(',\n    gammavalue : ')
            ret.append(repr(self.gammavalue))
            ret.append(',\n    beamcurrent : ')
            ret.append(repr(self.beamcurrent))
            ret.append(',\n    dwelltime : ')
            ret.append(repr(self.dwelltime))
            ret.append(',\n    scalingmode : ')
            ret.append(repr(self.scalingmode))
            ret.append(',\n    sampleinteractionvolume : ')
            ret.append(repr(self.sampleinteractionvolume))
            ret.append(',\n    deformationfile : ')
            ret.append(repr(self.deformationfile))
            ret.append(',\n    ivolfile : ')
            ret.append(repr(self.ivolfile))
            ret.append(',\n    masterfile : ')
            ret.append(repr(self.masterfile))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    tmpfspath : ')
            ret.append(repr(self.tmpfspath))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDFullNameListType")
    class EBSDFullNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdfullnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 645-677
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdfullnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 645-677
            
            
            Returns
            -------
            this : Ebsdfullnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdfullnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdfullnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdfullnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 645-677
            
            Parameters
            ----------
            this : Ebsdfullnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdfullnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdfullnamelisttype_finalise(this=self._handle)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 646
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def totnum_el(self):
            """
            Element totnum_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 647
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__totnum_el(self._handle)
        
        @totnum_el.setter
        def totnum_el(self, totnum_el):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__totnum_el(self._handle, totnum_el)
        
        @property
        def multiplier(self):
            """
            Element multiplier ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 648
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__multiplier(self._handle)
        
        @multiplier.setter
        def multiplier(self, multiplier):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__multiplier(self._handle, \
                multiplier)
        
        @property
        def ekev(self):
            """
            Element ekev ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 649
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__ekev(self._handle)
        
        @ekev.setter
        def ekev(self, ekev):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__ekev(self._handle, ekev)
        
        @property
        def ehistmin(self):
            """
            Element ehistmin ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 650
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__ehistmin(self._handle)
        
        @ehistmin.setter
        def ehistmin(self, ehistmin):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__ehistmin(self._handle, ehistmin)
        
        @property
        def ebinsize(self):
            """
            Element ebinsize ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 651
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__ebinsize(self._handle)
        
        @ebinsize.setter
        def ebinsize(self, ebinsize):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__ebinsize(self._handle, ebinsize)
        
        @property
        def depthmax(self):
            """
            Element depthmax ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 652
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__depthmax(self._handle)
        
        @depthmax.setter
        def depthmax(self, depthmax):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__depthmax(self._handle, depthmax)
        
        @property
        def depthstep(self):
            """
            Element depthstep ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 653
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__depthstep(self._handle)
        
        @depthstep.setter
        def depthstep(self, depthstep):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__depthstep(self._handle, depthstep)
        
        @property
        def beamcurrent(self):
            """
            Element beamcurrent ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 654
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__beamcurrent(self._handle)
        
        @beamcurrent.setter
        def beamcurrent(self, beamcurrent):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__beamcurrent(self._handle, \
                beamcurrent)
        
        @property
        def dwelltime(self):
            """
            Element dwelltime ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 655
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__dwelltime(self._handle)
        
        @dwelltime.setter
        def dwelltime(self, dwelltime):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__dwelltime(self._handle, dwelltime)
        
        @property
        def sig(self):
            """
            Element sig ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 656
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__sig(self._handle)
        
        @sig.setter
        def sig(self, sig):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__sig(self._handle, sig)
        
        @property
        def omega(self):
            """
            Element omega ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 657
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__omega(self._handle)
        
        @omega.setter
        def omega(self, omega):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__omega(self._handle, omega)
        
        @property
        def l(self):
            """
            Element l ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 658
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__l(self._handle)
        
        @l.setter
        def l(self, l):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__l(self._handle, l)
        
        @property
        def thetac(self):
            """
            Element thetac ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 659
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__thetac(self._handle)
        
        @thetac.setter
        def thetac(self, thetac):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__thetac(self._handle, thetac)
        
        @property
        def delta(self):
            """
            Element delta ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 660
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__delta(self._handle)
        
        @delta.setter
        def delta(self, delta):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__delta(self._handle, delta)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 661
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__numsx(self._handle, numsx)
        
        @property
        def numsy(self):
            """
            Element numsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 662
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__numsy(self._handle)
        
        @numsy.setter
        def numsy(self, numsy):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__numsy(self._handle, numsy)
        
        @property
        def xpc(self):
            """
            Element xpc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 663
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__xpc(self._handle)
        
        @xpc.setter
        def xpc(self, xpc):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__xpc(self._handle, xpc)
        
        @property
        def ypc(self):
            """
            Element ypc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 664
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__ypc(self._handle)
        
        @ypc.setter
        def ypc(self, ypc):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__ypc(self._handle, ypc)
        
        @property
        def binning(self):
            """
            Element binning ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 665
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__binning(self._handle)
        
        @binning.setter
        def binning(self, binning):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__binning(self._handle, binning)
        
        @property
        def scalingmode(self):
            """
            Element scalingmode ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 666
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__scalingmode(self._handle)
        
        @scalingmode.setter
        def scalingmode(self, scalingmode):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__scalingmode(self._handle, \
                scalingmode)
        
        @property
        def gammavalue(self):
            """
            Element gammavalue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 667
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__gammavalue(self._handle)
        
        @gammavalue.setter
        def gammavalue(self, gammavalue):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__gammavalue(self._handle, \
                gammavalue)
        
        @property
        def maskpattern(self):
            """
            Element maskpattern ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 668
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__maskpattern(self._handle)
        
        @maskpattern.setter
        def maskpattern(self, maskpattern):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__maskpattern(self._handle, \
                maskpattern)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 669
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def platid(self):
            """
            Element platid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 670
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__platid(self._handle)
        
        @platid.setter
        def platid(self, platid):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__platid(self._handle, platid)
        
        @property
        def devid(self):
            """
            Element devid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 671
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__devid(self._handle)
        
        @devid.setter
        def devid(self, devid):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__devid(self._handle, devid)
        
        @property
        def globalworkgrpsz(self):
            """
            Element globalworkgrpsz ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 672
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__globalworkgrpsz(self._handle)
        
        @globalworkgrpsz.setter
        def globalworkgrpsz(self, globalworkgrpsz):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__globalworkgrpsz(self._handle, \
                globalworkgrpsz)
        
        @property
        def num_el(self):
            """
            Element num_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 673
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__num_el(self._handle)
        
        @num_el.setter
        def num_el(self, num_el):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__num_el(self._handle, num_el)
        
        @property
        def eulerconvention(self):
            """
            Element eulerconvention ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 674
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__eulerconvention(self._handle)
        
        @eulerconvention.setter
        def eulerconvention(self, eulerconvention):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__eulerconvention(self._handle, \
                eulerconvention)
        
        @property
        def anglefile(self):
            """
            Element anglefile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 675
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__anglefile(self._handle)
        
        @anglefile.setter
        def anglefile(self, anglefile):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__anglefile(self._handle, anglefile)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 676
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__datafile(self._handle, datafile)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 677
            
            """
            return _pyEMsoft.f90wrap_ebsdfullnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_ebsdfullnamelisttype__set__xtalname(self._handle, xtalname)
        
        def __str__(self):
            ret = ['<ebsdfullnamelisttype>{\n']
            ret.append('    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    totnum_el : ')
            ret.append(repr(self.totnum_el))
            ret.append(',\n    multiplier : ')
            ret.append(repr(self.multiplier))
            ret.append(',\n    ekev : ')
            ret.append(repr(self.ekev))
            ret.append(',\n    ehistmin : ')
            ret.append(repr(self.ehistmin))
            ret.append(',\n    ebinsize : ')
            ret.append(repr(self.ebinsize))
            ret.append(',\n    depthmax : ')
            ret.append(repr(self.depthmax))
            ret.append(',\n    depthstep : ')
            ret.append(repr(self.depthstep))
            ret.append(',\n    beamcurrent : ')
            ret.append(repr(self.beamcurrent))
            ret.append(',\n    dwelltime : ')
            ret.append(repr(self.dwelltime))
            ret.append(',\n    sig : ')
            ret.append(repr(self.sig))
            ret.append(',\n    omega : ')
            ret.append(repr(self.omega))
            ret.append(',\n    l : ')
            ret.append(repr(self.l))
            ret.append(',\n    thetac : ')
            ret.append(repr(self.thetac))
            ret.append(',\n    delta : ')
            ret.append(repr(self.delta))
            ret.append(',\n    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    numsy : ')
            ret.append(repr(self.numsy))
            ret.append(',\n    xpc : ')
            ret.append(repr(self.xpc))
            ret.append(',\n    ypc : ')
            ret.append(repr(self.ypc))
            ret.append(',\n    binning : ')
            ret.append(repr(self.binning))
            ret.append(',\n    scalingmode : ')
            ret.append(repr(self.scalingmode))
            ret.append(',\n    gammavalue : ')
            ret.append(repr(self.gammavalue))
            ret.append(',\n    maskpattern : ')
            ret.append(repr(self.maskpattern))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    platid : ')
            ret.append(repr(self.platid))
            ret.append(',\n    devid : ')
            ret.append(repr(self.devid))
            ret.append(',\n    globalworkgrpsz : ')
            ret.append(repr(self.globalworkgrpsz))
            ret.append(',\n    num_el : ')
            ret.append(repr(self.num_el))
            ret.append(',\n    eulerconvention : ')
            ret.append(repr(self.eulerconvention))
            ret.append(',\n    anglefile : ')
            ret.append(repr(self.anglefile))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.localOSMNameListType")
    class localOSMNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=localosmnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 679-684
        
        """
        def __init__(self, handle=None):
            """
            self = Localosmnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 679-684
            
            
            Returns
            -------
            this : Localosmnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for localosmnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_localosmnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Localosmnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 679-684
            
            Parameters
            ----------
            this : Localosmnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for localosmnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_localosmnamelisttype_finalise(this=self._handle)
        
        @property
        def numnm(self):
            """
            Element numnm ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 680
            
            """
            return _pyEMsoft.f90wrap_localosmnamelisttype__get__numnm(self._handle)
        
        @numnm.setter
        def numnm(self, numnm):
            _pyEMsoft.f90wrap_localosmnamelisttype__set__numnm(self._handle, numnm)
        
        @property
        def dpfile(self):
            """
            Element dpfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 681
            
            """
            return _pyEMsoft.f90wrap_localosmnamelisttype__get__dpfile(self._handle)
        
        @dpfile.setter
        def dpfile(self, dpfile):
            _pyEMsoft.f90wrap_localosmnamelisttype__set__dpfile(self._handle, dpfile)
        
        @property
        def outfile(self):
            """
            Element outfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 682
            
            """
            return _pyEMsoft.f90wrap_localosmnamelisttype__get__outfile(self._handle)
        
        @outfile.setter
        def outfile(self, outfile):
            _pyEMsoft.f90wrap_localosmnamelisttype__set__outfile(self._handle, outfile)
        
        @property
        def tracemapfile(self):
            """
            Element tracemapfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 683
            
            """
            return _pyEMsoft.f90wrap_localosmnamelisttype__get__tracemapfile(self._handle)
        
        @tracemapfile.setter
        def tracemapfile(self, tracemapfile):
            _pyEMsoft.f90wrap_localosmnamelisttype__set__tracemapfile(self._handle, \
                tracemapfile)
        
        @property
        def determinantmapfile(self):
            """
            Element determinantmapfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 684
            
            """
            return \
                _pyEMsoft.f90wrap_localosmnamelisttype__get__determinantmapfile(self._handle)
        
        @determinantmapfile.setter
        def determinantmapfile(self, determinantmapfile):
            _pyEMsoft.f90wrap_localosmnamelisttype__set__determinantmapfile(self._handle, \
                determinantmapfile)
        
        def __str__(self):
            ret = ['<localosmnamelisttype>{\n']
            ret.append('    numnm : ')
            ret.append(repr(self.numnm))
            ret.append(',\n    dpfile : ')
            ret.append(repr(self.dpfile))
            ret.append(',\n    outfile : ')
            ret.append(repr(self.outfile))
            ret.append(',\n    tracemapfile : ')
            ret.append(repr(self.tracemapfile))
            ret.append(',\n    determinantmapfile : ')
            ret.append(repr(self.determinantmapfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.TKDNameListType")
    class TKDNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=tkdnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 689-752
        
        """
        def __init__(self, handle=None):
            """
            self = Tkdnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 689-752
            
            
            Returns
            -------
            this : Tkdnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for tkdnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_tkdnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Tkdnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 689-752
            
            Parameters
            ----------
            this : Tkdnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for tkdnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_tkdnamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 690
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 691
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__numsx(self._handle, numsx)
        
        @property
        def numsy(self):
            """
            Element numsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 692
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__numsy(self._handle)
        
        @numsy.setter
        def numsy(self, numsy):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__numsy(self._handle, numsy)
        
        @property
        def binning(self):
            """
            Element binning ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 693
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__binning(self._handle)
        
        @binning.setter
        def binning(self, binning):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__binning(self._handle, binning)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 694
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def energyaverage(self):
            """
            Element energyaverage ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 695
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__energyaverage(self._handle)
        
        @energyaverage.setter
        def energyaverage(self, energyaverage):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__energyaverage(self._handle, \
                energyaverage)
        
        @property
        def l(self):
            """
            Element l ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 696
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__l(self._handle)
        
        @l.setter
        def l(self, l):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__l(self._handle, l)
        
        @property
        def thetac(self):
            """
            Element thetac ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 697
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__thetac(self._handle)
        
        @thetac.setter
        def thetac(self, thetac):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__thetac(self._handle, thetac)
        
        @property
        def delta(self):
            """
            Element delta ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 698
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__delta(self._handle)
        
        @delta.setter
        def delta(self, delta):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__delta(self._handle, delta)
        
        @property
        def omega(self):
            """
            Element omega ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 699
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__omega(self._handle)
        
        @omega.setter
        def omega(self, omega):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__omega(self._handle, omega)
        
        @property
        def xpc(self):
            """
            Element xpc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 700
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__xpc(self._handle)
        
        @xpc.setter
        def xpc(self, xpc):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__xpc(self._handle, xpc)
        
        @property
        def ypc(self):
            """
            Element ypc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 701
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__ypc(self._handle)
        
        @ypc.setter
        def ypc(self, ypc):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__ypc(self._handle, ypc)
        
        @property
        def energymin(self):
            """
            Element energymin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 702
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__energymin(self._handle)
        
        @energymin.setter
        def energymin(self, energymin):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__energymin(self._handle, energymin)
        
        @property
        def energymax(self):
            """
            Element energymax ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 703
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__energymax(self._handle)
        
        @energymax.setter
        def energymax(self, energymax):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__energymax(self._handle, energymax)
        
        @property
        def gammavalue(self):
            """
            Element gammavalue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 704
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__gammavalue(self._handle)
        
        @gammavalue.setter
        def gammavalue(self, gammavalue):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__gammavalue(self._handle, gammavalue)
        
        @property
        def axisangle(self):
            """
            Element axisangle ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 705
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tkdnamelisttype__array__axisangle(self._handle)
            if array_handle in self._arrays:
                axisangle = self._arrays[array_handle]
            else:
                axisangle = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tkdnamelisttype__array__axisangle)
                self._arrays[array_handle] = axisangle
            return axisangle
        
        @axisangle.setter
        def axisangle(self, axisangle):
            self.axisangle[...] = axisangle
        
        @property
        def alphabd(self):
            """
            Element alphabd ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 706
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__alphabd(self._handle)
        
        @alphabd.setter
        def alphabd(self, alphabd):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__alphabd(self._handle, alphabd)
        
        @property
        def beamcurrent(self):
            """
            Element beamcurrent ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 707
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__beamcurrent(self._handle)
        
        @beamcurrent.setter
        def beamcurrent(self, beamcurrent):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__beamcurrent(self._handle, beamcurrent)
        
        @property
        def dwelltime(self):
            """
            Element dwelltime ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 708
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__dwelltime(self._handle)
        
        @dwelltime.setter
        def dwelltime(self, dwelltime):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__dwelltime(self._handle, dwelltime)
        
        @property
        def maskpattern(self):
            """
            Element maskpattern ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 709
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__maskpattern(self._handle)
        
        @maskpattern.setter
        def maskpattern(self, maskpattern):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__maskpattern(self._handle, maskpattern)
        
        @property
        def scalingmode(self):
            """
            Element scalingmode ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 710
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__scalingmode(self._handle)
        
        @scalingmode.setter
        def scalingmode(self, scalingmode):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__scalingmode(self._handle, scalingmode)
        
        @property
        def eulerconvention(self):
            """
            Element eulerconvention ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 711
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__eulerconvention(self._handle)
        
        @eulerconvention.setter
        def eulerconvention(self, eulerconvention):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__eulerconvention(self._handle, \
                eulerconvention)
        
        @property
        def outputformat(self):
            """
            Element outputformat ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 712
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__outputformat(self._handle)
        
        @outputformat.setter
        def outputformat(self, outputformat):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__outputformat(self._handle, outputformat)
        
        @property
        def spatialaverage(self):
            """
            Element spatialaverage ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 713
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__spatialaverage(self._handle)
        
        @spatialaverage.setter
        def spatialaverage(self, spatialaverage):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__spatialaverage(self._handle, \
                spatialaverage)
        
        @property
        def anglefile(self):
            """
            Element anglefile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 714
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__anglefile(self._handle)
        
        @anglefile.setter
        def anglefile(self, anglefile):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__anglefile(self._handle, anglefile)
        
        @property
        def masterfile(self):
            """
            Element masterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 715
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__masterfile(self._handle)
        
        @masterfile.setter
        def masterfile(self, masterfile):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__masterfile(self._handle, masterfile)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 716
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__energyfile(self._handle, energyfile)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 717
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__datafile(self._handle, datafile)
        
        @property
        def numangles(self):
            """
            Element numangles ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 719
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__numangles(self._handle)
        
        @numangles.setter
        def numangles(self, numangles):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__numangles(self._handle, numangles)
        
        @property
        def numebins(self):
            """
            Element numebins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 720
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__numebins(self._handle)
        
        @numebins.setter
        def numebins(self, numebins):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__numebins(self._handle, numebins)
        
        @property
        def numzbins(self):
            """
            Element numzbins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 721
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__numzbins(self._handle)
        
        @numzbins.setter
        def numzbins(self, numzbins):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__numzbins(self._handle, numzbins)
        
        @property
        def nsx(self):
            """
            Element nsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 722
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__nsx(self._handle)
        
        @nsx.setter
        def nsx(self, nsx):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__nsx(self._handle, nsx)
        
        @property
        def nsy(self):
            """
            Element nsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 723
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__nsy(self._handle)
        
        @nsy.setter
        def nsy(self, nsy):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__nsy(self._handle, nsy)
        
        @property
        def num_el(self):
            """
            Element num_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 724
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__num_el(self._handle)
        
        @num_el.setter
        def num_el(self, num_el):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__num_el(self._handle, num_el)
        
        @property
        def mcnthreads(self):
            """
            Element mcnthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 725
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__mcnthreads(self._handle)
        
        @mcnthreads.setter
        def mcnthreads(self, mcnthreads):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__mcnthreads(self._handle, mcnthreads)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 726
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__npx(self._handle, npx)
        
        @property
        def npy(self):
            """
            Element npy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 727
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__npy(self._handle)
        
        @npy.setter
        def npy(self, npy):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__npy(self._handle, npy)
        
        @property
        def ne(self):
            """
            Element ne ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 728
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__ne(self._handle)
        
        @ne.setter
        def ne(self, ne):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__ne(self._handle, ne)
        
        @property
        def numset(self):
            """
            Element numset ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 729
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__numset(self._handle)
        
        @numset.setter
        def numset(self, numset):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__numset(self._handle, numset)
        
        @property
        def ekev(self):
            """
            Element ekev ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 730
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__ekev(self._handle)
        
        @ekev.setter
        def ekev(self, ekev):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__ekev(self._handle, ekev)
        
        @property
        def ehistmin(self):
            """
            Element ehistmin ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 731
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__ehistmin(self._handle)
        
        @ehistmin.setter
        def ehistmin(self, ehistmin):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__ehistmin(self._handle, ehistmin)
        
        @property
        def ebinsize(self):
            """
            Element ebinsize ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 732
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__ebinsize(self._handle)
        
        @ebinsize.setter
        def ebinsize(self, ebinsize):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__ebinsize(self._handle, ebinsize)
        
        @property
        def depthmax(self):
            """
            Element depthmax ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 733
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__depthmax(self._handle)
        
        @depthmax.setter
        def depthmax(self, depthmax):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__depthmax(self._handle, depthmax)
        
        @property
        def depthstep(self):
            """
            Element depthstep ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 734
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__depthstep(self._handle)
        
        @depthstep.setter
        def depthstep(self, depthstep):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__depthstep(self._handle, depthstep)
        
        @property
        def mcsig(self):
            """
            Element mcsig ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 735
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__mcsig(self._handle)
        
        @mcsig.setter
        def mcsig(self, mcsig):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__mcsig(self._handle, mcsig)
        
        @property
        def mcomega(self):
            """
            Element mcomega ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 736
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__mcomega(self._handle)
        
        @mcomega.setter
        def mcomega(self, mcomega):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__mcomega(self._handle, mcomega)
        
        @property
        def mcmode(self):
            """
            Element mcmode ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 737
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__mcmode(self._handle)
        
        @mcmode.setter
        def mcmode(self, mcmode):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__mcmode(self._handle, mcmode)
        
        @property
        def anglemode(self):
            """
            Element anglemode ftype=character(5) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 738
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__anglemode(self._handle)
        
        @anglemode.setter
        def anglemode(self, anglemode):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__anglemode(self._handle, anglemode)
        
        @property
        def sqorhe(self):
            """
            Element sqorhe ftype=character(6) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 739
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__sqorhe(self._handle)
        
        @sqorhe.setter
        def sqorhe(self, sqorhe):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__sqorhe(self._handle, sqorhe)
        
        @property
        def mcscversion(self):
            """
            Element mcscversion ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 740
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__mcscversion(self._handle)
        
        @mcscversion.setter
        def mcscversion(self, mcscversion):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__mcscversion(self._handle, mcscversion)
        
        @property
        def masterscversion(self):
            """
            Element masterscversion ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 741
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__masterscversion(self._handle)
        
        @masterscversion.setter
        def masterscversion(self, masterscversion):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__masterscversion(self._handle, \
                masterscversion)
        
        @property
        def masterprogname(self):
            """
            Element masterprogname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 742
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__masterprogname(self._handle)
        
        @masterprogname.setter
        def masterprogname(self, masterprogname):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__masterprogname(self._handle, \
                masterprogname)
        
        @property
        def masterxtalname(self):
            """
            Element masterxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 743
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__masterxtalname(self._handle)
        
        @masterxtalname.setter
        def masterxtalname(self, masterxtalname):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__masterxtalname(self._handle, \
                masterxtalname)
        
        @property
        def masterenergyfile(self):
            """
            Element masterenergyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 744
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__masterenergyfile(self._handle)
        
        @masterenergyfile.setter
        def masterenergyfile(self, masterenergyfile):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__masterenergyfile(self._handle, \
                masterenergyfile)
        
        @property
        def mcprogname(self):
            """
            Element mcprogname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 745
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__mcprogname(self._handle)
        
        @mcprogname.setter
        def mcprogname(self, mcprogname):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__mcprogname(self._handle, mcprogname)
        
        @property
        def mcxtalname(self):
            """
            Element mcxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 746
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__mcxtalname(self._handle)
        
        @mcxtalname.setter
        def mcxtalname(self, mcxtalname):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__mcxtalname(self._handle, mcxtalname)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 747
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def totnum_el(self):
            """
            Element totnum_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 748
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__totnum_el(self._handle)
        
        @totnum_el.setter
        def totnum_el(self, totnum_el):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__totnum_el(self._handle, totnum_el)
        
        @property
        def platid(self):
            """
            Element platid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 749
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__platid(self._handle)
        
        @platid.setter
        def platid(self, platid):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__platid(self._handle, platid)
        
        @property
        def devid(self):
            """
            Element devid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 750
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__devid(self._handle)
        
        @devid.setter
        def devid(self, devid):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__devid(self._handle, devid)
        
        @property
        def globalworkgrpsz(self):
            """
            Element globalworkgrpsz ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 751
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__globalworkgrpsz(self._handle)
        
        @globalworkgrpsz.setter
        def globalworkgrpsz(self, globalworkgrpsz):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__globalworkgrpsz(self._handle, \
                globalworkgrpsz)
        
        @property
        def multiplier(self):
            """
            Element multiplier ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 752
            
            """
            return _pyEMsoft.f90wrap_tkdnamelisttype__get__multiplier(self._handle)
        
        @multiplier.setter
        def multiplier(self, multiplier):
            _pyEMsoft.f90wrap_tkdnamelisttype__set__multiplier(self._handle, multiplier)
        
        def __str__(self):
            ret = ['<tkdnamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    numsy : ')
            ret.append(repr(self.numsy))
            ret.append(',\n    binning : ')
            ret.append(repr(self.binning))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    energyaverage : ')
            ret.append(repr(self.energyaverage))
            ret.append(',\n    l : ')
            ret.append(repr(self.l))
            ret.append(',\n    thetac : ')
            ret.append(repr(self.thetac))
            ret.append(',\n    delta : ')
            ret.append(repr(self.delta))
            ret.append(',\n    omega : ')
            ret.append(repr(self.omega))
            ret.append(',\n    xpc : ')
            ret.append(repr(self.xpc))
            ret.append(',\n    ypc : ')
            ret.append(repr(self.ypc))
            ret.append(',\n    energymin : ')
            ret.append(repr(self.energymin))
            ret.append(',\n    energymax : ')
            ret.append(repr(self.energymax))
            ret.append(',\n    gammavalue : ')
            ret.append(repr(self.gammavalue))
            ret.append(',\n    axisangle : ')
            ret.append(repr(self.axisangle))
            ret.append(',\n    alphabd : ')
            ret.append(repr(self.alphabd))
            ret.append(',\n    beamcurrent : ')
            ret.append(repr(self.beamcurrent))
            ret.append(',\n    dwelltime : ')
            ret.append(repr(self.dwelltime))
            ret.append(',\n    maskpattern : ')
            ret.append(repr(self.maskpattern))
            ret.append(',\n    scalingmode : ')
            ret.append(repr(self.scalingmode))
            ret.append(',\n    eulerconvention : ')
            ret.append(repr(self.eulerconvention))
            ret.append(',\n    outputformat : ')
            ret.append(repr(self.outputformat))
            ret.append(',\n    spatialaverage : ')
            ret.append(repr(self.spatialaverage))
            ret.append(',\n    anglefile : ')
            ret.append(repr(self.anglefile))
            ret.append(',\n    masterfile : ')
            ret.append(repr(self.masterfile))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    numangles : ')
            ret.append(repr(self.numangles))
            ret.append(',\n    numebins : ')
            ret.append(repr(self.numebins))
            ret.append(',\n    numzbins : ')
            ret.append(repr(self.numzbins))
            ret.append(',\n    nsx : ')
            ret.append(repr(self.nsx))
            ret.append(',\n    nsy : ')
            ret.append(repr(self.nsy))
            ret.append(',\n    num_el : ')
            ret.append(repr(self.num_el))
            ret.append(',\n    mcnthreads : ')
            ret.append(repr(self.mcnthreads))
            ret.append(',\n    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    npy : ')
            ret.append(repr(self.npy))
            ret.append(',\n    ne : ')
            ret.append(repr(self.ne))
            ret.append(',\n    numset : ')
            ret.append(repr(self.numset))
            ret.append(',\n    ekev : ')
            ret.append(repr(self.ekev))
            ret.append(',\n    ehistmin : ')
            ret.append(repr(self.ehistmin))
            ret.append(',\n    ebinsize : ')
            ret.append(repr(self.ebinsize))
            ret.append(',\n    depthmax : ')
            ret.append(repr(self.depthmax))
            ret.append(',\n    depthstep : ')
            ret.append(repr(self.depthstep))
            ret.append(',\n    mcsig : ')
            ret.append(repr(self.mcsig))
            ret.append(',\n    mcomega : ')
            ret.append(repr(self.mcomega))
            ret.append(',\n    mcmode : ')
            ret.append(repr(self.mcmode))
            ret.append(',\n    anglemode : ')
            ret.append(repr(self.anglemode))
            ret.append(',\n    sqorhe : ')
            ret.append(repr(self.sqorhe))
            ret.append(',\n    mcscversion : ')
            ret.append(repr(self.mcscversion))
            ret.append(',\n    masterscversion : ')
            ret.append(repr(self.masterscversion))
            ret.append(',\n    masterprogname : ')
            ret.append(repr(self.masterprogname))
            ret.append(',\n    masterxtalname : ')
            ret.append(repr(self.masterxtalname))
            ret.append(',\n    masterenergyfile : ')
            ret.append(repr(self.masterenergyfile))
            ret.append(',\n    mcprogname : ')
            ret.append(repr(self.mcprogname))
            ret.append(',\n    mcxtalname : ')
            ret.append(repr(self.mcxtalname))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    totnum_el : ')
            ret.append(repr(self.totnum_el))
            ret.append(',\n    platid : ')
            ret.append(repr(self.platid))
            ret.append(',\n    devid : ')
            ret.append(repr(self.devid))
            ret.append(',\n    globalworkgrpsz : ')
            ret.append(repr(self.globalworkgrpsz))
            ret.append(',\n    multiplier : ')
            ret.append(repr(self.multiplier))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDoverlapNameListType")
    class EBSDoverlapNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdoverlapnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 757-798
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdoverlapnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 757-798
            
            
            Returns
            -------
            this : Ebsdoverlapnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdoverlapnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdoverlapnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdoverlapnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 757-798
            
            Parameters
            ----------
            this : Ebsdoverlapnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdoverlapnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 758
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def newpgnum(self):
            """
            Element newpgnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 759
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__newpgnum(self._handle)
        
        @newpgnum.setter
        def newpgnum(self, newpgnum):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__newpgnum(self._handle, newpgnum)
        
        @property
        def patternaxisa(self):
            """
            Element patternaxisa ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 760
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__patternaxisa(self._handle)
            if array_handle in self._arrays:
                patternaxisa = self._arrays[array_handle]
            else:
                patternaxisa = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__patternaxisa)
                self._arrays[array_handle] = patternaxisa
            return patternaxisa
        
        @patternaxisa.setter
        def patternaxisa(self, patternaxisa):
            self.patternaxisa[...] = patternaxisa
        
        @property
        def horizontalaxisa(self):
            """
            Element horizontalaxisa ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 761
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__horizontalaxisa(self._handle)
            if array_handle in self._arrays:
                horizontalaxisa = self._arrays[array_handle]
            else:
                horizontalaxisa = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__horizontalaxisa)
                self._arrays[array_handle] = horizontalaxisa
            return horizontalaxisa
        
        @horizontalaxisa.setter
        def horizontalaxisa(self, horizontalaxisa):
            self.horizontalaxisa[...] = horizontalaxisa
        
        @property
        def ta(self):
            """
            Element ta ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 762
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__ta(self._handle)
            if array_handle in self._arrays:
                ta = self._arrays[array_handle]
            else:
                ta = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__ta)
                self._arrays[array_handle] = ta
            return ta
        
        @ta.setter
        def ta(self, ta):
            self.ta[...] = ta
        
        @property
        def tb(self):
            """
            Element tb ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 763
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__tb(self._handle)
            if array_handle in self._arrays:
                tb = self._arrays[array_handle]
            else:
                tb = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__tb)
                self._arrays[array_handle] = tb
            return tb
        
        @tb.setter
        def tb(self, tb):
            self.tb[...] = tb
        
        @property
        def ta2(self):
            """
            Element ta2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 764
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__ta2(self._handle)
            if array_handle in self._arrays:
                ta2 = self._arrays[array_handle]
            else:
                ta2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__ta2)
                self._arrays[array_handle] = ta2
            return ta2
        
        @ta2.setter
        def ta2(self, ta2):
            self.ta2[...] = ta2
        
        @property
        def tc(self):
            """
            Element tc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 765
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__tc(self._handle)
            if array_handle in self._arrays:
                tc = self._arrays[array_handle]
            else:
                tc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__tc)
                self._arrays[array_handle] = tc
            return tc
        
        @tc.setter
        def tc(self, tc):
            self.tc[...] = tc
        
        @property
        def ta3(self):
            """
            Element ta3 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 766
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__ta3(self._handle)
            if array_handle in self._arrays:
                ta3 = self._arrays[array_handle]
            else:
                ta3 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__ta3)
                self._arrays[array_handle] = ta3
            return ta3
        
        @ta3.setter
        def ta3(self, ta3):
            self.ta3[...] = ta3
        
        @property
        def td(self):
            """
            Element td ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 767
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__td(self._handle)
            if array_handle in self._arrays:
                td = self._arrays[array_handle]
            else:
                td = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__td)
                self._arrays[array_handle] = td
            return td
        
        @td.setter
        def td(self, td):
            self.td[...] = td
        
        @property
        def ga(self):
            """
            Element ga ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 768
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__ga(self._handle)
            if array_handle in self._arrays:
                ga = self._arrays[array_handle]
            else:
                ga = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__ga)
                self._arrays[array_handle] = ga
            return ga
        
        @ga.setter
        def ga(self, ga):
            self.ga[...] = ga
        
        @property
        def gb(self):
            """
            Element gb ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 769
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__gb(self._handle)
            if array_handle in self._arrays:
                gb = self._arrays[array_handle]
            else:
                gb = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__gb)
                self._arrays[array_handle] = gb
            return gb
        
        @gb.setter
        def gb(self, gb):
            self.gb[...] = gb
        
        @property
        def ga2(self):
            """
            Element ga2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 770
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__ga2(self._handle)
            if array_handle in self._arrays:
                ga2 = self._arrays[array_handle]
            else:
                ga2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__ga2)
                self._arrays[array_handle] = ga2
            return ga2
        
        @ga2.setter
        def ga2(self, ga2):
            self.ga2[...] = ga2
        
        @property
        def gc(self):
            """
            Element gc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 771
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__gc(self._handle)
            if array_handle in self._arrays:
                gc = self._arrays[array_handle]
            else:
                gc = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__gc)
                self._arrays[array_handle] = gc
            return gc
        
        @gc.setter
        def gc(self, gc):
            self.gc[...] = gc
        
        @property
        def ga3(self):
            """
            Element ga3 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 772
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__ga3(self._handle)
            if array_handle in self._arrays:
                ga3 = self._arrays[array_handle]
            else:
                ga3 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__ga3)
                self._arrays[array_handle] = ga3
            return ga3
        
        @ga3.setter
        def ga3(self, ga3):
            self.ga3[...] = ga3
        
        @property
        def gd(self):
            """
            Element gd ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 773
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__gd(self._handle)
            if array_handle in self._arrays:
                gd = self._arrays[array_handle]
            else:
                gd = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__array__gd)
                self._arrays[array_handle] = gd
            return gd
        
        @gd.setter
        def gd(self, gd):
            self.gd[...] = gd
        
        @property
        def fracb(self):
            """
            Element fracb ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 774
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__fracb(self._handle)
        
        @fracb.setter
        def fracb(self, fracb):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__fracb(self._handle, fracb)
        
        @property
        def fracc(self):
            """
            Element fracc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 775
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__fracc(self._handle)
        
        @fracc.setter
        def fracc(self, fracc):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__fracc(self._handle, fracc)
        
        @property
        def fracd(self):
            """
            Element fracd ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 776
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__fracd(self._handle)
        
        @fracd.setter
        def fracd(self, fracd):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__fracd(self._handle, fracd)
        
        @property
        def masterfilea(self):
            """
            Element masterfilea ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 777
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__masterfilea(self._handle)
        
        @masterfilea.setter
        def masterfilea(self, masterfilea):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__masterfilea(self._handle, \
                masterfilea)
        
        @property
        def masterfileb(self):
            """
            Element masterfileb ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 778
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__masterfileb(self._handle)
        
        @masterfileb.setter
        def masterfileb(self, masterfileb):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__masterfileb(self._handle, \
                masterfileb)
        
        @property
        def masterfilec(self):
            """
            Element masterfilec ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 779
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__masterfilec(self._handle)
        
        @masterfilec.setter
        def masterfilec(self, masterfilec):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__masterfilec(self._handle, \
                masterfilec)
        
        @property
        def masterfiled(self):
            """
            Element masterfiled ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 780
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__masterfiled(self._handle)
        
        @masterfiled.setter
        def masterfiled(self, masterfiled):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__masterfiled(self._handle, \
                masterfiled)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 781
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__datafile(self._handle, datafile)
        
        @property
        def h5copypath(self):
            """
            Element h5copypath ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 782
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__h5copypath(self._handle)
        
        @h5copypath.setter
        def h5copypath(self, h5copypath):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__h5copypath(self._handle, \
                h5copypath)
        
        @property
        def overlapmode(self):
            """
            Element overlapmode ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 783
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__overlapmode(self._handle)
        
        @overlapmode.setter
        def overlapmode(self, overlapmode):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__overlapmode(self._handle, \
                overlapmode)
        
        @property
        def numset(self):
            """
            Element numset ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 785
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__numset(self._handle)
        
        @numset.setter
        def numset(self, numset):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__numset(self._handle, numset)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 786
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__npx(self._handle, npx)
        
        @property
        def npy(self):
            """
            Element npy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 787
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__npy(self._handle)
        
        @npy.setter
        def npy(self, npy):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__npy(self._handle, npy)
        
        @property
        def ne(self):
            """
            Element ne ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 788
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__ne(self._handle)
        
        @ne.setter
        def ne(self, ne):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__ne(self._handle, ne)
        
        @property
        def sqorhe(self):
            """
            Element sqorhe ftype=character(6) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 789
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__sqorhe(self._handle)
        
        @sqorhe.setter
        def sqorhe(self, sqorhe):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__sqorhe(self._handle, sqorhe)
        
        @property
        def masterscversion(self):
            """
            Element masterscversion ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 790
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__masterscversion(self._handle)
        
        @masterscversion.setter
        def masterscversion(self, masterscversion):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__masterscversion(self._handle, \
                masterscversion)
        
        @property
        def masterprogname(self):
            """
            Element masterprogname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 791
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__masterprogname(self._handle)
        
        @masterprogname.setter
        def masterprogname(self, masterprogname):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__masterprogname(self._handle, \
                masterprogname)
        
        @property
        def masterfile(self):
            """
            Element masterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 792
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__masterfile(self._handle)
        
        @masterfile.setter
        def masterfile(self, masterfile):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__masterfile(self._handle, \
                masterfile)
        
        @property
        def masterxtalname(self):
            """
            Element masterxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 793
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__masterxtalname(self._handle)
        
        @masterxtalname.setter
        def masterxtalname(self, masterxtalname):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__masterxtalname(self._handle, \
                masterxtalname)
        
        @property
        def xtalnamea(self):
            """
            Element xtalnamea ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 794
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__xtalnamea(self._handle)
        
        @xtalnamea.setter
        def xtalnamea(self, xtalnamea):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__xtalnamea(self._handle, \
                xtalnamea)
        
        @property
        def xtalnameb(self):
            """
            Element xtalnameb ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 795
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__xtalnameb(self._handle)
        
        @xtalnameb.setter
        def xtalnameb(self, xtalnameb):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__xtalnameb(self._handle, \
                xtalnameb)
        
        @property
        def xtalnamec(self):
            """
            Element xtalnamec ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 796
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__xtalnamec(self._handle)
        
        @xtalnamec.setter
        def xtalnamec(self, xtalnamec):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__xtalnamec(self._handle, \
                xtalnamec)
        
        @property
        def xtalnamed(self):
            """
            Element xtalnamed ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 797
            
            """
            return _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__xtalnamed(self._handle)
        
        @xtalnamed.setter
        def xtalnamed(self, xtalnamed):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__xtalnamed(self._handle, \
                xtalnamed)
        
        @property
        def masterenergyfile(self):
            """
            Element masterenergyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 798
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__get__masterenergyfile(self._handle)
        
        @masterenergyfile.setter
        def masterenergyfile(self, masterenergyfile):
            _pyEMsoft.f90wrap_ebsdoverlapnamelisttype__set__masterenergyfile(self._handle, \
                masterenergyfile)
        
        def __str__(self):
            ret = ['<ebsdoverlapnamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    newpgnum : ')
            ret.append(repr(self.newpgnum))
            ret.append(',\n    patternaxisa : ')
            ret.append(repr(self.patternaxisa))
            ret.append(',\n    horizontalaxisa : ')
            ret.append(repr(self.horizontalaxisa))
            ret.append(',\n    ta : ')
            ret.append(repr(self.ta))
            ret.append(',\n    tb : ')
            ret.append(repr(self.tb))
            ret.append(',\n    ta2 : ')
            ret.append(repr(self.ta2))
            ret.append(',\n    tc : ')
            ret.append(repr(self.tc))
            ret.append(',\n    ta3 : ')
            ret.append(repr(self.ta3))
            ret.append(',\n    td : ')
            ret.append(repr(self.td))
            ret.append(',\n    ga : ')
            ret.append(repr(self.ga))
            ret.append(',\n    gb : ')
            ret.append(repr(self.gb))
            ret.append(',\n    ga2 : ')
            ret.append(repr(self.ga2))
            ret.append(',\n    gc : ')
            ret.append(repr(self.gc))
            ret.append(',\n    ga3 : ')
            ret.append(repr(self.ga3))
            ret.append(',\n    gd : ')
            ret.append(repr(self.gd))
            ret.append(',\n    fracb : ')
            ret.append(repr(self.fracb))
            ret.append(',\n    fracc : ')
            ret.append(repr(self.fracc))
            ret.append(',\n    fracd : ')
            ret.append(repr(self.fracd))
            ret.append(',\n    masterfilea : ')
            ret.append(repr(self.masterfilea))
            ret.append(',\n    masterfileb : ')
            ret.append(repr(self.masterfileb))
            ret.append(',\n    masterfilec : ')
            ret.append(repr(self.masterfilec))
            ret.append(',\n    masterfiled : ')
            ret.append(repr(self.masterfiled))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    h5copypath : ')
            ret.append(repr(self.h5copypath))
            ret.append(',\n    overlapmode : ')
            ret.append(repr(self.overlapmode))
            ret.append(',\n    numset : ')
            ret.append(repr(self.numset))
            ret.append(',\n    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    npy : ')
            ret.append(repr(self.npy))
            ret.append(',\n    ne : ')
            ret.append(repr(self.ne))
            ret.append(',\n    sqorhe : ')
            ret.append(repr(self.sqorhe))
            ret.append(',\n    masterscversion : ')
            ret.append(repr(self.masterscversion))
            ret.append(',\n    masterprogname : ')
            ret.append(repr(self.masterprogname))
            ret.append(',\n    masterfile : ')
            ret.append(repr(self.masterfile))
            ret.append(',\n    masterxtalname : ')
            ret.append(repr(self.masterxtalname))
            ret.append(',\n    xtalnamea : ')
            ret.append(repr(self.xtalnamea))
            ret.append(',\n    xtalnameb : ')
            ret.append(repr(self.xtalnameb))
            ret.append(',\n    xtalnamec : ')
            ret.append(repr(self.xtalnamec))
            ret.append(',\n    xtalnamed : ')
            ret.append(repr(self.xtalnamed))
            ret.append(',\n    masterenergyfile : ')
            ret.append(repr(self.masterenergyfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.TKDoverlapNameListType")
    class TKDoverlapNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=tkdoverlapnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 803-827
        
        """
        def __init__(self, handle=None):
            """
            self = Tkdoverlapnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 803-827
            
            
            Returns
            -------
            this : Tkdoverlapnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for tkdoverlapnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_tkdoverlapnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Tkdoverlapnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 803-827
            
            Parameters
            ----------
            this : Tkdoverlapnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for tkdoverlapnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_tkdoverlapnamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 804
            
            """
            return _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def patternaxisa(self):
            """
            Element patternaxisa ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 805
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tkdoverlapnamelisttype__array__patternaxisa(self._handle)
            if array_handle in self._arrays:
                patternaxisa = self._arrays[array_handle]
            else:
                patternaxisa = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tkdoverlapnamelisttype__array__patternaxisa)
                self._arrays[array_handle] = patternaxisa
            return patternaxisa
        
        @patternaxisa.setter
        def patternaxisa(self, patternaxisa):
            self.patternaxisa[...] = patternaxisa
        
        @property
        def horizontalaxisa(self):
            """
            Element horizontalaxisa ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 806
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tkdoverlapnamelisttype__array__horizontalaxisa(self._handle)
            if array_handle in self._arrays:
                horizontalaxisa = self._arrays[array_handle]
            else:
                horizontalaxisa = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tkdoverlapnamelisttype__array__horizontalaxisa)
                self._arrays[array_handle] = horizontalaxisa
            return horizontalaxisa
        
        @horizontalaxisa.setter
        def horizontalaxisa(self, horizontalaxisa):
            self.horizontalaxisa[...] = horizontalaxisa
        
        @property
        def ta(self):
            """
            Element ta ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 807
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tkdoverlapnamelisttype__array__ta(self._handle)
            if array_handle in self._arrays:
                ta = self._arrays[array_handle]
            else:
                ta = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tkdoverlapnamelisttype__array__ta)
                self._arrays[array_handle] = ta
            return ta
        
        @ta.setter
        def ta(self, ta):
            self.ta[...] = ta
        
        @property
        def tb(self):
            """
            Element tb ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 808
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tkdoverlapnamelisttype__array__tb(self._handle)
            if array_handle in self._arrays:
                tb = self._arrays[array_handle]
            else:
                tb = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tkdoverlapnamelisttype__array__tb)
                self._arrays[array_handle] = tb
            return tb
        
        @tb.setter
        def tb(self, tb):
            self.tb[...] = tb
        
        @property
        def ga(self):
            """
            Element ga ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 809
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tkdoverlapnamelisttype__array__ga(self._handle)
            if array_handle in self._arrays:
                ga = self._arrays[array_handle]
            else:
                ga = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tkdoverlapnamelisttype__array__ga)
                self._arrays[array_handle] = ga
            return ga
        
        @ga.setter
        def ga(self, ga):
            self.ga[...] = ga
        
        @property
        def gb(self):
            """
            Element gb ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 810
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tkdoverlapnamelisttype__array__gb(self._handle)
            if array_handle in self._arrays:
                gb = self._arrays[array_handle]
            else:
                gb = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tkdoverlapnamelisttype__array__gb)
                self._arrays[array_handle] = gb
            return gb
        
        @gb.setter
        def gb(self, gb):
            self.gb[...] = gb
        
        @property
        def fraca(self):
            """
            Element fraca ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 811
            
            """
            return _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__fraca(self._handle)
        
        @fraca.setter
        def fraca(self, fraca):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__fraca(self._handle, fraca)
        
        @property
        def masterfilea(self):
            """
            Element masterfilea ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 812
            
            """
            return _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__masterfilea(self._handle)
        
        @masterfilea.setter
        def masterfilea(self, masterfilea):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__masterfilea(self._handle, \
                masterfilea)
        
        @property
        def masterfileb(self):
            """
            Element masterfileb ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 813
            
            """
            return _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__masterfileb(self._handle)
        
        @masterfileb.setter
        def masterfileb(self, masterfileb):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__masterfileb(self._handle, \
                masterfileb)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 814
            
            """
            return _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__datafile(self._handle, datafile)
        
        @property
        def numset(self):
            """
            Element numset ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 816
            
            """
            return _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__numset(self._handle)
        
        @numset.setter
        def numset(self, numset):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__numset(self._handle, numset)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 817
            
            """
            return _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__npx(self._handle, npx)
        
        @property
        def npy(self):
            """
            Element npy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 818
            
            """
            return _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__npy(self._handle)
        
        @npy.setter
        def npy(self, npy):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__npy(self._handle, npy)
        
        @property
        def ne(self):
            """
            Element ne ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 819
            
            """
            return _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__ne(self._handle)
        
        @ne.setter
        def ne(self, ne):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__ne(self._handle, ne)
        
        @property
        def sqorhe(self):
            """
            Element sqorhe ftype=character(6) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 820
            
            """
            return _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__sqorhe(self._handle)
        
        @sqorhe.setter
        def sqorhe(self, sqorhe):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__sqorhe(self._handle, sqorhe)
        
        @property
        def masterscversion(self):
            """
            Element masterscversion ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 821
            
            """
            return \
                _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__masterscversion(self._handle)
        
        @masterscversion.setter
        def masterscversion(self, masterscversion):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__masterscversion(self._handle, \
                masterscversion)
        
        @property
        def masterprogname(self):
            """
            Element masterprogname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 822
            
            """
            return \
                _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__masterprogname(self._handle)
        
        @masterprogname.setter
        def masterprogname(self, masterprogname):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__masterprogname(self._handle, \
                masterprogname)
        
        @property
        def masterfile(self):
            """
            Element masterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 823
            
            """
            return _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__masterfile(self._handle)
        
        @masterfile.setter
        def masterfile(self, masterfile):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__masterfile(self._handle, \
                masterfile)
        
        @property
        def masterxtalname(self):
            """
            Element masterxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 824
            
            """
            return \
                _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__masterxtalname(self._handle)
        
        @masterxtalname.setter
        def masterxtalname(self, masterxtalname):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__masterxtalname(self._handle, \
                masterxtalname)
        
        @property
        def xtalnamea(self):
            """
            Element xtalnamea ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 825
            
            """
            return _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__xtalnamea(self._handle)
        
        @xtalnamea.setter
        def xtalnamea(self, xtalnamea):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__xtalnamea(self._handle, \
                xtalnamea)
        
        @property
        def xtalnameb(self):
            """
            Element xtalnameb ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 826
            
            """
            return _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__xtalnameb(self._handle)
        
        @xtalnameb.setter
        def xtalnameb(self, xtalnameb):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__xtalnameb(self._handle, \
                xtalnameb)
        
        @property
        def masterenergyfile(self):
            """
            Element masterenergyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 827
            
            """
            return \
                _pyEMsoft.f90wrap_tkdoverlapnamelisttype__get__masterenergyfile(self._handle)
        
        @masterenergyfile.setter
        def masterenergyfile(self, masterenergyfile):
            _pyEMsoft.f90wrap_tkdoverlapnamelisttype__set__masterenergyfile(self._handle, \
                masterenergyfile)
        
        def __str__(self):
            ret = ['<tkdoverlapnamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    patternaxisa : ')
            ret.append(repr(self.patternaxisa))
            ret.append(',\n    horizontalaxisa : ')
            ret.append(repr(self.horizontalaxisa))
            ret.append(',\n    ta : ')
            ret.append(repr(self.ta))
            ret.append(',\n    tb : ')
            ret.append(repr(self.tb))
            ret.append(',\n    ga : ')
            ret.append(repr(self.ga))
            ret.append(',\n    gb : ')
            ret.append(repr(self.gb))
            ret.append(',\n    fraca : ')
            ret.append(repr(self.fraca))
            ret.append(',\n    masterfilea : ')
            ret.append(repr(self.masterfilea))
            ret.append(',\n    masterfileb : ')
            ret.append(repr(self.masterfileb))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    numset : ')
            ret.append(repr(self.numset))
            ret.append(',\n    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    npy : ')
            ret.append(repr(self.npy))
            ret.append(',\n    ne : ')
            ret.append(repr(self.ne))
            ret.append(',\n    sqorhe : ')
            ret.append(repr(self.sqorhe))
            ret.append(',\n    masterscversion : ')
            ret.append(repr(self.masterscversion))
            ret.append(',\n    masterprogname : ')
            ret.append(repr(self.masterprogname))
            ret.append(',\n    masterfile : ')
            ret.append(repr(self.masterfile))
            ret.append(',\n    masterxtalname : ')
            ret.append(repr(self.masterxtalname))
            ret.append(',\n    xtalnamea : ')
            ret.append(repr(self.xtalnamea))
            ret.append(',\n    xtalnameb : ')
            ret.append(repr(self.xtalnameb))
            ret.append(',\n    masterenergyfile : ')
            ret.append(repr(self.masterenergyfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.TKDspotsNameListType")
    class TKDspotsNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=tkdspotsnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 830-847
        
        """
        def __init__(self, handle=None):
            """
            self = Tkdspotsnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 830-847
            
            
            Returns
            -------
            this : Tkdspotsnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for tkdspotsnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_tkdspotsnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Tkdspotsnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 830-847
            
            Parameters
            ----------
            this : Tkdspotsnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for tkdspotsnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_tkdspotsnamelisttype_finalise(this=self._handle)
        
        @property
        def ncubochoric(self):
            """
            Element ncubochoric ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 831
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__ncubochoric(self._handle)
        
        @ncubochoric.setter
        def ncubochoric(self, ncubochoric):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__ncubochoric(self._handle, \
                ncubochoric)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 832
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 833
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__numsx(self._handle, numsx)
        
        @property
        def numsy(self):
            """
            Element numsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 834
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__numsy(self._handle)
        
        @numsy.setter
        def numsy(self, numsy):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__numsy(self._handle, numsy)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 835
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 836
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def thickness(self):
            """
            Element thickness ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 837
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__thickness(self._handle)
        
        @thickness.setter
        def thickness(self, thickness):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__thickness(self._handle, thickness)
        
        @property
        def l(self):
            """
            Element l ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 838
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__l(self._handle)
        
        @l.setter
        def l(self, l):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__l(self._handle, l)
        
        @property
        def thetac(self):
            """
            Element thetac ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 839
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__thetac(self._handle)
        
        @thetac.setter
        def thetac(self, thetac):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__thetac(self._handle, thetac)
        
        @property
        def delta(self):
            """
            Element delta ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 840
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__delta(self._handle)
        
        @delta.setter
        def delta(self, delta):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__delta(self._handle, delta)
        
        @property
        def sig(self):
            """
            Element sig ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 841
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__sig(self._handle)
        
        @sig.setter
        def sig(self, sig):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__sig(self._handle, sig)
        
        @property
        def omega(self):
            """
            Element omega ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 842
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__omega(self._handle)
        
        @omega.setter
        def omega(self, omega):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__omega(self._handle, omega)
        
        @property
        def xpc(self):
            """
            Element xpc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 843
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__xpc(self._handle)
        
        @xpc.setter
        def xpc(self, xpc):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__xpc(self._handle, xpc)
        
        @property
        def ypc(self):
            """
            Element ypc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 844
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__ypc(self._handle)
        
        @ypc.setter
        def ypc(self, ypc):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__ypc(self._handle, ypc)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 845
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 846
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__outname(self._handle, outname)
        
        @property
        def eulerfile(self):
            """
            Element eulerfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 847
            
            """
            return _pyEMsoft.f90wrap_tkdspotsnamelisttype__get__eulerfile(self._handle)
        
        @eulerfile.setter
        def eulerfile(self, eulerfile):
            _pyEMsoft.f90wrap_tkdspotsnamelisttype__set__eulerfile(self._handle, eulerfile)
        
        def __str__(self):
            ret = ['<tkdspotsnamelisttype>{\n']
            ret.append('    ncubochoric : ')
            ret.append(repr(self.ncubochoric))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    numsy : ')
            ret.append(repr(self.numsy))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    thickness : ')
            ret.append(repr(self.thickness))
            ret.append(',\n    l : ')
            ret.append(repr(self.l))
            ret.append(',\n    thetac : ')
            ret.append(repr(self.thetac))
            ret.append(',\n    delta : ')
            ret.append(repr(self.delta))
            ret.append(',\n    sig : ')
            ret.append(repr(self.sig))
            ret.append(',\n    omega : ')
            ret.append(repr(self.omega))
            ret.append(',\n    xpc : ')
            ret.append(repr(self.xpc))
            ret.append(',\n    ypc : ')
            ret.append(repr(self.ypc))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append(',\n    eulerfile : ')
            ret.append(repr(self.eulerfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDclusterNameListType")
    class EBSDclusterNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdclusternamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 850-858
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdclusternamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 850-858
            
            
            Returns
            -------
            this : Ebsdclusternamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdclusternamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdclusternamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdclusternamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 850-858
            
            Parameters
            ----------
            this : Ebsdclusternamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdclusternamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdclusternamelisttype_finalise(this=self._handle)
        
        @property
        def nclusters(self):
            """
            Element nclusters ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 851
            
            """
            return _pyEMsoft.f90wrap_ebsdclusternamelisttype__get__nclusters(self._handle)
        
        @nclusters.setter
        def nclusters(self, nclusters):
            _pyEMsoft.f90wrap_ebsdclusternamelisttype__set__nclusters(self._handle, \
                nclusters)
        
        @property
        def niterations(self):
            """
            Element niterations ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 852
            
            """
            return _pyEMsoft.f90wrap_ebsdclusternamelisttype__get__niterations(self._handle)
        
        @niterations.setter
        def niterations(self, niterations):
            _pyEMsoft.f90wrap_ebsdclusternamelisttype__set__niterations(self._handle, \
                niterations)
        
        @property
        def nscancolumns(self):
            """
            Element nscancolumns ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 853
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdclusternamelisttype__get__nscancolumns(self._handle)
        
        @nscancolumns.setter
        def nscancolumns(self, nscancolumns):
            _pyEMsoft.f90wrap_ebsdclusternamelisttype__set__nscancolumns(self._handle, \
                nscancolumns)
        
        @property
        def nscanrows(self):
            """
            Element nscanrows ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 854
            
            """
            return _pyEMsoft.f90wrap_ebsdclusternamelisttype__get__nscanrows(self._handle)
        
        @nscanrows.setter
        def nscanrows(self, nscanrows):
            _pyEMsoft.f90wrap_ebsdclusternamelisttype__set__nscanrows(self._handle, \
                nscanrows)
        
        @property
        def binfactor(self):
            """
            Element binfactor ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 855
            
            """
            return _pyEMsoft.f90wrap_ebsdclusternamelisttype__get__binfactor(self._handle)
        
        @binfactor.setter
        def binfactor(self, binfactor):
            _pyEMsoft.f90wrap_ebsdclusternamelisttype__set__binfactor(self._handle, \
                binfactor)
        
        @property
        def inputfilename(self):
            """
            Element inputfilename ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 856
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdclusternamelisttype__get__inputfilename(self._handle)
        
        @inputfilename.setter
        def inputfilename(self, inputfilename):
            _pyEMsoft.f90wrap_ebsdclusternamelisttype__set__inputfilename(self._handle, \
                inputfilename)
        
        @property
        def groupname(self):
            """
            Element groupname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 857
            
            """
            return _pyEMsoft.f90wrap_ebsdclusternamelisttype__get__groupname(self._handle)
        
        @groupname.setter
        def groupname(self, groupname):
            _pyEMsoft.f90wrap_ebsdclusternamelisttype__set__groupname(self._handle, \
                groupname)
        
        @property
        def datasetname(self):
            """
            Element datasetname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 858
            
            """
            return _pyEMsoft.f90wrap_ebsdclusternamelisttype__get__datasetname(self._handle)
        
        @datasetname.setter
        def datasetname(self, datasetname):
            _pyEMsoft.f90wrap_ebsdclusternamelisttype__set__datasetname(self._handle, \
                datasetname)
        
        def __str__(self):
            ret = ['<ebsdclusternamelisttype>{\n']
            ret.append('    nclusters : ')
            ret.append(repr(self.nclusters))
            ret.append(',\n    niterations : ')
            ret.append(repr(self.niterations))
            ret.append(',\n    nscancolumns : ')
            ret.append(repr(self.nscancolumns))
            ret.append(',\n    nscanrows : ')
            ret.append(repr(self.nscanrows))
            ret.append(',\n    binfactor : ')
            ret.append(repr(self.binfactor))
            ret.append(',\n    inputfilename : ')
            ret.append(repr(self.inputfilename))
            ret.append(',\n    groupname : ')
            ret.append(repr(self.groupname))
            ret.append(',\n    datasetname : ')
            ret.append(repr(self.datasetname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.ECPNameListType")
    class ECPNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ecpnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 861-923
        
        """
        def __init__(self, handle=None):
            """
            self = Ecpnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 861-923
            
            
            Returns
            -------
            this : Ecpnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ecpnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ecpnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ecpnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 861-923
            
            Parameters
            ----------
            this : Ecpnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ecpnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ecpnamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 862
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def fn_f(self):
            """
            Element fn_f ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 863
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ecpnamelisttype__array__fn_f(self._handle)
            if array_handle in self._arrays:
                fn_f = self._arrays[array_handle]
            else:
                fn_f = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ecpnamelisttype__array__fn_f)
                self._arrays[array_handle] = fn_f
            return fn_f
        
        @fn_f.setter
        def fn_f(self, fn_f):
            self.fn_f[...] = fn_f
        
        @property
        def fn_s(self):
            """
            Element fn_s ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 864
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ecpnamelisttype__array__fn_s(self._handle)
            if array_handle in self._arrays:
                fn_s = self._arrays[array_handle]
            else:
                fn_s = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ecpnamelisttype__array__fn_s)
                self._arrays[array_handle] = fn_s
            return fn_s
        
        @fn_s.setter
        def fn_s(self, fn_s):
            self.fn_s[...] = fn_s
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 865
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 866
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__npix(self._handle, npix)
        
        @property
        def gf(self):
            """
            Element gf ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 867
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ecpnamelisttype__array__gf(self._handle)
            if array_handle in self._arrays:
                gf = self._arrays[array_handle]
            else:
                gf = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ecpnamelisttype__array__gf)
                self._arrays[array_handle] = gf
            return gf
        
        @gf.setter
        def gf(self, gf):
            self.gf[...] = gf
        
        @property
        def gs(self):
            """
            Element gs ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 868
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ecpnamelisttype__array__gs(self._handle)
            if array_handle in self._arrays:
                gs = self._arrays[array_handle]
            else:
                gs = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ecpnamelisttype__array__gs)
                self._arrays[array_handle] = gs
            return gs
        
        @gs.setter
        def gs(self, gs):
            self.gs[...] = gs
        
        @property
        def tf(self):
            """
            Element tf ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 869
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ecpnamelisttype__array__tf(self._handle)
            if array_handle in self._arrays:
                tf = self._arrays[array_handle]
            else:
                tf = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ecpnamelisttype__array__tf)
                self._arrays[array_handle] = tf
            return tf
        
        @tf.setter
        def tf(self, tf):
            self.tf[...] = tf
        
        @property
        def ts(self):
            """
            Element ts ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 870
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ecpnamelisttype__array__ts(self._handle)
            if array_handle in self._arrays:
                ts = self._arrays[array_handle]
            else:
                ts = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ecpnamelisttype__array__ts)
                self._arrays[array_handle] = ts
            return ts
        
        @ts.setter
        def ts(self, ts):
            self.ts[...] = ts
        
        @property
        def thetac(self):
            """
            Element thetac ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 871
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__thetac(self._handle)
        
        @thetac.setter
        def thetac(self, thetac):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__thetac(self._handle, thetac)
        
        @property
        def filmthickness(self):
            """
            Element filmthickness ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 872
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__filmthickness(self._handle)
        
        @filmthickness.setter
        def filmthickness(self, filmthickness):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__filmthickness(self._handle, \
                filmthickness)
        
        @property
        def maskpattern(self):
            """
            Element maskpattern ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 873
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__maskpattern(self._handle)
        
        @maskpattern.setter
        def maskpattern(self, maskpattern):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__maskpattern(self._handle, maskpattern)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 874
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def xtalname2(self):
            """
            Element xtalname2 ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 875
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__xtalname2(self._handle)
        
        @xtalname2.setter
        def xtalname2(self, xtalname2):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__xtalname2(self._handle, xtalname2)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 876
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__energyfile(self._handle, energyfile)
        
        @property
        def filmfile(self):
            """
            Element filmfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 877
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__filmfile(self._handle)
        
        @filmfile.setter
        def filmfile(self, filmfile):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__filmfile(self._handle, filmfile)
        
        @property
        def subsfile(self):
            """
            Element subsfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 878
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__subsfile(self._handle)
        
        @subsfile.setter
        def subsfile(self, subsfile):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__subsfile(self._handle, subsfile)
        
        @property
        def masterfile(self):
            """
            Element masterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 879
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__masterfile(self._handle)
        
        @masterfile.setter
        def masterfile(self, masterfile):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__masterfile(self._handle, masterfile)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 880
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__datafile(self._handle, datafile)
        
        @property
        def anglefile(self):
            """
            Element anglefile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 881
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__anglefile(self._handle)
        
        @anglefile.setter
        def anglefile(self, anglefile):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__anglefile(self._handle, anglefile)
        
        @property
        def eulerconvention(self):
            """
            Element eulerconvention ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 882
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__eulerconvention(self._handle)
        
        @eulerconvention.setter
        def eulerconvention(self, eulerconvention):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__eulerconvention(self._handle, \
                eulerconvention)
        
        @property
        def gammavalue(self):
            """
            Element gammavalue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 883
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__gammavalue(self._handle)
        
        @gammavalue.setter
        def gammavalue(self, gammavalue):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__gammavalue(self._handle, gammavalue)
        
        @property
        def outputformat(self):
            """
            Element outputformat ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 884
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__outputformat(self._handle)
        
        @outputformat.setter
        def outputformat(self, outputformat):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__outputformat(self._handle, outputformat)
        
        @property
        def sampletilt(self):
            """
            Element sampletilt ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 885
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__sampletilt(self._handle)
        
        @sampletilt.setter
        def sampletilt(self, sampletilt):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__sampletilt(self._handle, sampletilt)
        
        @property
        def workingdistance(self):
            """
            Element workingdistance ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 886
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__workingdistance(self._handle)
        
        @workingdistance.setter
        def workingdistance(self, workingdistance):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__workingdistance(self._handle, \
                workingdistance)
        
        @property
        def rin(self):
            """
            Element rin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 887
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__rin(self._handle)
        
        @rin.setter
        def rin(self, rin):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__rin(self._handle, rin)
        
        @property
        def rout(self):
            """
            Element rout ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 888
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__rout(self._handle)
        
        @rout.setter
        def rout(self, rout):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__rout(self._handle, rout)
        
        @property
        def numangle(self):
            """
            Element numangle ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 890
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__numangle(self._handle)
        
        @numangle.setter
        def numangle(self, numangle):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__numangle(self._handle, numangle)
        
        @property
        def numangle_anglefile(self):
            """
            Element numangle_anglefile ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 891
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__numangle_anglefile(self._handle)
        
        @numangle_anglefile.setter
        def numangle_anglefile(self, numangle_anglefile):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__numangle_anglefile(self._handle, \
                numangle_anglefile)
        
        @property
        def numebins(self):
            """
            Element numebins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 892
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__numebins(self._handle)
        
        @numebins.setter
        def numebins(self, numebins):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__numebins(self._handle, numebins)
        
        @property
        def numzbins(self):
            """
            Element numzbins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 893
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__numzbins(self._handle)
        
        @numzbins.setter
        def numzbins(self, numzbins):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__numzbins(self._handle, numzbins)
        
        @property
        def nsx(self):
            """
            Element nsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 894
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__nsx(self._handle)
        
        @nsx.setter
        def nsx(self, nsx):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__nsx(self._handle, nsx)
        
        @property
        def nsy(self):
            """
            Element nsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 895
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__nsy(self._handle)
        
        @nsy.setter
        def nsy(self, nsy):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__nsy(self._handle, nsy)
        
        @property
        def num_el(self):
            """
            Element num_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 896
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__num_el(self._handle)
        
        @num_el.setter
        def num_el(self, num_el):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__num_el(self._handle, num_el)
        
        @property
        def mcnthreads(self):
            """
            Element mcnthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 897
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__mcnthreads(self._handle)
        
        @mcnthreads.setter
        def mcnthreads(self, mcnthreads):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__mcnthreads(self._handle, mcnthreads)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 898
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__npx(self._handle, npx)
        
        @property
        def npy(self):
            """
            Element npy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 899
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__npy(self._handle)
        
        @npy.setter
        def npy(self, npy):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__npy(self._handle, npy)
        
        @property
        def ne(self):
            """
            Element ne ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 900
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__ne(self._handle)
        
        @ne.setter
        def ne(self, ne):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__ne(self._handle, ne)
        
        @property
        def numset(self):
            """
            Element numset ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 901
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__numset(self._handle)
        
        @numset.setter
        def numset(self, numset):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__numset(self._handle, numset)
        
        @property
        def npolar(self):
            """
            Element npolar ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 902
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__npolar(self._handle)
        
        @npolar.setter
        def npolar(self, npolar):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__npolar(self._handle, npolar)
        
        @property
        def nazimuth(self):
            """
            Element nazimuth ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 903
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__nazimuth(self._handle)
        
        @nazimuth.setter
        def nazimuth(self, nazimuth):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__nazimuth(self._handle, nazimuth)
        
        @property
        def ekev(self):
            """
            Element ekev ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 904
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__ekev(self._handle)
        
        @ekev.setter
        def ekev(self, ekev):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__ekev(self._handle, ekev)
        
        @property
        def ehistmin(self):
            """
            Element ehistmin ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 905
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__ehistmin(self._handle)
        
        @ehistmin.setter
        def ehistmin(self, ehistmin):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__ehistmin(self._handle, ehistmin)
        
        @property
        def ebinsize(self):
            """
            Element ebinsize ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 906
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__ebinsize(self._handle)
        
        @ebinsize.setter
        def ebinsize(self, ebinsize):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__ebinsize(self._handle, ebinsize)
        
        @property
        def depthmax(self):
            """
            Element depthmax ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 907
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__depthmax(self._handle)
        
        @depthmax.setter
        def depthmax(self, depthmax):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__depthmax(self._handle, depthmax)
        
        @property
        def depthstep(self):
            """
            Element depthstep ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 908
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__depthstep(self._handle)
        
        @depthstep.setter
        def depthstep(self, depthstep):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__depthstep(self._handle, depthstep)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 909
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def mcsigstart(self):
            """
            Element mcsigstart ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 910
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__mcsigstart(self._handle)
        
        @mcsigstart.setter
        def mcsigstart(self, mcsigstart):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__mcsigstart(self._handle, mcsigstart)
        
        @property
        def mcsigend(self):
            """
            Element mcsigend ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 911
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__mcsigend(self._handle)
        
        @mcsigend.setter
        def mcsigend(self, mcsigend):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__mcsigend(self._handle, mcsigend)
        
        @property
        def mcsigstep(self):
            """
            Element mcsigstep ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 912
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__mcsigstep(self._handle)
        
        @mcsigstep.setter
        def mcsigstep(self, mcsigstep):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__mcsigstep(self._handle, mcsigstep)
        
        @property
        def mcomega(self):
            """
            Element mcomega ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 913
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__mcomega(self._handle)
        
        @mcomega.setter
        def mcomega(self, mcomega):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__mcomega(self._handle, mcomega)
        
        @property
        def mcmode(self):
            """
            Element mcmode ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 914
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__mcmode(self._handle)
        
        @mcmode.setter
        def mcmode(self, mcmode):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__mcmode(self._handle, mcmode)
        
        @property
        def anglemode(self):
            """
            Element anglemode ftype=character(5) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 915
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__anglemode(self._handle)
        
        @anglemode.setter
        def anglemode(self, anglemode):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__anglemode(self._handle, anglemode)
        
        @property
        def sqorhe(self):
            """
            Element sqorhe ftype=character(6) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 916
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__sqorhe(self._handle)
        
        @sqorhe.setter
        def sqorhe(self, sqorhe):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__sqorhe(self._handle, sqorhe)
        
        @property
        def mcscversion(self):
            """
            Element mcscversion ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 917
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__mcscversion(self._handle)
        
        @mcscversion.setter
        def mcscversion(self, mcscversion):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__mcscversion(self._handle, mcscversion)
        
        @property
        def masterscversion(self):
            """
            Element masterscversion ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 918
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__masterscversion(self._handle)
        
        @masterscversion.setter
        def masterscversion(self, masterscversion):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__masterscversion(self._handle, \
                masterscversion)
        
        @property
        def masterprogname(self):
            """
            Element masterprogname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 919
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__masterprogname(self._handle)
        
        @masterprogname.setter
        def masterprogname(self, masterprogname):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__masterprogname(self._handle, \
                masterprogname)
        
        @property
        def masterxtalname(self):
            """
            Element masterxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 920
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__masterxtalname(self._handle)
        
        @masterxtalname.setter
        def masterxtalname(self, masterxtalname):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__masterxtalname(self._handle, \
                masterxtalname)
        
        @property
        def masterenergyfile(self):
            """
            Element masterenergyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 921
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__masterenergyfile(self._handle)
        
        @masterenergyfile.setter
        def masterenergyfile(self, masterenergyfile):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__masterenergyfile(self._handle, \
                masterenergyfile)
        
        @property
        def mcprogname(self):
            """
            Element mcprogname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 922
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__mcprogname(self._handle)
        
        @mcprogname.setter
        def mcprogname(self, mcprogname):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__mcprogname(self._handle, mcprogname)
        
        @property
        def mcxtalname(self):
            """
            Element mcxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 923
            
            """
            return _pyEMsoft.f90wrap_ecpnamelisttype__get__mcxtalname(self._handle)
        
        @mcxtalname.setter
        def mcxtalname(self, mcxtalname):
            _pyEMsoft.f90wrap_ecpnamelisttype__set__mcxtalname(self._handle, mcxtalname)
        
        def __str__(self):
            ret = ['<ecpnamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    fn_f : ')
            ret.append(repr(self.fn_f))
            ret.append(',\n    fn_s : ')
            ret.append(repr(self.fn_s))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    gf : ')
            ret.append(repr(self.gf))
            ret.append(',\n    gs : ')
            ret.append(repr(self.gs))
            ret.append(',\n    tf : ')
            ret.append(repr(self.tf))
            ret.append(',\n    ts : ')
            ret.append(repr(self.ts))
            ret.append(',\n    thetac : ')
            ret.append(repr(self.thetac))
            ret.append(',\n    filmthickness : ')
            ret.append(repr(self.filmthickness))
            ret.append(',\n    maskpattern : ')
            ret.append(repr(self.maskpattern))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    xtalname2 : ')
            ret.append(repr(self.xtalname2))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append(',\n    filmfile : ')
            ret.append(repr(self.filmfile))
            ret.append(',\n    subsfile : ')
            ret.append(repr(self.subsfile))
            ret.append(',\n    masterfile : ')
            ret.append(repr(self.masterfile))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    anglefile : ')
            ret.append(repr(self.anglefile))
            ret.append(',\n    eulerconvention : ')
            ret.append(repr(self.eulerconvention))
            ret.append(',\n    gammavalue : ')
            ret.append(repr(self.gammavalue))
            ret.append(',\n    outputformat : ')
            ret.append(repr(self.outputformat))
            ret.append(',\n    sampletilt : ')
            ret.append(repr(self.sampletilt))
            ret.append(',\n    workingdistance : ')
            ret.append(repr(self.workingdistance))
            ret.append(',\n    rin : ')
            ret.append(repr(self.rin))
            ret.append(',\n    rout : ')
            ret.append(repr(self.rout))
            ret.append(',\n    numangle : ')
            ret.append(repr(self.numangle))
            ret.append(',\n    numangle_anglefile : ')
            ret.append(repr(self.numangle_anglefile))
            ret.append(',\n    numebins : ')
            ret.append(repr(self.numebins))
            ret.append(',\n    numzbins : ')
            ret.append(repr(self.numzbins))
            ret.append(',\n    nsx : ')
            ret.append(repr(self.nsx))
            ret.append(',\n    nsy : ')
            ret.append(repr(self.nsy))
            ret.append(',\n    num_el : ')
            ret.append(repr(self.num_el))
            ret.append(',\n    mcnthreads : ')
            ret.append(repr(self.mcnthreads))
            ret.append(',\n    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    npy : ')
            ret.append(repr(self.npy))
            ret.append(',\n    ne : ')
            ret.append(repr(self.ne))
            ret.append(',\n    numset : ')
            ret.append(repr(self.numset))
            ret.append(',\n    npolar : ')
            ret.append(repr(self.npolar))
            ret.append(',\n    nazimuth : ')
            ret.append(repr(self.nazimuth))
            ret.append(',\n    ekev : ')
            ret.append(repr(self.ekev))
            ret.append(',\n    ehistmin : ')
            ret.append(repr(self.ehistmin))
            ret.append(',\n    ebinsize : ')
            ret.append(repr(self.ebinsize))
            ret.append(',\n    depthmax : ')
            ret.append(repr(self.depthmax))
            ret.append(',\n    depthstep : ')
            ret.append(repr(self.depthstep))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    mcsigstart : ')
            ret.append(repr(self.mcsigstart))
            ret.append(',\n    mcsigend : ')
            ret.append(repr(self.mcsigend))
            ret.append(',\n    mcsigstep : ')
            ret.append(repr(self.mcsigstep))
            ret.append(',\n    mcomega : ')
            ret.append(repr(self.mcomega))
            ret.append(',\n    mcmode : ')
            ret.append(repr(self.mcmode))
            ret.append(',\n    anglemode : ')
            ret.append(repr(self.anglemode))
            ret.append(',\n    sqorhe : ')
            ret.append(repr(self.sqorhe))
            ret.append(',\n    mcscversion : ')
            ret.append(repr(self.mcscversion))
            ret.append(',\n    masterscversion : ')
            ret.append(repr(self.masterscversion))
            ret.append(',\n    masterprogname : ')
            ret.append(repr(self.masterprogname))
            ret.append(',\n    masterxtalname : ')
            ret.append(repr(self.masterxtalname))
            ret.append(',\n    masterenergyfile : ')
            ret.append(repr(self.masterenergyfile))
            ret.append(',\n    mcprogname : ')
            ret.append(repr(self.mcprogname))
            ret.append(',\n    mcxtalname : ')
            ret.append(repr(self.mcxtalname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.CBEDNameListType")
    class CBEDNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=cbednamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 926-940
        
        """
        def __init__(self, handle=None):
            """
            self = Cbednamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 926-940
            
            
            Returns
            -------
            this : Cbednamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for cbednamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_cbednamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Cbednamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 926-940
            
            Parameters
            ----------
            this : Cbednamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for cbednamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_cbednamelisttype_finalise(this=self._handle)
        
        @property
        def maxholz(self):
            """
            Element maxholz ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 927
            
            """
            return _pyEMsoft.f90wrap_cbednamelisttype__get__maxholz(self._handle)
        
        @maxholz.setter
        def maxholz(self, maxholz):
            _pyEMsoft.f90wrap_cbednamelisttype__set__maxholz(self._handle, maxholz)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 928
            
            """
            return _pyEMsoft.f90wrap_cbednamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_cbednamelisttype__set__npix(self._handle, npix)
        
        @property
        def numthick(self):
            """
            Element numthick ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 929
            
            """
            return _pyEMsoft.f90wrap_cbednamelisttype__get__numthick(self._handle)
        
        @numthick.setter
        def numthick(self, numthick):
            _pyEMsoft.f90wrap_cbednamelisttype__set__numthick(self._handle, numthick)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 930
            
            """
            return _pyEMsoft.f90wrap_cbednamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_cbednamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def k(self):
            """
            Element k ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 931
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_cbednamelisttype__array__k(self._handle)
            if array_handle in self._arrays:
                k = self._arrays[array_handle]
            else:
                k = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_cbednamelisttype__array__k)
                self._arrays[array_handle] = k
            return k
        
        @k.setter
        def k(self, k):
            self.k[...] = k
        
        @property
        def fn(self):
            """
            Element fn ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 932
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_cbednamelisttype__array__fn(self._handle)
            if array_handle in self._arrays:
                fn = self._arrays[array_handle]
            else:
                fn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_cbednamelisttype__array__fn)
                self._arrays[array_handle] = fn
            return fn
        
        @fn.setter
        def fn(self, fn):
            self.fn[...] = fn
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 933
            
            """
            return _pyEMsoft.f90wrap_cbednamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_cbednamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def lauec(self):
            """
            Element lauec ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 934
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_cbednamelisttype__array__lauec(self._handle)
            if array_handle in self._arrays:
                lauec = self._arrays[array_handle]
            else:
                lauec = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_cbednamelisttype__array__lauec)
                self._arrays[array_handle] = lauec
            return lauec
        
        @lauec.setter
        def lauec(self, lauec):
            self.lauec[...] = lauec
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 935
            
            """
            return _pyEMsoft.f90wrap_cbednamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_cbednamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def convergence(self):
            """
            Element convergence ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 936
            
            """
            return _pyEMsoft.f90wrap_cbednamelisttype__get__convergence(self._handle)
        
        @convergence.setter
        def convergence(self, convergence):
            _pyEMsoft.f90wrap_cbednamelisttype__set__convergence(self._handle, convergence)
        
        @property
        def startthick(self):
            """
            Element startthick ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 937
            
            """
            return _pyEMsoft.f90wrap_cbednamelisttype__get__startthick(self._handle)
        
        @startthick.setter
        def startthick(self, startthick):
            _pyEMsoft.f90wrap_cbednamelisttype__set__startthick(self._handle, startthick)
        
        @property
        def thickinc(self):
            """
            Element thickinc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 938
            
            """
            return _pyEMsoft.f90wrap_cbednamelisttype__get__thickinc(self._handle)
        
        @thickinc.setter
        def thickinc(self, thickinc):
            _pyEMsoft.f90wrap_cbednamelisttype__set__thickinc(self._handle, thickinc)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 939
            
            """
            return _pyEMsoft.f90wrap_cbednamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_cbednamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 940
            
            """
            return _pyEMsoft.f90wrap_cbednamelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_cbednamelisttype__set__outname(self._handle, outname)
        
        def __str__(self):
            ret = ['<cbednamelisttype>{\n']
            ret.append('    maxholz : ')
            ret.append(repr(self.maxholz))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    numthick : ')
            ret.append(repr(self.numthick))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    k : ')
            ret.append(repr(self.k))
            ret.append(',\n    fn : ')
            ret.append(repr(self.fn))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    lauec : ')
            ret.append(repr(self.lauec))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    convergence : ')
            ret.append(repr(self.convergence))
            ret.append(',\n    startthick : ')
            ret.append(repr(self.startthick))
            ret.append(',\n    thickinc : ')
            ret.append(repr(self.thickinc))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.LACBEDNameListType")
    class LACBEDNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=lacbednamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 943-957
        
        """
        def __init__(self, handle=None):
            """
            self = Lacbednamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 943-957
            
            
            Returns
            -------
            this : Lacbednamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for lacbednamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_lacbednamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Lacbednamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 943-957
            
            Parameters
            ----------
            this : Lacbednamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for lacbednamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_lacbednamelisttype_finalise(this=self._handle)
        
        @property
        def k(self):
            """
            Element k ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 944
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_lacbednamelisttype__array__k(self._handle)
            if array_handle in self._arrays:
                k = self._arrays[array_handle]
            else:
                k = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_lacbednamelisttype__array__k)
                self._arrays[array_handle] = k
            return k
        
        @k.setter
        def k(self, k):
            self.k[...] = k
        
        @property
        def fn(self):
            """
            Element fn ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 945
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_lacbednamelisttype__array__fn(self._handle)
            if array_handle in self._arrays:
                fn = self._arrays[array_handle]
            else:
                fn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_lacbednamelisttype__array__fn)
                self._arrays[array_handle] = fn
            return fn
        
        @fn.setter
        def fn(self, fn):
            self.fn[...] = fn
        
        @property
        def maxholz(self):
            """
            Element maxholz ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 946
            
            """
            return _pyEMsoft.f90wrap_lacbednamelisttype__get__maxholz(self._handle)
        
        @maxholz.setter
        def maxholz(self, maxholz):
            _pyEMsoft.f90wrap_lacbednamelisttype__set__maxholz(self._handle, maxholz)
        
        @property
        def numthick(self):
            """
            Element numthick ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 947
            
            """
            return _pyEMsoft.f90wrap_lacbednamelisttype__get__numthick(self._handle)
        
        @numthick.setter
        def numthick(self, numthick):
            _pyEMsoft.f90wrap_lacbednamelisttype__set__numthick(self._handle, numthick)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 948
            
            """
            return _pyEMsoft.f90wrap_lacbednamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_lacbednamelisttype__set__npix(self._handle, npix)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 949
            
            """
            return _pyEMsoft.f90wrap_lacbednamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_lacbednamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 950
            
            """
            return _pyEMsoft.f90wrap_lacbednamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_lacbednamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 951
            
            """
            return _pyEMsoft.f90wrap_lacbednamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_lacbednamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def convergence(self):
            """
            Element convergence ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 952
            
            """
            return _pyEMsoft.f90wrap_lacbednamelisttype__get__convergence(self._handle)
        
        @convergence.setter
        def convergence(self, convergence):
            _pyEMsoft.f90wrap_lacbednamelisttype__set__convergence(self._handle, \
                convergence)
        
        @property
        def startthick(self):
            """
            Element startthick ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 953
            
            """
            return _pyEMsoft.f90wrap_lacbednamelisttype__get__startthick(self._handle)
        
        @startthick.setter
        def startthick(self, startthick):
            _pyEMsoft.f90wrap_lacbednamelisttype__set__startthick(self._handle, startthick)
        
        @property
        def thickinc(self):
            """
            Element thickinc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 954
            
            """
            return _pyEMsoft.f90wrap_lacbednamelisttype__get__thickinc(self._handle)
        
        @thickinc.setter
        def thickinc(self, thickinc):
            _pyEMsoft.f90wrap_lacbednamelisttype__set__thickinc(self._handle, thickinc)
        
        @property
        def minten(self):
            """
            Element minten ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 955
            
            """
            return _pyEMsoft.f90wrap_lacbednamelisttype__get__minten(self._handle)
        
        @minten.setter
        def minten(self, minten):
            _pyEMsoft.f90wrap_lacbednamelisttype__set__minten(self._handle, minten)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 956
            
            """
            return _pyEMsoft.f90wrap_lacbednamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_lacbednamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 957
            
            """
            return _pyEMsoft.f90wrap_lacbednamelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_lacbednamelisttype__set__outname(self._handle, outname)
        
        def __str__(self):
            ret = ['<lacbednamelisttype>{\n']
            ret.append('    k : ')
            ret.append(repr(self.k))
            ret.append(',\n    fn : ')
            ret.append(repr(self.fn))
            ret.append(',\n    maxholz : ')
            ret.append(repr(self.maxholz))
            ret.append(',\n    numthick : ')
            ret.append(repr(self.numthick))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    convergence : ')
            ret.append(repr(self.convergence))
            ret.append(',\n    startthick : ')
            ret.append(repr(self.startthick))
            ret.append(',\n    thickinc : ')
            ret.append(repr(self.thickinc))
            ret.append(',\n    minten : ')
            ret.append(repr(self.minten))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.ECPMasterNameListType")
    class ECPMasterNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ecpmasternamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 960-971
        
        """
        def __init__(self, handle=None):
            """
            self = Ecpmasternamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 960-971
            
            
            Returns
            -------
            this : Ecpmasternamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ecpmasternamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ecpmasternamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ecpmasternamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 960-971
            
            Parameters
            ----------
            this : Ecpmasternamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ecpmasternamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ecpmasternamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 961
            
            """
            return _pyEMsoft.f90wrap_ecpmasternamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_ecpmasternamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 962
            
            """
            return _pyEMsoft.f90wrap_ecpmasternamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_ecpmasternamelisttype__set__npx(self._handle, npx)
        
        @property
        def esel(self):
            """
            Element esel ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 963
            
            """
            return _pyEMsoft.f90wrap_ecpmasternamelisttype__get__esel(self._handle)
        
        @esel.setter
        def esel(self, esel):
            _pyEMsoft.f90wrap_ecpmasternamelisttype__set__esel(self._handle, esel)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 964
            
            """
            return _pyEMsoft.f90wrap_ecpmasternamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ecpmasternamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 965
            
            """
            return _pyEMsoft.f90wrap_ecpmasternamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_ecpmasternamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def notify(self):
            """
            Element notify ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 966
            
            """
            return _pyEMsoft.f90wrap_ecpmasternamelisttype__get__notify(self._handle)
        
        @notify.setter
        def notify(self, notify):
            _pyEMsoft.f90wrap_ecpmasternamelisttype__set__notify(self._handle, notify)
        
        @property
        def compmode(self):
            """
            Element compmode ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 967
            
            """
            return _pyEMsoft.f90wrap_ecpmasternamelisttype__get__compmode(self._handle)
        
        @compmode.setter
        def compmode(self, compmode):
            _pyEMsoft.f90wrap_ecpmasternamelisttype__set__compmode(self._handle, compmode)
        
        @property
        def copyfromenergyfile(self):
            """
            Element copyfromenergyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 968
            
            """
            return \
                _pyEMsoft.f90wrap_ecpmasternamelisttype__get__copyfromenergyfile(self._handle)
        
        @copyfromenergyfile.setter
        def copyfromenergyfile(self, copyfromenergyfile):
            _pyEMsoft.f90wrap_ecpmasternamelisttype__set__copyfromenergyfile(self._handle, \
                copyfromenergyfile)
        
        @property
        def h5copypath(self):
            """
            Element h5copypath ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 969
            
            """
            return _pyEMsoft.f90wrap_ecpmasternamelisttype__get__h5copypath(self._handle)
        
        @h5copypath.setter
        def h5copypath(self, h5copypath):
            _pyEMsoft.f90wrap_ecpmasternamelisttype__set__h5copypath(self._handle, \
                h5copypath)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 970
            
            """
            return _pyEMsoft.f90wrap_ecpmasternamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_ecpmasternamelisttype__set__energyfile(self._handle, \
                energyfile)
        
        @property
        def combinesites(self):
            """
            Element combinesites ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 971
            
            """
            return _pyEMsoft.f90wrap_ecpmasternamelisttype__get__combinesites(self._handle)
        
        @combinesites.setter
        def combinesites(self, combinesites):
            _pyEMsoft.f90wrap_ecpmasternamelisttype__set__combinesites(self._handle, \
                combinesites)
        
        def __str__(self):
            ret = ['<ecpmasternamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    esel : ')
            ret.append(repr(self.esel))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    notify : ')
            ret.append(repr(self.notify))
            ret.append(',\n    compmode : ')
            ret.append(repr(self.compmode))
            ret.append(',\n    copyfromenergyfile : ')
            ret.append(repr(self.copyfromenergyfile))
            ret.append(',\n    h5copypath : ')
            ret.append(repr(self.h5copypath))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append(',\n    combinesites : ')
            ret.append(repr(self.combinesites))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.CTEMQCNameListType")
    class CTEMQCNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ctemqcnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 974-984
        
        """
        def __init__(self, handle=None):
            """
            self = Ctemqcnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 974-984
            
            
            Returns
            -------
            this : Ctemqcnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ctemqcnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ctemqcnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ctemqcnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 974-984
            
            Parameters
            ----------
            this : Ctemqcnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ctemqcnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ctemqcnamelisttype_finalise(this=self._handle)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 975
            
            """
            return _pyEMsoft.f90wrap_ctemqcnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ctemqcnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 976
            
            """
            return _pyEMsoft.f90wrap_ctemqcnamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_ctemqcnamelisttype__set__npix(self._handle, npix)
        
        @property
        def wwmax(self):
            """
            Element wwmax ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 977
            
            """
            return _pyEMsoft.f90wrap_ctemqcnamelisttype__get__wwmax(self._handle)
        
        @wwmax.setter
        def wwmax(self, wwmax):
            _pyEMsoft.f90wrap_ctemqcnamelisttype__set__wwmax(self._handle, wwmax)
        
        @property
        def kvec(self):
            """
            Element kvec ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 978
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ctemqcnamelisttype__array__kvec(self._handle)
            if array_handle in self._arrays:
                kvec = self._arrays[array_handle]
            else:
                kvec = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ctemqcnamelisttype__array__kvec)
                self._arrays[array_handle] = kvec
            return kvec
        
        @kvec.setter
        def kvec(self, kvec):
            self.kvec[...] = kvec
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 979
            
            """
            return _pyEMsoft.f90wrap_ctemqcnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_ctemqcnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def rnmpp(self):
            """
            Element rnmpp ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 980
            
            """
            return _pyEMsoft.f90wrap_ctemqcnamelisttype__get__rnmpp(self._handle)
        
        @rnmpp.setter
        def rnmpp(self, rnmpp):
            _pyEMsoft.f90wrap_ctemqcnamelisttype__set__rnmpp(self._handle, rnmpp)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 981
            
            """
            return _pyEMsoft.f90wrap_ctemqcnamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_ctemqcnamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def qxtalname(self):
            """
            Element qxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 982
            
            """
            return _pyEMsoft.f90wrap_ctemqcnamelisttype__get__qxtalname(self._handle)
        
        @qxtalname.setter
        def qxtalname(self, qxtalname):
            _pyEMsoft.f90wrap_ctemqcnamelisttype__set__qxtalname(self._handle, qxtalname)
        
        @property
        def hdfname(self):
            """
            Element hdfname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 983
            
            """
            return _pyEMsoft.f90wrap_ctemqcnamelisttype__get__hdfname(self._handle)
        
        @hdfname.setter
        def hdfname(self, hdfname):
            _pyEMsoft.f90wrap_ctemqcnamelisttype__set__hdfname(self._handle, hdfname)
        
        @property
        def tiffname(self):
            """
            Element tiffname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 984
            
            """
            return _pyEMsoft.f90wrap_ctemqcnamelisttype__get__tiffname(self._handle)
        
        @tiffname.setter
        def tiffname(self, tiffname):
            _pyEMsoft.f90wrap_ctemqcnamelisttype__set__tiffname(self._handle, tiffname)
        
        def __str__(self):
            ret = ['<ctemqcnamelisttype>{\n']
            ret.append('    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    wwmax : ')
            ret.append(repr(self.wwmax))
            ret.append(',\n    kvec : ')
            ret.append(repr(self.kvec))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    rnmpp : ')
            ret.append(repr(self.rnmpp))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    qxtalname : ')
            ret.append(repr(self.qxtalname))
            ret.append(',\n    hdfname : ')
            ret.append(repr(self.hdfname))
            ret.append(',\n    tiffname : ')
            ret.append(repr(self.tiffname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.ECPQCMasterNameListType")
    class ECPQCMasterNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ecpqcmasternamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 987-992
        
        """
        def __init__(self, handle=None):
            """
            self = Ecpqcmasternamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 987-992
            
            
            Returns
            -------
            this : Ecpqcmasternamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ecpqcmasternamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ecpqcmasternamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ecpqcmasternamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 987-992
            
            Parameters
            ----------
            this : Ecpqcmasternamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ecpqcmasternamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ecpqcmasternamelisttype_finalise(this=self._handle)
        
        @property
        def nsamples(self):
            """
            Element nsamples ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 988
            
            """
            return _pyEMsoft.f90wrap_ecpqcmasternamelisttype__get__nsamples(self._handle)
        
        @nsamples.setter
        def nsamples(self, nsamples):
            _pyEMsoft.f90wrap_ecpqcmasternamelisttype__set__nsamples(self._handle, nsamples)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 989
            
            """
            return _pyEMsoft.f90wrap_ecpqcmasternamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_ecpqcmasternamelisttype__set__npx(self._handle, npx)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 990
            
            """
            return _pyEMsoft.f90wrap_ecpqcmasternamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ecpqcmasternamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 991
            
            """
            return _pyEMsoft.f90wrap_ecpqcmasternamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_ecpqcmasternamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 992
            
            """
            return _pyEMsoft.f90wrap_ecpqcmasternamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_ecpqcmasternamelisttype__set__energyfile(self._handle, \
                energyfile)
        
        def __str__(self):
            ret = ['<ecpqcmasternamelisttype>{\n']
            ret.append('    nsamples : ')
            ret.append(repr(self.nsamples))
            ret.append(',\n    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDQCMasterNameListType")
    class EBSDQCMasterNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdqcmasternamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 995-1014
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdqcmasternamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 995-1014
            
            
            Returns
            -------
            this : Ebsdqcmasternamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdqcmasternamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdqcmasternamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdqcmasternamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 995-1014
            
            Parameters
            ----------
            this : Ebsdqcmasternamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdqcmasternamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdqcmasternamelisttype_finalise(this=self._handle)
        
        @property
        def nsamples(self):
            """
            Element nsamples ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 996
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__nsamples(self._handle)
        
        @nsamples.setter
        def nsamples(self, nsamples):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__nsamples(self._handle, \
                nsamples)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 997
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__npx(self._handle, npx)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 998
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__nthreads(self._handle, \
                nthreads)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 999
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def qclatparm(self):
            """
            Element qclatparm ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1000
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__qclatparm(self._handle)
        
        @qclatparm.setter
        def qclatparm(self, qclatparm):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__qclatparm(self._handle, \
                qclatparm)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1001
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__energyfile(self._handle, \
                energyfile)
        
        @property
        def depthstep(self):
            """
            Element depthstep ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1003
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__depthstep(self._handle)
        
        @depthstep.setter
        def depthstep(self, depthstep):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__depthstep(self._handle, \
                depthstep)
        
        @property
        def ehistmin(self):
            """
            Element ehistmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1004
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__ehistmin(self._handle)
        
        @ehistmin.setter
        def ehistmin(self, ehistmin):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__ehistmin(self._handle, \
                ehistmin)
        
        @property
        def ebinsize(self):
            """
            Element ebinsize ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1005
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__ebinsize(self._handle)
        
        @ebinsize.setter
        def ebinsize(self, ebinsize):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__ebinsize(self._handle, \
                ebinsize)
        
        @property
        def ekev(self):
            """
            Element ekev ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1006
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__ekev(self._handle)
        
        @ekev.setter
        def ekev(self, ekev):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__ekev(self._handle, ekev)
        
        @property
        def depthmax(self):
            """
            Element depthmax ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1007
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__depthmax(self._handle)
        
        @depthmax.setter
        def depthmax(self, depthmax):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__depthmax(self._handle, \
                depthmax)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1008
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__numsx(self._handle, numsx)
        
        @property
        def num_el(self):
            """
            Element num_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1009
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__num_el(self._handle)
        
        @num_el.setter
        def num_el(self, num_el):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__num_el(self._handle, num_el)
        
        @property
        def numebins(self):
            """
            Element numebins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1010
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__numebins(self._handle)
        
        @numebins.setter
        def numebins(self, numebins):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__numebins(self._handle, \
                numebins)
        
        @property
        def numzbins(self):
            """
            Element numzbins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1011
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__numzbins(self._handle)
        
        @numzbins.setter
        def numzbins(self, numzbins):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__numzbins(self._handle, \
                numzbins)
        
        @property
        def multiplier(self):
            """
            Element multiplier ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1012
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__multiplier(self._handle)
        
        @multiplier.setter
        def multiplier(self, multiplier):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__multiplier(self._handle, \
                multiplier)
        
        @property
        def sig(self):
            """
            Element sig ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1013
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__sig(self._handle)
        
        @sig.setter
        def sig(self, sig):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__sig(self._handle, sig)
        
        @property
        def mode(self):
            """
            Element mode ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1014
            
            """
            return _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__get__mode(self._handle)
        
        @mode.setter
        def mode(self, mode):
            _pyEMsoft.f90wrap_ebsdqcmasternamelisttype__set__mode(self._handle, mode)
        
        def __str__(self):
            ret = ['<ebsdqcmasternamelisttype>{\n']
            ret.append('    nsamples : ')
            ret.append(repr(self.nsamples))
            ret.append(',\n    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    qclatparm : ')
            ret.append(repr(self.qclatparm))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append(',\n    depthstep : ')
            ret.append(repr(self.depthstep))
            ret.append(',\n    ehistmin : ')
            ret.append(repr(self.ehistmin))
            ret.append(',\n    ebinsize : ')
            ret.append(repr(self.ebinsize))
            ret.append(',\n    ekev : ')
            ret.append(repr(self.ekev))
            ret.append(',\n    depthmax : ')
            ret.append(repr(self.depthmax))
            ret.append(',\n    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    num_el : ')
            ret.append(repr(self.num_el))
            ret.append(',\n    numebins : ')
            ret.append(repr(self.numebins))
            ret.append(',\n    numzbins : ')
            ret.append(repr(self.numzbins))
            ret.append(',\n    multiplier : ')
            ret.append(repr(self.multiplier))
            ret.append(',\n    sig : ')
            ret.append(repr(self.sig))
            ret.append(',\n    mode : ')
            ret.append(repr(self.mode))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSD2DQCMasterNameListType")
    class EBSD2DQCMasterNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsd2dqcmasternamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1017-1041
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsd2Dqcmasternamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1017-1041
            
            
            Returns
            -------
            this : Ebsd2Dqcmasternamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsd2dqcmasternamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsd2Dqcmasternamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1017-1041
            
            Parameters
            ----------
            this : Ebsd2Dqcmasternamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsd2dqcmasternamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype_finalise(this=self._handle)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1018
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__npx(self._handle, npx)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1019
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__nthreads(self._handle, \
                nthreads)
        
        @property
        def atno(self):
            """
            Element atno ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1020
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__atno(self._handle)
        
        @atno.setter
        def atno(self, atno):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__atno(self._handle, atno)
        
        @property
        def dwf(self):
            """
            Element dwf ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1021
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__dwf(self._handle)
        
        @dwf.setter
        def dwf(self, dwf):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__dwf(self._handle, dwf)
        
        @property
        def dmin_qc(self):
            """
            Element dmin_qc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1022
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__dmin_qc(self._handle)
        
        @dmin_qc.setter
        def dmin_qc(self, dmin_qc):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__dmin_qc(self._handle, \
                dmin_qc)
        
        @property
        def dmin_p(self):
            """
            Element dmin_p ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1023
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__dmin_p(self._handle)
        
        @dmin_p.setter
        def dmin_p(self, dmin_p):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__dmin_p(self._handle, dmin_p)
        
        @property
        def qclatparm_a(self):
            """
            Element qclatparm_a ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1024
            
            """
            return \
                _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__qclatparm_a(self._handle)
        
        @qclatparm_a.setter
        def qclatparm_a(self, qclatparm_a):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__qclatparm_a(self._handle, \
                qclatparm_a)
        
        @property
        def qclatparm_c(self):
            """
            Element qclatparm_c ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1025
            
            """
            return \
                _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__qclatparm_c(self._handle)
        
        @qclatparm_c.setter
        def qclatparm_c(self, qclatparm_c):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__qclatparm_c(self._handle, \
                qclatparm_c)
        
        @property
        def centering(self):
            """
            Element centering ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1026
            
            """
            return \
                _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__centering(self._handle)
        
        @centering.setter
        def centering(self, centering):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__centering(self._handle, \
                centering)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1027
            
            """
            return \
                _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__energyfile(self._handle, \
                energyfile)
        
        @property
        def qctype(self):
            """
            Element qctype ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1028
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__qctype(self._handle)
        
        @qctype.setter
        def qctype(self, qctype):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__qctype(self._handle, qctype)
        
        @property
        def depthstep(self):
            """
            Element depthstep ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1030
            
            """
            return \
                _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__depthstep(self._handle)
        
        @depthstep.setter
        def depthstep(self, depthstep):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__depthstep(self._handle, \
                depthstep)
        
        @property
        def ehistmin(self):
            """
            Element ehistmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1031
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__ehistmin(self._handle)
        
        @ehistmin.setter
        def ehistmin(self, ehistmin):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__ehistmin(self._handle, \
                ehistmin)
        
        @property
        def ebinsize(self):
            """
            Element ebinsize ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1032
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__ebinsize(self._handle)
        
        @ebinsize.setter
        def ebinsize(self, ebinsize):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__ebinsize(self._handle, \
                ebinsize)
        
        @property
        def ekev(self):
            """
            Element ekev ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1033
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__ekev(self._handle)
        
        @ekev.setter
        def ekev(self, ekev):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__ekev(self._handle, ekev)
        
        @property
        def depthmax(self):
            """
            Element depthmax ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1034
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__depthmax(self._handle)
        
        @depthmax.setter
        def depthmax(self, depthmax):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__depthmax(self._handle, \
                depthmax)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1035
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__numsx(self._handle, numsx)
        
        @property
        def num_el(self):
            """
            Element num_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1036
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__num_el(self._handle)
        
        @num_el.setter
        def num_el(self, num_el):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__num_el(self._handle, num_el)
        
        @property
        def numebins(self):
            """
            Element numebins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1037
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__numebins(self._handle)
        
        @numebins.setter
        def numebins(self, numebins):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__numebins(self._handle, \
                numebins)
        
        @property
        def numzbins(self):
            """
            Element numzbins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1038
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__numzbins(self._handle)
        
        @numzbins.setter
        def numzbins(self, numzbins):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__numzbins(self._handle, \
                numzbins)
        
        @property
        def multiplier(self):
            """
            Element multiplier ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1039
            
            """
            return \
                _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__multiplier(self._handle)
        
        @multiplier.setter
        def multiplier(self, multiplier):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__multiplier(self._handle, \
                multiplier)
        
        @property
        def sig(self):
            """
            Element sig ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1040
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__sig(self._handle)
        
        @sig.setter
        def sig(self, sig):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__sig(self._handle, sig)
        
        @property
        def mode(self):
            """
            Element mode ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1041
            
            """
            return _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__get__mode(self._handle)
        
        @mode.setter
        def mode(self, mode):
            _pyEMsoft.f90wrap_ebsd2dqcmasternamelisttype__set__mode(self._handle, mode)
        
        def __str__(self):
            ret = ['<ebsd2dqcmasternamelisttype>{\n']
            ret.append('    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    atno : ')
            ret.append(repr(self.atno))
            ret.append(',\n    dwf : ')
            ret.append(repr(self.dwf))
            ret.append(',\n    dmin_qc : ')
            ret.append(repr(self.dmin_qc))
            ret.append(',\n    dmin_p : ')
            ret.append(repr(self.dmin_p))
            ret.append(',\n    qclatparm_a : ')
            ret.append(repr(self.qclatparm_a))
            ret.append(',\n    qclatparm_c : ')
            ret.append(repr(self.qclatparm_c))
            ret.append(',\n    centering : ')
            ret.append(repr(self.centering))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append(',\n    qctype : ')
            ret.append(repr(self.qctype))
            ret.append(',\n    depthstep : ')
            ret.append(repr(self.depthstep))
            ret.append(',\n    ehistmin : ')
            ret.append(repr(self.ehistmin))
            ret.append(',\n    ebinsize : ')
            ret.append(repr(self.ebinsize))
            ret.append(',\n    ekev : ')
            ret.append(repr(self.ekev))
            ret.append(',\n    depthmax : ')
            ret.append(repr(self.depthmax))
            ret.append(',\n    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    num_el : ')
            ret.append(repr(self.num_el))
            ret.append(',\n    numebins : ')
            ret.append(repr(self.numebins))
            ret.append(',\n    numzbins : ')
            ret.append(repr(self.numzbins))
            ret.append(',\n    multiplier : ')
            ret.append(repr(self.multiplier))
            ret.append(',\n    sig : ')
            ret.append(repr(self.sig))
            ret.append(',\n    mode : ')
            ret.append(repr(self.mode))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.ECPpatternNameListType")
    class ECPpatternNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ecppatternnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1044-1050
        
        """
        def __init__(self, handle=None):
            """
            self = Ecppatternnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1044-1050
            
            
            Returns
            -------
            this : Ecppatternnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ecppatternnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ecppatternnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ecppatternnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1044-1050
            
            Parameters
            ----------
            this : Ecppatternnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ecppatternnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ecppatternnamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1045
            
            """
            return _pyEMsoft.f90wrap_ecppatternnamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_ecppatternnamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1046
            
            """
            return _pyEMsoft.f90wrap_ecppatternnamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_ecppatternnamelisttype__set__npix(self._handle, npix)
        
        @property
        def thetac(self):
            """
            Element thetac ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1047
            
            """
            return _pyEMsoft.f90wrap_ecppatternnamelisttype__get__thetac(self._handle)
        
        @thetac.setter
        def thetac(self, thetac):
            _pyEMsoft.f90wrap_ecppatternnamelisttype__set__thetac(self._handle, thetac)
        
        @property
        def k(self):
            """
            Element k ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1048
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ecppatternnamelisttype__array__k(self._handle)
            if array_handle in self._arrays:
                k = self._arrays[array_handle]
            else:
                k = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ecppatternnamelisttype__array__k)
                self._arrays[array_handle] = k
            return k
        
        @k.setter
        def k(self, k):
            self.k[...] = k
        
        @property
        def masterfile(self):
            """
            Element masterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1049
            
            """
            return _pyEMsoft.f90wrap_ecppatternnamelisttype__get__masterfile(self._handle)
        
        @masterfile.setter
        def masterfile(self, masterfile):
            _pyEMsoft.f90wrap_ecppatternnamelisttype__set__masterfile(self._handle, \
                masterfile)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1050
            
            """
            return _pyEMsoft.f90wrap_ecppatternnamelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_ecppatternnamelisttype__set__outname(self._handle, outname)
        
        def __str__(self):
            ret = ['<ecppatternnamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    thetac : ')
            ret.append(repr(self.thetac))
            ret.append(',\n    k : ')
            ret.append(repr(self.k))
            ret.append(',\n    masterfile : ')
            ret.append(repr(self.masterfile))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.ECPZANameListType")
    class ECPZANameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ecpzanamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1053-1062
        
        """
        def __init__(self, handle=None):
            """
            self = Ecpzanamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1053-1062
            
            
            Returns
            -------
            this : Ecpzanamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ecpzanamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ecpzanamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ecpzanamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1053-1062
            
            Parameters
            ----------
            this : Ecpzanamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ecpzanamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ecpzanamelisttype_finalise(this=self._handle)
        
        @property
        def fn(self):
            """
            Element fn ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1054
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ecpzanamelisttype__array__fn(self._handle)
            if array_handle in self._arrays:
                fn = self._arrays[array_handle]
            else:
                fn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ecpzanamelisttype__array__fn)
                self._arrays[array_handle] = fn
            return fn
        
        @fn.setter
        def fn(self, fn):
            self.fn[...] = fn
        
        @property
        def k(self):
            """
            Element k ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1055
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ecpzanamelisttype__array__k(self._handle)
            if array_handle in self._arrays:
                k = self._arrays[array_handle]
            else:
                k = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ecpzanamelisttype__array__k)
                self._arrays[array_handle] = k
            return k
        
        @k.setter
        def k(self, k):
            self.k[...] = k
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1056
            
            """
            return _pyEMsoft.f90wrap_ecpzanamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_ecpzanamelisttype__set__npix(self._handle, npix)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1057
            
            """
            return _pyEMsoft.f90wrap_ecpzanamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ecpzanamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1058
            
            """
            return _pyEMsoft.f90wrap_ecpzanamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_ecpzanamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def ktmax(self):
            """
            Element ktmax ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1059
            
            """
            return _pyEMsoft.f90wrap_ecpzanamelisttype__get__ktmax(self._handle)
        
        @ktmax.setter
        def ktmax(self, ktmax):
            _pyEMsoft.f90wrap_ecpzanamelisttype__set__ktmax(self._handle, ktmax)
        
        @property
        def maskpattern(self):
            """
            Element maskpattern ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1060
            
            """
            return _pyEMsoft.f90wrap_ecpzanamelisttype__get__maskpattern(self._handle)
        
        @maskpattern.setter
        def maskpattern(self, maskpattern):
            _pyEMsoft.f90wrap_ecpzanamelisttype__set__maskpattern(self._handle, maskpattern)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1061
            
            """
            return _pyEMsoft.f90wrap_ecpzanamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_ecpzanamelisttype__set__energyfile(self._handle, energyfile)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1062
            
            """
            return _pyEMsoft.f90wrap_ecpzanamelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_ecpzanamelisttype__set__outname(self._handle, outname)
        
        def __str__(self):
            ret = ['<ecpzanamelisttype>{\n']
            ret.append('    fn : ')
            ret.append(repr(self.fn))
            ret.append(',\n    k : ')
            ret.append(repr(self.k))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    ktmax : ')
            ret.append(repr(self.ktmax))
            ret.append(',\n    maskpattern : ')
            ret.append(repr(self.maskpattern))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.PEDZANameListType")
    class PEDZANameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=pedzanamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1065-1081
        
        """
        def __init__(self, handle=None):
            """
            self = Pedzanamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1065-1081
            
            
            Returns
            -------
            this : Pedzanamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for pedzanamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_pedzanamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Pedzanamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1065-1081
            
            Parameters
            ----------
            this : Pedzanamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for pedzanamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_pedzanamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1066
            
            """
            return _pyEMsoft.f90wrap_pedzanamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_pedzanamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def k(self):
            """
            Element k ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1067
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_pedzanamelisttype__array__k(self._handle)
            if array_handle in self._arrays:
                k = self._arrays[array_handle]
            else:
                k = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_pedzanamelisttype__array__k)
                self._arrays[array_handle] = k
            return k
        
        @k.setter
        def k(self, k):
            self.k[...] = k
        
        @property
        def fn(self):
            """
            Element fn ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1068
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_pedzanamelisttype__array__fn(self._handle)
            if array_handle in self._arrays:
                fn = self._arrays[array_handle]
            else:
                fn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_pedzanamelisttype__array__fn)
                self._arrays[array_handle] = fn
            return fn
        
        @fn.setter
        def fn(self, fn):
            self.fn[...] = fn
        
        @property
        def precsample(self):
            """
            Element precsample ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1069
            
            """
            return _pyEMsoft.f90wrap_pedzanamelisttype__get__precsample(self._handle)
        
        @precsample.setter
        def precsample(self, precsample):
            _pyEMsoft.f90wrap_pedzanamelisttype__set__precsample(self._handle, precsample)
        
        @property
        def precazimuthal(self):
            """
            Element precazimuthal ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1070
            
            """
            return _pyEMsoft.f90wrap_pedzanamelisttype__get__precazimuthal(self._handle)
        
        @precazimuthal.setter
        def precazimuthal(self, precazimuthal):
            _pyEMsoft.f90wrap_pedzanamelisttype__set__precazimuthal(self._handle, \
                precazimuthal)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1071
            
            """
            return _pyEMsoft.f90wrap_pedzanamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_pedzanamelisttype__set__npix(self._handle, npix)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1072
            
            """
            return _pyEMsoft.f90wrap_pedzanamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_pedzanamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1073
            
            """
            return _pyEMsoft.f90wrap_pedzanamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_pedzanamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1074
            
            """
            return _pyEMsoft.f90wrap_pedzanamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_pedzanamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def precangle(self):
            """
            Element precangle ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1075
            
            """
            return _pyEMsoft.f90wrap_pedzanamelisttype__get__precangle(self._handle)
        
        @precangle.setter
        def precangle(self, precangle):
            _pyEMsoft.f90wrap_pedzanamelisttype__set__precangle(self._handle, precangle)
        
        @property
        def prechalfwidth(self):
            """
            Element prechalfwidth ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1076
            
            """
            return _pyEMsoft.f90wrap_pedzanamelisttype__get__prechalfwidth(self._handle)
        
        @prechalfwidth.setter
        def prechalfwidth(self, prechalfwidth):
            _pyEMsoft.f90wrap_pedzanamelisttype__set__prechalfwidth(self._handle, \
                prechalfwidth)
        
        @property
        def thickness(self):
            """
            Element thickness ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1077
            
            """
            return _pyEMsoft.f90wrap_pedzanamelisttype__get__thickness(self._handle)
        
        @thickness.setter
        def thickness(self, thickness):
            _pyEMsoft.f90wrap_pedzanamelisttype__set__thickness(self._handle, thickness)
        
        @property
        def camlen(self):
            """
            Element camlen ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1078
            
            """
            return _pyEMsoft.f90wrap_pedzanamelisttype__get__camlen(self._handle)
        
        @camlen.setter
        def camlen(self, camlen):
            _pyEMsoft.f90wrap_pedzanamelisttype__set__camlen(self._handle, camlen)
        
        @property
        def filemode(self):
            """
            Element filemode ftype=character(5) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1079
            
            """
            return _pyEMsoft.f90wrap_pedzanamelisttype__get__filemode(self._handle)
        
        @filemode.setter
        def filemode(self, filemode):
            _pyEMsoft.f90wrap_pedzanamelisttype__set__filemode(self._handle, filemode)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1080
            
            """
            return _pyEMsoft.f90wrap_pedzanamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_pedzanamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1081
            
            """
            return _pyEMsoft.f90wrap_pedzanamelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_pedzanamelisttype__set__outname(self._handle, outname)
        
        def __str__(self):
            ret = ['<pedzanamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    k : ')
            ret.append(repr(self.k))
            ret.append(',\n    fn : ')
            ret.append(repr(self.fn))
            ret.append(',\n    precsample : ')
            ret.append(repr(self.precsample))
            ret.append(',\n    precazimuthal : ')
            ret.append(repr(self.precazimuthal))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    precangle : ')
            ret.append(repr(self.precangle))
            ret.append(',\n    prechalfwidth : ')
            ret.append(repr(self.prechalfwidth))
            ret.append(',\n    thickness : ')
            ret.append(repr(self.thickness))
            ret.append(',\n    camlen : ')
            ret.append(repr(self.camlen))
            ret.append(',\n    filemode : ')
            ret.append(repr(self.filemode))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.PEDkinNameListType")
    class PEDkinNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=pedkinnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1084-1095
        
        """
        def __init__(self, handle=None):
            """
            self = Pedkinnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1084-1095
            
            
            Returns
            -------
            this : Pedkinnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for pedkinnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_pedkinnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Pedkinnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1084-1095
            
            Parameters
            ----------
            this : Pedkinnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for pedkinnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_pedkinnamelisttype_finalise(this=self._handle)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1085
            
            """
            return _pyEMsoft.f90wrap_pedkinnamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_pedkinnamelisttype__set__npix(self._handle, npix)
        
        @property
        def ncubochoric(self):
            """
            Element ncubochoric ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1086
            
            """
            return _pyEMsoft.f90wrap_pedkinnamelisttype__get__ncubochoric(self._handle)
        
        @ncubochoric.setter
        def ncubochoric(self, ncubochoric):
            _pyEMsoft.f90wrap_pedkinnamelisttype__set__ncubochoric(self._handle, \
                ncubochoric)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1087
            
            """
            return _pyEMsoft.f90wrap_pedkinnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_pedkinnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1088
            
            """
            return _pyEMsoft.f90wrap_pedkinnamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_pedkinnamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1089
            
            """
            return _pyEMsoft.f90wrap_pedkinnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_pedkinnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def thickness(self):
            """
            Element thickness ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1090
            
            """
            return _pyEMsoft.f90wrap_pedkinnamelisttype__get__thickness(self._handle)
        
        @thickness.setter
        def thickness(self, thickness):
            _pyEMsoft.f90wrap_pedkinnamelisttype__set__thickness(self._handle, thickness)
        
        @property
        def rnmpp(self):
            """
            Element rnmpp ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1091
            
            """
            return _pyEMsoft.f90wrap_pedkinnamelisttype__get__rnmpp(self._handle)
        
        @rnmpp.setter
        def rnmpp(self, rnmpp):
            _pyEMsoft.f90wrap_pedkinnamelisttype__set__rnmpp(self._handle, rnmpp)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1092
            
            """
            return _pyEMsoft.f90wrap_pedkinnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_pedkinnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1093
            
            """
            return _pyEMsoft.f90wrap_pedkinnamelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_pedkinnamelisttype__set__outname(self._handle, outname)
        
        @property
        def sampling(self):
            """
            Element sampling ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1094
            
            """
            return _pyEMsoft.f90wrap_pedkinnamelisttype__get__sampling(self._handle)
        
        @sampling.setter
        def sampling(self, sampling):
            _pyEMsoft.f90wrap_pedkinnamelisttype__set__sampling(self._handle, sampling)
        
        @property
        def eulerfile(self):
            """
            Element eulerfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1095
            
            """
            return _pyEMsoft.f90wrap_pedkinnamelisttype__get__eulerfile(self._handle)
        
        @eulerfile.setter
        def eulerfile(self, eulerfile):
            _pyEMsoft.f90wrap_pedkinnamelisttype__set__eulerfile(self._handle, eulerfile)
        
        def __str__(self):
            ret = ['<pedkinnamelisttype>{\n']
            ret.append('    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    ncubochoric : ')
            ret.append(repr(self.ncubochoric))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    thickness : ')
            ret.append(repr(self.thickness))
            ret.append(',\n    rnmpp : ')
            ret.append(repr(self.rnmpp))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append(',\n    sampling : ')
            ret.append(repr(self.sampling))
            ret.append(',\n    eulerfile : ')
            ret.append(repr(self.eulerfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.ECCINameListType")
    class ECCINameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=eccinamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1098-1122
        
        """
        def __init__(self, handle=None):
            """
            self = Eccinamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1098-1122
            
            
            Returns
            -------
            this : Eccinamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for eccinamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_eccinamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Eccinamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1098-1122
            
            Parameters
            ----------
            this : Eccinamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for eccinamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_eccinamelisttype_finalise(this=self._handle)
        
        @property
        def stdout(self):
            """
            Element stdout ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1099
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__stdout(self._handle)
        
        @stdout.setter
        def stdout(self, stdout):
            _pyEMsoft.f90wrap_eccinamelisttype__set__stdout(self._handle, stdout)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1100
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_eccinamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def k(self):
            """
            Element k ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1101
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_eccinamelisttype__array__k(self._handle)
            if array_handle in self._arrays:
                k = self._arrays[array_handle]
            else:
                k = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_eccinamelisttype__array__k)
                self._arrays[array_handle] = k
            return k
        
        @k.setter
        def k(self, k):
            self.k[...] = k
        
        @property
        def nktstep(self):
            """
            Element nktstep ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1102
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__nktstep(self._handle)
        
        @nktstep.setter
        def nktstep(self, nktstep):
            _pyEMsoft.f90wrap_eccinamelisttype__set__nktstep(self._handle, nktstep)
        
        @property
        def df_npix(self):
            """
            Element df_npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1103
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__df_npix(self._handle)
        
        @df_npix.setter
        def df_npix(self, df_npix):
            _pyEMsoft.f90wrap_eccinamelisttype__set__df_npix(self._handle, df_npix)
        
        @property
        def df_npiy(self):
            """
            Element df_npiy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1104
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__df_npiy(self._handle)
        
        @df_npiy.setter
        def df_npiy(self, df_npiy):
            _pyEMsoft.f90wrap_eccinamelisttype__set__df_npiy(self._handle, df_npiy)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1105
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_eccinamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def dkt(self):
            """
            Element dkt ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1106
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__dkt(self._handle)
        
        @dkt.setter
        def dkt(self, dkt):
            _pyEMsoft.f90wrap_eccinamelisttype__set__dkt(self._handle, dkt)
        
        @property
        def ktmax(self):
            """
            Element ktmax ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1107
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__ktmax(self._handle)
        
        @ktmax.setter
        def ktmax(self, ktmax):
            _pyEMsoft.f90wrap_eccinamelisttype__set__ktmax(self._handle, ktmax)
        
        @property
        def lauec(self):
            """
            Element lauec ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1108
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_eccinamelisttype__array__lauec(self._handle)
            if array_handle in self._arrays:
                lauec = self._arrays[array_handle]
            else:
                lauec = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_eccinamelisttype__array__lauec)
                self._arrays[array_handle] = lauec
            return lauec
        
        @lauec.setter
        def lauec(self, lauec):
            self.lauec[...] = lauec
        
        @property
        def lauec2(self):
            """
            Element lauec2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1109
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_eccinamelisttype__array__lauec2(self._handle)
            if array_handle in self._arrays:
                lauec2 = self._arrays[array_handle]
            else:
                lauec2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_eccinamelisttype__array__lauec2)
                self._arrays[array_handle] = lauec2
            return lauec2
        
        @lauec2.setter
        def lauec2(self, lauec2):
            self.lauec2[...] = lauec2
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1110
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_eccinamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def df_l(self):
            """
            Element df_l ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1111
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__df_l(self._handle)
        
        @df_l.setter
        def df_l(self, df_l):
            _pyEMsoft.f90wrap_eccinamelisttype__set__df_l(self._handle, df_l)
        
        @property
        def df_slice(self):
            """
            Element df_slice ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1112
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__df_slice(self._handle)
        
        @df_slice.setter
        def df_slice(self, df_slice):
            _pyEMsoft.f90wrap_eccinamelisttype__set__df_slice(self._handle, df_slice)
        
        @property
        def dispmode(self):
            """
            Element dispmode ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1113
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__dispmode(self._handle)
        
        @dispmode.setter
        def dispmode(self, dispmode):
            _pyEMsoft.f90wrap_eccinamelisttype__set__dispmode(self._handle, dispmode)
        
        @property
        def summode(self):
            """
            Element summode ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1114
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__summode(self._handle)
        
        @summode.setter
        def summode(self, summode):
            _pyEMsoft.f90wrap_eccinamelisttype__set__summode(self._handle, summode)
        
        @property
        def progmode(self):
            """
            Element progmode ftype=character(5) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1115
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__progmode(self._handle)
        
        @progmode.setter
        def progmode(self, progmode):
            _pyEMsoft.f90wrap_eccinamelisttype__set__progmode(self._handle, progmode)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1116
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_eccinamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def montagename(self):
            """
            Element montagename ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1117
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__montagename(self._handle)
        
        @montagename.setter
        def montagename(self, montagename):
            _pyEMsoft.f90wrap_eccinamelisttype__set__montagename(self._handle, montagename)
        
        @property
        def defectfilename(self):
            """
            Element defectfilename ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1118
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__defectfilename(self._handle)
        
        @defectfilename.setter
        def defectfilename(self, defectfilename):
            _pyEMsoft.f90wrap_eccinamelisttype__set__defectfilename(self._handle, \
                defectfilename)
        
        @property
        def dispfile(self):
            """
            Element dispfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1119
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__dispfile(self._handle)
        
        @dispfile.setter
        def dispfile(self, dispfile):
            _pyEMsoft.f90wrap_eccinamelisttype__set__dispfile(self._handle, dispfile)
        
        @property
        def dataname(self):
            """
            Element dataname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1120
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__dataname(self._handle)
        
        @dataname.setter
        def dataname(self, dataname):
            _pyEMsoft.f90wrap_eccinamelisttype__set__dataname(self._handle, dataname)
        
        @property
        def ecpname(self):
            """
            Element ecpname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1121
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__ecpname(self._handle)
        
        @ecpname.setter
        def ecpname(self, ecpname):
            _pyEMsoft.f90wrap_eccinamelisttype__set__ecpname(self._handle, ecpname)
        
        @property
        def sgname(self):
            """
            Element sgname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1122
            
            """
            return _pyEMsoft.f90wrap_eccinamelisttype__get__sgname(self._handle)
        
        @sgname.setter
        def sgname(self, sgname):
            _pyEMsoft.f90wrap_eccinamelisttype__set__sgname(self._handle, sgname)
        
        def __str__(self):
            ret = ['<eccinamelisttype>{\n']
            ret.append('    stdout : ')
            ret.append(repr(self.stdout))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    k : ')
            ret.append(repr(self.k))
            ret.append(',\n    nktstep : ')
            ret.append(repr(self.nktstep))
            ret.append(',\n    df_npix : ')
            ret.append(repr(self.df_npix))
            ret.append(',\n    df_npiy : ')
            ret.append(repr(self.df_npiy))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    dkt : ')
            ret.append(repr(self.dkt))
            ret.append(',\n    ktmax : ')
            ret.append(repr(self.ktmax))
            ret.append(',\n    lauec : ')
            ret.append(repr(self.lauec))
            ret.append(',\n    lauec2 : ')
            ret.append(repr(self.lauec2))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    df_l : ')
            ret.append(repr(self.df_l))
            ret.append(',\n    df_slice : ')
            ret.append(repr(self.df_slice))
            ret.append(',\n    dispmode : ')
            ret.append(repr(self.dispmode))
            ret.append(',\n    summode : ')
            ret.append(repr(self.summode))
            ret.append(',\n    progmode : ')
            ret.append(repr(self.progmode))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    montagename : ')
            ret.append(repr(self.montagename))
            ret.append(',\n    defectfilename : ')
            ret.append(repr(self.defectfilename))
            ret.append(',\n    dispfile : ')
            ret.append(repr(self.dispfile))
            ret.append(',\n    dataname : ')
            ret.append(repr(self.dataname))
            ret.append(',\n    ecpname : ')
            ret.append(repr(self.ecpname))
            ret.append(',\n    sgname : ')
            ret.append(repr(self.sgname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.RFZNameListType")
    class RFZNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=rfznamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1125-1143
        
        """
        def __init__(self, handle=None):
            """
            self = Rfznamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1125-1143
            
            
            Returns
            -------
            this : Rfznamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for rfznamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_rfznamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Rfznamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1125-1143
            
            Parameters
            ----------
            this : Rfznamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for rfznamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_rfznamelisttype_finalise(this=self._handle)
        
        @property
        def pgnum(self):
            """
            Element pgnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1126
            
            """
            return _pyEMsoft.f90wrap_rfznamelisttype__get__pgnum(self._handle)
        
        @pgnum.setter
        def pgnum(self, pgnum):
            _pyEMsoft.f90wrap_rfznamelisttype__set__pgnum(self._handle, pgnum)
        
        @property
        def nsteps(self):
            """
            Element nsteps ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1127
            
            """
            return _pyEMsoft.f90wrap_rfznamelisttype__get__nsteps(self._handle)
        
        @nsteps.setter
        def nsteps(self, nsteps):
            _pyEMsoft.f90wrap_rfznamelisttype__set__nsteps(self._handle, nsteps)
        
        @property
        def gridtype(self):
            """
            Element gridtype ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1128
            
            """
            return _pyEMsoft.f90wrap_rfznamelisttype__get__gridtype(self._handle)
        
        @gridtype.setter
        def gridtype(self, gridtype):
            _pyEMsoft.f90wrap_rfznamelisttype__set__gridtype(self._handle, gridtype)
        
        @property
        def qfz(self):
            """
            Element qfz ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1129
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_rfznamelisttype__array__qfz(self._handle)
            if array_handle in self._arrays:
                qfz = self._arrays[array_handle]
            else:
                qfz = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_rfznamelisttype__array__qfz)
                self._arrays[array_handle] = qfz
            return qfz
        
        @qfz.setter
        def qfz(self, qfz):
            self.qfz[...] = qfz
        
        @property
        def axfz(self):
            """
            Element axfz ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1130
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_rfznamelisttype__array__axfz(self._handle)
            if array_handle in self._arrays:
                axfz = self._arrays[array_handle]
            else:
                axfz = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_rfznamelisttype__array__axfz)
                self._arrays[array_handle] = axfz
            return axfz
        
        @axfz.setter
        def axfz(self, axfz):
            self.axfz[...] = axfz
        
        @property
        def rodrigues(self):
            """
            Element rodrigues ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1131
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_rfznamelisttype__array__rodrigues(self._handle)
            if array_handle in self._arrays:
                rodrigues = self._arrays[array_handle]
            else:
                rodrigues = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_rfznamelisttype__array__rodrigues)
                self._arrays[array_handle] = rodrigues
            return rodrigues
        
        @rodrigues.setter
        def rodrigues(self, rodrigues):
            self.rodrigues[...] = rodrigues
        
        @property
        def maxmisor(self):
            """
            Element maxmisor ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1132
            
            """
            return _pyEMsoft.f90wrap_rfznamelisttype__get__maxmisor(self._handle)
        
        @maxmisor.setter
        def maxmisor(self, maxmisor):
            _pyEMsoft.f90wrap_rfznamelisttype__set__maxmisor(self._handle, maxmisor)
        
        @property
        def conevector(self):
            """
            Element conevector ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1133
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_rfznamelisttype__array__conevector(self._handle)
            if array_handle in self._arrays:
                conevector = self._arrays[array_handle]
            else:
                conevector = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_rfznamelisttype__array__conevector)
                self._arrays[array_handle] = conevector
            return conevector
        
        @conevector.setter
        def conevector(self, conevector):
            self.conevector[...] = conevector
        
        @property
        def semiconeangle(self):
            """
            Element semiconeangle ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1134
            
            """
            return _pyEMsoft.f90wrap_rfznamelisttype__get__semiconeangle(self._handle)
        
        @semiconeangle.setter
        def semiconeangle(self, semiconeangle):
            _pyEMsoft.f90wrap_rfznamelisttype__set__semiconeangle(self._handle, \
                semiconeangle)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1135
            
            """
            return _pyEMsoft.f90wrap_rfznamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_rfznamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def samplemode(self):
            """
            Element samplemode ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1136
            
            """
            return _pyEMsoft.f90wrap_rfznamelisttype__get__samplemode(self._handle)
        
        @samplemode.setter
        def samplemode(self, samplemode):
            _pyEMsoft.f90wrap_rfznamelisttype__set__samplemode(self._handle, samplemode)
        
        @property
        def euoutname(self):
            """
            Element euoutname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1137
            
            """
            return _pyEMsoft.f90wrap_rfznamelisttype__get__euoutname(self._handle)
        
        @euoutname.setter
        def euoutname(self, euoutname):
            _pyEMsoft.f90wrap_rfznamelisttype__set__euoutname(self._handle, euoutname)
        
        @property
        def cuoutname(self):
            """
            Element cuoutname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1138
            
            """
            return _pyEMsoft.f90wrap_rfznamelisttype__get__cuoutname(self._handle)
        
        @cuoutname.setter
        def cuoutname(self, cuoutname):
            _pyEMsoft.f90wrap_rfznamelisttype__set__cuoutname(self._handle, cuoutname)
        
        @property
        def hooutname(self):
            """
            Element hooutname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1139
            
            """
            return _pyEMsoft.f90wrap_rfznamelisttype__get__hooutname(self._handle)
        
        @hooutname.setter
        def hooutname(self, hooutname):
            _pyEMsoft.f90wrap_rfznamelisttype__set__hooutname(self._handle, hooutname)
        
        @property
        def rooutname(self):
            """
            Element rooutname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1140
            
            """
            return _pyEMsoft.f90wrap_rfznamelisttype__get__rooutname(self._handle)
        
        @rooutname.setter
        def rooutname(self, rooutname):
            _pyEMsoft.f90wrap_rfznamelisttype__set__rooutname(self._handle, rooutname)
        
        @property
        def quoutname(self):
            """
            Element quoutname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1141
            
            """
            return _pyEMsoft.f90wrap_rfznamelisttype__get__quoutname(self._handle)
        
        @quoutname.setter
        def quoutname(self, quoutname):
            _pyEMsoft.f90wrap_rfznamelisttype__set__quoutname(self._handle, quoutname)
        
        @property
        def omoutname(self):
            """
            Element omoutname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1142
            
            """
            return _pyEMsoft.f90wrap_rfznamelisttype__get__omoutname(self._handle)
        
        @omoutname.setter
        def omoutname(self, omoutname):
            _pyEMsoft.f90wrap_rfznamelisttype__set__omoutname(self._handle, omoutname)
        
        @property
        def axoutname(self):
            """
            Element axoutname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1143
            
            """
            return _pyEMsoft.f90wrap_rfznamelisttype__get__axoutname(self._handle)
        
        @axoutname.setter
        def axoutname(self, axoutname):
            _pyEMsoft.f90wrap_rfznamelisttype__set__axoutname(self._handle, axoutname)
        
        def __str__(self):
            ret = ['<rfznamelisttype>{\n']
            ret.append('    pgnum : ')
            ret.append(repr(self.pgnum))
            ret.append(',\n    nsteps : ')
            ret.append(repr(self.nsteps))
            ret.append(',\n    gridtype : ')
            ret.append(repr(self.gridtype))
            ret.append(',\n    qfz : ')
            ret.append(repr(self.qfz))
            ret.append(',\n    axfz : ')
            ret.append(repr(self.axfz))
            ret.append(',\n    rodrigues : ')
            ret.append(repr(self.rodrigues))
            ret.append(',\n    maxmisor : ')
            ret.append(repr(self.maxmisor))
            ret.append(',\n    conevector : ')
            ret.append(repr(self.conevector))
            ret.append(',\n    semiconeangle : ')
            ret.append(repr(self.semiconeangle))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    samplemode : ')
            ret.append(repr(self.samplemode))
            ret.append(',\n    euoutname : ')
            ret.append(repr(self.euoutname))
            ret.append(',\n    cuoutname : ')
            ret.append(repr(self.cuoutname))
            ret.append(',\n    hooutname : ')
            ret.append(repr(self.hooutname))
            ret.append(',\n    rooutname : ')
            ret.append(repr(self.rooutname))
            ret.append(',\n    quoutname : ')
            ret.append(repr(self.quoutname))
            ret.append(',\n    omoutname : ')
            ret.append(repr(self.omoutname))
            ret.append(',\n    axoutname : ')
            ret.append(repr(self.axoutname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.DictIndxOpenCLListType")
    class DictIndxOpenCLListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=dictindxopencllisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1145-1157
        
        """
        def __init__(self, handle=None):
            """
            self = Dictindxopencllisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1145-1157
            
            
            Returns
            -------
            this : Dictindxopencllisttype
            	Object to be constructed
            
            
            Automatically generated constructor for dictindxopencllisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_dictindxopencllisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Dictindxopencllisttype
            
            
            Defined at NameListTypedefs.f90 lines 1145-1157
            
            Parameters
            ----------
            this : Dictindxopencllisttype
            	Object to be destructed
            
            
            Automatically generated destructor for dictindxopencllisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_dictindxopencllisttype_finalise(this=self._handle)
        
        @property
        def numexptsingle(self):
            """
            Element numexptsingle ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1146
            
            """
            return \
                _pyEMsoft.f90wrap_dictindxopencllisttype__get__numexptsingle(self._handle)
        
        @numexptsingle.setter
        def numexptsingle(self, numexptsingle):
            _pyEMsoft.f90wrap_dictindxopencllisttype__set__numexptsingle(self._handle, \
                numexptsingle)
        
        @property
        def numdictsingle(self):
            """
            Element numdictsingle ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1147
            
            """
            return \
                _pyEMsoft.f90wrap_dictindxopencllisttype__get__numdictsingle(self._handle)
        
        @numdictsingle.setter
        def numdictsingle(self, numdictsingle):
            _pyEMsoft.f90wrap_dictindxopencllisttype__set__numdictsingle(self._handle, \
                numdictsingle)
        
        @property
        def totnumexpt(self):
            """
            Element totnumexpt ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1148
            
            """
            return _pyEMsoft.f90wrap_dictindxopencllisttype__get__totnumexpt(self._handle)
        
        @totnumexpt.setter
        def totnumexpt(self, totnumexpt):
            _pyEMsoft.f90wrap_dictindxopencllisttype__set__totnumexpt(self._handle, \
                totnumexpt)
        
        @property
        def totnumdict(self):
            """
            Element totnumdict ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1149
            
            """
            return _pyEMsoft.f90wrap_dictindxopencllisttype__get__totnumdict(self._handle)
        
        @totnumdict.setter
        def totnumdict(self, totnumdict):
            _pyEMsoft.f90wrap_dictindxopencllisttype__set__totnumdict(self._handle, \
                totnumdict)
        
        @property
        def imght(self):
            """
            Element imght ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1150
            
            """
            return _pyEMsoft.f90wrap_dictindxopencllisttype__get__imght(self._handle)
        
        @imght.setter
        def imght(self, imght):
            _pyEMsoft.f90wrap_dictindxopencllisttype__set__imght(self._handle, imght)
        
        @property
        def imgwd(self):
            """
            Element imgwd ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1151
            
            """
            return _pyEMsoft.f90wrap_dictindxopencllisttype__get__imgwd(self._handle)
        
        @imgwd.setter
        def imgwd(self, imgwd):
            _pyEMsoft.f90wrap_dictindxopencllisttype__set__imgwd(self._handle, imgwd)
        
        @property
        def nnk(self):
            """
            Element nnk ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1152
            
            """
            return _pyEMsoft.f90wrap_dictindxopencllisttype__get__nnk(self._handle)
        
        @nnk.setter
        def nnk(self, nnk):
            _pyEMsoft.f90wrap_dictindxopencllisttype__set__nnk(self._handle, nnk)
        
        @property
        def exptfile(self):
            """
            Element exptfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1153
            
            """
            return _pyEMsoft.f90wrap_dictindxopencllisttype__get__exptfile(self._handle)
        
        @exptfile.setter
        def exptfile(self, exptfile):
            _pyEMsoft.f90wrap_dictindxopencllisttype__set__exptfile(self._handle, exptfile)
        
        @property
        def dictfile(self):
            """
            Element dictfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1154
            
            """
            return _pyEMsoft.f90wrap_dictindxopencllisttype__get__dictfile(self._handle)
        
        @dictfile.setter
        def dictfile(self, dictfile):
            _pyEMsoft.f90wrap_dictindxopencllisttype__set__dictfile(self._handle, dictfile)
        
        @property
        def eulerfile(self):
            """
            Element eulerfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1155
            
            """
            return _pyEMsoft.f90wrap_dictindxopencllisttype__get__eulerfile(self._handle)
        
        @eulerfile.setter
        def eulerfile(self, eulerfile):
            _pyEMsoft.f90wrap_dictindxopencllisttype__set__eulerfile(self._handle, \
                eulerfile)
        
        @property
        def meansubtraction(self):
            """
            Element meansubtraction ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 1156
            
            """
            return \
                _pyEMsoft.f90wrap_dictindxopencllisttype__get__meansubtraction(self._handle)
        
        @meansubtraction.setter
        def meansubtraction(self, meansubtraction):
            _pyEMsoft.f90wrap_dictindxopencllisttype__set__meansubtraction(self._handle, \
                meansubtraction)
        
        @property
        def patternflip(self):
            """
            Element patternflip ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 1157
            
            """
            return _pyEMsoft.f90wrap_dictindxopencllisttype__get__patternflip(self._handle)
        
        @patternflip.setter
        def patternflip(self, patternflip):
            _pyEMsoft.f90wrap_dictindxopencllisttype__set__patternflip(self._handle, \
                patternflip)
        
        def __str__(self):
            ret = ['<dictindxopencllisttype>{\n']
            ret.append('    numexptsingle : ')
            ret.append(repr(self.numexptsingle))
            ret.append(',\n    numdictsingle : ')
            ret.append(repr(self.numdictsingle))
            ret.append(',\n    totnumexpt : ')
            ret.append(repr(self.totnumexpt))
            ret.append(',\n    totnumdict : ')
            ret.append(repr(self.totnumdict))
            ret.append(',\n    imght : ')
            ret.append(repr(self.imght))
            ret.append(',\n    imgwd : ')
            ret.append(repr(self.imgwd))
            ret.append(',\n    nnk : ')
            ret.append(repr(self.nnk))
            ret.append(',\n    exptfile : ')
            ret.append(repr(self.exptfile))
            ret.append(',\n    dictfile : ')
            ret.append(repr(self.dictfile))
            ret.append(',\n    eulerfile : ')
            ret.append(repr(self.eulerfile))
            ret.append(',\n    meansubtraction : ')
            ret.append(repr(self.meansubtraction))
            ret.append(',\n    patternflip : ')
            ret.append(repr(self.patternflip))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.PEDKINIndxListType")
    class PEDKINIndxListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=pedkinindxlisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1159-1183
        
        """
        def __init__(self, handle=None):
            """
            self = Pedkinindxlisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1159-1183
            
            
            Returns
            -------
            this : Pedkinindxlisttype
            	Object to be constructed
            
            
            Automatically generated constructor for pedkinindxlisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_pedkinindxlisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Pedkinindxlisttype
            
            
            Defined at NameListTypedefs.f90 lines 1159-1183
            
            Parameters
            ----------
            this : Pedkinindxlisttype
            	Object to be destructed
            
            
            Automatically generated destructor for pedkinindxlisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_pedkinindxlisttype_finalise(this=self._handle)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1160
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__npix(self._handle, npix)
        
        @property
        def ncubochoric(self):
            """
            Element ncubochoric ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1161
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__ncubochoric(self._handle)
        
        @ncubochoric.setter
        def ncubochoric(self, ncubochoric):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__ncubochoric(self._handle, \
                ncubochoric)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1162
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__voltage(self._handle, voltage)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1163
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__dmin(self._handle, dmin)
        
        @property
        def thickness(self):
            """
            Element thickness ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1164
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__thickness(self._handle)
        
        @thickness.setter
        def thickness(self, thickness):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__thickness(self._handle, thickness)
        
        @property
        def rnmpp(self):
            """
            Element rnmpp ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1165
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__rnmpp(self._handle)
        
        @rnmpp.setter
        def rnmpp(self, rnmpp):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__rnmpp(self._handle, rnmpp)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1166
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def numexptsingle(self):
            """
            Element numexptsingle ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1167
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__numexptsingle(self._handle)
        
        @numexptsingle.setter
        def numexptsingle(self, numexptsingle):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__numexptsingle(self._handle, \
                numexptsingle)
        
        @property
        def numdictsingle(self):
            """
            Element numdictsingle ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1168
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__numdictsingle(self._handle)
        
        @numdictsingle.setter
        def numdictsingle(self, numdictsingle):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__numdictsingle(self._handle, \
                numdictsingle)
        
        @property
        def ipf_ht(self):
            """
            Element ipf_ht ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1169
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__ipf_ht(self._handle)
        
        @ipf_ht.setter
        def ipf_ht(self, ipf_ht):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__ipf_ht(self._handle, ipf_ht)
        
        @property
        def ipf_wd(self):
            """
            Element ipf_wd ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1170
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__ipf_wd(self._handle)
        
        @ipf_wd.setter
        def ipf_wd(self, ipf_wd):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__ipf_wd(self._handle, ipf_wd)
        
        @property
        def nnk(self):
            """
            Element nnk ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1171
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__nnk(self._handle)
        
        @nnk.setter
        def nnk(self, nnk):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__nnk(self._handle, nnk)
        
        @property
        def sgmax(self):
            """
            Element sgmax ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1172
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__sgmax(self._handle)
        
        @sgmax.setter
        def sgmax(self, sgmax):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__sgmax(self._handle, sgmax)
        
        @property
        def ww(self):
            """
            Element ww ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1173
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__ww(self._handle)
        
        @ww.setter
        def ww(self, ww):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__ww(self._handle, ww)
        
        @property
        def var(self):
            """
            Element var ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1174
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__var(self._handle)
        
        @var.setter
        def var(self, var):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__var(self._handle, var)
        
        @property
        def exptfile(self):
            """
            Element exptfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1175
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__exptfile(self._handle)
        
        @exptfile.setter
        def exptfile(self, exptfile):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__exptfile(self._handle, exptfile)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1176
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__datafile(self._handle, datafile)
        
        @property
        def ctffile(self):
            """
            Element ctffile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1177
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__ctffile(self._handle)
        
        @ctffile.setter
        def ctffile(self, ctffile):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__ctffile(self._handle, ctffile)
        
        @property
        def tmpfile(self):
            """
            Element tmpfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1178
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__tmpfile(self._handle)
        
        @tmpfile.setter
        def tmpfile(self, tmpfile):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__tmpfile(self._handle, tmpfile)
        
        @property
        def devid(self):
            """
            Element devid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1179
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__devid(self._handle)
        
        @devid.setter
        def devid(self, devid):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__devid(self._handle, devid)
        
        @property
        def platid(self):
            """
            Element platid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1180
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__platid(self._handle)
        
        @platid.setter
        def platid(self, platid):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__platid(self._handle, platid)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1181
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def igmax(self):
            """
            Element igmax ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1183
            
            """
            return _pyEMsoft.f90wrap_pedkinindxlisttype__get__igmax(self._handle)
        
        @igmax.setter
        def igmax(self, igmax):
            _pyEMsoft.f90wrap_pedkinindxlisttype__set__igmax(self._handle, igmax)
        
        def __str__(self):
            ret = ['<pedkinindxlisttype>{\n']
            ret.append('    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    ncubochoric : ')
            ret.append(repr(self.ncubochoric))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    thickness : ')
            ret.append(repr(self.thickness))
            ret.append(',\n    rnmpp : ')
            ret.append(repr(self.rnmpp))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    numexptsingle : ')
            ret.append(repr(self.numexptsingle))
            ret.append(',\n    numdictsingle : ')
            ret.append(repr(self.numdictsingle))
            ret.append(',\n    ipf_ht : ')
            ret.append(repr(self.ipf_ht))
            ret.append(',\n    ipf_wd : ')
            ret.append(repr(self.ipf_wd))
            ret.append(',\n    nnk : ')
            ret.append(repr(self.nnk))
            ret.append(',\n    sgmax : ')
            ret.append(repr(self.sgmax))
            ret.append(',\n    ww : ')
            ret.append(repr(self.ww))
            ret.append(',\n    var : ')
            ret.append(repr(self.var))
            ret.append(',\n    exptfile : ')
            ret.append(repr(self.exptfile))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    ctffile : ')
            ret.append(repr(self.ctffile))
            ret.append(',\n    tmpfile : ')
            ret.append(repr(self.tmpfile))
            ret.append(',\n    devid : ')
            ret.append(repr(self.devid))
            ret.append(',\n    platid : ')
            ret.append(repr(self.platid))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    igmax : ')
            ret.append(repr(self.igmax))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.DisorientationsNameListType")
    class DisorientationsNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=disorientationsnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1185-1189
        
        """
        def __init__(self, handle=None):
            """
            self = Disorientationsnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1185-1189
            
            
            Returns
            -------
            this : Disorientationsnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for disorientationsnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_disorientationsnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Disorientationsnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1185-1189
            
            Parameters
            ----------
            this : Disorientationsnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for disorientationsnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_disorientationsnamelisttype_finalise(this=self._handle)
        
        @property
        def pgnum(self):
            """
            Element pgnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1186
            
            """
            return _pyEMsoft.f90wrap_disorientationsnamelisttype__get__pgnum(self._handle)
        
        @pgnum.setter
        def pgnum(self, pgnum):
            _pyEMsoft.f90wrap_disorientationsnamelisttype__set__pgnum(self._handle, pgnum)
        
        @property
        def pgnum2(self):
            """
            Element pgnum2 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1187
            
            """
            return _pyEMsoft.f90wrap_disorientationsnamelisttype__get__pgnum2(self._handle)
        
        @pgnum2.setter
        def pgnum2(self, pgnum2):
            _pyEMsoft.f90wrap_disorientationsnamelisttype__set__pgnum2(self._handle, pgnum2)
        
        @property
        def inputfile(self):
            """
            Element inputfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1188
            
            """
            return \
                _pyEMsoft.f90wrap_disorientationsnamelisttype__get__inputfile(self._handle)
        
        @inputfile.setter
        def inputfile(self, inputfile):
            _pyEMsoft.f90wrap_disorientationsnamelisttype__set__inputfile(self._handle, \
                inputfile)
        
        @property
        def outputfile(self):
            """
            Element outputfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1189
            
            """
            return \
                _pyEMsoft.f90wrap_disorientationsnamelisttype__get__outputfile(self._handle)
        
        @outputfile.setter
        def outputfile(self, outputfile):
            _pyEMsoft.f90wrap_disorientationsnamelisttype__set__outputfile(self._handle, \
                outputfile)
        
        def __str__(self):
            ret = ['<disorientationsnamelisttype>{\n']
            ret.append('    pgnum : ')
            ret.append(repr(self.pgnum))
            ret.append(',\n    pgnum2 : ')
            ret.append(repr(self.pgnum2))
            ret.append(',\n    inputfile : ')
            ret.append(repr(self.inputfile))
            ret.append(',\n    outputfile : ')
            ret.append(repr(self.outputfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.AverageOrientationNameListType")
    class AverageOrientationNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=averageorientationnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1191-1199
        
        """
        def __init__(self, handle=None):
            """
            self = Averageorientationnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1191-1199
            
            
            Returns
            -------
            this : Averageorientationnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for averageorientationnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_averageorientationnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Averageorientationnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1191-1199
            
            Parameters
            ----------
            this : Averageorientationnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for averageorientationnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_averageorientationnamelisttype_finalise(this=self._handle)
        
        @property
        def nmuse(self):
            """
            Element nmuse ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1192
            
            """
            return \
                _pyEMsoft.f90wrap_averageorientationnamelisttype__get__nmuse(self._handle)
        
        @nmuse.setter
        def nmuse(self, nmuse):
            _pyEMsoft.f90wrap_averageorientationnamelisttype__set__nmuse(self._handle, \
                nmuse)
        
        @property
        def reldisx(self):
            """
            Element reldisx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1193
            
            """
            return \
                _pyEMsoft.f90wrap_averageorientationnamelisttype__get__reldisx(self._handle)
        
        @reldisx.setter
        def reldisx(self, reldisx):
            _pyEMsoft.f90wrap_averageorientationnamelisttype__set__reldisx(self._handle, \
                reldisx)
        
        @property
        def reldisy(self):
            """
            Element reldisy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1194
            
            """
            return \
                _pyEMsoft.f90wrap_averageorientationnamelisttype__get__reldisy(self._handle)
        
        @reldisy.setter
        def reldisy(self, reldisy):
            _pyEMsoft.f90wrap_averageorientationnamelisttype__set__reldisy(self._handle, \
                reldisy)
        
        @property
        def refined(self):
            """
            Element refined ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1195
            
            """
            return \
                _pyEMsoft.f90wrap_averageorientationnamelisttype__get__refined(self._handle)
        
        @refined.setter
        def refined(self, refined):
            _pyEMsoft.f90wrap_averageorientationnamelisttype__set__refined(self._handle, \
                refined)
        
        @property
        def dotproductfile(self):
            """
            Element dotproductfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1196
            
            """
            return \
                _pyEMsoft.f90wrap_averageorientationnamelisttype__get__dotproductfile(self._handle)
        
        @dotproductfile.setter
        def dotproductfile(self, dotproductfile):
            \
                _pyEMsoft.f90wrap_averageorientationnamelisttype__set__dotproductfile(self._handle, \
                dotproductfile)
        
        @property
        def averagectffile(self):
            """
            Element averagectffile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1197
            
            """
            return \
                _pyEMsoft.f90wrap_averageorientationnamelisttype__get__averagectffile(self._handle)
        
        @averagectffile.setter
        def averagectffile(self, averagectffile):
            \
                _pyEMsoft.f90wrap_averageorientationnamelisttype__set__averagectffile(self._handle, \
                averagectffile)
        
        @property
        def averagetxtfile(self):
            """
            Element averagetxtfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1198
            
            """
            return \
                _pyEMsoft.f90wrap_averageorientationnamelisttype__get__averagetxtfile(self._handle)
        
        @averagetxtfile.setter
        def averagetxtfile(self, averagetxtfile):
            \
                _pyEMsoft.f90wrap_averageorientationnamelisttype__set__averagetxtfile(self._handle, \
                averagetxtfile)
        
        @property
        def disorientationmap(self):
            """
            Element disorientationmap ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1199
            
            """
            return \
                _pyEMsoft.f90wrap_averageorientationnamelisttype__get__disorientationmap(self._handle)
        
        @disorientationmap.setter
        def disorientationmap(self, disorientationmap):
            \
                _pyEMsoft.f90wrap_averageorientationnamelisttype__set__disorientationmap(self._handle, \
                disorientationmap)
        
        def __str__(self):
            ret = ['<averageorientationnamelisttype>{\n']
            ret.append('    nmuse : ')
            ret.append(repr(self.nmuse))
            ret.append(',\n    reldisx : ')
            ret.append(repr(self.reldisx))
            ret.append(',\n    reldisy : ')
            ret.append(repr(self.reldisy))
            ret.append(',\n    refined : ')
            ret.append(repr(self.refined))
            ret.append(',\n    dotproductfile : ')
            ret.append(repr(self.dotproductfile))
            ret.append(',\n    averagectffile : ')
            ret.append(repr(self.averagectffile))
            ret.append(',\n    averagetxtfile : ')
            ret.append(repr(self.averagetxtfile))
            ret.append(',\n    disorientationmap : ')
            ret.append(repr(self.disorientationmap))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.OrientationSimilarityNameListType")
    class OrientationSimilarityNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=orientationsimilaritynamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1201-1204
        
        """
        def __init__(self, handle=None):
            """
            self = Orientationsimilaritynamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1201-1204
            
            
            Returns
            -------
            this : Orientationsimilaritynamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for orientationsimilaritynamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_orientationsimilaritynamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Orientationsimilaritynamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1201-1204
            
            Parameters
            ----------
            this : Orientationsimilaritynamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for orientationsimilaritynamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_orientationsimilaritynamelisttype_finalise(this=self._handle)
        
        @property
        def nmuse(self):
            """
            Element nmuse ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1202
            
            """
            return \
                _pyEMsoft.f90wrap_orientationsimilaritynamelisttype__get__nmuse(self._handle)
        
        @nmuse.setter
        def nmuse(self, nmuse):
            _pyEMsoft.f90wrap_orientationsimilaritynamelisttype__set__nmuse(self._handle, \
                nmuse)
        
        @property
        def dotproductfile(self):
            """
            Element dotproductfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1203
            
            """
            return \
                _pyEMsoft.f90wrap_orientationsimilaritynamelisttype__get__dotproductfile(self._handle)
        
        @dotproductfile.setter
        def dotproductfile(self, dotproductfile):
            \
                _pyEMsoft.f90wrap_orientationsimilaritynamelisttype__set__dotproductfile(self._handle, \
                dotproductfile)
        
        @property
        def osmtiff(self):
            """
            Element osmtiff ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1204
            
            """
            return \
                _pyEMsoft.f90wrap_orientationsimilaritynamelisttype__get__osmtiff(self._handle)
        
        @osmtiff.setter
        def osmtiff(self, osmtiff):
            _pyEMsoft.f90wrap_orientationsimilaritynamelisttype__set__osmtiff(self._handle, \
                osmtiff)
        
        def __str__(self):
            ret = ['<orientationsimilaritynamelisttype>{\n']
            ret.append('    nmuse : ')
            ret.append(repr(self.nmuse))
            ret.append(',\n    dotproductfile : ')
            ret.append(repr(self.dotproductfile))
            ret.append(',\n    osmtiff : ')
            ret.append(repr(self.osmtiff))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.KAMNameListType")
    class KAMNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=kamnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1206-1210
        
        """
        def __init__(self, handle=None):
            """
            self = Kamnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1206-1210
            
            
            Returns
            -------
            this : Kamnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for kamnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_kamnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Kamnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1206-1210
            
            Parameters
            ----------
            this : Kamnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for kamnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_kamnamelisttype_finalise(this=self._handle)
        
        @property
        def kamcutoff(self):
            """
            Element kamcutoff ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1207
            
            """
            return _pyEMsoft.f90wrap_kamnamelisttype__get__kamcutoff(self._handle)
        
        @kamcutoff.setter
        def kamcutoff(self, kamcutoff):
            _pyEMsoft.f90wrap_kamnamelisttype__set__kamcutoff(self._handle, kamcutoff)
        
        @property
        def orav(self):
            """
            Element orav ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1208
            
            """
            return _pyEMsoft.f90wrap_kamnamelisttype__get__orav(self._handle)
        
        @orav.setter
        def orav(self, orav):
            _pyEMsoft.f90wrap_kamnamelisttype__set__orav(self._handle, orav)
        
        @property
        def dotproductfile(self):
            """
            Element dotproductfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1209
            
            """
            return _pyEMsoft.f90wrap_kamnamelisttype__get__dotproductfile(self._handle)
        
        @dotproductfile.setter
        def dotproductfile(self, dotproductfile):
            _pyEMsoft.f90wrap_kamnamelisttype__set__dotproductfile(self._handle, \
                dotproductfile)
        
        @property
        def kamtiff(self):
            """
            Element kamtiff ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1210
            
            """
            return _pyEMsoft.f90wrap_kamnamelisttype__get__kamtiff(self._handle)
        
        @kamtiff.setter
        def kamtiff(self, kamtiff):
            _pyEMsoft.f90wrap_kamnamelisttype__set__kamtiff(self._handle, kamtiff)
        
        def __str__(self):
            ret = ['<kamnamelisttype>{\n']
            ret.append('    kamcutoff : ')
            ret.append(repr(self.kamcutoff))
            ret.append(',\n    orav : ')
            ret.append(repr(self.orav))
            ret.append(',\n    dotproductfile : ')
            ret.append(repr(self.dotproductfile))
            ret.append(',\n    kamtiff : ')
            ret.append(repr(self.kamtiff))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.DvsDNameListType")
    class DvsDNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=dvsdnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1212-1220
        
        """
        def __init__(self, handle=None):
            """
            self = Dvsdnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1212-1220
            
            
            Returns
            -------
            this : Dvsdnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for dvsdnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_dvsdnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Dvsdnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1212-1220
            
            Parameters
            ----------
            this : Dvsdnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for dvsdnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_dvsdnamelisttype_finalise(this=self._handle)
        
        @property
        def nmuse(self):
            """
            Element nmuse ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1213
            
            """
            return _pyEMsoft.f90wrap_dvsdnamelisttype__get__nmuse(self._handle)
        
        @nmuse.setter
        def nmuse(self, nmuse):
            _pyEMsoft.f90wrap_dvsdnamelisttype__set__nmuse(self._handle, nmuse)
        
        @property
        def maxdis(self):
            """
            Element maxdis ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1214
            
            """
            return _pyEMsoft.f90wrap_dvsdnamelisttype__get__maxdis(self._handle)
        
        @maxdis.setter
        def maxdis(self, maxdis):
            _pyEMsoft.f90wrap_dvsdnamelisttype__set__maxdis(self._handle, maxdis)
        
        @property
        def minang(self):
            """
            Element minang ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1215
            
            """
            return _pyEMsoft.f90wrap_dvsdnamelisttype__get__minang(self._handle)
        
        @minang.setter
        def minang(self, minang):
            _pyEMsoft.f90wrap_dvsdnamelisttype__set__minang(self._handle, minang)
        
        @property
        def maxang(self):
            """
            Element maxang ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1216
            
            """
            return _pyEMsoft.f90wrap_dvsdnamelisttype__get__maxang(self._handle)
        
        @maxang.setter
        def maxang(self, maxang):
            _pyEMsoft.f90wrap_dvsdnamelisttype__set__maxang(self._handle, maxang)
        
        @property
        def dotproductfile(self):
            """
            Element dotproductfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1217
            
            """
            return _pyEMsoft.f90wrap_dvsdnamelisttype__get__dotproductfile(self._handle)
        
        @dotproductfile.setter
        def dotproductfile(self, dotproductfile):
            _pyEMsoft.f90wrap_dvsdnamelisttype__set__dotproductfile(self._handle, \
                dotproductfile)
        
        @property
        def outfile(self):
            """
            Element outfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1218
            
            """
            return _pyEMsoft.f90wrap_dvsdnamelisttype__get__outfile(self._handle)
        
        @outfile.setter
        def outfile(self, outfile):
            _pyEMsoft.f90wrap_dvsdnamelisttype__set__outfile(self._handle, outfile)
        
        @property
        def povfile(self):
            """
            Element povfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1219
            
            """
            return _pyEMsoft.f90wrap_dvsdnamelisttype__get__povfile(self._handle)
        
        @povfile.setter
        def povfile(self, povfile):
            _pyEMsoft.f90wrap_dvsdnamelisttype__set__povfile(self._handle, povfile)
        
        @property
        def xtalfile(self):
            """
            Element xtalfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1220
            
            """
            return _pyEMsoft.f90wrap_dvsdnamelisttype__get__xtalfile(self._handle)
        
        @xtalfile.setter
        def xtalfile(self, xtalfile):
            _pyEMsoft.f90wrap_dvsdnamelisttype__set__xtalfile(self._handle, xtalfile)
        
        def __str__(self):
            ret = ['<dvsdnamelisttype>{\n']
            ret.append('    nmuse : ')
            ret.append(repr(self.nmuse))
            ret.append(',\n    maxdis : ')
            ret.append(repr(self.maxdis))
            ret.append(',\n    minang : ')
            ret.append(repr(self.minang))
            ret.append(',\n    maxang : ')
            ret.append(repr(self.maxang))
            ret.append(',\n    dotproductfile : ')
            ret.append(repr(self.dotproductfile))
            ret.append(',\n    outfile : ')
            ret.append(repr(self.outfile))
            ret.append(',\n    povfile : ')
            ret.append(repr(self.povfile))
            ret.append(',\n    xtalfile : ')
            ret.append(repr(self.xtalfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDDIpreviewNameListType")
    class EBSDDIpreviewNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsddipreviewnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1222-1239
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsddipreviewnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1222-1239
            
            
            Returns
            -------
            this : Ebsddipreviewnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsddipreviewnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsddipreviewnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsddipreviewnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1222-1239
            
            Parameters
            ----------
            this : Ebsddipreviewnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsddipreviewnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsddipreviewnamelisttype_finalise(this=self._handle)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1223
            
            """
            return _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__set__numsx(self._handle, numsx)
        
        @property
        def numsy(self):
            """
            Element numsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1224
            
            """
            return _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__get__numsy(self._handle)
        
        @numsy.setter
        def numsy(self, numsy):
            _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__set__numsy(self._handle, numsy)
        
        @property
        def hipasswnsteps(self):
            """
            Element hipasswnsteps ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1225
            
            """
            return \
                _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__get__hipasswnsteps(self._handle)
        
        @hipasswnsteps.setter
        def hipasswnsteps(self, hipasswnsteps):
            _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__set__hipasswnsteps(self._handle, \
                hipasswnsteps)
        
        @property
        def nregionsmin(self):
            """
            Element nregionsmin ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1226
            
            """
            return \
                _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__get__nregionsmin(self._handle)
        
        @nregionsmin.setter
        def nregionsmin(self, nregionsmin):
            _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__set__nregionsmin(self._handle, \
                nregionsmin)
        
        @property
        def nregionsmax(self):
            """
            Element nregionsmax ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1227
            
            """
            return \
                _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__get__nregionsmax(self._handle)
        
        @nregionsmax.setter
        def nregionsmax(self, nregionsmax):
            _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__set__nregionsmax(self._handle, \
                nregionsmax)
        
        @property
        def nregionsstepsize(self):
            """
            Element nregionsstepsize ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1228
            
            """
            return \
                _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__get__nregionsstepsize(self._handle)
        
        @nregionsstepsize.setter
        def nregionsstepsize(self, nregionsstepsize):
            \
                _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__set__nregionsstepsize(self._handle, \
                nregionsstepsize)
        
        @property
        def patx(self):
            """
            Element patx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1229
            
            """
            return _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__get__patx(self._handle)
        
        @patx.setter
        def patx(self, patx):
            _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__set__patx(self._handle, patx)
        
        @property
        def paty(self):
            """
            Element paty ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1230
            
            """
            return _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__get__paty(self._handle)
        
        @paty.setter
        def paty(self, paty):
            _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__set__paty(self._handle, paty)
        
        @property
        def ipf_wd(self):
            """
            Element ipf_wd ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1231
            
            """
            return _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__get__ipf_wd(self._handle)
        
        @ipf_wd.setter
        def ipf_wd(self, ipf_wd):
            _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__set__ipf_wd(self._handle, ipf_wd)
        
        @property
        def ipf_ht(self):
            """
            Element ipf_ht ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1232
            
            """
            return _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__get__ipf_ht(self._handle)
        
        @ipf_ht.setter
        def ipf_ht(self, ipf_ht):
            _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__set__ipf_ht(self._handle, ipf_ht)
        
        @property
        def numav(self):
            """
            Element numav ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1233
            
            """
            return _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__get__numav(self._handle)
        
        @numav.setter
        def numav(self, numav):
            _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__set__numav(self._handle, numav)
        
        @property
        def hipasswmax(self):
            """
            Element hipasswmax ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1234
            
            """
            return \
                _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__get__hipasswmax(self._handle)
        
        @hipasswmax.setter
        def hipasswmax(self, hipasswmax):
            _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__set__hipasswmax(self._handle, \
                hipasswmax)
        
        @property
        def patternfile(self):
            """
            Element patternfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1235
            
            """
            return \
                _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__get__patternfile(self._handle)
        
        @patternfile.setter
        def patternfile(self, patternfile):
            _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__set__patternfile(self._handle, \
                patternfile)
        
        @property
        def tifffile(self):
            """
            Element tifffile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1236
            
            """
            return _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__get__tifffile(self._handle)
        
        @tifffile.setter
        def tifffile(self, tifffile):
            _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__set__tifffile(self._handle, \
                tifffile)
        
        @property
        def exptfile(self):
            """
            Element exptfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1237
            
            """
            return _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__get__exptfile(self._handle)
        
        @exptfile.setter
        def exptfile(self, exptfile):
            _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__set__exptfile(self._handle, \
                exptfile)
        
        @property
        def inputtype(self):
            """
            Element inputtype ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1238
            
            """
            return _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__get__inputtype(self._handle)
        
        @inputtype.setter
        def inputtype(self, inputtype):
            _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__set__inputtype(self._handle, \
                inputtype)
        
        @property
        def hdfstrings(self):
            """
            Element hdfstrings ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1239
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__array__hdfstrings(self._handle)
            if array_handle in self._arrays:
                hdfstrings = self._arrays[array_handle]
            else:
                hdfstrings = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsddipreviewnamelisttype__array__hdfstrings)
                self._arrays[array_handle] = hdfstrings
            return hdfstrings
        
        @hdfstrings.setter
        def hdfstrings(self, hdfstrings):
            self.hdfstrings[...] = hdfstrings
        
        def __str__(self):
            ret = ['<ebsddipreviewnamelisttype>{\n']
            ret.append('    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    numsy : ')
            ret.append(repr(self.numsy))
            ret.append(',\n    hipasswnsteps : ')
            ret.append(repr(self.hipasswnsteps))
            ret.append(',\n    nregionsmin : ')
            ret.append(repr(self.nregionsmin))
            ret.append(',\n    nregionsmax : ')
            ret.append(repr(self.nregionsmax))
            ret.append(',\n    nregionsstepsize : ')
            ret.append(repr(self.nregionsstepsize))
            ret.append(',\n    patx : ')
            ret.append(repr(self.patx))
            ret.append(',\n    paty : ')
            ret.append(repr(self.paty))
            ret.append(',\n    ipf_wd : ')
            ret.append(repr(self.ipf_wd))
            ret.append(',\n    ipf_ht : ')
            ret.append(repr(self.ipf_ht))
            ret.append(',\n    numav : ')
            ret.append(repr(self.numav))
            ret.append(',\n    hipasswmax : ')
            ret.append(repr(self.hipasswmax))
            ret.append(',\n    patternfile : ')
            ret.append(repr(self.patternfile))
            ret.append(',\n    tifffile : ')
            ret.append(repr(self.tifffile))
            ret.append(',\n    exptfile : ')
            ret.append(repr(self.exptfile))
            ret.append(',\n    inputtype : ')
            ret.append(repr(self.inputtype))
            ret.append(',\n    hdfstrings : ')
            ret.append(repr(self.hdfstrings))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDIndexingNameListType")
    class EBSDIndexingNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdindexingnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1241-1340
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdindexingnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1241-1340
            
            
            Returns
            -------
            this : Ebsdindexingnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdindexingnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdindexingnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdindexingnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1241-1340
            
            Parameters
            ----------
            this : Ebsdindexingnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdindexingnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype_finalise(this=self._handle)
        
        @property
        def ncubochoric(self):
            """
            Element ncubochoric ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1242
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__ncubochoric(self._handle)
        
        @ncubochoric.setter
        def ncubochoric(self, ncubochoric):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__ncubochoric(self._handle, \
                ncubochoric)
        
        @property
        def numexptsingle(self):
            """
            Element numexptsingle ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1243
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__numexptsingle(self._handle)
        
        @numexptsingle.setter
        def numexptsingle(self, numexptsingle):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__numexptsingle(self._handle, \
                numexptsingle)
        
        @property
        def numdictsingle(self):
            """
            Element numdictsingle ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1244
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__numdictsingle(self._handle)
        
        @numdictsingle.setter
        def numdictsingle(self, numdictsingle):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__numdictsingle(self._handle, \
                numdictsingle)
        
        @property
        def ipf_ht(self):
            """
            Element ipf_ht ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1245
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__ipf_ht(self._handle)
        
        @ipf_ht.setter
        def ipf_ht(self, ipf_ht):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__ipf_ht(self._handle, ipf_ht)
        
        @property
        def ipf_wd(self):
            """
            Element ipf_wd ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1246
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__ipf_wd(self._handle)
        
        @ipf_wd.setter
        def ipf_wd(self, ipf_wd):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__ipf_wd(self._handle, ipf_wd)
        
        @property
        def roi(self):
            """
            Element roi ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1247
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__array__roi(self._handle)
            if array_handle in self._arrays:
                roi = self._arrays[array_handle]
            else:
                roi = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdindexingnamelisttype__array__roi)
                self._arrays[array_handle] = roi
            return roi
        
        @roi.setter
        def roi(self, roi):
            self.roi[...] = roi
        
        @property
        def nnk(self):
            """
            Element nnk ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1248
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__nnk(self._handle)
        
        @nnk.setter
        def nnk(self, nnk):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__nnk(self._handle, nnk)
        
        @property
        def nnav(self):
            """
            Element nnav ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1249
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__nnav(self._handle)
        
        @nnav.setter
        def nnav(self, nnav):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__nnav(self._handle, nnav)
        
        @property
        def nosm(self):
            """
            Element nosm ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1250
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__nosm(self._handle)
        
        @nosm.setter
        def nosm(self, nosm):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__nosm(self._handle, nosm)
        
        @property
        def nism(self):
            """
            Element nism ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1251
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__nism(self._handle)
        
        @nism.setter
        def nism(self, nism):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__nism(self._handle, nism)
        
        @property
        def maskradius(self):
            """
            Element maskradius ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1252
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__maskradius(self._handle)
        
        @maskradius.setter
        def maskradius(self, maskradius):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__maskradius(self._handle, \
                maskradius)
        
        @property
        def exptfile(self):
            """
            Element exptfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1253
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__exptfile(self._handle)
        
        @exptfile.setter
        def exptfile(self, exptfile):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__exptfile(self._handle, \
                exptfile)
        
        @property
        def exptnumsx(self):
            """
            Element exptnumsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1254
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__exptnumsx(self._handle)
        
        @exptnumsx.setter
        def exptnumsx(self, exptnumsx):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__exptnumsx(self._handle, \
                exptnumsx)
        
        @property
        def exptnumsy(self):
            """
            Element exptnumsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1255
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__exptnumsy(self._handle)
        
        @exptnumsy.setter
        def exptnumsy(self, exptnumsy):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__exptnumsy(self._handle, \
                exptnumsy)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1256
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__numsx(self._handle, numsx)
        
        @property
        def numsy(self):
            """
            Element numsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1257
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__numsy(self._handle)
        
        @numsy.setter
        def numsy(self, numsy):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__numsy(self._handle, numsy)
        
        @property
        def binning(self):
            """
            Element binning ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1258
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__binning(self._handle)
        
        @binning.setter
        def binning(self, binning):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__binning(self._handle, binning)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1259
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__nthreads(self._handle, \
                nthreads)
        
        @property
        def energyaverage(self):
            """
            Element energyaverage ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1260
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__energyaverage(self._handle)
        
        @energyaverage.setter
        def energyaverage(self, energyaverage):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__energyaverage(self._handle, \
                energyaverage)
        
        @property
        def devid(self):
            """
            Element devid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1261
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__devid(self._handle)
        
        @devid.setter
        def devid(self, devid):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__devid(self._handle, devid)
        
        @property
        def usenumd(self):
            """
            Element usenumd ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1262
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__usenumd(self._handle)
        
        @usenumd.setter
        def usenumd(self, usenumd):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__usenumd(self._handle, usenumd)
        
        @property
        def multidevid(self):
            """
            Element multidevid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1263
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__array__multidevid(self._handle)
            if array_handle in self._arrays:
                multidevid = self._arrays[array_handle]
            else:
                multidevid = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdindexingnamelisttype__array__multidevid)
                self._arrays[array_handle] = multidevid
            return multidevid
        
        @multidevid.setter
        def multidevid(self, multidevid):
            self.multidevid[...] = multidevid
        
        @property
        def platid(self):
            """
            Element platid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1264
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__platid(self._handle)
        
        @platid.setter
        def platid(self, platid):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__platid(self._handle, platid)
        
        @property
        def nregions(self):
            """
            Element nregions ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1265
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__nregions(self._handle)
        
        @nregions.setter
        def nregions(self, nregions):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__nregions(self._handle, \
                nregions)
        
        @property
        def nlines(self):
            """
            Element nlines ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1266
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__nlines(self._handle)
        
        @nlines.setter
        def nlines(self, nlines):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__nlines(self._handle, nlines)
        
        @property
        def l(self):
            """
            Element l ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1267
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__l(self._handle)
        
        @l.setter
        def l(self, l):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__l(self._handle, l)
        
        @property
        def thetac(self):
            """
            Element thetac ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1268
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__thetac(self._handle)
        
        @thetac.setter
        def thetac(self, thetac):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__thetac(self._handle, thetac)
        
        @property
        def delta(self):
            """
            Element delta ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1269
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__delta(self._handle)
        
        @delta.setter
        def delta(self, delta):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__delta(self._handle, delta)
        
        @property
        def omega(self):
            """
            Element omega ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1270
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__omega(self._handle)
        
        @omega.setter
        def omega(self, omega):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__omega(self._handle, omega)
        
        @property
        def xpc(self):
            """
            Element xpc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1271
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__xpc(self._handle)
        
        @xpc.setter
        def xpc(self, xpc):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__xpc(self._handle, xpc)
        
        @property
        def ypc(self):
            """
            Element ypc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1272
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__ypc(self._handle)
        
        @ypc.setter
        def ypc(self, ypc):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__ypc(self._handle, ypc)
        
        @property
        def isangle(self):
            """
            Element isangle ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1273
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__isangle(self._handle)
        
        @isangle.setter
        def isangle(self, isangle):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__isangle(self._handle, isangle)
        
        @property
        def energymin(self):
            """
            Element energymin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1274
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__energymin(self._handle)
        
        @energymin.setter
        def energymin(self, energymin):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__energymin(self._handle, \
                energymin)
        
        @property
        def energymax(self):
            """
            Element energymax ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1275
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__energymax(self._handle)
        
        @energymax.setter
        def energymax(self, energymax):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__energymax(self._handle, \
                energymax)
        
        @property
        def gammavalue(self):
            """
            Element gammavalue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1276
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__gammavalue(self._handle)
        
        @gammavalue.setter
        def gammavalue(self, gammavalue):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__gammavalue(self._handle, \
                gammavalue)
        
        @property
        def axisangle(self):
            """
            Element axisangle ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1277
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__array__axisangle(self._handle)
            if array_handle in self._arrays:
                axisangle = self._arrays[array_handle]
            else:
                axisangle = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdindexingnamelisttype__array__axisangle)
                self._arrays[array_handle] = axisangle
            return axisangle
        
        @axisangle.setter
        def axisangle(self, axisangle):
            self.axisangle[...] = axisangle
        
        @property
        def beamcurrent(self):
            """
            Element beamcurrent ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1278
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__beamcurrent(self._handle)
        
        @beamcurrent.setter
        def beamcurrent(self, beamcurrent):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__beamcurrent(self._handle, \
                beamcurrent)
        
        @property
        def dwelltime(self):
            """
            Element dwelltime ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1279
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__dwelltime(self._handle)
        
        @dwelltime.setter
        def dwelltime(self, dwelltime):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__dwelltime(self._handle, \
                dwelltime)
        
        @property
        def hipassw(self):
            """
            Element hipassw ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1280
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__hipassw(self._handle)
        
        @hipassw.setter
        def hipassw(self, hipassw):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__hipassw(self._handle, hipassw)
        
        @property
        def maskpattern(self):
            """
            Element maskpattern ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1281
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__maskpattern(self._handle)
        
        @maskpattern.setter
        def maskpattern(self, maskpattern):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__maskpattern(self._handle, \
                maskpattern)
        
        @property
        def scalingmode(self):
            """
            Element scalingmode ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1282
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__scalingmode(self._handle)
        
        @scalingmode.setter
        def scalingmode(self, scalingmode):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__scalingmode(self._handle, \
                scalingmode)
        
        @property
        def notify(self):
            """
            Element notify ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1283
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__notify(self._handle)
        
        @notify.setter
        def notify(self, notify):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__notify(self._handle, notify)
        
        @property
        def similaritymetric(self):
            """
            Element similaritymetric ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1284
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__similaritymetric(self._handle)
        
        @similaritymetric.setter
        def similaritymetric(self, similaritymetric):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__similaritymetric(self._handle, \
                similaritymetric)
        
        @property
        def keeptmpfile(self):
            """
            Element keeptmpfile ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1287
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__keeptmpfile(self._handle)
        
        @keeptmpfile.setter
        def keeptmpfile(self, keeptmpfile):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__keeptmpfile(self._handle, \
                keeptmpfile)
        
        @property
        def spatialaverage(self):
            """
            Element spatialaverage ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1288
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__spatialaverage(self._handle)
        
        @spatialaverage.setter
        def spatialaverage(self, spatialaverage):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__spatialaverage(self._handle, \
                spatialaverage)
        
        @property
        def anglefile(self):
            """
            Element anglefile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1289
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__anglefile(self._handle)
        
        @anglefile.setter
        def anglefile(self, anglefile):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__anglefile(self._handle, \
                anglefile)
        
        @property
        def masterfile(self):
            """
            Element masterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1291
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__masterfile(self._handle)
        
        @masterfile.setter
        def masterfile(self, masterfile):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__masterfile(self._handle, \
                masterfile)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1292
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__energyfile(self._handle, \
                energyfile)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1293
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__datafile(self._handle, \
                datafile)
        
        @property
        def tmpfile(self):
            """
            Element tmpfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1294
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__tmpfile(self._handle)
        
        @tmpfile.setter
        def tmpfile(self, tmpfile):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__tmpfile(self._handle, tmpfile)
        
        @property
        def ctffile(self):
            """
            Element ctffile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1295
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__ctffile(self._handle)
        
        @ctffile.setter
        def ctffile(self, ctffile):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__ctffile(self._handle, ctffile)
        
        @property
        def avctffile(self):
            """
            Element avctffile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1296
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__avctffile(self._handle)
        
        @avctffile.setter
        def avctffile(self, avctffile):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__avctffile(self._handle, \
                avctffile)
        
        @property
        def angfile(self):
            """
            Element angfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1297
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__angfile(self._handle)
        
        @angfile.setter
        def angfile(self, angfile):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__angfile(self._handle, angfile)
        
        @property
        def eulerfile(self):
            """
            Element eulerfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1298
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__eulerfile(self._handle)
        
        @eulerfile.setter
        def eulerfile(self, eulerfile):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__eulerfile(self._handle, \
                eulerfile)
        
        @property
        def dictfile(self):
            """
            Element dictfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1299
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__dictfile(self._handle)
        
        @dictfile.setter
        def dictfile(self, dictfile):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__dictfile(self._handle, \
                dictfile)
        
        @property
        def maskfile(self):
            """
            Element maskfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1300
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__maskfile(self._handle)
        
        @maskfile.setter
        def maskfile(self, maskfile):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__maskfile(self._handle, \
                maskfile)
        
        @property
        def indexingmode(self):
            """
            Element indexingmode ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1301
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__indexingmode(self._handle)
        
        @indexingmode.setter
        def indexingmode(self, indexingmode):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__indexingmode(self._handle, \
                indexingmode)
        
        @property
        def refinementnmlfile(self):
            """
            Element refinementnmlfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1302
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__refinementnmlfile(self._handle)
        
        @refinementnmlfile.setter
        def refinementnmlfile(self, refinementnmlfile):
            \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__refinementnmlfile(self._handle, \
                refinementnmlfile)
        
        @property
        def inputtype(self):
            """
            Element inputtype ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1303
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__inputtype(self._handle)
        
        @inputtype.setter
        def inputtype(self, inputtype):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__inputtype(self._handle, \
                inputtype)
        
        @property
        def hdfstrings(self):
            """
            Element hdfstrings ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1304
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__array__hdfstrings(self._handle)
            if array_handle in self._arrays:
                hdfstrings = self._arrays[array_handle]
            else:
                hdfstrings = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdindexingnamelisttype__array__hdfstrings)
                self._arrays[array_handle] = hdfstrings
            return hdfstrings
        
        @hdfstrings.setter
        def hdfstrings(self, hdfstrings):
            self.hdfstrings[...] = hdfstrings
        
        @property
        def numangles(self):
            """
            Element numangles ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1306
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__numangles(self._handle)
        
        @numangles.setter
        def numangles(self, numangles):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__numangles(self._handle, \
                numangles)
        
        @property
        def numebins(self):
            """
            Element numebins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1307
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__numebins(self._handle)
        
        @numebins.setter
        def numebins(self, numebins):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__numebins(self._handle, \
                numebins)
        
        @property
        def numzbins(self):
            """
            Element numzbins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1308
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__numzbins(self._handle)
        
        @numzbins.setter
        def numzbins(self, numzbins):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__numzbins(self._handle, \
                numzbins)
        
        @property
        def nsx(self):
            """
            Element nsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1309
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__nsx(self._handle)
        
        @nsx.setter
        def nsx(self, nsx):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__nsx(self._handle, nsx)
        
        @property
        def nsy(self):
            """
            Element nsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1310
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__nsy(self._handle)
        
        @nsy.setter
        def nsy(self, nsy):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__nsy(self._handle, nsy)
        
        @property
        def num_el(self):
            """
            Element num_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1311
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__num_el(self._handle)
        
        @num_el.setter
        def num_el(self, num_el):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__num_el(self._handle, num_el)
        
        @property
        def mcnthreads(self):
            """
            Element mcnthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1312
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__mcnthreads(self._handle)
        
        @mcnthreads.setter
        def mcnthreads(self, mcnthreads):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__mcnthreads(self._handle, \
                mcnthreads)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1313
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__npx(self._handle, npx)
        
        @property
        def npy(self):
            """
            Element npy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1314
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__npy(self._handle)
        
        @npy.setter
        def npy(self, npy):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__npy(self._handle, npy)
        
        @property
        def ne(self):
            """
            Element ne ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1315
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__ne(self._handle)
        
        @ne.setter
        def ne(self, ne):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__ne(self._handle, ne)
        
        @property
        def numset(self):
            """
            Element numset ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1316
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__numset(self._handle)
        
        @numset.setter
        def numset(self, numset):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__numset(self._handle, numset)
        
        @property
        def section(self):
            """
            Element section ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1317
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__section(self._handle)
        
        @section.setter
        def section(self, section):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__section(self._handle, section)
        
        @property
        def multiplier(self):
            """
            Element multiplier ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1318
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__multiplier(self._handle)
        
        @multiplier.setter
        def multiplier(self, multiplier):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__multiplier(self._handle, \
                multiplier)
        
        @property
        def totnum_el(self):
            """
            Element totnum_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1319
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__totnum_el(self._handle)
        
        @totnum_el.setter
        def totnum_el(self, totnum_el):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__totnum_el(self._handle, \
                totnum_el)
        
        @property
        def ekev(self):
            """
            Element ekev ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1320
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__ekev(self._handle)
        
        @ekev.setter
        def ekev(self, ekev):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__ekev(self._handle, ekev)
        
        @property
        def ehistmin(self):
            """
            Element ehistmin ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1321
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__ehistmin(self._handle)
        
        @ehistmin.setter
        def ehistmin(self, ehistmin):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__ehistmin(self._handle, \
                ehistmin)
        
        @property
        def ebinsize(self):
            """
            Element ebinsize ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1322
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__ebinsize(self._handle)
        
        @ebinsize.setter
        def ebinsize(self, ebinsize):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__ebinsize(self._handle, \
                ebinsize)
        
        @property
        def depthmax(self):
            """
            Element depthmax ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1323
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__depthmax(self._handle)
        
        @depthmax.setter
        def depthmax(self, depthmax):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__depthmax(self._handle, \
                depthmax)
        
        @property
        def depthstep(self):
            """
            Element depthstep ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1324
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__depthstep(self._handle)
        
        @depthstep.setter
        def depthstep(self, depthstep):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__depthstep(self._handle, \
                depthstep)
        
        @property
        def mcsig(self):
            """
            Element mcsig ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1325
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__mcsig(self._handle)
        
        @mcsig.setter
        def mcsig(self, mcsig):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__mcsig(self._handle, mcsig)
        
        @property
        def mcomega(self):
            """
            Element mcomega ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1326
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__mcomega(self._handle)
        
        @mcomega.setter
        def mcomega(self, mcomega):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__mcomega(self._handle, mcomega)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1327
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def stepx(self):
            """
            Element stepx ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1328
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__stepx(self._handle)
        
        @stepx.setter
        def stepx(self, stepx):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__stepx(self._handle, stepx)
        
        @property
        def stepy(self):
            """
            Element stepy ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1329
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__stepy(self._handle)
        
        @stepy.setter
        def stepy(self, stepy):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__stepy(self._handle, stepy)
        
        @property
        def wd(self):
            """
            Element wd ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1330
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__wd(self._handle)
        
        @wd.setter
        def wd(self, wd):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__wd(self._handle, wd)
        
        @property
        def mcmode(self):
            """
            Element mcmode ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1331
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__mcmode(self._handle)
        
        @mcmode.setter
        def mcmode(self, mcmode):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__mcmode(self._handle, mcmode)
        
        @property
        def anglemode(self):
            """
            Element anglemode ftype=character(5) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1332
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__anglemode(self._handle)
        
        @anglemode.setter
        def anglemode(self, anglemode):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__anglemode(self._handle, \
                anglemode)
        
        @property
        def sqorhe(self):
            """
            Element sqorhe ftype=character(6) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1333
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__sqorhe(self._handle)
        
        @sqorhe.setter
        def sqorhe(self, sqorhe):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__sqorhe(self._handle, sqorhe)
        
        @property
        def mcscversion(self):
            """
            Element mcscversion ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1334
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__mcscversion(self._handle)
        
        @mcscversion.setter
        def mcscversion(self, mcscversion):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__mcscversion(self._handle, \
                mcscversion)
        
        @property
        def masterscversion(self):
            """
            Element masterscversion ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1335
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__masterscversion(self._handle)
        
        @masterscversion.setter
        def masterscversion(self, masterscversion):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__masterscversion(self._handle, \
                masterscversion)
        
        @property
        def masterprogname(self):
            """
            Element masterprogname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1336
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__masterprogname(self._handle)
        
        @masterprogname.setter
        def masterprogname(self, masterprogname):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__masterprogname(self._handle, \
                masterprogname)
        
        @property
        def masterxtalname(self):
            """
            Element masterxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1337
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__masterxtalname(self._handle)
        
        @masterxtalname.setter
        def masterxtalname(self, masterxtalname):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__masterxtalname(self._handle, \
                masterxtalname)
        
        @property
        def masterenergyfile(self):
            """
            Element masterenergyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1338
            
            """
            return \
                _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__masterenergyfile(self._handle)
        
        @masterenergyfile.setter
        def masterenergyfile(self, masterenergyfile):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__masterenergyfile(self._handle, \
                masterenergyfile)
        
        @property
        def mcprogname(self):
            """
            Element mcprogname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1339
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__mcprogname(self._handle)
        
        @mcprogname.setter
        def mcprogname(self, mcprogname):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__mcprogname(self._handle, \
                mcprogname)
        
        @property
        def mcxtalname(self):
            """
            Element mcxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1340
            
            """
            return _pyEMsoft.f90wrap_ebsdindexingnamelisttype__get__mcxtalname(self._handle)
        
        @mcxtalname.setter
        def mcxtalname(self, mcxtalname):
            _pyEMsoft.f90wrap_ebsdindexingnamelisttype__set__mcxtalname(self._handle, \
                mcxtalname)
        
        def __str__(self):
            ret = ['<ebsdindexingnamelisttype>{\n']
            ret.append('    ncubochoric : ')
            ret.append(repr(self.ncubochoric))
            ret.append(',\n    numexptsingle : ')
            ret.append(repr(self.numexptsingle))
            ret.append(',\n    numdictsingle : ')
            ret.append(repr(self.numdictsingle))
            ret.append(',\n    ipf_ht : ')
            ret.append(repr(self.ipf_ht))
            ret.append(',\n    ipf_wd : ')
            ret.append(repr(self.ipf_wd))
            ret.append(',\n    roi : ')
            ret.append(repr(self.roi))
            ret.append(',\n    nnk : ')
            ret.append(repr(self.nnk))
            ret.append(',\n    nnav : ')
            ret.append(repr(self.nnav))
            ret.append(',\n    nosm : ')
            ret.append(repr(self.nosm))
            ret.append(',\n    nism : ')
            ret.append(repr(self.nism))
            ret.append(',\n    maskradius : ')
            ret.append(repr(self.maskradius))
            ret.append(',\n    exptfile : ')
            ret.append(repr(self.exptfile))
            ret.append(',\n    exptnumsx : ')
            ret.append(repr(self.exptnumsx))
            ret.append(',\n    exptnumsy : ')
            ret.append(repr(self.exptnumsy))
            ret.append(',\n    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    numsy : ')
            ret.append(repr(self.numsy))
            ret.append(',\n    binning : ')
            ret.append(repr(self.binning))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    energyaverage : ')
            ret.append(repr(self.energyaverage))
            ret.append(',\n    devid : ')
            ret.append(repr(self.devid))
            ret.append(',\n    usenumd : ')
            ret.append(repr(self.usenumd))
            ret.append(',\n    multidevid : ')
            ret.append(repr(self.multidevid))
            ret.append(',\n    platid : ')
            ret.append(repr(self.platid))
            ret.append(',\n    nregions : ')
            ret.append(repr(self.nregions))
            ret.append(',\n    nlines : ')
            ret.append(repr(self.nlines))
            ret.append(',\n    l : ')
            ret.append(repr(self.l))
            ret.append(',\n    thetac : ')
            ret.append(repr(self.thetac))
            ret.append(',\n    delta : ')
            ret.append(repr(self.delta))
            ret.append(',\n    omega : ')
            ret.append(repr(self.omega))
            ret.append(',\n    xpc : ')
            ret.append(repr(self.xpc))
            ret.append(',\n    ypc : ')
            ret.append(repr(self.ypc))
            ret.append(',\n    isangle : ')
            ret.append(repr(self.isangle))
            ret.append(',\n    energymin : ')
            ret.append(repr(self.energymin))
            ret.append(',\n    energymax : ')
            ret.append(repr(self.energymax))
            ret.append(',\n    gammavalue : ')
            ret.append(repr(self.gammavalue))
            ret.append(',\n    axisangle : ')
            ret.append(repr(self.axisangle))
            ret.append(',\n    beamcurrent : ')
            ret.append(repr(self.beamcurrent))
            ret.append(',\n    dwelltime : ')
            ret.append(repr(self.dwelltime))
            ret.append(',\n    hipassw : ')
            ret.append(repr(self.hipassw))
            ret.append(',\n    maskpattern : ')
            ret.append(repr(self.maskpattern))
            ret.append(',\n    scalingmode : ')
            ret.append(repr(self.scalingmode))
            ret.append(',\n    notify : ')
            ret.append(repr(self.notify))
            ret.append(',\n    similaritymetric : ')
            ret.append(repr(self.similaritymetric))
            ret.append(',\n    keeptmpfile : ')
            ret.append(repr(self.keeptmpfile))
            ret.append(',\n    spatialaverage : ')
            ret.append(repr(self.spatialaverage))
            ret.append(',\n    anglefile : ')
            ret.append(repr(self.anglefile))
            ret.append(',\n    masterfile : ')
            ret.append(repr(self.masterfile))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    tmpfile : ')
            ret.append(repr(self.tmpfile))
            ret.append(',\n    ctffile : ')
            ret.append(repr(self.ctffile))
            ret.append(',\n    avctffile : ')
            ret.append(repr(self.avctffile))
            ret.append(',\n    angfile : ')
            ret.append(repr(self.angfile))
            ret.append(',\n    eulerfile : ')
            ret.append(repr(self.eulerfile))
            ret.append(',\n    dictfile : ')
            ret.append(repr(self.dictfile))
            ret.append(',\n    maskfile : ')
            ret.append(repr(self.maskfile))
            ret.append(',\n    indexingmode : ')
            ret.append(repr(self.indexingmode))
            ret.append(',\n    refinementnmlfile : ')
            ret.append(repr(self.refinementnmlfile))
            ret.append(',\n    inputtype : ')
            ret.append(repr(self.inputtype))
            ret.append(',\n    hdfstrings : ')
            ret.append(repr(self.hdfstrings))
            ret.append(',\n    numangles : ')
            ret.append(repr(self.numangles))
            ret.append(',\n    numebins : ')
            ret.append(repr(self.numebins))
            ret.append(',\n    numzbins : ')
            ret.append(repr(self.numzbins))
            ret.append(',\n    nsx : ')
            ret.append(repr(self.nsx))
            ret.append(',\n    nsy : ')
            ret.append(repr(self.nsy))
            ret.append(',\n    num_el : ')
            ret.append(repr(self.num_el))
            ret.append(',\n    mcnthreads : ')
            ret.append(repr(self.mcnthreads))
            ret.append(',\n    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    npy : ')
            ret.append(repr(self.npy))
            ret.append(',\n    ne : ')
            ret.append(repr(self.ne))
            ret.append(',\n    numset : ')
            ret.append(repr(self.numset))
            ret.append(',\n    section : ')
            ret.append(repr(self.section))
            ret.append(',\n    multiplier : ')
            ret.append(repr(self.multiplier))
            ret.append(',\n    totnum_el : ')
            ret.append(repr(self.totnum_el))
            ret.append(',\n    ekev : ')
            ret.append(repr(self.ekev))
            ret.append(',\n    ehistmin : ')
            ret.append(repr(self.ehistmin))
            ret.append(',\n    ebinsize : ')
            ret.append(repr(self.ebinsize))
            ret.append(',\n    depthmax : ')
            ret.append(repr(self.depthmax))
            ret.append(',\n    depthstep : ')
            ret.append(repr(self.depthstep))
            ret.append(',\n    mcsig : ')
            ret.append(repr(self.mcsig))
            ret.append(',\n    mcomega : ')
            ret.append(repr(self.mcomega))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    stepx : ')
            ret.append(repr(self.stepx))
            ret.append(',\n    stepy : ')
            ret.append(repr(self.stepy))
            ret.append(',\n    wd : ')
            ret.append(repr(self.wd))
            ret.append(',\n    mcmode : ')
            ret.append(repr(self.mcmode))
            ret.append(',\n    anglemode : ')
            ret.append(repr(self.anglemode))
            ret.append(',\n    sqorhe : ')
            ret.append(repr(self.sqorhe))
            ret.append(',\n    mcscversion : ')
            ret.append(repr(self.mcscversion))
            ret.append(',\n    masterscversion : ')
            ret.append(repr(self.masterscversion))
            ret.append(',\n    masterprogname : ')
            ret.append(repr(self.masterprogname))
            ret.append(',\n    masterxtalname : ')
            ret.append(repr(self.masterxtalname))
            ret.append(',\n    masterenergyfile : ')
            ret.append(repr(self.masterenergyfile))
            ret.append(',\n    mcprogname : ')
            ret.append(repr(self.mcprogname))
            ret.append(',\n    mcxtalname : ')
            ret.append(repr(self.mcxtalname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.ADPNameListType")
    class ADPNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=adpnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1388-1407
        
        """
        def __init__(self, handle=None):
            """
            self = Adpnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1388-1407
            
            
            Returns
            -------
            this : Adpnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for adpnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_adpnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Adpnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1388-1407
            
            Parameters
            ----------
            this : Adpnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for adpnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_adpnamelisttype_finalise(this=self._handle)
        
        @property
        def ipf_ht(self):
            """
            Element ipf_ht ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1389
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__ipf_ht(self._handle)
        
        @ipf_ht.setter
        def ipf_ht(self, ipf_ht):
            _pyEMsoft.f90wrap_adpnamelisttype__set__ipf_ht(self._handle, ipf_ht)
        
        @property
        def ipf_wd(self):
            """
            Element ipf_wd ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1390
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__ipf_wd(self._handle)
        
        @ipf_wd.setter
        def ipf_wd(self, ipf_wd):
            _pyEMsoft.f90wrap_adpnamelisttype__set__ipf_wd(self._handle, ipf_wd)
        
        @property
        def maskradius(self):
            """
            Element maskradius ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1391
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__maskradius(self._handle)
        
        @maskradius.setter
        def maskradius(self, maskradius):
            _pyEMsoft.f90wrap_adpnamelisttype__set__maskradius(self._handle, maskradius)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1392
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_adpnamelisttype__set__numsx(self._handle, numsx)
        
        @property
        def numsy(self):
            """
            Element numsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1393
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__numsy(self._handle)
        
        @numsy.setter
        def numsy(self, numsy):
            _pyEMsoft.f90wrap_adpnamelisttype__set__numsy(self._handle, numsy)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1394
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_adpnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def nregions(self):
            """
            Element nregions ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1395
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__nregions(self._handle)
        
        @nregions.setter
        def nregions(self, nregions):
            _pyEMsoft.f90wrap_adpnamelisttype__set__nregions(self._handle, nregions)
        
        @property
        def roi(self):
            """
            Element roi ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1396
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_adpnamelisttype__array__roi(self._handle)
            if array_handle in self._arrays:
                roi = self._arrays[array_handle]
            else:
                roi = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_adpnamelisttype__array__roi)
                self._arrays[array_handle] = roi
            return roi
        
        @roi.setter
        def roi(self, roi):
            self.roi[...] = roi
        
        @property
        def hipassw(self):
            """
            Element hipassw ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1397
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__hipassw(self._handle)
        
        @hipassw.setter
        def hipassw(self, hipassw):
            _pyEMsoft.f90wrap_adpnamelisttype__set__hipassw(self._handle, hipassw)
        
        @property
        def maskpattern(self):
            """
            Element maskpattern ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1398
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__maskpattern(self._handle)
        
        @maskpattern.setter
        def maskpattern(self, maskpattern):
            _pyEMsoft.f90wrap_adpnamelisttype__set__maskpattern(self._handle, maskpattern)
        
        @property
        def filterpattern(self):
            """
            Element filterpattern ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1399
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__filterpattern(self._handle)
        
        @filterpattern.setter
        def filterpattern(self, filterpattern):
            _pyEMsoft.f90wrap_adpnamelisttype__set__filterpattern(self._handle, \
                filterpattern)
        
        @property
        def keeptmpfile(self):
            """
            Element keeptmpfile ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1400
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__keeptmpfile(self._handle)
        
        @keeptmpfile.setter
        def keeptmpfile(self, keeptmpfile):
            _pyEMsoft.f90wrap_adpnamelisttype__set__keeptmpfile(self._handle, keeptmpfile)
        
        @property
        def usetmpfile(self):
            """
            Element usetmpfile ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1401
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__usetmpfile(self._handle)
        
        @usetmpfile.setter
        def usetmpfile(self, usetmpfile):
            _pyEMsoft.f90wrap_adpnamelisttype__set__usetmpfile(self._handle, usetmpfile)
        
        @property
        def exptfile(self):
            """
            Element exptfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1402
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__exptfile(self._handle)
        
        @exptfile.setter
        def exptfile(self, exptfile):
            _pyEMsoft.f90wrap_adpnamelisttype__set__exptfile(self._handle, exptfile)
        
        @property
        def tmpfile(self):
            """
            Element tmpfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1403
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__tmpfile(self._handle)
        
        @tmpfile.setter
        def tmpfile(self, tmpfile):
            _pyEMsoft.f90wrap_adpnamelisttype__set__tmpfile(self._handle, tmpfile)
        
        @property
        def tiffname(self):
            """
            Element tiffname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1404
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__tiffname(self._handle)
        
        @tiffname.setter
        def tiffname(self, tiffname):
            _pyEMsoft.f90wrap_adpnamelisttype__set__tiffname(self._handle, tiffname)
        
        @property
        def maskfile(self):
            """
            Element maskfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1405
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__maskfile(self._handle)
        
        @maskfile.setter
        def maskfile(self, maskfile):
            _pyEMsoft.f90wrap_adpnamelisttype__set__maskfile(self._handle, maskfile)
        
        @property
        def inputtype(self):
            """
            Element inputtype ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1406
            
            """
            return _pyEMsoft.f90wrap_adpnamelisttype__get__inputtype(self._handle)
        
        @inputtype.setter
        def inputtype(self, inputtype):
            _pyEMsoft.f90wrap_adpnamelisttype__set__inputtype(self._handle, inputtype)
        
        @property
        def hdfstrings(self):
            """
            Element hdfstrings ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1407
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_adpnamelisttype__array__hdfstrings(self._handle)
            if array_handle in self._arrays:
                hdfstrings = self._arrays[array_handle]
            else:
                hdfstrings = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_adpnamelisttype__array__hdfstrings)
                self._arrays[array_handle] = hdfstrings
            return hdfstrings
        
        @hdfstrings.setter
        def hdfstrings(self, hdfstrings):
            self.hdfstrings[...] = hdfstrings
        
        def __str__(self):
            ret = ['<adpnamelisttype>{\n']
            ret.append('    ipf_ht : ')
            ret.append(repr(self.ipf_ht))
            ret.append(',\n    ipf_wd : ')
            ret.append(repr(self.ipf_wd))
            ret.append(',\n    maskradius : ')
            ret.append(repr(self.maskradius))
            ret.append(',\n    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    numsy : ')
            ret.append(repr(self.numsy))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    nregions : ')
            ret.append(repr(self.nregions))
            ret.append(',\n    roi : ')
            ret.append(repr(self.roi))
            ret.append(',\n    hipassw : ')
            ret.append(repr(self.hipassw))
            ret.append(',\n    maskpattern : ')
            ret.append(repr(self.maskpattern))
            ret.append(',\n    filterpattern : ')
            ret.append(repr(self.filterpattern))
            ret.append(',\n    keeptmpfile : ')
            ret.append(repr(self.keeptmpfile))
            ret.append(',\n    usetmpfile : ')
            ret.append(repr(self.usetmpfile))
            ret.append(',\n    exptfile : ')
            ret.append(repr(self.exptfile))
            ret.append(',\n    tmpfile : ')
            ret.append(repr(self.tmpfile))
            ret.append(',\n    tiffname : ')
            ret.append(repr(self.tiffname))
            ret.append(',\n    maskfile : ')
            ret.append(repr(self.maskfile))
            ret.append(',\n    inputtype : ')
            ret.append(repr(self.inputtype))
            ret.append(',\n    hdfstrings : ')
            ret.append(repr(self.hdfstrings))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.OSMNameListType")
    class OSMNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=osmnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1409-1412
        
        """
        def __init__(self, handle=None):
            """
            self = Osmnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1409-1412
            
            
            Returns
            -------
            this : Osmnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for osmnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_osmnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Osmnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1409-1412
            
            Parameters
            ----------
            this : Osmnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for osmnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_osmnamelisttype_finalise(this=self._handle)
        
        @property
        def nmatch(self):
            """
            Element nmatch ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1410
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_osmnamelisttype__array__nmatch(self._handle)
            if array_handle in self._arrays:
                nmatch = self._arrays[array_handle]
            else:
                nmatch = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_osmnamelisttype__array__nmatch)
                self._arrays[array_handle] = nmatch
            return nmatch
        
        @nmatch.setter
        def nmatch(self, nmatch):
            self.nmatch[...] = nmatch
        
        @property
        def dotproductfile(self):
            """
            Element dotproductfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1411
            
            """
            return _pyEMsoft.f90wrap_osmnamelisttype__get__dotproductfile(self._handle)
        
        @dotproductfile.setter
        def dotproductfile(self, dotproductfile):
            _pyEMsoft.f90wrap_osmnamelisttype__set__dotproductfile(self._handle, \
                dotproductfile)
        
        @property
        def tiffname(self):
            """
            Element tiffname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1412
            
            """
            return _pyEMsoft.f90wrap_osmnamelisttype__get__tiffname(self._handle)
        
        @tiffname.setter
        def tiffname(self, tiffname):
            _pyEMsoft.f90wrap_osmnamelisttype__set__tiffname(self._handle, tiffname)
        
        def __str__(self):
            ret = ['<osmnamelisttype>{\n']
            ret.append('    nmatch : ')
            ret.append(repr(self.nmatch))
            ret.append(',\n    dotproductfile : ')
            ret.append(repr(self.dotproductfile))
            ret.append(',\n    tiffname : ')
            ret.append(repr(self.tiffname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.dpmergeNameListType")
    class dpmergeNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=dpmergenamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1414-1421
        
        """
        def __init__(self, handle=None):
            """
            self = Dpmergenamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1414-1421
            
            
            Returns
            -------
            this : Dpmergenamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for dpmergenamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_dpmergenamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Dpmergenamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1414-1421
            
            Parameters
            ----------
            this : Dpmergenamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for dpmergenamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_dpmergenamelisttype_finalise(this=self._handle)
        
        @property
        def dotproductfile(self):
            """
            Element dotproductfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1415
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dpmergenamelisttype__array__dotproductfile(self._handle)
            if array_handle in self._arrays:
                dotproductfile = self._arrays[array_handle]
            else:
                dotproductfile = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dpmergenamelisttype__array__dotproductfile)
                self._arrays[array_handle] = dotproductfile
            return dotproductfile
        
        @dotproductfile.setter
        def dotproductfile(self, dotproductfile):
            self.dotproductfile[...] = dotproductfile
        
        @property
        def ctfname(self):
            """
            Element ctfname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1416
            
            """
            return _pyEMsoft.f90wrap_dpmergenamelisttype__get__ctfname(self._handle)
        
        @ctfname.setter
        def ctfname(self, ctfname):
            _pyEMsoft.f90wrap_dpmergenamelisttype__set__ctfname(self._handle, ctfname)
        
        @property
        def angname(self):
            """
            Element angname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1417
            
            """
            return _pyEMsoft.f90wrap_dpmergenamelisttype__get__angname(self._handle)
        
        @angname.setter
        def angname(self, angname):
            _pyEMsoft.f90wrap_dpmergenamelisttype__set__angname(self._handle, angname)
        
        @property
        def phasemapname(self):
            """
            Element phasemapname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1418
            
            """
            return _pyEMsoft.f90wrap_dpmergenamelisttype__get__phasemapname(self._handle)
        
        @phasemapname.setter
        def phasemapname(self, phasemapname):
            _pyEMsoft.f90wrap_dpmergenamelisttype__set__phasemapname(self._handle, \
                phasemapname)
        
        @property
        def phasecolors(self):
            """
            Element phasecolors ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1419
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_dpmergenamelisttype__array__phasecolors(self._handle)
            if array_handle in self._arrays:
                phasecolors = self._arrays[array_handle]
            else:
                phasecolors = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_dpmergenamelisttype__array__phasecolors)
                self._arrays[array_handle] = phasecolors
            return phasecolors
        
        @phasecolors.setter
        def phasecolors(self, phasecolors):
            self.phasecolors[...] = phasecolors
        
        @property
        def usedp(self):
            """
            Element usedp ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1420
            
            """
            return _pyEMsoft.f90wrap_dpmergenamelisttype__get__usedp(self._handle)
        
        @usedp.setter
        def usedp(self, usedp):
            _pyEMsoft.f90wrap_dpmergenamelisttype__set__usedp(self._handle, usedp)
        
        @property
        def indexingmode(self):
            """
            Element indexingmode ftype=character(2) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1421
            
            """
            return _pyEMsoft.f90wrap_dpmergenamelisttype__get__indexingmode(self._handle)
        
        @indexingmode.setter
        def indexingmode(self, indexingmode):
            _pyEMsoft.f90wrap_dpmergenamelisttype__set__indexingmode(self._handle, \
                indexingmode)
        
        def __str__(self):
            ret = ['<dpmergenamelisttype>{\n']
            ret.append('    dotproductfile : ')
            ret.append(repr(self.dotproductfile))
            ret.append(',\n    ctfname : ')
            ret.append(repr(self.ctfname))
            ret.append(',\n    angname : ')
            ret.append(repr(self.angname))
            ret.append(',\n    phasemapname : ')
            ret.append(repr(self.phasemapname))
            ret.append(',\n    phasecolors : ')
            ret.append(repr(self.phasecolors))
            ret.append(',\n    usedp : ')
            ret.append(repr(self.usedp))
            ret.append(',\n    indexingmode : ')
            ret.append(repr(self.indexingmode))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.TKDIndexingNameListType")
    class TKDIndexingNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=tkdindexingnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1423-1509
        
        """
        def __init__(self, handle=None):
            """
            self = Tkdindexingnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1423-1509
            
            
            Returns
            -------
            this : Tkdindexingnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for tkdindexingnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_tkdindexingnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Tkdindexingnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1423-1509
            
            Parameters
            ----------
            this : Tkdindexingnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for tkdindexingnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_tkdindexingnamelisttype_finalise(this=self._handle)
        
        @property
        def ncubochoric(self):
            """
            Element ncubochoric ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1424
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__ncubochoric(self._handle)
        
        @ncubochoric.setter
        def ncubochoric(self, ncubochoric):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__ncubochoric(self._handle, \
                ncubochoric)
        
        @property
        def numexptsingle(self):
            """
            Element numexptsingle ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1425
            
            """
            return \
                _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__numexptsingle(self._handle)
        
        @numexptsingle.setter
        def numexptsingle(self, numexptsingle):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__numexptsingle(self._handle, \
                numexptsingle)
        
        @property
        def numdictsingle(self):
            """
            Element numdictsingle ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1426
            
            """
            return \
                _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__numdictsingle(self._handle)
        
        @numdictsingle.setter
        def numdictsingle(self, numdictsingle):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__numdictsingle(self._handle, \
                numdictsingle)
        
        @property
        def ipf_ht(self):
            """
            Element ipf_ht ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1427
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__ipf_ht(self._handle)
        
        @ipf_ht.setter
        def ipf_ht(self, ipf_ht):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__ipf_ht(self._handle, ipf_ht)
        
        @property
        def ipf_wd(self):
            """
            Element ipf_wd ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1428
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__ipf_wd(self._handle)
        
        @ipf_wd.setter
        def ipf_wd(self, ipf_wd):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__ipf_wd(self._handle, ipf_wd)
        
        @property
        def roi(self):
            """
            Element roi ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1429
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tkdindexingnamelisttype__array__roi(self._handle)
            if array_handle in self._arrays:
                roi = self._arrays[array_handle]
            else:
                roi = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tkdindexingnamelisttype__array__roi)
                self._arrays[array_handle] = roi
            return roi
        
        @roi.setter
        def roi(self, roi):
            self.roi[...] = roi
        
        @property
        def nnk(self):
            """
            Element nnk ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1430
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__nnk(self._handle)
        
        @nnk.setter
        def nnk(self, nnk):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__nnk(self._handle, nnk)
        
        @property
        def nnav(self):
            """
            Element nnav ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1431
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__nnav(self._handle)
        
        @nnav.setter
        def nnav(self, nnav):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__nnav(self._handle, nnav)
        
        @property
        def nosm(self):
            """
            Element nosm ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1432
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__nosm(self._handle)
        
        @nosm.setter
        def nosm(self, nosm):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__nosm(self._handle, nosm)
        
        @property
        def maskradius(self):
            """
            Element maskradius ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1433
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__maskradius(self._handle)
        
        @maskradius.setter
        def maskradius(self, maskradius):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__maskradius(self._handle, \
                maskradius)
        
        @property
        def exptfile(self):
            """
            Element exptfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1434
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__exptfile(self._handle)
        
        @exptfile.setter
        def exptfile(self, exptfile):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__exptfile(self._handle, exptfile)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1435
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__numsx(self._handle, numsx)
        
        @property
        def numsy(self):
            """
            Element numsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1436
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__numsy(self._handle)
        
        @numsy.setter
        def numsy(self, numsy):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__numsy(self._handle, numsy)
        
        @property
        def binning(self):
            """
            Element binning ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1437
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__binning(self._handle)
        
        @binning.setter
        def binning(self, binning):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__binning(self._handle, binning)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1438
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def energyaverage(self):
            """
            Element energyaverage ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1439
            
            """
            return \
                _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__energyaverage(self._handle)
        
        @energyaverage.setter
        def energyaverage(self, energyaverage):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__energyaverage(self._handle, \
                energyaverage)
        
        @property
        def devid(self):
            """
            Element devid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1440
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__devid(self._handle)
        
        @devid.setter
        def devid(self, devid):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__devid(self._handle, devid)
        
        @property
        def platid(self):
            """
            Element platid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1441
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__platid(self._handle)
        
        @platid.setter
        def platid(self, platid):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__platid(self._handle, platid)
        
        @property
        def nregions(self):
            """
            Element nregions ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1442
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__nregions(self._handle)
        
        @nregions.setter
        def nregions(self, nregions):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__nregions(self._handle, nregions)
        
        @property
        def l(self):
            """
            Element l ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1443
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__l(self._handle)
        
        @l.setter
        def l(self, l):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__l(self._handle, l)
        
        @property
        def thetac(self):
            """
            Element thetac ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1444
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__thetac(self._handle)
        
        @thetac.setter
        def thetac(self, thetac):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__thetac(self._handle, thetac)
        
        @property
        def delta(self):
            """
            Element delta ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1445
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__delta(self._handle)
        
        @delta.setter
        def delta(self, delta):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__delta(self._handle, delta)
        
        @property
        def omega(self):
            """
            Element omega ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1446
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__omega(self._handle)
        
        @omega.setter
        def omega(self, omega):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__omega(self._handle, omega)
        
        @property
        def xpc(self):
            """
            Element xpc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1447
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__xpc(self._handle)
        
        @xpc.setter
        def xpc(self, xpc):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__xpc(self._handle, xpc)
        
        @property
        def ypc(self):
            """
            Element ypc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1448
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__ypc(self._handle)
        
        @ypc.setter
        def ypc(self, ypc):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__ypc(self._handle, ypc)
        
        @property
        def energymin(self):
            """
            Element energymin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1449
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__energymin(self._handle)
        
        @energymin.setter
        def energymin(self, energymin):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__energymin(self._handle, \
                energymin)
        
        @property
        def energymax(self):
            """
            Element energymax ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1450
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__energymax(self._handle)
        
        @energymax.setter
        def energymax(self, energymax):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__energymax(self._handle, \
                energymax)
        
        @property
        def gammavalue(self):
            """
            Element gammavalue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1451
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__gammavalue(self._handle)
        
        @gammavalue.setter
        def gammavalue(self, gammavalue):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__gammavalue(self._handle, \
                gammavalue)
        
        @property
        def axisangle(self):
            """
            Element axisangle ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1452
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tkdindexingnamelisttype__array__axisangle(self._handle)
            if array_handle in self._arrays:
                axisangle = self._arrays[array_handle]
            else:
                axisangle = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tkdindexingnamelisttype__array__axisangle)
                self._arrays[array_handle] = axisangle
            return axisangle
        
        @axisangle.setter
        def axisangle(self, axisangle):
            self.axisangle[...] = axisangle
        
        @property
        def beamcurrent(self):
            """
            Element beamcurrent ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1453
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__beamcurrent(self._handle)
        
        @beamcurrent.setter
        def beamcurrent(self, beamcurrent):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__beamcurrent(self._handle, \
                beamcurrent)
        
        @property
        def dwelltime(self):
            """
            Element dwelltime ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1454
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__dwelltime(self._handle)
        
        @dwelltime.setter
        def dwelltime(self, dwelltime):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__dwelltime(self._handle, \
                dwelltime)
        
        @property
        def hipassw(self):
            """
            Element hipassw ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1455
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__hipassw(self._handle)
        
        @hipassw.setter
        def hipassw(self, hipassw):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__hipassw(self._handle, hipassw)
        
        @property
        def maskpattern(self):
            """
            Element maskpattern ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1456
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__maskpattern(self._handle)
        
        @maskpattern.setter
        def maskpattern(self, maskpattern):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__maskpattern(self._handle, \
                maskpattern)
        
        @property
        def scalingmode(self):
            """
            Element scalingmode ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1457
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__scalingmode(self._handle)
        
        @scalingmode.setter
        def scalingmode(self, scalingmode):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__scalingmode(self._handle, \
                scalingmode)
        
        @property
        def notify(self):
            """
            Element notify ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1458
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__notify(self._handle)
        
        @notify.setter
        def notify(self, notify):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__notify(self._handle, notify)
        
        @property
        def spatialaverage(self):
            """
            Element spatialaverage ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1461
            
            """
            return \
                _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__spatialaverage(self._handle)
        
        @spatialaverage.setter
        def spatialaverage(self, spatialaverage):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__spatialaverage(self._handle, \
                spatialaverage)
        
        @property
        def anglefile(self):
            """
            Element anglefile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1462
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__anglefile(self._handle)
        
        @anglefile.setter
        def anglefile(self, anglefile):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__anglefile(self._handle, \
                anglefile)
        
        @property
        def maskfile(self):
            """
            Element maskfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1464
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__maskfile(self._handle)
        
        @maskfile.setter
        def maskfile(self, maskfile):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__maskfile(self._handle, maskfile)
        
        @property
        def masterfile(self):
            """
            Element masterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1465
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__masterfile(self._handle)
        
        @masterfile.setter
        def masterfile(self, masterfile):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__masterfile(self._handle, \
                masterfile)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1466
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__energyfile(self._handle, \
                energyfile)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1467
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__datafile(self._handle, datafile)
        
        @property
        def tmpfile(self):
            """
            Element tmpfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1468
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__tmpfile(self._handle)
        
        @tmpfile.setter
        def tmpfile(self, tmpfile):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__tmpfile(self._handle, tmpfile)
        
        @property
        def ctffile(self):
            """
            Element ctffile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1469
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__ctffile(self._handle)
        
        @ctffile.setter
        def ctffile(self, ctffile):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__ctffile(self._handle, ctffile)
        
        @property
        def avctffile(self):
            """
            Element avctffile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1470
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__avctffile(self._handle)
        
        @avctffile.setter
        def avctffile(self, avctffile):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__avctffile(self._handle, \
                avctffile)
        
        @property
        def angfile(self):
            """
            Element angfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1471
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__angfile(self._handle)
        
        @angfile.setter
        def angfile(self, angfile):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__angfile(self._handle, angfile)
        
        @property
        def eulerfile(self):
            """
            Element eulerfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1472
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__eulerfile(self._handle)
        
        @eulerfile.setter
        def eulerfile(self, eulerfile):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__eulerfile(self._handle, \
                eulerfile)
        
        @property
        def dictfile(self):
            """
            Element dictfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1473
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__dictfile(self._handle)
        
        @dictfile.setter
        def dictfile(self, dictfile):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__dictfile(self._handle, dictfile)
        
        @property
        def indexingmode(self):
            """
            Element indexingmode ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1474
            
            """
            return \
                _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__indexingmode(self._handle)
        
        @indexingmode.setter
        def indexingmode(self, indexingmode):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__indexingmode(self._handle, \
                indexingmode)
        
        @property
        def inputtype(self):
            """
            Element inputtype ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1475
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__inputtype(self._handle)
        
        @inputtype.setter
        def inputtype(self, inputtype):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__inputtype(self._handle, \
                inputtype)
        
        @property
        def hdfstrings(self):
            """
            Element hdfstrings ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1476
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_tkdindexingnamelisttype__array__hdfstrings(self._handle)
            if array_handle in self._arrays:
                hdfstrings = self._arrays[array_handle]
            else:
                hdfstrings = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_tkdindexingnamelisttype__array__hdfstrings)
                self._arrays[array_handle] = hdfstrings
            return hdfstrings
        
        @hdfstrings.setter
        def hdfstrings(self, hdfstrings):
            self.hdfstrings[...] = hdfstrings
        
        @property
        def numangles(self):
            """
            Element numangles ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1478
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__numangles(self._handle)
        
        @numangles.setter
        def numangles(self, numangles):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__numangles(self._handle, \
                numangles)
        
        @property
        def numebins(self):
            """
            Element numebins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1479
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__numebins(self._handle)
        
        @numebins.setter
        def numebins(self, numebins):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__numebins(self._handle, numebins)
        
        @property
        def numzbins(self):
            """
            Element numzbins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1480
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__numzbins(self._handle)
        
        @numzbins.setter
        def numzbins(self, numzbins):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__numzbins(self._handle, numzbins)
        
        @property
        def nsx(self):
            """
            Element nsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1481
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__nsx(self._handle)
        
        @nsx.setter
        def nsx(self, nsx):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__nsx(self._handle, nsx)
        
        @property
        def nsy(self):
            """
            Element nsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1482
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__nsy(self._handle)
        
        @nsy.setter
        def nsy(self, nsy):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__nsy(self._handle, nsy)
        
        @property
        def num_el(self):
            """
            Element num_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1483
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__num_el(self._handle)
        
        @num_el.setter
        def num_el(self, num_el):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__num_el(self._handle, num_el)
        
        @property
        def mcnthreads(self):
            """
            Element mcnthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1484
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__mcnthreads(self._handle)
        
        @mcnthreads.setter
        def mcnthreads(self, mcnthreads):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__mcnthreads(self._handle, \
                mcnthreads)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1485
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__npx(self._handle, npx)
        
        @property
        def npy(self):
            """
            Element npy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1486
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__npy(self._handle)
        
        @npy.setter
        def npy(self, npy):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__npy(self._handle, npy)
        
        @property
        def ne(self):
            """
            Element ne ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1487
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__ne(self._handle)
        
        @ne.setter
        def ne(self, ne):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__ne(self._handle, ne)
        
        @property
        def numset(self):
            """
            Element numset ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1488
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__numset(self._handle)
        
        @numset.setter
        def numset(self, numset):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__numset(self._handle, numset)
        
        @property
        def ekev(self):
            """
            Element ekev ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1489
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__ekev(self._handle)
        
        @ekev.setter
        def ekev(self, ekev):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__ekev(self._handle, ekev)
        
        @property
        def ehistmin(self):
            """
            Element ehistmin ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1490
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__ehistmin(self._handle)
        
        @ehistmin.setter
        def ehistmin(self, ehistmin):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__ehistmin(self._handle, ehistmin)
        
        @property
        def ebinsize(self):
            """
            Element ebinsize ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1491
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__ebinsize(self._handle)
        
        @ebinsize.setter
        def ebinsize(self, ebinsize):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__ebinsize(self._handle, ebinsize)
        
        @property
        def depthmax(self):
            """
            Element depthmax ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1492
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__depthmax(self._handle)
        
        @depthmax.setter
        def depthmax(self, depthmax):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__depthmax(self._handle, depthmax)
        
        @property
        def depthstep(self):
            """
            Element depthstep ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1493
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__depthstep(self._handle)
        
        @depthstep.setter
        def depthstep(self, depthstep):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__depthstep(self._handle, \
                depthstep)
        
        @property
        def mcsig(self):
            """
            Element mcsig ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1494
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__mcsig(self._handle)
        
        @mcsig.setter
        def mcsig(self, mcsig):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__mcsig(self._handle, mcsig)
        
        @property
        def mcomega(self):
            """
            Element mcomega ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1495
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__mcomega(self._handle)
        
        @mcomega.setter
        def mcomega(self, mcomega):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__mcomega(self._handle, mcomega)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1496
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def stepx(self):
            """
            Element stepx ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1497
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__stepx(self._handle)
        
        @stepx.setter
        def stepx(self, stepx):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__stepx(self._handle, stepx)
        
        @property
        def stepy(self):
            """
            Element stepy ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1498
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__stepy(self._handle)
        
        @stepy.setter
        def stepy(self, stepy):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__stepy(self._handle, stepy)
        
        @property
        def wd(self):
            """
            Element wd ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1499
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__wd(self._handle)
        
        @wd.setter
        def wd(self, wd):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__wd(self._handle, wd)
        
        @property
        def mcmode(self):
            """
            Element mcmode ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1500
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__mcmode(self._handle)
        
        @mcmode.setter
        def mcmode(self, mcmode):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__mcmode(self._handle, mcmode)
        
        @property
        def anglemode(self):
            """
            Element anglemode ftype=character(5) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1501
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__anglemode(self._handle)
        
        @anglemode.setter
        def anglemode(self, anglemode):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__anglemode(self._handle, \
                anglemode)
        
        @property
        def sqorhe(self):
            """
            Element sqorhe ftype=character(6) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1502
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__sqorhe(self._handle)
        
        @sqorhe.setter
        def sqorhe(self, sqorhe):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__sqorhe(self._handle, sqorhe)
        
        @property
        def mcscversion(self):
            """
            Element mcscversion ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1503
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__mcscversion(self._handle)
        
        @mcscversion.setter
        def mcscversion(self, mcscversion):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__mcscversion(self._handle, \
                mcscversion)
        
        @property
        def masterscversion(self):
            """
            Element masterscversion ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1504
            
            """
            return \
                _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__masterscversion(self._handle)
        
        @masterscversion.setter
        def masterscversion(self, masterscversion):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__masterscversion(self._handle, \
                masterscversion)
        
        @property
        def masterprogname(self):
            """
            Element masterprogname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1505
            
            """
            return \
                _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__masterprogname(self._handle)
        
        @masterprogname.setter
        def masterprogname(self, masterprogname):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__masterprogname(self._handle, \
                masterprogname)
        
        @property
        def masterxtalname(self):
            """
            Element masterxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1506
            
            """
            return \
                _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__masterxtalname(self._handle)
        
        @masterxtalname.setter
        def masterxtalname(self, masterxtalname):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__masterxtalname(self._handle, \
                masterxtalname)
        
        @property
        def masterenergyfile(self):
            """
            Element masterenergyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1507
            
            """
            return \
                _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__masterenergyfile(self._handle)
        
        @masterenergyfile.setter
        def masterenergyfile(self, masterenergyfile):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__masterenergyfile(self._handle, \
                masterenergyfile)
        
        @property
        def mcprogname(self):
            """
            Element mcprogname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1508
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__mcprogname(self._handle)
        
        @mcprogname.setter
        def mcprogname(self, mcprogname):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__mcprogname(self._handle, \
                mcprogname)
        
        @property
        def mcxtalname(self):
            """
            Element mcxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1509
            
            """
            return _pyEMsoft.f90wrap_tkdindexingnamelisttype__get__mcxtalname(self._handle)
        
        @mcxtalname.setter
        def mcxtalname(self, mcxtalname):
            _pyEMsoft.f90wrap_tkdindexingnamelisttype__set__mcxtalname(self._handle, \
                mcxtalname)
        
        def __str__(self):
            ret = ['<tkdindexingnamelisttype>{\n']
            ret.append('    ncubochoric : ')
            ret.append(repr(self.ncubochoric))
            ret.append(',\n    numexptsingle : ')
            ret.append(repr(self.numexptsingle))
            ret.append(',\n    numdictsingle : ')
            ret.append(repr(self.numdictsingle))
            ret.append(',\n    ipf_ht : ')
            ret.append(repr(self.ipf_ht))
            ret.append(',\n    ipf_wd : ')
            ret.append(repr(self.ipf_wd))
            ret.append(',\n    roi : ')
            ret.append(repr(self.roi))
            ret.append(',\n    nnk : ')
            ret.append(repr(self.nnk))
            ret.append(',\n    nnav : ')
            ret.append(repr(self.nnav))
            ret.append(',\n    nosm : ')
            ret.append(repr(self.nosm))
            ret.append(',\n    maskradius : ')
            ret.append(repr(self.maskradius))
            ret.append(',\n    exptfile : ')
            ret.append(repr(self.exptfile))
            ret.append(',\n    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    numsy : ')
            ret.append(repr(self.numsy))
            ret.append(',\n    binning : ')
            ret.append(repr(self.binning))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    energyaverage : ')
            ret.append(repr(self.energyaverage))
            ret.append(',\n    devid : ')
            ret.append(repr(self.devid))
            ret.append(',\n    platid : ')
            ret.append(repr(self.platid))
            ret.append(',\n    nregions : ')
            ret.append(repr(self.nregions))
            ret.append(',\n    l : ')
            ret.append(repr(self.l))
            ret.append(',\n    thetac : ')
            ret.append(repr(self.thetac))
            ret.append(',\n    delta : ')
            ret.append(repr(self.delta))
            ret.append(',\n    omega : ')
            ret.append(repr(self.omega))
            ret.append(',\n    xpc : ')
            ret.append(repr(self.xpc))
            ret.append(',\n    ypc : ')
            ret.append(repr(self.ypc))
            ret.append(',\n    energymin : ')
            ret.append(repr(self.energymin))
            ret.append(',\n    energymax : ')
            ret.append(repr(self.energymax))
            ret.append(',\n    gammavalue : ')
            ret.append(repr(self.gammavalue))
            ret.append(',\n    axisangle : ')
            ret.append(repr(self.axisangle))
            ret.append(',\n    beamcurrent : ')
            ret.append(repr(self.beamcurrent))
            ret.append(',\n    dwelltime : ')
            ret.append(repr(self.dwelltime))
            ret.append(',\n    hipassw : ')
            ret.append(repr(self.hipassw))
            ret.append(',\n    maskpattern : ')
            ret.append(repr(self.maskpattern))
            ret.append(',\n    scalingmode : ')
            ret.append(repr(self.scalingmode))
            ret.append(',\n    notify : ')
            ret.append(repr(self.notify))
            ret.append(',\n    spatialaverage : ')
            ret.append(repr(self.spatialaverage))
            ret.append(',\n    anglefile : ')
            ret.append(repr(self.anglefile))
            ret.append(',\n    maskfile : ')
            ret.append(repr(self.maskfile))
            ret.append(',\n    masterfile : ')
            ret.append(repr(self.masterfile))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    tmpfile : ')
            ret.append(repr(self.tmpfile))
            ret.append(',\n    ctffile : ')
            ret.append(repr(self.ctffile))
            ret.append(',\n    avctffile : ')
            ret.append(repr(self.avctffile))
            ret.append(',\n    angfile : ')
            ret.append(repr(self.angfile))
            ret.append(',\n    eulerfile : ')
            ret.append(repr(self.eulerfile))
            ret.append(',\n    dictfile : ')
            ret.append(repr(self.dictfile))
            ret.append(',\n    indexingmode : ')
            ret.append(repr(self.indexingmode))
            ret.append(',\n    inputtype : ')
            ret.append(repr(self.inputtype))
            ret.append(',\n    hdfstrings : ')
            ret.append(repr(self.hdfstrings))
            ret.append(',\n    numangles : ')
            ret.append(repr(self.numangles))
            ret.append(',\n    numebins : ')
            ret.append(repr(self.numebins))
            ret.append(',\n    numzbins : ')
            ret.append(repr(self.numzbins))
            ret.append(',\n    nsx : ')
            ret.append(repr(self.nsx))
            ret.append(',\n    nsy : ')
            ret.append(repr(self.nsy))
            ret.append(',\n    num_el : ')
            ret.append(repr(self.num_el))
            ret.append(',\n    mcnthreads : ')
            ret.append(repr(self.mcnthreads))
            ret.append(',\n    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    npy : ')
            ret.append(repr(self.npy))
            ret.append(',\n    ne : ')
            ret.append(repr(self.ne))
            ret.append(',\n    numset : ')
            ret.append(repr(self.numset))
            ret.append(',\n    ekev : ')
            ret.append(repr(self.ekev))
            ret.append(',\n    ehistmin : ')
            ret.append(repr(self.ehistmin))
            ret.append(',\n    ebinsize : ')
            ret.append(repr(self.ebinsize))
            ret.append(',\n    depthmax : ')
            ret.append(repr(self.depthmax))
            ret.append(',\n    depthstep : ')
            ret.append(repr(self.depthstep))
            ret.append(',\n    mcsig : ')
            ret.append(repr(self.mcsig))
            ret.append(',\n    mcomega : ')
            ret.append(repr(self.mcomega))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    stepx : ')
            ret.append(repr(self.stepx))
            ret.append(',\n    stepy : ')
            ret.append(repr(self.stepy))
            ret.append(',\n    wd : ')
            ret.append(repr(self.wd))
            ret.append(',\n    mcmode : ')
            ret.append(repr(self.mcmode))
            ret.append(',\n    anglemode : ')
            ret.append(repr(self.anglemode))
            ret.append(',\n    sqorhe : ')
            ret.append(repr(self.sqorhe))
            ret.append(',\n    mcscversion : ')
            ret.append(repr(self.mcscversion))
            ret.append(',\n    masterscversion : ')
            ret.append(repr(self.masterscversion))
            ret.append(',\n    masterprogname : ')
            ret.append(repr(self.masterprogname))
            ret.append(',\n    masterxtalname : ')
            ret.append(repr(self.masterxtalname))
            ret.append(',\n    masterenergyfile : ')
            ret.append(repr(self.masterenergyfile))
            ret.append(',\n    mcprogname : ')
            ret.append(repr(self.mcprogname))
            ret.append(',\n    mcxtalname : ')
            ret.append(repr(self.mcxtalname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.ECPIndexingNameListType")
    class ECPIndexingNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ecpindexingnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1511-1584
        
        """
        def __init__(self, handle=None):
            """
            self = Ecpindexingnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1511-1584
            
            
            Returns
            -------
            this : Ecpindexingnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ecpindexingnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ecpindexingnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ecpindexingnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1511-1584
            
            Parameters
            ----------
            this : Ecpindexingnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ecpindexingnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ecpindexingnamelisttype_finalise(this=self._handle)
        
        @property
        def ncubochoric(self):
            """
            Element ncubochoric ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1512
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__ncubochoric(self._handle)
        
        @ncubochoric.setter
        def ncubochoric(self, ncubochoric):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__ncubochoric(self._handle, \
                ncubochoric)
        
        @property
        def numexptsingle(self):
            """
            Element numexptsingle ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1513
            
            """
            return \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__numexptsingle(self._handle)
        
        @numexptsingle.setter
        def numexptsingle(self, numexptsingle):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__numexptsingle(self._handle, \
                numexptsingle)
        
        @property
        def numdictsingle(self):
            """
            Element numdictsingle ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1514
            
            """
            return \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__numdictsingle(self._handle)
        
        @numdictsingle.setter
        def numdictsingle(self, numdictsingle):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__numdictsingle(self._handle, \
                numdictsingle)
        
        @property
        def totnumexpt(self):
            """
            Element totnumexpt ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1515
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__totnumexpt(self._handle)
        
        @totnumexpt.setter
        def totnumexpt(self, totnumexpt):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__totnumexpt(self._handle, \
                totnumexpt)
        
        @property
        def maskradius(self):
            """
            Element maskradius ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1516
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__maskradius(self._handle)
        
        @maskradius.setter
        def maskradius(self, maskradius):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__maskradius(self._handle, \
                maskradius)
        
        @property
        def nnk(self):
            """
            Element nnk ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1517
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__nnk(self._handle)
        
        @nnk.setter
        def nnk(self, nnk):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__nnk(self._handle, nnk)
        
        @property
        def platid(self):
            """
            Element platid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1518
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__platid(self._handle)
        
        @platid.setter
        def platid(self, platid):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__platid(self._handle, platid)
        
        @property
        def devid(self):
            """
            Element devid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1519
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__devid(self._handle)
        
        @devid.setter
        def devid(self, devid):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__devid(self._handle, devid)
        
        @property
        def nregions(self):
            """
            Element nregions ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1520
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__nregions(self._handle)
        
        @nregions.setter
        def nregions(self, nregions):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__nregions(self._handle, nregions)
        
        @property
        def exptfile(self):
            """
            Element exptfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1521
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__exptfile(self._handle)
        
        @exptfile.setter
        def exptfile(self, exptfile):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__exptfile(self._handle, exptfile)
        
        @property
        def fn_f(self):
            """
            Element fn_f ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1522
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__array__fn_f(self._handle)
            if array_handle in self._arrays:
                fn_f = self._arrays[array_handle]
            else:
                fn_f = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ecpindexingnamelisttype__array__fn_f)
                self._arrays[array_handle] = fn_f
            return fn_f
        
        @fn_f.setter
        def fn_f(self, fn_f):
            self.fn_f[...] = fn_f
        
        @property
        def fn_s(self):
            """
            Element fn_s ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1523
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__array__fn_s(self._handle)
            if array_handle in self._arrays:
                fn_s = self._arrays[array_handle]
            else:
                fn_s = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ecpindexingnamelisttype__array__fn_s)
                self._arrays[array_handle] = fn_s
            return fn_s
        
        @fn_s.setter
        def fn_s(self, fn_s):
            self.fn_s[...] = fn_s
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1524
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1525
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__npix(self._handle, npix)
        
        @property
        def gf(self):
            """
            Element gf ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1526
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__array__gf(self._handle)
            if array_handle in self._arrays:
                gf = self._arrays[array_handle]
            else:
                gf = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ecpindexingnamelisttype__array__gf)
                self._arrays[array_handle] = gf
            return gf
        
        @gf.setter
        def gf(self, gf):
            self.gf[...] = gf
        
        @property
        def gs(self):
            """
            Element gs ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1527
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__array__gs(self._handle)
            if array_handle in self._arrays:
                gs = self._arrays[array_handle]
            else:
                gs = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ecpindexingnamelisttype__array__gs)
                self._arrays[array_handle] = gs
            return gs
        
        @gs.setter
        def gs(self, gs):
            self.gs[...] = gs
        
        @property
        def tf(self):
            """
            Element tf ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1528
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__array__tf(self._handle)
            if array_handle in self._arrays:
                tf = self._arrays[array_handle]
            else:
                tf = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ecpindexingnamelisttype__array__tf)
                self._arrays[array_handle] = tf
            return tf
        
        @tf.setter
        def tf(self, tf):
            self.tf[...] = tf
        
        @property
        def ts(self):
            """
            Element ts ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1529
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__array__ts(self._handle)
            if array_handle in self._arrays:
                ts = self._arrays[array_handle]
            else:
                ts = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ecpindexingnamelisttype__array__ts)
                self._arrays[array_handle] = ts
            return ts
        
        @ts.setter
        def ts(self, ts):
            self.ts[...] = ts
        
        @property
        def thetac(self):
            """
            Element thetac ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1530
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__thetac(self._handle)
        
        @thetac.setter
        def thetac(self, thetac):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__thetac(self._handle, thetac)
        
        @property
        def filmthickness(self):
            """
            Element filmthickness ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1531
            
            """
            return \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__filmthickness(self._handle)
        
        @filmthickness.setter
        def filmthickness(self, filmthickness):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__filmthickness(self._handle, \
                filmthickness)
        
        @property
        def maskpattern(self):
            """
            Element maskpattern ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1532
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__maskpattern(self._handle)
        
        @maskpattern.setter
        def maskpattern(self, maskpattern):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__maskpattern(self._handle, \
                maskpattern)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1533
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def xtalname2(self):
            """
            Element xtalname2 ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1534
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__xtalname2(self._handle)
        
        @xtalname2.setter
        def xtalname2(self, xtalname2):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__xtalname2(self._handle, \
                xtalname2)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1535
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__energyfile(self._handle, \
                energyfile)
        
        @property
        def filmfile(self):
            """
            Element filmfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1536
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__filmfile(self._handle)
        
        @filmfile.setter
        def filmfile(self, filmfile):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__filmfile(self._handle, filmfile)
        
        @property
        def subsfile(self):
            """
            Element subsfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1537
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__subsfile(self._handle)
        
        @subsfile.setter
        def subsfile(self, subsfile):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__subsfile(self._handle, subsfile)
        
        @property
        def masterfile(self):
            """
            Element masterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1538
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__masterfile(self._handle)
        
        @masterfile.setter
        def masterfile(self, masterfile):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__masterfile(self._handle, \
                masterfile)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1539
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__datafile(self._handle, datafile)
        
        @property
        def tmpfile(self):
            """
            Element tmpfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1540
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__tmpfile(self._handle)
        
        @tmpfile.setter
        def tmpfile(self, tmpfile):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__tmpfile(self._handle, tmpfile)
        
        @property
        def ctffile(self):
            """
            Element ctffile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1541
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__ctffile(self._handle)
        
        @ctffile.setter
        def ctffile(self, ctffile):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__ctffile(self._handle, ctffile)
        
        @property
        def anglefile(self):
            """
            Element anglefile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1542
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__anglefile(self._handle)
        
        @anglefile.setter
        def anglefile(self, anglefile):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__anglefile(self._handle, \
                anglefile)
        
        @property
        def eulerconvention(self):
            """
            Element eulerconvention ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1543
            
            """
            return \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__eulerconvention(self._handle)
        
        @eulerconvention.setter
        def eulerconvention(self, eulerconvention):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__eulerconvention(self._handle, \
                eulerconvention)
        
        @property
        def gammavalue(self):
            """
            Element gammavalue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1544
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__gammavalue(self._handle)
        
        @gammavalue.setter
        def gammavalue(self, gammavalue):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__gammavalue(self._handle, \
                gammavalue)
        
        @property
        def outputformat(self):
            """
            Element outputformat ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1545
            
            """
            return \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__outputformat(self._handle)
        
        @outputformat.setter
        def outputformat(self, outputformat):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__outputformat(self._handle, \
                outputformat)
        
        @property
        def sampletilt(self):
            """
            Element sampletilt ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1546
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__sampletilt(self._handle)
        
        @sampletilt.setter
        def sampletilt(self, sampletilt):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__sampletilt(self._handle, \
                sampletilt)
        
        @property
        def workingdistance(self):
            """
            Element workingdistance ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1547
            
            """
            return \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__workingdistance(self._handle)
        
        @workingdistance.setter
        def workingdistance(self, workingdistance):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__workingdistance(self._handle, \
                workingdistance)
        
        @property
        def rin(self):
            """
            Element rin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1548
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__rin(self._handle)
        
        @rin.setter
        def rin(self, rin):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__rin(self._handle, rin)
        
        @property
        def rout(self):
            """
            Element rout ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1549
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__rout(self._handle)
        
        @rout.setter
        def rout(self, rout):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__rout(self._handle, rout)
        
        @property
        def numangle(self):
            """
            Element numangle ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1551
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__numangle(self._handle)
        
        @numangle.setter
        def numangle(self, numangle):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__numangle(self._handle, numangle)
        
        @property
        def numangle_anglefile(self):
            """
            Element numangle_anglefile ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1552
            
            """
            return \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__numangle_anglefile(self._handle)
        
        @numangle_anglefile.setter
        def numangle_anglefile(self, numangle_anglefile):
            \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__numangle_anglefile(self._handle, \
                numangle_anglefile)
        
        @property
        def numebins(self):
            """
            Element numebins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1553
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__numebins(self._handle)
        
        @numebins.setter
        def numebins(self, numebins):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__numebins(self._handle, numebins)
        
        @property
        def numzbins(self):
            """
            Element numzbins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1554
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__numzbins(self._handle)
        
        @numzbins.setter
        def numzbins(self, numzbins):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__numzbins(self._handle, numzbins)
        
        @property
        def nsx(self):
            """
            Element nsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1555
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__nsx(self._handle)
        
        @nsx.setter
        def nsx(self, nsx):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__nsx(self._handle, nsx)
        
        @property
        def nsy(self):
            """
            Element nsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1556
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__nsy(self._handle)
        
        @nsy.setter
        def nsy(self, nsy):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__nsy(self._handle, nsy)
        
        @property
        def num_el(self):
            """
            Element num_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1557
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__num_el(self._handle)
        
        @num_el.setter
        def num_el(self, num_el):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__num_el(self._handle, num_el)
        
        @property
        def mcnthreads(self):
            """
            Element mcnthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1558
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__mcnthreads(self._handle)
        
        @mcnthreads.setter
        def mcnthreads(self, mcnthreads):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__mcnthreads(self._handle, \
                mcnthreads)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1559
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__npx(self._handle, npx)
        
        @property
        def npy(self):
            """
            Element npy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1560
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__npy(self._handle)
        
        @npy.setter
        def npy(self, npy):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__npy(self._handle, npy)
        
        @property
        def ne(self):
            """
            Element ne ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1561
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__ne(self._handle)
        
        @ne.setter
        def ne(self, ne):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__ne(self._handle, ne)
        
        @property
        def numset(self):
            """
            Element numset ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1562
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__numset(self._handle)
        
        @numset.setter
        def numset(self, numset):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__numset(self._handle, numset)
        
        @property
        def npolar(self):
            """
            Element npolar ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1563
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__npolar(self._handle)
        
        @npolar.setter
        def npolar(self, npolar):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__npolar(self._handle, npolar)
        
        @property
        def nazimuth(self):
            """
            Element nazimuth ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1564
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__nazimuth(self._handle)
        
        @nazimuth.setter
        def nazimuth(self, nazimuth):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__nazimuth(self._handle, nazimuth)
        
        @property
        def ekev(self):
            """
            Element ekev ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1565
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__ekev(self._handle)
        
        @ekev.setter
        def ekev(self, ekev):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__ekev(self._handle, ekev)
        
        @property
        def ehistmin(self):
            """
            Element ehistmin ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1566
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__ehistmin(self._handle)
        
        @ehistmin.setter
        def ehistmin(self, ehistmin):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__ehistmin(self._handle, ehistmin)
        
        @property
        def ebinsize(self):
            """
            Element ebinsize ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1567
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__ebinsize(self._handle)
        
        @ebinsize.setter
        def ebinsize(self, ebinsize):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__ebinsize(self._handle, ebinsize)
        
        @property
        def depthmax(self):
            """
            Element depthmax ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1568
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__depthmax(self._handle)
        
        @depthmax.setter
        def depthmax(self, depthmax):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__depthmax(self._handle, depthmax)
        
        @property
        def depthstep(self):
            """
            Element depthstep ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1569
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__depthstep(self._handle)
        
        @depthstep.setter
        def depthstep(self, depthstep):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__depthstep(self._handle, \
                depthstep)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1570
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def mcsigstart(self):
            """
            Element mcsigstart ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1571
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__mcsigstart(self._handle)
        
        @mcsigstart.setter
        def mcsigstart(self, mcsigstart):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__mcsigstart(self._handle, \
                mcsigstart)
        
        @property
        def mcsigend(self):
            """
            Element mcsigend ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1572
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__mcsigend(self._handle)
        
        @mcsigend.setter
        def mcsigend(self, mcsigend):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__mcsigend(self._handle, mcsigend)
        
        @property
        def mcsigstep(self):
            """
            Element mcsigstep ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1573
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__mcsigstep(self._handle)
        
        @mcsigstep.setter
        def mcsigstep(self, mcsigstep):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__mcsigstep(self._handle, \
                mcsigstep)
        
        @property
        def mcomega(self):
            """
            Element mcomega ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1574
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__mcomega(self._handle)
        
        @mcomega.setter
        def mcomega(self, mcomega):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__mcomega(self._handle, mcomega)
        
        @property
        def mcmode(self):
            """
            Element mcmode ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1575
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__mcmode(self._handle)
        
        @mcmode.setter
        def mcmode(self, mcmode):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__mcmode(self._handle, mcmode)
        
        @property
        def anglemode(self):
            """
            Element anglemode ftype=character(5) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1576
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__anglemode(self._handle)
        
        @anglemode.setter
        def anglemode(self, anglemode):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__anglemode(self._handle, \
                anglemode)
        
        @property
        def sqorhe(self):
            """
            Element sqorhe ftype=character(6) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1577
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__sqorhe(self._handle)
        
        @sqorhe.setter
        def sqorhe(self, sqorhe):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__sqorhe(self._handle, sqorhe)
        
        @property
        def mcscversion(self):
            """
            Element mcscversion ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1578
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__mcscversion(self._handle)
        
        @mcscversion.setter
        def mcscversion(self, mcscversion):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__mcscversion(self._handle, \
                mcscversion)
        
        @property
        def masterscversion(self):
            """
            Element masterscversion ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1579
            
            """
            return \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__masterscversion(self._handle)
        
        @masterscversion.setter
        def masterscversion(self, masterscversion):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__masterscversion(self._handle, \
                masterscversion)
        
        @property
        def masterprogname(self):
            """
            Element masterprogname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1580
            
            """
            return \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__masterprogname(self._handle)
        
        @masterprogname.setter
        def masterprogname(self, masterprogname):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__masterprogname(self._handle, \
                masterprogname)
        
        @property
        def masterxtalname(self):
            """
            Element masterxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1581
            
            """
            return \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__masterxtalname(self._handle)
        
        @masterxtalname.setter
        def masterxtalname(self, masterxtalname):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__masterxtalname(self._handle, \
                masterxtalname)
        
        @property
        def masterenergyfile(self):
            """
            Element masterenergyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1582
            
            """
            return \
                _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__masterenergyfile(self._handle)
        
        @masterenergyfile.setter
        def masterenergyfile(self, masterenergyfile):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__masterenergyfile(self._handle, \
                masterenergyfile)
        
        @property
        def mcprogname(self):
            """
            Element mcprogname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1583
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__mcprogname(self._handle)
        
        @mcprogname.setter
        def mcprogname(self, mcprogname):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__mcprogname(self._handle, \
                mcprogname)
        
        @property
        def mcxtalname(self):
            """
            Element mcxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1584
            
            """
            return _pyEMsoft.f90wrap_ecpindexingnamelisttype__get__mcxtalname(self._handle)
        
        @mcxtalname.setter
        def mcxtalname(self, mcxtalname):
            _pyEMsoft.f90wrap_ecpindexingnamelisttype__set__mcxtalname(self._handle, \
                mcxtalname)
        
        def __str__(self):
            ret = ['<ecpindexingnamelisttype>{\n']
            ret.append('    ncubochoric : ')
            ret.append(repr(self.ncubochoric))
            ret.append(',\n    numexptsingle : ')
            ret.append(repr(self.numexptsingle))
            ret.append(',\n    numdictsingle : ')
            ret.append(repr(self.numdictsingle))
            ret.append(',\n    totnumexpt : ')
            ret.append(repr(self.totnumexpt))
            ret.append(',\n    maskradius : ')
            ret.append(repr(self.maskradius))
            ret.append(',\n    nnk : ')
            ret.append(repr(self.nnk))
            ret.append(',\n    platid : ')
            ret.append(repr(self.platid))
            ret.append(',\n    devid : ')
            ret.append(repr(self.devid))
            ret.append(',\n    nregions : ')
            ret.append(repr(self.nregions))
            ret.append(',\n    exptfile : ')
            ret.append(repr(self.exptfile))
            ret.append(',\n    fn_f : ')
            ret.append(repr(self.fn_f))
            ret.append(',\n    fn_s : ')
            ret.append(repr(self.fn_s))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    gf : ')
            ret.append(repr(self.gf))
            ret.append(',\n    gs : ')
            ret.append(repr(self.gs))
            ret.append(',\n    tf : ')
            ret.append(repr(self.tf))
            ret.append(',\n    ts : ')
            ret.append(repr(self.ts))
            ret.append(',\n    thetac : ')
            ret.append(repr(self.thetac))
            ret.append(',\n    filmthickness : ')
            ret.append(repr(self.filmthickness))
            ret.append(',\n    maskpattern : ')
            ret.append(repr(self.maskpattern))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    xtalname2 : ')
            ret.append(repr(self.xtalname2))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append(',\n    filmfile : ')
            ret.append(repr(self.filmfile))
            ret.append(',\n    subsfile : ')
            ret.append(repr(self.subsfile))
            ret.append(',\n    masterfile : ')
            ret.append(repr(self.masterfile))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    tmpfile : ')
            ret.append(repr(self.tmpfile))
            ret.append(',\n    ctffile : ')
            ret.append(repr(self.ctffile))
            ret.append(',\n    anglefile : ')
            ret.append(repr(self.anglefile))
            ret.append(',\n    eulerconvention : ')
            ret.append(repr(self.eulerconvention))
            ret.append(',\n    gammavalue : ')
            ret.append(repr(self.gammavalue))
            ret.append(',\n    outputformat : ')
            ret.append(repr(self.outputformat))
            ret.append(',\n    sampletilt : ')
            ret.append(repr(self.sampletilt))
            ret.append(',\n    workingdistance : ')
            ret.append(repr(self.workingdistance))
            ret.append(',\n    rin : ')
            ret.append(repr(self.rin))
            ret.append(',\n    rout : ')
            ret.append(repr(self.rout))
            ret.append(',\n    numangle : ')
            ret.append(repr(self.numangle))
            ret.append(',\n    numangle_anglefile : ')
            ret.append(repr(self.numangle_anglefile))
            ret.append(',\n    numebins : ')
            ret.append(repr(self.numebins))
            ret.append(',\n    numzbins : ')
            ret.append(repr(self.numzbins))
            ret.append(',\n    nsx : ')
            ret.append(repr(self.nsx))
            ret.append(',\n    nsy : ')
            ret.append(repr(self.nsy))
            ret.append(',\n    num_el : ')
            ret.append(repr(self.num_el))
            ret.append(',\n    mcnthreads : ')
            ret.append(repr(self.mcnthreads))
            ret.append(',\n    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    npy : ')
            ret.append(repr(self.npy))
            ret.append(',\n    ne : ')
            ret.append(repr(self.ne))
            ret.append(',\n    numset : ')
            ret.append(repr(self.numset))
            ret.append(',\n    npolar : ')
            ret.append(repr(self.npolar))
            ret.append(',\n    nazimuth : ')
            ret.append(repr(self.nazimuth))
            ret.append(',\n    ekev : ')
            ret.append(repr(self.ekev))
            ret.append(',\n    ehistmin : ')
            ret.append(repr(self.ehistmin))
            ret.append(',\n    ebinsize : ')
            ret.append(repr(self.ebinsize))
            ret.append(',\n    depthmax : ')
            ret.append(repr(self.depthmax))
            ret.append(',\n    depthstep : ')
            ret.append(repr(self.depthstep))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    mcsigstart : ')
            ret.append(repr(self.mcsigstart))
            ret.append(',\n    mcsigend : ')
            ret.append(repr(self.mcsigend))
            ret.append(',\n    mcsigstep : ')
            ret.append(repr(self.mcsigstep))
            ret.append(',\n    mcomega : ')
            ret.append(repr(self.mcomega))
            ret.append(',\n    mcmode : ')
            ret.append(repr(self.mcmode))
            ret.append(',\n    anglemode : ')
            ret.append(repr(self.anglemode))
            ret.append(',\n    sqorhe : ')
            ret.append(repr(self.sqorhe))
            ret.append(',\n    mcscversion : ')
            ret.append(repr(self.mcscversion))
            ret.append(',\n    masterscversion : ')
            ret.append(repr(self.masterscversion))
            ret.append(',\n    masterprogname : ')
            ret.append(repr(self.masterprogname))
            ret.append(',\n    masterxtalname : ')
            ret.append(repr(self.masterxtalname))
            ret.append(',\n    masterenergyfile : ')
            ret.append(repr(self.masterenergyfile))
            ret.append(',\n    mcprogname : ')
            ret.append(repr(self.mcprogname))
            ret.append(',\n    mcxtalname : ')
            ret.append(repr(self.mcxtalname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.ZAdefectnameListType")
    class ZAdefectnameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=zadefectnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1586-1616
        
        """
        def __init__(self, handle=None):
            """
            self = Zadefectnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1586-1616
            
            
            Returns
            -------
            this : Zadefectnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for zadefectnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_zadefectnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Zadefectnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1586-1616
            
            Parameters
            ----------
            this : Zadefectnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for zadefectnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_zadefectnamelisttype_finalise(this=self._handle)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1587
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1588
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def kk(self):
            """
            Element kk ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1589
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_zadefectnamelisttype__array__kk(self._handle)
            if array_handle in self._arrays:
                kk = self._arrays[array_handle]
            else:
                kk = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_zadefectnamelisttype__array__kk)
                self._arrays[array_handle] = kk
            return kk
        
        @kk.setter
        def kk(self, kk):
            self.kk[...] = kk
        
        @property
        def lauec(self):
            """
            Element lauec ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1590
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_zadefectnamelisttype__array__lauec(self._handle)
            if array_handle in self._arrays:
                lauec = self._arrays[array_handle]
            else:
                lauec = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_zadefectnamelisttype__array__lauec)
                self._arrays[array_handle] = lauec
            return lauec
        
        @lauec.setter
        def lauec(self, lauec):
            self.lauec[...] = lauec
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1591
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def progmode(self):
            """
            Element progmode ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1593
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__progmode(self._handle)
        
        @progmode.setter
        def progmode(self, progmode):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__progmode(self._handle, progmode)
        
        @property
        def stemnmlfile(self):
            """
            Element stemnmlfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1594
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__stemnmlfile(self._handle)
        
        @stemnmlfile.setter
        def stemnmlfile(self, stemnmlfile):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__stemnmlfile(self._handle, \
                stemnmlfile)
        
        @property
        def foilnmlfile(self):
            """
            Element foilnmlfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1595
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__foilnmlfile(self._handle)
        
        @foilnmlfile.setter
        def foilnmlfile(self, foilnmlfile):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__foilnmlfile(self._handle, \
                foilnmlfile)
        
        @property
        def df_l(self):
            """
            Element df_l ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1597
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__df_l(self._handle)
        
        @df_l.setter
        def df_l(self, df_l):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__df_l(self._handle, df_l)
        
        @property
        def df_npix(self):
            """
            Element df_npix ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1598
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__df_npix(self._handle)
        
        @df_npix.setter
        def df_npix(self, df_npix):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__df_npix(self._handle, df_npix)
        
        @property
        def df_npiy(self):
            """
            Element df_npiy ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1599
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__df_npiy(self._handle)
        
        @df_npiy.setter
        def df_npiy(self, df_npiy):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__df_npiy(self._handle, df_npiy)
        
        @property
        def df_slice(self):
            """
            Element df_slice ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1600
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__df_slice(self._handle)
        
        @df_slice.setter
        def df_slice(self, df_slice):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__df_slice(self._handle, df_slice)
        
        @property
        def dinfo(self):
            """
            Element dinfo ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1601
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__dinfo(self._handle)
        
        @dinfo.setter
        def dinfo(self, dinfo):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__dinfo(self._handle, dinfo)
        
        @property
        def sgname(self):
            """
            Element sgname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1602
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__sgname(self._handle)
        
        @sgname.setter
        def sgname(self, sgname):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__sgname(self._handle, sgname)
        
        @property
        def numdisl(self):
            """
            Element numdisl ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1604
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__numdisl(self._handle)
        
        @numdisl.setter
        def numdisl(self, numdisl):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__numdisl(self._handle, numdisl)
        
        @property
        def numsf(self):
            """
            Element numsf ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1605
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__numsf(self._handle)
        
        @numsf.setter
        def numsf(self, numsf):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__numsf(self._handle, numsf)
        
        @property
        def numinc(self):
            """
            Element numinc ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1606
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__numinc(self._handle)
        
        @numinc.setter
        def numinc(self, numinc):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__numinc(self._handle, numinc)
        
        @property
        def numvoids(self):
            """
            Element numvoids ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1607
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__numvoids(self._handle)
        
        @numvoids.setter
        def numvoids(self, numvoids):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__numvoids(self._handle, numvoids)
        
        @property
        def voidname(self):
            """
            Element voidname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1608
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__voidname(self._handle)
        
        @voidname.setter
        def voidname(self, voidname):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__voidname(self._handle, voidname)
        
        @property
        def dislname(self):
            """
            Element dislname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1609
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__dislname(self._handle)
        
        @dislname.setter
        def dislname(self, dislname):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__dislname(self._handle, dislname)
        
        @property
        def sfname(self):
            """
            Element sfname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1610
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__sfname(self._handle)
        
        @sfname.setter
        def sfname(self, sfname):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__sfname(self._handle, sfname)
        
        @property
        def incname(self):
            """
            Element incname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1611
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__incname(self._handle)
        
        @incname.setter
        def incname(self, incname):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__incname(self._handle, incname)
        
        @property
        def dispfile(self):
            """
            Element dispfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1612
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__dispfile(self._handle)
        
        @dispfile.setter
        def dispfile(self, dispfile):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__dispfile(self._handle, dispfile)
        
        @property
        def dispmode(self):
            """
            Element dispmode ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1613
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__dispmode(self._handle)
        
        @dispmode.setter
        def dispmode(self, dispmode):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__dispmode(self._handle, dispmode)
        
        @property
        def dataname(self):
            """
            Element dataname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1615
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__dataname(self._handle)
        
        @dataname.setter
        def dataname(self, dataname):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__dataname(self._handle, dataname)
        
        @property
        def t_interval(self):
            """
            Element t_interval ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1616
            
            """
            return _pyEMsoft.f90wrap_zadefectnamelisttype__get__t_interval(self._handle)
        
        @t_interval.setter
        def t_interval(self, t_interval):
            _pyEMsoft.f90wrap_zadefectnamelisttype__set__t_interval(self._handle, \
                t_interval)
        
        def __str__(self):
            ret = ['<zadefectnamelisttype>{\n']
            ret.append('    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    kk : ')
            ret.append(repr(self.kk))
            ret.append(',\n    lauec : ')
            ret.append(repr(self.lauec))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    progmode : ')
            ret.append(repr(self.progmode))
            ret.append(',\n    stemnmlfile : ')
            ret.append(repr(self.stemnmlfile))
            ret.append(',\n    foilnmlfile : ')
            ret.append(repr(self.foilnmlfile))
            ret.append(',\n    df_l : ')
            ret.append(repr(self.df_l))
            ret.append(',\n    df_npix : ')
            ret.append(repr(self.df_npix))
            ret.append(',\n    df_npiy : ')
            ret.append(repr(self.df_npiy))
            ret.append(',\n    df_slice : ')
            ret.append(repr(self.df_slice))
            ret.append(',\n    dinfo : ')
            ret.append(repr(self.dinfo))
            ret.append(',\n    sgname : ')
            ret.append(repr(self.sgname))
            ret.append(',\n    numdisl : ')
            ret.append(repr(self.numdisl))
            ret.append(',\n    numsf : ')
            ret.append(repr(self.numsf))
            ret.append(',\n    numinc : ')
            ret.append(repr(self.numinc))
            ret.append(',\n    numvoids : ')
            ret.append(repr(self.numvoids))
            ret.append(',\n    voidname : ')
            ret.append(repr(self.voidname))
            ret.append(',\n    dislname : ')
            ret.append(repr(self.dislname))
            ret.append(',\n    sfname : ')
            ret.append(repr(self.sfname))
            ret.append(',\n    incname : ')
            ret.append(repr(self.incname))
            ret.append(',\n    dispfile : ')
            ret.append(repr(self.dispfile))
            ret.append(',\n    dispmode : ')
            ret.append(repr(self.dispmode))
            ret.append(',\n    dataname : ')
            ret.append(repr(self.dataname))
            ret.append(',\n    t_interval : ')
            ret.append(repr(self.t_interval))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EMDPFitListType")
    class EMDPFitListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=emdpfitlisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1618-1655
        
        """
        def __init__(self, handle=None):
            """
            self = Emdpfitlisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1618-1655
            
            
            Returns
            -------
            this : Emdpfitlisttype
            	Object to be constructed
            
            
            Automatically generated constructor for emdpfitlisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_emdpfitlisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Emdpfitlisttype
            
            
            Defined at NameListTypedefs.f90 lines 1618-1655
            
            Parameters
            ----------
            this : Emdpfitlisttype
            	Object to be destructed
            
            
            Automatically generated destructor for emdpfitlisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_emdpfitlisttype_finalise(this=self._handle)
        
        @property
        def modalityname(self):
            """
            Element modalityname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1619
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__modalityname(self._handle)
        
        @modalityname.setter
        def modalityname(self, modalityname):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__modalityname(self._handle, modalityname)
        
        @property
        def masterfile(self):
            """
            Element masterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1620
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__masterfile(self._handle)
        
        @masterfile.setter
        def masterfile(self, masterfile):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__masterfile(self._handle, masterfile)
        
        @property
        def exptfile(self):
            """
            Element exptfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1621
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__exptfile(self._handle)
        
        @exptfile.setter
        def exptfile(self, exptfile):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__exptfile(self._handle, exptfile)
        
        @property
        def rhobeg(self):
            """
            Element rhobeg ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1622
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__rhobeg(self._handle)
        
        @rhobeg.setter
        def rhobeg(self, rhobeg):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__rhobeg(self._handle, rhobeg)
        
        @property
        def rhoend(self):
            """
            Element rhoend ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1623
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__rhoend(self._handle)
        
        @rhoend.setter
        def rhoend(self, rhoend):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__rhoend(self._handle, rhoend)
        
        @property
        def verbose(self):
            """
            Element verbose ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 1624
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__verbose(self._handle)
        
        @verbose.setter
        def verbose(self, verbose):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__verbose(self._handle, verbose)
        
        @property
        def mask(self):
            """
            Element mask ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 1625
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__mask(self._handle)
        
        @mask.setter
        def mask(self, mask):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__mask(self._handle, mask)
        
        @property
        def maskradius(self):
            """
            Element maskradius ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1626
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__maskradius(self._handle)
        
        @maskradius.setter
        def maskradius(self, maskradius):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__maskradius(self._handle, maskradius)
        
        @property
        def gammavalue(self):
            """
            Element gammavalue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1627
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__gammavalue(self._handle)
        
        @gammavalue.setter
        def gammavalue(self, gammavalue):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__gammavalue(self._handle, gammavalue)
        
        @property
        def phi(self):
            """
            Element phi ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1628
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__phi(self._handle)
        
        @phi.setter
        def phi(self, phi):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__phi(self._handle, phi)
        
        @property
        def phi1(self):
            """
            Element phi1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1628
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__phi1(self._handle)
        
        @phi1.setter
        def phi1(self, phi1):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__phi1(self._handle, phi1)
        
        @property
        def phi2(self):
            """
            Element phi2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1628
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__phi2(self._handle)
        
        @phi2.setter
        def phi2(self, phi2):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__phi2(self._handle, phi2)
        
        @property
        def l(self):
            """
            Element l ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1629
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__l(self._handle)
        
        @l.setter
        def l(self, l):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__l(self._handle, l)
        
        @property
        def thetac(self):
            """
            Element thetac ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1630
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__thetac(self._handle)
        
        @thetac.setter
        def thetac(self, thetac):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__thetac(self._handle, thetac)
        
        @property
        def delta(self):
            """
            Element delta ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1631
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__delta(self._handle)
        
        @delta.setter
        def delta(self, delta):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__delta(self._handle, delta)
        
        @property
        def omega(self):
            """
            Element omega ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1632
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__omega(self._handle)
        
        @omega.setter
        def omega(self, omega):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__omega(self._handle, omega)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1633
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__numsx(self._handle, numsx)
        
        @property
        def numsy(self):
            """
            Element numsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1634
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__numsy(self._handle)
        
        @numsy.setter
        def numsy(self, numsy):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__numsy(self._handle, numsy)
        
        @property
        def binning(self):
            """
            Element binning ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1635
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__binning(self._handle)
        
        @binning.setter
        def binning(self, binning):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__binning(self._handle, binning)
        
        @property
        def xpc(self):
            """
            Element xpc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1636
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__xpc(self._handle)
        
        @xpc.setter
        def xpc(self, xpc):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__xpc(self._handle, xpc)
        
        @property
        def ypc(self):
            """
            Element ypc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1637
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__ypc(self._handle)
        
        @ypc.setter
        def ypc(self, ypc):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__ypc(self._handle, ypc)
        
        @property
        def beamcurrent(self):
            """
            Element beamcurrent ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1638
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__beamcurrent(self._handle)
        
        @beamcurrent.setter
        def beamcurrent(self, beamcurrent):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__beamcurrent(self._handle, beamcurrent)
        
        @property
        def dwelltime(self):
            """
            Element dwelltime ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1639
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__dwelltime(self._handle)
        
        @dwelltime.setter
        def dwelltime(self, dwelltime):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__dwelltime(self._handle, dwelltime)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1640
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__npix(self._handle, npix)
        
        @property
        def rin(self):
            """
            Element rin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1641
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__rin(self._handle)
        
        @rin.setter
        def rin(self, rin):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__rin(self._handle, rin)
        
        @property
        def rout(self):
            """
            Element rout ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1642
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__rout(self._handle)
        
        @rout.setter
        def rout(self, rout):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__rout(self._handle, rout)
        
        @property
        def thetacone(self):
            """
            Element thetacone ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1643
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__thetacone(self._handle)
        
        @thetacone.setter
        def thetacone(self, thetacone):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__thetacone(self._handle, thetacone)
        
        @property
        def sampletilt(self):
            """
            Element sampletilt ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1644
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__sampletilt(self._handle)
        
        @sampletilt.setter
        def sampletilt(self, sampletilt):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__sampletilt(self._handle, sampletilt)
        
        @property
        def workingdistance(self):
            """
            Element workingdistance ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1645
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__workingdistance(self._handle)
        
        @workingdistance.setter
        def workingdistance(self, workingdistance):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__workingdistance(self._handle, \
                workingdistance)
        
        @property
        def step_xpc(self):
            """
            Element step_xpc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1646
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__step_xpc(self._handle)
        
        @step_xpc.setter
        def step_xpc(self, step_xpc):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__step_xpc(self._handle, step_xpc)
        
        @property
        def step_ypc(self):
            """
            Element step_ypc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1647
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__step_ypc(self._handle)
        
        @step_ypc.setter
        def step_ypc(self, step_ypc):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__step_ypc(self._handle, step_ypc)
        
        @property
        def step_l(self):
            """
            Element step_l ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1648
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__step_l(self._handle)
        
        @step_l.setter
        def step_l(self, step_l):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__step_l(self._handle, step_l)
        
        @property
        def step_phi1(self):
            """
            Element step_phi1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1649
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__step_phi1(self._handle)
        
        @step_phi1.setter
        def step_phi1(self, step_phi1):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__step_phi1(self._handle, step_phi1)
        
        @property
        def step_phi(self):
            """
            Element step_phi ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1650
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__step_phi(self._handle)
        
        @step_phi.setter
        def step_phi(self, step_phi):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__step_phi(self._handle, step_phi)
        
        @property
        def step_phi2(self):
            """
            Element step_phi2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1651
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__step_phi2(self._handle)
        
        @step_phi2.setter
        def step_phi2(self, step_phi2):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__step_phi2(self._handle, step_phi2)
        
        @property
        def step_thetacone(self):
            """
            Element step_thetacone ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1652
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__step_thetacone(self._handle)
        
        @step_thetacone.setter
        def step_thetacone(self, step_thetacone):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__step_thetacone(self._handle, \
                step_thetacone)
        
        @property
        def nrun(self):
            """
            Element nrun ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1653
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__nrun(self._handle)
        
        @nrun.setter
        def nrun(self, nrun):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__nrun(self._handle, nrun)
        
        @property
        def nregions(self):
            """
            Element nregions ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1654
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__nregions(self._handle)
        
        @nregions.setter
        def nregions(self, nregions):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__nregions(self._handle, nregions)
        
        @property
        def metric(self):
            """
            Element metric ftype=character(2) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1655
            
            """
            return _pyEMsoft.f90wrap_emdpfitlisttype__get__metric(self._handle)
        
        @metric.setter
        def metric(self, metric):
            _pyEMsoft.f90wrap_emdpfitlisttype__set__metric(self._handle, metric)
        
        def __str__(self):
            ret = ['<emdpfitlisttype>{\n']
            ret.append('    modalityname : ')
            ret.append(repr(self.modalityname))
            ret.append(',\n    masterfile : ')
            ret.append(repr(self.masterfile))
            ret.append(',\n    exptfile : ')
            ret.append(repr(self.exptfile))
            ret.append(',\n    rhobeg : ')
            ret.append(repr(self.rhobeg))
            ret.append(',\n    rhoend : ')
            ret.append(repr(self.rhoend))
            ret.append(',\n    verbose : ')
            ret.append(repr(self.verbose))
            ret.append(',\n    mask : ')
            ret.append(repr(self.mask))
            ret.append(',\n    maskradius : ')
            ret.append(repr(self.maskradius))
            ret.append(',\n    gammavalue : ')
            ret.append(repr(self.gammavalue))
            ret.append(',\n    phi : ')
            ret.append(repr(self.phi))
            ret.append(',\n    phi1 : ')
            ret.append(repr(self.phi1))
            ret.append(',\n    phi2 : ')
            ret.append(repr(self.phi2))
            ret.append(',\n    l : ')
            ret.append(repr(self.l))
            ret.append(',\n    thetac : ')
            ret.append(repr(self.thetac))
            ret.append(',\n    delta : ')
            ret.append(repr(self.delta))
            ret.append(',\n    omega : ')
            ret.append(repr(self.omega))
            ret.append(',\n    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    numsy : ')
            ret.append(repr(self.numsy))
            ret.append(',\n    binning : ')
            ret.append(repr(self.binning))
            ret.append(',\n    xpc : ')
            ret.append(repr(self.xpc))
            ret.append(',\n    ypc : ')
            ret.append(repr(self.ypc))
            ret.append(',\n    beamcurrent : ')
            ret.append(repr(self.beamcurrent))
            ret.append(',\n    dwelltime : ')
            ret.append(repr(self.dwelltime))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    rin : ')
            ret.append(repr(self.rin))
            ret.append(',\n    rout : ')
            ret.append(repr(self.rout))
            ret.append(',\n    thetacone : ')
            ret.append(repr(self.thetacone))
            ret.append(',\n    sampletilt : ')
            ret.append(repr(self.sampletilt))
            ret.append(',\n    workingdistance : ')
            ret.append(repr(self.workingdistance))
            ret.append(',\n    step_xpc : ')
            ret.append(repr(self.step_xpc))
            ret.append(',\n    step_ypc : ')
            ret.append(repr(self.step_ypc))
            ret.append(',\n    step_l : ')
            ret.append(repr(self.step_l))
            ret.append(',\n    step_phi1 : ')
            ret.append(repr(self.step_phi1))
            ret.append(',\n    step_phi : ')
            ret.append(repr(self.step_phi))
            ret.append(',\n    step_phi2 : ')
            ret.append(repr(self.step_phi2))
            ret.append(',\n    step_thetacone : ')
            ret.append(repr(self.step_thetacone))
            ret.append(',\n    nrun : ')
            ret.append(repr(self.nrun))
            ret.append(',\n    nregions : ')
            ret.append(repr(self.nregions))
            ret.append(',\n    metric : ')
            ret.append(repr(self.metric))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EMDPFit4ListType")
    class EMDPFit4ListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=emdpfit4listtype)
        
        
        Defined at NameListTypedefs.f90 lines 1657-1710
        
        """
        def __init__(self, handle=None):
            """
            self = Emdpfit4Listtype()
            
            
            Defined at NameListTypedefs.f90 lines 1657-1710
            
            
            Returns
            -------
            this : Emdpfit4Listtype
            	Object to be constructed
            
            
            Automatically generated constructor for emdpfit4listtype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_emdpfit4listtype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Emdpfit4Listtype
            
            
            Defined at NameListTypedefs.f90 lines 1657-1710
            
            Parameters
            ----------
            this : Emdpfit4Listtype
            	Object to be destructed
            
            
            Automatically generated destructor for emdpfit4listtype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_emdpfit4listtype_finalise(this=self._handle)
        
        @property
        def modalityname(self):
            """
            Element modalityname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1658
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__modalityname(self._handle)
        
        @modalityname.setter
        def modalityname(self, modalityname):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__modalityname(self._handle, \
                modalityname)
        
        @property
        def masterfile(self):
            """
            Element masterfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1659
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__masterfile(self._handle)
        
        @masterfile.setter
        def masterfile(self, masterfile):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__masterfile(self._handle, masterfile)
        
        @property
        def exptfile_pat1(self):
            """
            Element exptfile_pat1 ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1660
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__exptfile_pat1(self._handle)
        
        @exptfile_pat1.setter
        def exptfile_pat1(self, exptfile_pat1):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__exptfile_pat1(self._handle, \
                exptfile_pat1)
        
        @property
        def exptfile_pat2(self):
            """
            Element exptfile_pat2 ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1661
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__exptfile_pat2(self._handle)
        
        @exptfile_pat2.setter
        def exptfile_pat2(self, exptfile_pat2):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__exptfile_pat2(self._handle, \
                exptfile_pat2)
        
        @property
        def exptfile_pat3(self):
            """
            Element exptfile_pat3 ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1662
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__exptfile_pat3(self._handle)
        
        @exptfile_pat3.setter
        def exptfile_pat3(self, exptfile_pat3):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__exptfile_pat3(self._handle, \
                exptfile_pat3)
        
        @property
        def exptfile_pat4(self):
            """
            Element exptfile_pat4 ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1663
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__exptfile_pat4(self._handle)
        
        @exptfile_pat4.setter
        def exptfile_pat4(self, exptfile_pat4):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__exptfile_pat4(self._handle, \
                exptfile_pat4)
        
        @property
        def rhobeg(self):
            """
            Element rhobeg ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1664
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__rhobeg(self._handle)
        
        @rhobeg.setter
        def rhobeg(self, rhobeg):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__rhobeg(self._handle, rhobeg)
        
        @property
        def rhoend(self):
            """
            Element rhoend ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1665
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__rhoend(self._handle)
        
        @rhoend.setter
        def rhoend(self, rhoend):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__rhoend(self._handle, rhoend)
        
        @property
        def verbose(self):
            """
            Element verbose ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 1666
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__verbose(self._handle)
        
        @verbose.setter
        def verbose(self, verbose):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__verbose(self._handle, verbose)
        
        @property
        def mask(self):
            """
            Element mask ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 1667
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__mask(self._handle)
        
        @mask.setter
        def mask(self, mask):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__mask(self._handle, mask)
        
        @property
        def maskradius(self):
            """
            Element maskradius ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1668
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__maskradius(self._handle)
        
        @maskradius.setter
        def maskradius(self, maskradius):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__maskradius(self._handle, maskradius)
        
        @property
        def gammavalue(self):
            """
            Element gammavalue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1669
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__gammavalue(self._handle)
        
        @gammavalue.setter
        def gammavalue(self, gammavalue):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__gammavalue(self._handle, gammavalue)
        
        @property
        def phi_pat1(self):
            """
            Element phi_pat1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1670
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__phi_pat1(self._handle)
        
        @phi_pat1.setter
        def phi_pat1(self, phi_pat1):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__phi_pat1(self._handle, phi_pat1)
        
        @property
        def phi1_pat1(self):
            """
            Element phi1_pat1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1670
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__phi1_pat1(self._handle)
        
        @phi1_pat1.setter
        def phi1_pat1(self, phi1_pat1):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__phi1_pat1(self._handle, phi1_pat1)
        
        @property
        def phi2_pat1(self):
            """
            Element phi2_pat1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1670
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__phi2_pat1(self._handle)
        
        @phi2_pat1.setter
        def phi2_pat1(self, phi2_pat1):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__phi2_pat1(self._handle, phi2_pat1)
        
        @property
        def phi_pat2(self):
            """
            Element phi_pat2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1671
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__phi_pat2(self._handle)
        
        @phi_pat2.setter
        def phi_pat2(self, phi_pat2):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__phi_pat2(self._handle, phi_pat2)
        
        @property
        def phi1_pat2(self):
            """
            Element phi1_pat2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1671
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__phi1_pat2(self._handle)
        
        @phi1_pat2.setter
        def phi1_pat2(self, phi1_pat2):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__phi1_pat2(self._handle, phi1_pat2)
        
        @property
        def phi2_pat2(self):
            """
            Element phi2_pat2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1671
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__phi2_pat2(self._handle)
        
        @phi2_pat2.setter
        def phi2_pat2(self, phi2_pat2):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__phi2_pat2(self._handle, phi2_pat2)
        
        @property
        def phi_pat3(self):
            """
            Element phi_pat3 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1672
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__phi_pat3(self._handle)
        
        @phi_pat3.setter
        def phi_pat3(self, phi_pat3):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__phi_pat3(self._handle, phi_pat3)
        
        @property
        def phi1_pat3(self):
            """
            Element phi1_pat3 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1672
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__phi1_pat3(self._handle)
        
        @phi1_pat3.setter
        def phi1_pat3(self, phi1_pat3):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__phi1_pat3(self._handle, phi1_pat3)
        
        @property
        def phi2_pat3(self):
            """
            Element phi2_pat3 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1672
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__phi2_pat3(self._handle)
        
        @phi2_pat3.setter
        def phi2_pat3(self, phi2_pat3):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__phi2_pat3(self._handle, phi2_pat3)
        
        @property
        def phi_pat4(self):
            """
            Element phi_pat4 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1673
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__phi_pat4(self._handle)
        
        @phi_pat4.setter
        def phi_pat4(self, phi_pat4):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__phi_pat4(self._handle, phi_pat4)
        
        @property
        def phi1_pat4(self):
            """
            Element phi1_pat4 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1673
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__phi1_pat4(self._handle)
        
        @phi1_pat4.setter
        def phi1_pat4(self, phi1_pat4):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__phi1_pat4(self._handle, phi1_pat4)
        
        @property
        def phi2_pat4(self):
            """
            Element phi2_pat4 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1673
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__phi2_pat4(self._handle)
        
        @phi2_pat4.setter
        def phi2_pat4(self, phi2_pat4):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__phi2_pat4(self._handle, phi2_pat4)
        
        @property
        def l(self):
            """
            Element l ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1674
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__l(self._handle)
        
        @l.setter
        def l(self, l):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__l(self._handle, l)
        
        @property
        def thetac(self):
            """
            Element thetac ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1675
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__thetac(self._handle)
        
        @thetac.setter
        def thetac(self, thetac):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__thetac(self._handle, thetac)
        
        @property
        def delta(self):
            """
            Element delta ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1676
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__delta(self._handle)
        
        @delta.setter
        def delta(self, delta):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__delta(self._handle, delta)
        
        @property
        def omega(self):
            """
            Element omega ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1677
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__omega(self._handle)
        
        @omega.setter
        def omega(self, omega):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__omega(self._handle, omega)
        
        @property
        def numsx(self):
            """
            Element numsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1678
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__numsx(self._handle)
        
        @numsx.setter
        def numsx(self, numsx):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__numsx(self._handle, numsx)
        
        @property
        def numsy(self):
            """
            Element numsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1679
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__numsy(self._handle)
        
        @numsy.setter
        def numsy(self, numsy):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__numsy(self._handle, numsy)
        
        @property
        def binning(self):
            """
            Element binning ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1680
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__binning(self._handle)
        
        @binning.setter
        def binning(self, binning):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__binning(self._handle, binning)
        
        @property
        def xpc(self):
            """
            Element xpc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1681
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__xpc(self._handle)
        
        @xpc.setter
        def xpc(self, xpc):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__xpc(self._handle, xpc)
        
        @property
        def ypc(self):
            """
            Element ypc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1682
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__ypc(self._handle)
        
        @ypc.setter
        def ypc(self, ypc):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__ypc(self._handle, ypc)
        
        @property
        def beamcurrent(self):
            """
            Element beamcurrent ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1683
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__beamcurrent(self._handle)
        
        @beamcurrent.setter
        def beamcurrent(self, beamcurrent):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__beamcurrent(self._handle, beamcurrent)
        
        @property
        def dwelltime(self):
            """
            Element dwelltime ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1684
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__dwelltime(self._handle)
        
        @dwelltime.setter
        def dwelltime(self, dwelltime):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__dwelltime(self._handle, dwelltime)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1685
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__npix(self._handle, npix)
        
        @property
        def rin(self):
            """
            Element rin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1686
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__rin(self._handle)
        
        @rin.setter
        def rin(self, rin):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__rin(self._handle, rin)
        
        @property
        def rout(self):
            """
            Element rout ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1687
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__rout(self._handle)
        
        @rout.setter
        def rout(self, rout):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__rout(self._handle, rout)
        
        @property
        def thetacone(self):
            """
            Element thetacone ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1688
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__thetacone(self._handle)
        
        @thetacone.setter
        def thetacone(self, thetacone):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__thetacone(self._handle, thetacone)
        
        @property
        def sampletilt(self):
            """
            Element sampletilt ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1689
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__sampletilt(self._handle)
        
        @sampletilt.setter
        def sampletilt(self, sampletilt):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__sampletilt(self._handle, sampletilt)
        
        @property
        def workingdistance(self):
            """
            Element workingdistance ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1690
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__workingdistance(self._handle)
        
        @workingdistance.setter
        def workingdistance(self, workingdistance):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__workingdistance(self._handle, \
                workingdistance)
        
        @property
        def step_xpc(self):
            """
            Element step_xpc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1691
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__step_xpc(self._handle)
        
        @step_xpc.setter
        def step_xpc(self, step_xpc):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__step_xpc(self._handle, step_xpc)
        
        @property
        def step_ypc(self):
            """
            Element step_ypc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1692
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__step_ypc(self._handle)
        
        @step_ypc.setter
        def step_ypc(self, step_ypc):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__step_ypc(self._handle, step_ypc)
        
        @property
        def step_l(self):
            """
            Element step_l ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1693
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__step_l(self._handle)
        
        @step_l.setter
        def step_l(self, step_l):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__step_l(self._handle, step_l)
        
        @property
        def step_phi1(self):
            """
            Element step_phi1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1694
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__step_phi1(self._handle)
        
        @step_phi1.setter
        def step_phi1(self, step_phi1):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__step_phi1(self._handle, step_phi1)
        
        @property
        def step_phi(self):
            """
            Element step_phi ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1695
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__step_phi(self._handle)
        
        @step_phi.setter
        def step_phi(self, step_phi):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__step_phi(self._handle, step_phi)
        
        @property
        def step_phi2(self):
            """
            Element step_phi2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1696
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__step_phi2(self._handle)
        
        @step_phi2.setter
        def step_phi2(self, step_phi2):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__step_phi2(self._handle, step_phi2)
        
        @property
        def step_thetacone(self):
            """
            Element step_thetacone ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1697
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__step_thetacone(self._handle)
        
        @step_thetacone.setter
        def step_thetacone(self, step_thetacone):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__step_thetacone(self._handle, \
                step_thetacone)
        
        @property
        def nrun(self):
            """
            Element nrun ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1698
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__nrun(self._handle)
        
        @nrun.setter
        def nrun(self, nrun):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__nrun(self._handle, nrun)
        
        @property
        def pixx_pat1(self):
            """
            Element pixx_pat1 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1699
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__pixx_pat1(self._handle)
        
        @pixx_pat1.setter
        def pixx_pat1(self, pixx_pat1):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__pixx_pat1(self._handle, pixx_pat1)
        
        @property
        def pixy_pat1(self):
            """
            Element pixy_pat1 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1700
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__pixy_pat1(self._handle)
        
        @pixy_pat1.setter
        def pixy_pat1(self, pixy_pat1):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__pixy_pat1(self._handle, pixy_pat1)
        
        @property
        def pixx_pat2(self):
            """
            Element pixx_pat2 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1701
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__pixx_pat2(self._handle)
        
        @pixx_pat2.setter
        def pixx_pat2(self, pixx_pat2):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__pixx_pat2(self._handle, pixx_pat2)
        
        @property
        def pixy_pat2(self):
            """
            Element pixy_pat2 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1702
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__pixy_pat2(self._handle)
        
        @pixy_pat2.setter
        def pixy_pat2(self, pixy_pat2):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__pixy_pat2(self._handle, pixy_pat2)
        
        @property
        def pixx_pat3(self):
            """
            Element pixx_pat3 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1703
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__pixx_pat3(self._handle)
        
        @pixx_pat3.setter
        def pixx_pat3(self, pixx_pat3):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__pixx_pat3(self._handle, pixx_pat3)
        
        @property
        def pixy_pat3(self):
            """
            Element pixy_pat3 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1704
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__pixy_pat3(self._handle)
        
        @pixy_pat3.setter
        def pixy_pat3(self, pixy_pat3):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__pixy_pat3(self._handle, pixy_pat3)
        
        @property
        def pixx_pat4(self):
            """
            Element pixx_pat4 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1705
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__pixx_pat4(self._handle)
        
        @pixx_pat4.setter
        def pixx_pat4(self, pixx_pat4):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__pixx_pat4(self._handle, pixx_pat4)
        
        @property
        def pixy_pat4(self):
            """
            Element pixy_pat4 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1706
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__pixy_pat4(self._handle)
        
        @pixy_pat4.setter
        def pixy_pat4(self, pixy_pat4):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__pixy_pat4(self._handle, pixy_pat4)
        
        @property
        def stepx(self):
            """
            Element stepx ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1707
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__stepx(self._handle)
        
        @stepx.setter
        def stepx(self, stepx):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__stepx(self._handle, stepx)
        
        @property
        def stepy(self):
            """
            Element stepy ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1708
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__stepy(self._handle)
        
        @stepy.setter
        def stepy(self, stepy):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__stepy(self._handle, stepy)
        
        @property
        def nregions(self):
            """
            Element nregions ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1709
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__nregions(self._handle)
        
        @nregions.setter
        def nregions(self, nregions):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__nregions(self._handle, nregions)
        
        @property
        def metric(self):
            """
            Element metric ftype=character(2) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1710
            
            """
            return _pyEMsoft.f90wrap_emdpfit4listtype__get__metric(self._handle)
        
        @metric.setter
        def metric(self, metric):
            _pyEMsoft.f90wrap_emdpfit4listtype__set__metric(self._handle, metric)
        
        def __str__(self):
            ret = ['<emdpfit4listtype>{\n']
            ret.append('    modalityname : ')
            ret.append(repr(self.modalityname))
            ret.append(',\n    masterfile : ')
            ret.append(repr(self.masterfile))
            ret.append(',\n    exptfile_pat1 : ')
            ret.append(repr(self.exptfile_pat1))
            ret.append(',\n    exptfile_pat2 : ')
            ret.append(repr(self.exptfile_pat2))
            ret.append(',\n    exptfile_pat3 : ')
            ret.append(repr(self.exptfile_pat3))
            ret.append(',\n    exptfile_pat4 : ')
            ret.append(repr(self.exptfile_pat4))
            ret.append(',\n    rhobeg : ')
            ret.append(repr(self.rhobeg))
            ret.append(',\n    rhoend : ')
            ret.append(repr(self.rhoend))
            ret.append(',\n    verbose : ')
            ret.append(repr(self.verbose))
            ret.append(',\n    mask : ')
            ret.append(repr(self.mask))
            ret.append(',\n    maskradius : ')
            ret.append(repr(self.maskradius))
            ret.append(',\n    gammavalue : ')
            ret.append(repr(self.gammavalue))
            ret.append(',\n    phi_pat1 : ')
            ret.append(repr(self.phi_pat1))
            ret.append(',\n    phi1_pat1 : ')
            ret.append(repr(self.phi1_pat1))
            ret.append(',\n    phi2_pat1 : ')
            ret.append(repr(self.phi2_pat1))
            ret.append(',\n    phi_pat2 : ')
            ret.append(repr(self.phi_pat2))
            ret.append(',\n    phi1_pat2 : ')
            ret.append(repr(self.phi1_pat2))
            ret.append(',\n    phi2_pat2 : ')
            ret.append(repr(self.phi2_pat2))
            ret.append(',\n    phi_pat3 : ')
            ret.append(repr(self.phi_pat3))
            ret.append(',\n    phi1_pat3 : ')
            ret.append(repr(self.phi1_pat3))
            ret.append(',\n    phi2_pat3 : ')
            ret.append(repr(self.phi2_pat3))
            ret.append(',\n    phi_pat4 : ')
            ret.append(repr(self.phi_pat4))
            ret.append(',\n    phi1_pat4 : ')
            ret.append(repr(self.phi1_pat4))
            ret.append(',\n    phi2_pat4 : ')
            ret.append(repr(self.phi2_pat4))
            ret.append(',\n    l : ')
            ret.append(repr(self.l))
            ret.append(',\n    thetac : ')
            ret.append(repr(self.thetac))
            ret.append(',\n    delta : ')
            ret.append(repr(self.delta))
            ret.append(',\n    omega : ')
            ret.append(repr(self.omega))
            ret.append(',\n    numsx : ')
            ret.append(repr(self.numsx))
            ret.append(',\n    numsy : ')
            ret.append(repr(self.numsy))
            ret.append(',\n    binning : ')
            ret.append(repr(self.binning))
            ret.append(',\n    xpc : ')
            ret.append(repr(self.xpc))
            ret.append(',\n    ypc : ')
            ret.append(repr(self.ypc))
            ret.append(',\n    beamcurrent : ')
            ret.append(repr(self.beamcurrent))
            ret.append(',\n    dwelltime : ')
            ret.append(repr(self.dwelltime))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    rin : ')
            ret.append(repr(self.rin))
            ret.append(',\n    rout : ')
            ret.append(repr(self.rout))
            ret.append(',\n    thetacone : ')
            ret.append(repr(self.thetacone))
            ret.append(',\n    sampletilt : ')
            ret.append(repr(self.sampletilt))
            ret.append(',\n    workingdistance : ')
            ret.append(repr(self.workingdistance))
            ret.append(',\n    step_xpc : ')
            ret.append(repr(self.step_xpc))
            ret.append(',\n    step_ypc : ')
            ret.append(repr(self.step_ypc))
            ret.append(',\n    step_l : ')
            ret.append(repr(self.step_l))
            ret.append(',\n    step_phi1 : ')
            ret.append(repr(self.step_phi1))
            ret.append(',\n    step_phi : ')
            ret.append(repr(self.step_phi))
            ret.append(',\n    step_phi2 : ')
            ret.append(repr(self.step_phi2))
            ret.append(',\n    step_thetacone : ')
            ret.append(repr(self.step_thetacone))
            ret.append(',\n    nrun : ')
            ret.append(repr(self.nrun))
            ret.append(',\n    pixx_pat1 : ')
            ret.append(repr(self.pixx_pat1))
            ret.append(',\n    pixy_pat1 : ')
            ret.append(repr(self.pixy_pat1))
            ret.append(',\n    pixx_pat2 : ')
            ret.append(repr(self.pixx_pat2))
            ret.append(',\n    pixy_pat2 : ')
            ret.append(repr(self.pixy_pat2))
            ret.append(',\n    pixx_pat3 : ')
            ret.append(repr(self.pixx_pat3))
            ret.append(',\n    pixy_pat3 : ')
            ret.append(repr(self.pixy_pat3))
            ret.append(',\n    pixx_pat4 : ')
            ret.append(repr(self.pixx_pat4))
            ret.append(',\n    pixy_pat4 : ')
            ret.append(repr(self.pixy_pat4))
            ret.append(',\n    stepx : ')
            ret.append(repr(self.stepx))
            ret.append(',\n    stepy : ')
            ret.append(repr(self.stepy))
            ret.append(',\n    nregions : ')
            ret.append(repr(self.nregions))
            ret.append(',\n    metric : ')
            ret.append(repr(self.metric))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.ECPSingleNameListType")
    class ECPSingleNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ecpsinglenamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1713-1762
        
        """
        def __init__(self, handle=None):
            """
            self = Ecpsinglenamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1713-1762
            
            
            Returns
            -------
            this : Ecpsinglenamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for ecpsinglenamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ecpsinglenamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ecpsinglenamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1713-1762
            
            Parameters
            ----------
            this : Ecpsinglenamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for ecpsinglenamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ecpsinglenamelisttype_finalise(this=self._handle)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1714
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1715
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__npix(self._handle, npix)
        
        @property
        def thetac(self):
            """
            Element thetac ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1716
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__thetac(self._handle)
        
        @thetac.setter
        def thetac(self, thetac):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__thetac(self._handle, thetac)
        
        @property
        def maskpattern(self):
            """
            Element maskpattern ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1717
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__maskpattern(self._handle)
        
        @maskpattern.setter
        def maskpattern(self, maskpattern):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__maskpattern(self._handle, \
                maskpattern)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1718
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1719
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__energyfile(self._handle, \
                energyfile)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1720
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__datafile(self._handle, datafile)
        
        @property
        def eulerconvention(self):
            """
            Element eulerconvention ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1721
            
            """
            return \
                _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__eulerconvention(self._handle)
        
        @eulerconvention.setter
        def eulerconvention(self, eulerconvention):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__eulerconvention(self._handle, \
                eulerconvention)
        
        @property
        def gammavalue(self):
            """
            Element gammavalue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1722
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__gammavalue(self._handle)
        
        @gammavalue.setter
        def gammavalue(self, gammavalue):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__gammavalue(self._handle, \
                gammavalue)
        
        @property
        def sampletilt(self):
            """
            Element sampletilt ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1723
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__sampletilt(self._handle)
        
        @sampletilt.setter
        def sampletilt(self, sampletilt):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__sampletilt(self._handle, \
                sampletilt)
        
        @property
        def workingdistance(self):
            """
            Element workingdistance ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1724
            
            """
            return \
                _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__workingdistance(self._handle)
        
        @workingdistance.setter
        def workingdistance(self, workingdistance):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__workingdistance(self._handle, \
                workingdistance)
        
        @property
        def rin(self):
            """
            Element rin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1725
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__rin(self._handle)
        
        @rin.setter
        def rin(self, rin):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__rin(self._handle, rin)
        
        @property
        def rout(self):
            """
            Element rout ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1726
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__rout(self._handle)
        
        @rout.setter
        def rout(self, rout):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__rout(self._handle, rout)
        
        @property
        def phi1(self):
            """
            Element phi1 ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1727
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__phi1(self._handle)
        
        @phi1.setter
        def phi1(self, phi1):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__phi1(self._handle, phi1)
        
        @property
        def phi(self):
            """
            Element phi ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1727
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__phi(self._handle)
        
        @phi.setter
        def phi(self, phi):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__phi(self._handle, phi)
        
        @property
        def phi2(self):
            """
            Element phi2 ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1727
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__phi2(self._handle)
        
        @phi2.setter
        def phi2(self, phi2):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__phi2(self._handle, phi2)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1728
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def numangle(self):
            """
            Element numangle ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1730
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__numangle(self._handle)
        
        @numangle.setter
        def numangle(self, numangle):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__numangle(self._handle, numangle)
        
        @property
        def numangle_anglefile(self):
            """
            Element numangle_anglefile ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1731
            
            """
            return \
                _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__numangle_anglefile(self._handle)
        
        @numangle_anglefile.setter
        def numangle_anglefile(self, numangle_anglefile):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__numangle_anglefile(self._handle, \
                numangle_anglefile)
        
        @property
        def numebins(self):
            """
            Element numebins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1732
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__numebins(self._handle)
        
        @numebins.setter
        def numebins(self, numebins):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__numebins(self._handle, numebins)
        
        @property
        def numzbins(self):
            """
            Element numzbins ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1733
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__numzbins(self._handle)
        
        @numzbins.setter
        def numzbins(self, numzbins):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__numzbins(self._handle, numzbins)
        
        @property
        def nsx(self):
            """
            Element nsx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1734
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__nsx(self._handle)
        
        @nsx.setter
        def nsx(self, nsx):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__nsx(self._handle, nsx)
        
        @property
        def nsy(self):
            """
            Element nsy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1735
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__nsy(self._handle)
        
        @nsy.setter
        def nsy(self, nsy):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__nsy(self._handle, nsy)
        
        @property
        def num_el(self):
            """
            Element num_el ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1736
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__num_el(self._handle)
        
        @num_el.setter
        def num_el(self, num_el):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__num_el(self._handle, num_el)
        
        @property
        def mcnthreads(self):
            """
            Element mcnthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1737
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__mcnthreads(self._handle)
        
        @mcnthreads.setter
        def mcnthreads(self, mcnthreads):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__mcnthreads(self._handle, \
                mcnthreads)
        
        @property
        def npx(self):
            """
            Element npx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1738
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__npx(self._handle)
        
        @npx.setter
        def npx(self, npx):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__npx(self._handle, npx)
        
        @property
        def npy(self):
            """
            Element npy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1739
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__npy(self._handle)
        
        @npy.setter
        def npy(self, npy):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__npy(self._handle, npy)
        
        @property
        def ne(self):
            """
            Element ne ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1740
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__ne(self._handle)
        
        @ne.setter
        def ne(self, ne):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__ne(self._handle, ne)
        
        @property
        def numset(self):
            """
            Element numset ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1741
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__numset(self._handle)
        
        @numset.setter
        def numset(self, numset):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__numset(self._handle, numset)
        
        @property
        def npolar(self):
            """
            Element npolar ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1742
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__npolar(self._handle)
        
        @npolar.setter
        def npolar(self, npolar):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__npolar(self._handle, npolar)
        
        @property
        def nazimuth(self):
            """
            Element nazimuth ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1743
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__nazimuth(self._handle)
        
        @nazimuth.setter
        def nazimuth(self, nazimuth):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__nazimuth(self._handle, nazimuth)
        
        @property
        def ekev(self):
            """
            Element ekev ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1744
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__ekev(self._handle)
        
        @ekev.setter
        def ekev(self, ekev):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__ekev(self._handle, ekev)
        
        @property
        def ehistmin(self):
            """
            Element ehistmin ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1745
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__ehistmin(self._handle)
        
        @ehistmin.setter
        def ehistmin(self, ehistmin):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__ehistmin(self._handle, ehistmin)
        
        @property
        def ebinsize(self):
            """
            Element ebinsize ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1746
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__ebinsize(self._handle)
        
        @ebinsize.setter
        def ebinsize(self, ebinsize):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__ebinsize(self._handle, ebinsize)
        
        @property
        def depthmax(self):
            """
            Element depthmax ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1747
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__depthmax(self._handle)
        
        @depthmax.setter
        def depthmax(self, depthmax):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__depthmax(self._handle, depthmax)
        
        @property
        def depthstep(self):
            """
            Element depthstep ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1748
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__depthstep(self._handle)
        
        @depthstep.setter
        def depthstep(self, depthstep):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__depthstep(self._handle, depthstep)
        
        @property
        def mcsigstart(self):
            """
            Element mcsigstart ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1749
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__mcsigstart(self._handle)
        
        @mcsigstart.setter
        def mcsigstart(self, mcsigstart):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__mcsigstart(self._handle, \
                mcsigstart)
        
        @property
        def mcsigend(self):
            """
            Element mcsigend ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1750
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__mcsigend(self._handle)
        
        @mcsigend.setter
        def mcsigend(self, mcsigend):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__mcsigend(self._handle, mcsigend)
        
        @property
        def mcsigstep(self):
            """
            Element mcsigstep ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1751
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__mcsigstep(self._handle)
        
        @mcsigstep.setter
        def mcsigstep(self, mcsigstep):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__mcsigstep(self._handle, mcsigstep)
        
        @property
        def mcomega(self):
            """
            Element mcomega ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1752
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__mcomega(self._handle)
        
        @mcomega.setter
        def mcomega(self, mcomega):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__mcomega(self._handle, mcomega)
        
        @property
        def mcmode(self):
            """
            Element mcmode ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1753
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__mcmode(self._handle)
        
        @mcmode.setter
        def mcmode(self, mcmode):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__mcmode(self._handle, mcmode)
        
        @property
        def anglemode(self):
            """
            Element anglemode ftype=character(5) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1754
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__anglemode(self._handle)
        
        @anglemode.setter
        def anglemode(self, anglemode):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__anglemode(self._handle, anglemode)
        
        @property
        def sqorhe(self):
            """
            Element sqorhe ftype=character(6) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1755
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__sqorhe(self._handle)
        
        @sqorhe.setter
        def sqorhe(self, sqorhe):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__sqorhe(self._handle, sqorhe)
        
        @property
        def mcscversion(self):
            """
            Element mcscversion ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1756
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__mcscversion(self._handle)
        
        @mcscversion.setter
        def mcscversion(self, mcscversion):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__mcscversion(self._handle, \
                mcscversion)
        
        @property
        def masterscversion(self):
            """
            Element masterscversion ftype=character(8) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1757
            
            """
            return \
                _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__masterscversion(self._handle)
        
        @masterscversion.setter
        def masterscversion(self, masterscversion):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__masterscversion(self._handle, \
                masterscversion)
        
        @property
        def masterprogname(self):
            """
            Element masterprogname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1758
            
            """
            return \
                _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__masterprogname(self._handle)
        
        @masterprogname.setter
        def masterprogname(self, masterprogname):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__masterprogname(self._handle, \
                masterprogname)
        
        @property
        def masterxtalname(self):
            """
            Element masterxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1759
            
            """
            return \
                _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__masterxtalname(self._handle)
        
        @masterxtalname.setter
        def masterxtalname(self, masterxtalname):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__masterxtalname(self._handle, \
                masterxtalname)
        
        @property
        def masterenergyfile(self):
            """
            Element masterenergyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1760
            
            """
            return \
                _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__masterenergyfile(self._handle)
        
        @masterenergyfile.setter
        def masterenergyfile(self, masterenergyfile):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__masterenergyfile(self._handle, \
                masterenergyfile)
        
        @property
        def mcprogname(self):
            """
            Element mcprogname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1761
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__mcprogname(self._handle)
        
        @mcprogname.setter
        def mcprogname(self, mcprogname):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__mcprogname(self._handle, \
                mcprogname)
        
        @property
        def mcxtalname(self):
            """
            Element mcxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1762
            
            """
            return _pyEMsoft.f90wrap_ecpsinglenamelisttype__get__mcxtalname(self._handle)
        
        @mcxtalname.setter
        def mcxtalname(self, mcxtalname):
            _pyEMsoft.f90wrap_ecpsinglenamelisttype__set__mcxtalname(self._handle, \
                mcxtalname)
        
        def __str__(self):
            ret = ['<ecpsinglenamelisttype>{\n']
            ret.append('    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    thetac : ')
            ret.append(repr(self.thetac))
            ret.append(',\n    maskpattern : ')
            ret.append(repr(self.maskpattern))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    eulerconvention : ')
            ret.append(repr(self.eulerconvention))
            ret.append(',\n    gammavalue : ')
            ret.append(repr(self.gammavalue))
            ret.append(',\n    sampletilt : ')
            ret.append(repr(self.sampletilt))
            ret.append(',\n    workingdistance : ')
            ret.append(repr(self.workingdistance))
            ret.append(',\n    rin : ')
            ret.append(repr(self.rin))
            ret.append(',\n    rout : ')
            ret.append(repr(self.rout))
            ret.append(',\n    phi1 : ')
            ret.append(repr(self.phi1))
            ret.append(',\n    phi : ')
            ret.append(repr(self.phi))
            ret.append(',\n    phi2 : ')
            ret.append(repr(self.phi2))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    numangle : ')
            ret.append(repr(self.numangle))
            ret.append(',\n    numangle_anglefile : ')
            ret.append(repr(self.numangle_anglefile))
            ret.append(',\n    numebins : ')
            ret.append(repr(self.numebins))
            ret.append(',\n    numzbins : ')
            ret.append(repr(self.numzbins))
            ret.append(',\n    nsx : ')
            ret.append(repr(self.nsx))
            ret.append(',\n    nsy : ')
            ret.append(repr(self.nsy))
            ret.append(',\n    num_el : ')
            ret.append(repr(self.num_el))
            ret.append(',\n    mcnthreads : ')
            ret.append(repr(self.mcnthreads))
            ret.append(',\n    npx : ')
            ret.append(repr(self.npx))
            ret.append(',\n    npy : ')
            ret.append(repr(self.npy))
            ret.append(',\n    ne : ')
            ret.append(repr(self.ne))
            ret.append(',\n    numset : ')
            ret.append(repr(self.numset))
            ret.append(',\n    npolar : ')
            ret.append(repr(self.npolar))
            ret.append(',\n    nazimuth : ')
            ret.append(repr(self.nazimuth))
            ret.append(',\n    ekev : ')
            ret.append(repr(self.ekev))
            ret.append(',\n    ehistmin : ')
            ret.append(repr(self.ehistmin))
            ret.append(',\n    ebinsize : ')
            ret.append(repr(self.ebinsize))
            ret.append(',\n    depthmax : ')
            ret.append(repr(self.depthmax))
            ret.append(',\n    depthstep : ')
            ret.append(repr(self.depthstep))
            ret.append(',\n    mcsigstart : ')
            ret.append(repr(self.mcsigstart))
            ret.append(',\n    mcsigend : ')
            ret.append(repr(self.mcsigend))
            ret.append(',\n    mcsigstep : ')
            ret.append(repr(self.mcsigstep))
            ret.append(',\n    mcomega : ')
            ret.append(repr(self.mcomega))
            ret.append(',\n    mcmode : ')
            ret.append(repr(self.mcmode))
            ret.append(',\n    anglemode : ')
            ret.append(repr(self.anglemode))
            ret.append(',\n    sqorhe : ')
            ret.append(repr(self.sqorhe))
            ret.append(',\n    mcscversion : ')
            ret.append(repr(self.mcscversion))
            ret.append(',\n    masterscversion : ')
            ret.append(repr(self.masterscversion))
            ret.append(',\n    masterprogname : ')
            ret.append(repr(self.masterprogname))
            ret.append(',\n    masterxtalname : ')
            ret.append(repr(self.masterxtalname))
            ret.append(',\n    masterenergyfile : ')
            ret.append(repr(self.masterenergyfile))
            ret.append(',\n    mcprogname : ')
            ret.append(repr(self.mcprogname))
            ret.append(',\n    mcxtalname : ')
            ret.append(repr(self.mcxtalname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.STEMDCINameListType")
    class STEMDCINameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=stemdcinamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1765-1784
        
        """
        def __init__(self, handle=None):
            """
            self = Stemdcinamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1765-1784
            
            
            Returns
            -------
            this : Stemdcinamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for stemdcinamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_stemdcinamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Stemdcinamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1765-1784
            
            Parameters
            ----------
            this : Stemdcinamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for stemdcinamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_stemdcinamelisttype_finalise(this=self._handle)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1766
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def kk(self):
            """
            Element kk ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1767
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stemdcinamelisttype__array__kk(self._handle)
            if array_handle in self._arrays:
                kk = self._arrays[array_handle]
            else:
                kk = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stemdcinamelisttype__array__kk)
                self._arrays[array_handle] = kk
            return kk
        
        @kk.setter
        def kk(self, kk):
            self.kk[...] = kk
        
        @property
        def output(self):
            """
            Element output ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1768
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__output(self._handle)
        
        @output.setter
        def output(self, output):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__output(self._handle, output)
        
        @property
        def dinfo(self):
            """
            Element dinfo ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1769
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__dinfo(self._handle)
        
        @dinfo.setter
        def dinfo(self, dinfo):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__dinfo(self._handle, dinfo)
        
        @property
        def t_interval(self):
            """
            Element t_interval ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1770
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__t_interval(self._handle)
        
        @t_interval.setter
        def t_interval(self, t_interval):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__t_interval(self._handle, t_interval)
        
        @property
        def df_npix(self):
            """
            Element df_npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1771
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__df_npix(self._handle)
        
        @df_npix.setter
        def df_npix(self, df_npix):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__df_npix(self._handle, df_npix)
        
        @property
        def df_npiy(self):
            """
            Element df_npiy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1772
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__df_npiy(self._handle)
        
        @df_npiy.setter
        def df_npiy(self, df_npiy):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__df_npiy(self._handle, df_npiy)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1773
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def lauec(self):
            """
            Element lauec ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1774
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stemdcinamelisttype__array__lauec(self._handle)
            if array_handle in self._arrays:
                lauec = self._arrays[array_handle]
            else:
                lauec = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stemdcinamelisttype__array__lauec)
                self._arrays[array_handle] = lauec
            return lauec
        
        @lauec.setter
        def lauec(self, lauec):
            self.lauec[...] = lauec
        
        @property
        def df_l(self):
            """
            Element df_l ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1775
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__df_l(self._handle)
        
        @df_l.setter
        def df_l(self, df_l):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__df_l(self._handle, df_l)
        
        @property
        def df_slice(self):
            """
            Element df_slice ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1776
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__df_slice(self._handle)
        
        @df_slice.setter
        def df_slice(self, df_slice):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__df_slice(self._handle, df_slice)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1777
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def progmode(self):
            """
            Element progmode ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1778
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__progmode(self._handle)
        
        @progmode.setter
        def progmode(self, progmode):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__progmode(self._handle, progmode)
        
        @property
        def dispmode(self):
            """
            Element dispmode ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1779
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__dispmode(self._handle)
        
        @dispmode.setter
        def dispmode(self, dispmode):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__dispmode(self._handle, dispmode)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1780
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def stemnmlfile(self):
            """
            Element stemnmlfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1781
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__stemnmlfile(self._handle)
        
        @stemnmlfile.setter
        def stemnmlfile(self, stemnmlfile):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__stemnmlfile(self._handle, \
                stemnmlfile)
        
        @property
        def dataname(self):
            """
            Element dataname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1782
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__dataname(self._handle)
        
        @dataname.setter
        def dataname(self, dataname):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__dataname(self._handle, dataname)
        
        @property
        def defectfilename(self):
            """
            Element defectfilename ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1783
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__defectfilename(self._handle)
        
        @defectfilename.setter
        def defectfilename(self, defectfilename):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__defectfilename(self._handle, \
                defectfilename)
        
        @property
        def dispfile(self):
            """
            Element dispfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1784
            
            """
            return _pyEMsoft.f90wrap_stemdcinamelisttype__get__dispfile(self._handle)
        
        @dispfile.setter
        def dispfile(self, dispfile):
            _pyEMsoft.f90wrap_stemdcinamelisttype__set__dispfile(self._handle, dispfile)
        
        def __str__(self):
            ret = ['<stemdcinamelisttype>{\n']
            ret.append('    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    kk : ')
            ret.append(repr(self.kk))
            ret.append(',\n    output : ')
            ret.append(repr(self.output))
            ret.append(',\n    dinfo : ')
            ret.append(repr(self.dinfo))
            ret.append(',\n    t_interval : ')
            ret.append(repr(self.t_interval))
            ret.append(',\n    df_npix : ')
            ret.append(repr(self.df_npix))
            ret.append(',\n    df_npiy : ')
            ret.append(repr(self.df_npiy))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    lauec : ')
            ret.append(repr(self.lauec))
            ret.append(',\n    df_l : ')
            ret.append(repr(self.df_l))
            ret.append(',\n    df_slice : ')
            ret.append(repr(self.df_slice))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    progmode : ')
            ret.append(repr(self.progmode))
            ret.append(',\n    dispmode : ')
            ret.append(repr(self.dispmode))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    stemnmlfile : ')
            ret.append(repr(self.stemnmlfile))
            ret.append(',\n    dataname : ')
            ret.append(repr(self.dataname))
            ret.append(',\n    defectfilename : ')
            ret.append(repr(self.defectfilename))
            ret.append(',\n    dispfile : ')
            ret.append(repr(self.dispfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.STEMGeometryNameListType")
    class STEMGeometryNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=stemgeometrynamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1787-1798
        
        """
        def __init__(self, handle=None):
            """
            self = Stemgeometrynamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1787-1798
            
            
            Returns
            -------
            this : Stemgeometrynamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for stemgeometrynamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_stemgeometrynamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Stemgeometrynamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1787-1798
            
            Parameters
            ----------
            this : Stemgeometrynamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for stemgeometrynamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_stemgeometrynamelisttype_finalise(this=self._handle)
        
        @property
        def numberofsvalues(self):
            """
            Element numberofsvalues ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1788
            
            """
            return \
                _pyEMsoft.f90wrap_stemgeometrynamelisttype__get__numberofsvalues(self._handle)
        
        @numberofsvalues.setter
        def numberofsvalues(self, numberofsvalues):
            _pyEMsoft.f90wrap_stemgeometrynamelisttype__set__numberofsvalues(self._handle, \
                numberofsvalues)
        
        @property
        def numcl(self):
            """
            Element numcl ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1789
            
            """
            return _pyEMsoft.f90wrap_stemgeometrynamelisttype__get__numcl(self._handle)
        
        @numcl.setter
        def numcl(self, numcl):
            _pyEMsoft.f90wrap_stemgeometrynamelisttype__set__numcl(self._handle, numcl)
        
        @property
        def bfradius(self):
            """
            Element bfradius ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1790
            
            """
            return _pyEMsoft.f90wrap_stemgeometrynamelisttype__get__bfradius(self._handle)
        
        @bfradius.setter
        def bfradius(self, bfradius):
            _pyEMsoft.f90wrap_stemgeometrynamelisttype__set__bfradius(self._handle, \
                bfradius)
        
        @property
        def adfinnerradius(self):
            """
            Element adfinnerradius ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1791
            
            """
            return \
                _pyEMsoft.f90wrap_stemgeometrynamelisttype__get__adfinnerradius(self._handle)
        
        @adfinnerradius.setter
        def adfinnerradius(self, adfinnerradius):
            _pyEMsoft.f90wrap_stemgeometrynamelisttype__set__adfinnerradius(self._handle, \
                adfinnerradius)
        
        @property
        def adfouterradius(self):
            """
            Element adfouterradius ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1792
            
            """
            return \
                _pyEMsoft.f90wrap_stemgeometrynamelisttype__get__adfouterradius(self._handle)
        
        @adfouterradius.setter
        def adfouterradius(self, adfouterradius):
            _pyEMsoft.f90wrap_stemgeometrynamelisttype__set__adfouterradius(self._handle, \
                adfouterradius)
        
        @property
        def kt(self):
            """
            Element kt ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1793
            
            """
            return _pyEMsoft.f90wrap_stemgeometrynamelisttype__get__kt(self._handle)
        
        @kt.setter
        def kt(self, kt):
            _pyEMsoft.f90wrap_stemgeometrynamelisttype__set__kt(self._handle, kt)
        
        @property
        def beamconvergence(self):
            """
            Element beamconvergence ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1794
            
            """
            return \
                _pyEMsoft.f90wrap_stemgeometrynamelisttype__get__beamconvergence(self._handle)
        
        @beamconvergence.setter
        def beamconvergence(self, beamconvergence):
            _pyEMsoft.f90wrap_stemgeometrynamelisttype__set__beamconvergence(self._handle, \
                beamconvergence)
        
        @property
        def diffaprad(self):
            """
            Element diffaprad ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1795
            
            """
            return _pyEMsoft.f90wrap_stemgeometrynamelisttype__get__diffaprad(self._handle)
        
        @diffaprad.setter
        def diffaprad(self, diffaprad):
            _pyEMsoft.f90wrap_stemgeometrynamelisttype__set__diffaprad(self._handle, \
                diffaprad)
        
        @property
        def diffapcenter(self):
            """
            Element diffapcenter ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1796
            
            """
            return \
                _pyEMsoft.f90wrap_stemgeometrynamelisttype__get__diffapcenter(self._handle)
        
        @diffapcenter.setter
        def diffapcenter(self, diffapcenter):
            _pyEMsoft.f90wrap_stemgeometrynamelisttype__set__diffapcenter(self._handle, \
                diffapcenter)
        
        @property
        def clarray(self):
            """
            Element clarray ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1797
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_stemgeometrynamelisttype__array__clarray(self._handle)
            if array_handle in self._arrays:
                clarray = self._arrays[array_handle]
            else:
                clarray = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_stemgeometrynamelisttype__array__clarray)
                self._arrays[array_handle] = clarray
            return clarray
        
        @clarray.setter
        def clarray(self, clarray):
            self.clarray[...] = clarray
        
        @property
        def geometry(self):
            """
            Element geometry ftype=character(2) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1798
            
            """
            return _pyEMsoft.f90wrap_stemgeometrynamelisttype__get__geometry(self._handle)
        
        @geometry.setter
        def geometry(self, geometry):
            _pyEMsoft.f90wrap_stemgeometrynamelisttype__set__geometry(self._handle, \
                geometry)
        
        def __str__(self):
            ret = ['<stemgeometrynamelisttype>{\n']
            ret.append('    numberofsvalues : ')
            ret.append(repr(self.numberofsvalues))
            ret.append(',\n    numcl : ')
            ret.append(repr(self.numcl))
            ret.append(',\n    bfradius : ')
            ret.append(repr(self.bfradius))
            ret.append(',\n    adfinnerradius : ')
            ret.append(repr(self.adfinnerradius))
            ret.append(',\n    adfouterradius : ')
            ret.append(repr(self.adfouterradius))
            ret.append(',\n    kt : ')
            ret.append(repr(self.kt))
            ret.append(',\n    beamconvergence : ')
            ret.append(repr(self.beamconvergence))
            ret.append(',\n    diffaprad : ')
            ret.append(repr(self.diffaprad))
            ret.append(',\n    diffapcenter : ')
            ret.append(repr(self.diffapcenter))
            ret.append(',\n    clarray : ')
            ret.append(repr(self.clarray))
            ret.append(',\n    geometry : ')
            ret.append(repr(self.geometry))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.SRdefectNameListType")
    class SRdefectNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=srdefectnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1801-1831
        
        """
        def __init__(self, handle=None):
            """
            self = Srdefectnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1801-1831
            
            
            Returns
            -------
            this : Srdefectnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for srdefectnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_srdefectnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Srdefectnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1801-1831
            
            Parameters
            ----------
            this : Srdefectnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for srdefectnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_srdefectnamelisttype_finalise(this=self._handle)
        
        @property
        def df_npix(self):
            """
            Element df_npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1802
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__df_npix(self._handle)
        
        @df_npix.setter
        def df_npix(self, df_npix):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__df_npix(self._handle, df_npix)
        
        @property
        def df_npiy(self):
            """
            Element df_npiy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1803
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__df_npiy(self._handle)
        
        @df_npiy.setter
        def df_npiy(self, df_npiy):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__df_npiy(self._handle, df_npiy)
        
        @property
        def dinfo(self):
            """
            Element dinfo ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1804
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__dinfo(self._handle)
        
        @dinfo.setter
        def dinfo(self, dinfo):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__dinfo(self._handle, dinfo)
        
        @property
        def output(self):
            """
            Element output ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1805
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__output(self._handle)
        
        @output.setter
        def output(self, output):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__output(self._handle, output)
        
        @property
        def t_interval(self):
            """
            Element t_interval ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1806
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__t_interval(self._handle)
        
        @t_interval.setter
        def t_interval(self, t_interval):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__t_interval(self._handle, \
                t_interval)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1807
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def srg(self):
            """
            Element srg ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1808
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_srdefectnamelisttype__array__srg(self._handle)
            if array_handle in self._arrays:
                srg = self._arrays[array_handle]
            else:
                srg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_srdefectnamelisttype__array__srg)
                self._arrays[array_handle] = srg
            return srg
        
        @srg.setter
        def srg(self, srg):
            self.srg[...] = srg
        
        @property
        def grange(self):
            """
            Element grange ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1809
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__grange(self._handle)
        
        @grange.setter
        def grange(self, grange):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__grange(self._handle, grange)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1810
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def glaue(self):
            """
            Element glaue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1811
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__glaue(self._handle)
        
        @glaue.setter
        def glaue(self, glaue):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__glaue(self._handle, glaue)
        
        @property
        def df_l(self):
            """
            Element df_l ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1812
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__df_l(self._handle)
        
        @df_l.setter
        def df_l(self, df_l):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__df_l(self._handle, df_l)
        
        @property
        def df_slice(self):
            """
            Element df_slice ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1813
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__df_slice(self._handle)
        
        @df_slice.setter
        def df_slice(self, df_slice):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__df_slice(self._handle, df_slice)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1814
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def progmode(self):
            """
            Element progmode ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1815
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__progmode(self._handle)
        
        @progmode.setter
        def progmode(self, progmode):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__progmode(self._handle, progmode)
        
        @property
        def outputformat(self):
            """
            Element outputformat ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1816
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__outputformat(self._handle)
        
        @outputformat.setter
        def outputformat(self, outputformat):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__outputformat(self._handle, \
                outputformat)
        
        @property
        def dispmode(self):
            """
            Element dispmode ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1817
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__dispmode(self._handle)
        
        @dispmode.setter
        def dispmode(self, dispmode):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__dispmode(self._handle, dispmode)
        
        @property
        def dataname(self):
            """
            Element dataname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1818
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__dataname(self._handle)
        
        @dataname.setter
        def dataname(self, dataname):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__dataname(self._handle, dataname)
        
        @property
        def dispfile(self):
            """
            Element dispfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1819
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__dispfile(self._handle)
        
        @dispfile.setter
        def dispfile(self, dispfile):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__dispfile(self._handle, dispfile)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1820
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def stemnmlfile(self):
            """
            Element stemnmlfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1821
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__stemnmlfile(self._handle)
        
        @stemnmlfile.setter
        def stemnmlfile(self, stemnmlfile):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__stemnmlfile(self._handle, \
                stemnmlfile)
        
        @property
        def defectfilename(self):
            """
            Element defectfilename ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1822
            
            """
            return _pyEMsoft.f90wrap_srdefectnamelisttype__get__defectfilename(self._handle)
        
        @defectfilename.setter
        def defectfilename(self, defectfilename):
            _pyEMsoft.f90wrap_srdefectnamelisttype__set__defectfilename(self._handle, \
                defectfilename)
        
        def __str__(self):
            ret = ['<srdefectnamelisttype>{\n']
            ret.append('    df_npix : ')
            ret.append(repr(self.df_npix))
            ret.append(',\n    df_npiy : ')
            ret.append(repr(self.df_npiy))
            ret.append(',\n    dinfo : ')
            ret.append(repr(self.dinfo))
            ret.append(',\n    output : ')
            ret.append(repr(self.output))
            ret.append(',\n    t_interval : ')
            ret.append(repr(self.t_interval))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    srg : ')
            ret.append(repr(self.srg))
            ret.append(',\n    grange : ')
            ret.append(repr(self.grange))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    glaue : ')
            ret.append(repr(self.glaue))
            ret.append(',\n    df_l : ')
            ret.append(repr(self.df_l))
            ret.append(',\n    df_slice : ')
            ret.append(repr(self.df_slice))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    progmode : ')
            ret.append(repr(self.progmode))
            ret.append(',\n    outputformat : ')
            ret.append(repr(self.outputformat))
            ret.append(',\n    dispmode : ')
            ret.append(repr(self.dispmode))
            ret.append(',\n    dataname : ')
            ret.append(repr(self.dataname))
            ret.append(',\n    dispfile : ')
            ret.append(repr(self.dispfile))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    stemnmlfile : ')
            ret.append(repr(self.stemnmlfile))
            ret.append(',\n    defectfilename : ')
            ret.append(repr(self.defectfilename))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EMgammaNameListType")
    class EMgammaNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=emgammanamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1834-1849
        
        """
        def __init__(self, handle=None):
            """
            self = Emgammanamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1834-1849
            
            
            Returns
            -------
            this : Emgammanamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for emgammanamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_emgammanamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Emgammanamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1834-1849
            
            Parameters
            ----------
            this : Emgammanamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for emgammanamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_emgammanamelisttype_finalise(this=self._handle)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1835
            
            """
            return _pyEMsoft.f90wrap_emgammanamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_emgammanamelisttype__set__npix(self._handle, npix)
        
        @property
        def k(self):
            """
            Element k ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1836
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emgammanamelisttype__array__k(self._handle)
            if array_handle in self._arrays:
                k = self._arrays[array_handle]
            else:
                k = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emgammanamelisttype__array__k)
                self._arrays[array_handle] = k
            return k
        
        @k.setter
        def k(self, k):
            self.k[...] = k
        
        @property
        def fn(self):
            """
            Element fn ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1837
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emgammanamelisttype__array__fn(self._handle)
            if array_handle in self._arrays:
                fn = self._arrays[array_handle]
            else:
                fn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emgammanamelisttype__array__fn)
                self._arrays[array_handle] = fn
            return fn
        
        @fn.setter
        def fn(self, fn):
            self.fn[...] = fn
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1838
            
            """
            return _pyEMsoft.f90wrap_emgammanamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_emgammanamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def klaue(self):
            """
            Element klaue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1839
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emgammanamelisttype__array__klaue(self._handle)
            if array_handle in self._arrays:
                klaue = self._arrays[array_handle]
            else:
                klaue = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emgammanamelisttype__array__klaue)
                self._arrays[array_handle] = klaue
            return klaue
        
        @klaue.setter
        def klaue(self, klaue):
            self.klaue[...] = klaue
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1840
            
            """
            return _pyEMsoft.f90wrap_emgammanamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_emgammanamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def convergence(self):
            """
            Element convergence ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1841
            
            """
            return _pyEMsoft.f90wrap_emgammanamelisttype__get__convergence(self._handle)
        
        @convergence.setter
        def convergence(self, convergence):
            _pyEMsoft.f90wrap_emgammanamelisttype__set__convergence(self._handle, \
                convergence)
        
        @property
        def thick(self):
            """
            Element thick ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1842
            
            """
            return _pyEMsoft.f90wrap_emgammanamelisttype__get__thick(self._handle)
        
        @thick.setter
        def thick(self, thick):
            _pyEMsoft.f90wrap_emgammanamelisttype__set__thick(self._handle, thick)
        
        @property
        def variants(self):
            """
            Element variants ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 1843
            
            """
            return _pyEMsoft.f90wrap_emgammanamelisttype__get__variants(self._handle)
        
        @variants.setter
        def variants(self, variants):
            _pyEMsoft.f90wrap_emgammanamelisttype__set__variants(self._handle, variants)
        
        @property
        def gammaname(self):
            """
            Element gammaname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1844
            
            """
            return _pyEMsoft.f90wrap_emgammanamelisttype__get__gammaname(self._handle)
        
        @gammaname.setter
        def gammaname(self, gammaname):
            _pyEMsoft.f90wrap_emgammanamelisttype__set__gammaname(self._handle, gammaname)
        
        @property
        def gammapname(self):
            """
            Element gammapname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1845
            
            """
            return _pyEMsoft.f90wrap_emgammanamelisttype__get__gammapname(self._handle)
        
        @gammapname.setter
        def gammapname(self, gammapname):
            _pyEMsoft.f90wrap_emgammanamelisttype__set__gammapname(self._handle, gammapname)
        
        @property
        def microfile(self):
            """
            Element microfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1846
            
            """
            return _pyEMsoft.f90wrap_emgammanamelisttype__get__microfile(self._handle)
        
        @microfile.setter
        def microfile(self, microfile):
            _pyEMsoft.f90wrap_emgammanamelisttype__set__microfile(self._handle, microfile)
        
        @property
        def variantfile(self):
            """
            Element variantfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1847
            
            """
            return _pyEMsoft.f90wrap_emgammanamelisttype__get__variantfile(self._handle)
        
        @variantfile.setter
        def variantfile(self, variantfile):
            _pyEMsoft.f90wrap_emgammanamelisttype__set__variantfile(self._handle, \
                variantfile)
        
        @property
        def defectfile(self):
            """
            Element defectfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1848
            
            """
            return _pyEMsoft.f90wrap_emgammanamelisttype__get__defectfile(self._handle)
        
        @defectfile.setter
        def defectfile(self, defectfile):
            _pyEMsoft.f90wrap_emgammanamelisttype__set__defectfile(self._handle, defectfile)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1849
            
            """
            return _pyEMsoft.f90wrap_emgammanamelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_emgammanamelisttype__set__outname(self._handle, outname)
        
        def __str__(self):
            ret = ['<emgammanamelisttype>{\n']
            ret.append('    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    k : ')
            ret.append(repr(self.k))
            ret.append(',\n    fn : ')
            ret.append(repr(self.fn))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    klaue : ')
            ret.append(repr(self.klaue))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    convergence : ')
            ret.append(repr(self.convergence))
            ret.append(',\n    thick : ')
            ret.append(repr(self.thick))
            ret.append(',\n    variants : ')
            ret.append(repr(self.variants))
            ret.append(',\n    gammaname : ')
            ret.append(repr(self.gammaname))
            ret.append(',\n    gammapname : ')
            ret.append(repr(self.gammapname))
            ret.append(',\n    microfile : ')
            ret.append(repr(self.microfile))
            ret.append(',\n    variantfile : ')
            ret.append(repr(self.variantfile))
            ret.append(',\n    defectfile : ')
            ret.append(repr(self.defectfile))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.RefineOrientationtype")
    class RefineOrientationtype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=refineorientationtype)
        
        
        Defined at NameListTypedefs.f90 lines 1851-1867
        
        """
        def __init__(self, handle=None):
            """
            self = Refineorientationtype()
            
            
            Defined at NameListTypedefs.f90 lines 1851-1867
            
            
            Returns
            -------
            this : Refineorientationtype
            	Object to be constructed
            
            
            Automatically generated constructor for refineorientationtype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_refineorientationtype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Refineorientationtype
            
            
            Defined at NameListTypedefs.f90 lines 1851-1867
            
            Parameters
            ----------
            this : Refineorientationtype
            	Object to be destructed
            
            
            Automatically generated destructor for refineorientationtype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_refineorientationtype_finalise(this=self._handle)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1852
            
            """
            return _pyEMsoft.f90wrap_refineorientationtype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_refineorientationtype__set__nthreads(self._handle, nthreads)
        
        @property
        def matchdepth(self):
            """
            Element matchdepth ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1853
            
            """
            return _pyEMsoft.f90wrap_refineorientationtype__get__matchdepth(self._handle)
        
        @matchdepth.setter
        def matchdepth(self, matchdepth):
            _pyEMsoft.f90wrap_refineorientationtype__set__matchdepth(self._handle, \
                matchdepth)
        
        @property
        def dotproductfile(self):
            """
            Element dotproductfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1854
            
            """
            return \
                _pyEMsoft.f90wrap_refineorientationtype__get__dotproductfile(self._handle)
        
        @dotproductfile.setter
        def dotproductfile(self, dotproductfile):
            _pyEMsoft.f90wrap_refineorientationtype__set__dotproductfile(self._handle, \
                dotproductfile)
        
        @property
        def ctffile(self):
            """
            Element ctffile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1855
            
            """
            return _pyEMsoft.f90wrap_refineorientationtype__get__ctffile(self._handle)
        
        @ctffile.setter
        def ctffile(self, ctffile):
            _pyEMsoft.f90wrap_refineorientationtype__set__ctffile(self._handle, ctffile)
        
        @property
        def tmpfile(self):
            """
            Element tmpfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1856
            
            """
            return _pyEMsoft.f90wrap_refineorientationtype__get__tmpfile(self._handle)
        
        @tmpfile.setter
        def tmpfile(self, tmpfile):
            _pyEMsoft.f90wrap_refineorientationtype__set__tmpfile(self._handle, tmpfile)
        
        @property
        def psvariantfile(self):
            """
            Element psvariantfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1857
            
            """
            return _pyEMsoft.f90wrap_refineorientationtype__get__psvariantfile(self._handle)
        
        @psvariantfile.setter
        def psvariantfile(self, psvariantfile):
            _pyEMsoft.f90wrap_refineorientationtype__set__psvariantfile(self._handle, \
                psvariantfile)
        
        @property
        def method(self):
            """
            Element method ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1858
            
            """
            return _pyEMsoft.f90wrap_refineorientationtype__get__method(self._handle)
        
        @method.setter
        def method(self, method):
            _pyEMsoft.f90wrap_refineorientationtype__set__method(self._handle, method)
        
        @property
        def modality(self):
            """
            Element modality ftype=character(4) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1859
            
            """
            return _pyEMsoft.f90wrap_refineorientationtype__get__modality(self._handle)
        
        @modality.setter
        def modality(self, modality):
            _pyEMsoft.f90wrap_refineorientationtype__set__modality(self._handle, modality)
        
        @property
        def inram(self):
            """
            Element inram ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 1860
            
            """
            return _pyEMsoft.f90wrap_refineorientationtype__get__inram(self._handle)
        
        @inram.setter
        def inram(self, inram):
            _pyEMsoft.f90wrap_refineorientationtype__set__inram(self._handle, inram)
        
        @property
        def step(self):
            """
            Element step ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1861
            
            """
            return _pyEMsoft.f90wrap_refineorientationtype__get__step(self._handle)
        
        @step.setter
        def step(self, step):
            _pyEMsoft.f90wrap_refineorientationtype__set__step(self._handle, step)
        
        @property
        def nmis(self):
            """
            Element nmis ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1862
            
            """
            return _pyEMsoft.f90wrap_refineorientationtype__get__nmis(self._handle)
        
        @nmis.setter
        def nmis(self, nmis):
            _pyEMsoft.f90wrap_refineorientationtype__set__nmis(self._handle, nmis)
        
        @property
        def niter(self):
            """
            Element niter ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1863
            
            """
            return _pyEMsoft.f90wrap_refineorientationtype__get__niter(self._handle)
        
        @niter.setter
        def niter(self, niter):
            _pyEMsoft.f90wrap_refineorientationtype__set__niter(self._handle, niter)
        
        @property
        def initialx(self):
            """
            Element initialx ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1864
            
            """
            return _pyEMsoft.f90wrap_refineorientationtype__get__initialx(self._handle)
        
        @initialx.setter
        def initialx(self, initialx):
            _pyEMsoft.f90wrap_refineorientationtype__set__initialx(self._handle, initialx)
        
        @property
        def initialy(self):
            """
            Element initialy ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1865
            
            """
            return _pyEMsoft.f90wrap_refineorientationtype__get__initialy(self._handle)
        
        @initialy.setter
        def initialy(self, initialy):
            _pyEMsoft.f90wrap_refineorientationtype__set__initialy(self._handle, initialy)
        
        @property
        def pccorrection(self):
            """
            Element pccorrection ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1866
            
            """
            return _pyEMsoft.f90wrap_refineorientationtype__get__pccorrection(self._handle)
        
        @pccorrection.setter
        def pccorrection(self, pccorrection):
            _pyEMsoft.f90wrap_refineorientationtype__set__pccorrection(self._handle, \
                pccorrection)
        
        @property
        def truedelta(self):
            """
            Element truedelta ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1867
            
            """
            return _pyEMsoft.f90wrap_refineorientationtype__get__truedelta(self._handle)
        
        @truedelta.setter
        def truedelta(self, truedelta):
            _pyEMsoft.f90wrap_refineorientationtype__set__truedelta(self._handle, truedelta)
        
        def __str__(self):
            ret = ['<refineorientationtype>{\n']
            ret.append('    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    matchdepth : ')
            ret.append(repr(self.matchdepth))
            ret.append(',\n    dotproductfile : ')
            ret.append(repr(self.dotproductfile))
            ret.append(',\n    ctffile : ')
            ret.append(repr(self.ctffile))
            ret.append(',\n    tmpfile : ')
            ret.append(repr(self.tmpfile))
            ret.append(',\n    psvariantfile : ')
            ret.append(repr(self.psvariantfile))
            ret.append(',\n    method : ')
            ret.append(repr(self.method))
            ret.append(',\n    modality : ')
            ret.append(repr(self.modality))
            ret.append(',\n    inram : ')
            ret.append(repr(self.inram))
            ret.append(',\n    step : ')
            ret.append(repr(self.step))
            ret.append(',\n    nmis : ')
            ret.append(repr(self.nmis))
            ret.append(',\n    niter : ')
            ret.append(repr(self.niter))
            ret.append(',\n    initialx : ')
            ret.append(repr(self.initialx))
            ret.append(',\n    initialy : ')
            ret.append(repr(self.initialy))
            ret.append(',\n    pccorrection : ')
            ret.append(repr(self.pccorrection))
            ret.append(',\n    truedelta : ')
            ret.append(repr(self.truedelta))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.FitOrientationPStype")
    class FitOrientationPStype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=fitorientationpstype)
        
        
        Defined at NameListTypedefs.f90 lines 1869-1876
        
        """
        def __init__(self, handle=None):
            """
            self = Fitorientationpstype()
            
            
            Defined at NameListTypedefs.f90 lines 1869-1876
            
            
            Returns
            -------
            this : Fitorientationpstype
            	Object to be constructed
            
            
            Automatically generated constructor for fitorientationpstype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_fitorientationpstype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Fitorientationpstype
            
            
            Defined at NameListTypedefs.f90 lines 1869-1876
            
            Parameters
            ----------
            this : Fitorientationpstype
            	Object to be destructed
            
            
            Automatically generated destructor for fitorientationpstype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_fitorientationpstype_finalise(this=self._handle)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1870
            
            """
            return _pyEMsoft.f90wrap_fitorientationpstype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_fitorientationpstype__set__nthreads(self._handle, nthreads)
        
        @property
        def matchdepth(self):
            """
            Element matchdepth ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1871
            
            """
            return _pyEMsoft.f90wrap_fitorientationpstype__get__matchdepth(self._handle)
        
        @matchdepth.setter
        def matchdepth(self, matchdepth):
            _pyEMsoft.f90wrap_fitorientationpstype__set__matchdepth(self._handle, \
                matchdepth)
        
        @property
        def dotproductfile(self):
            """
            Element dotproductfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1872
            
            """
            return _pyEMsoft.f90wrap_fitorientationpstype__get__dotproductfile(self._handle)
        
        @dotproductfile.setter
        def dotproductfile(self, dotproductfile):
            _pyEMsoft.f90wrap_fitorientationpstype__set__dotproductfile(self._handle, \
                dotproductfile)
        
        @property
        def ctffile(self):
            """
            Element ctffile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1873
            
            """
            return _pyEMsoft.f90wrap_fitorientationpstype__get__ctffile(self._handle)
        
        @ctffile.setter
        def ctffile(self, ctffile):
            _pyEMsoft.f90wrap_fitorientationpstype__set__ctffile(self._handle, ctffile)
        
        @property
        def step(self):
            """
            Element step ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1874
            
            """
            return _pyEMsoft.f90wrap_fitorientationpstype__get__step(self._handle)
        
        @step.setter
        def step(self, step):
            _pyEMsoft.f90wrap_fitorientationpstype__set__step(self._handle, step)
        
        @property
        def psvariantfile(self):
            """
            Element psvariantfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1875
            
            """
            return _pyEMsoft.f90wrap_fitorientationpstype__get__psvariantfile(self._handle)
        
        @psvariantfile.setter
        def psvariantfile(self, psvariantfile):
            _pyEMsoft.f90wrap_fitorientationpstype__set__psvariantfile(self._handle, \
                psvariantfile)
        
        @property
        def modality(self):
            """
            Element modality ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1876
            
            """
            return _pyEMsoft.f90wrap_fitorientationpstype__get__modality(self._handle)
        
        @modality.setter
        def modality(self, modality):
            _pyEMsoft.f90wrap_fitorientationpstype__set__modality(self._handle, modality)
        
        def __str__(self):
            ret = ['<fitorientationpstype>{\n']
            ret.append('    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    matchdepth : ')
            ret.append(repr(self.matchdepth))
            ret.append(',\n    dotproductfile : ')
            ret.append(repr(self.dotproductfile))
            ret.append(',\n    ctffile : ')
            ret.append(repr(self.ctffile))
            ret.append(',\n    step : ')
            ret.append(repr(self.step))
            ret.append(',\n    psvariantfile : ')
            ret.append(repr(self.psvariantfile))
            ret.append(',\n    modality : ')
            ret.append(repr(self.modality))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.RefineMartensitetype")
    class RefineMartensitetype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=refinemartensitetype)
        
        
        Defined at NameListTypedefs.f90 lines 1878-1886
        
        """
        def __init__(self, handle=None):
            """
            self = Refinemartensitetype()
            
            
            Defined at NameListTypedefs.f90 lines 1878-1886
            
            
            Returns
            -------
            this : Refinemartensitetype
            	Object to be constructed
            
            
            Automatically generated constructor for refinemartensitetype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_refinemartensitetype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Refinemartensitetype
            
            
            Defined at NameListTypedefs.f90 lines 1878-1886
            
            Parameters
            ----------
            this : Refinemartensitetype
            	Object to be destructed
            
            
            Automatically generated destructor for refinemartensitetype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_refinemartensitetype_finalise(this=self._handle)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1879
            
            """
            return _pyEMsoft.f90wrap_refinemartensitetype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_refinemartensitetype__set__nthreads(self._handle, nthreads)
        
        @property
        def nummartensite(self):
            """
            Element nummartensite ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1880
            
            """
            return _pyEMsoft.f90wrap_refinemartensitetype__get__nummartensite(self._handle)
        
        @nummartensite.setter
        def nummartensite(self, nummartensite):
            _pyEMsoft.f90wrap_refinemartensitetype__set__nummartensite(self._handle, \
                nummartensite)
        
        @property
        def step(self):
            """
            Element step ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1881
            
            """
            return _pyEMsoft.f90wrap_refinemartensitetype__get__step(self._handle)
        
        @step.setter
        def step(self, step):
            _pyEMsoft.f90wrap_refinemartensitetype__set__step(self._handle, step)
        
        @property
        def martensitempprefix(self):
            """
            Element martensitempprefix ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1882
            
            """
            return \
                _pyEMsoft.f90wrap_refinemartensitetype__get__martensitempprefix(self._handle)
        
        @martensitempprefix.setter
        def martensitempprefix(self, martensitempprefix):
            _pyEMsoft.f90wrap_refinemartensitetype__set__martensitempprefix(self._handle, \
                martensitempprefix)
        
        @property
        def martensitemppostfix(self):
            """
            Element martensitemppostfix ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1883
            
            """
            return \
                _pyEMsoft.f90wrap_refinemartensitetype__get__martensitemppostfix(self._handle)
        
        @martensitemppostfix.setter
        def martensitemppostfix(self, martensitemppostfix):
            _pyEMsoft.f90wrap_refinemartensitetype__set__martensitemppostfix(self._handle, \
                martensitemppostfix)
        
        @property
        def ferritedotproductfile(self):
            """
            Element ferritedotproductfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1884
            
            """
            return \
                _pyEMsoft.f90wrap_refinemartensitetype__get__ferritedotproductfile(self._handle)
        
        @ferritedotproductfile.setter
        def ferritedotproductfile(self, ferritedotproductfile):
            \
                _pyEMsoft.f90wrap_refinemartensitetype__set__ferritedotproductfile(self._handle, \
                ferritedotproductfile)
        
        @property
        def outputfile(self):
            """
            Element outputfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1885
            
            """
            return _pyEMsoft.f90wrap_refinemartensitetype__get__outputfile(self._handle)
        
        @outputfile.setter
        def outputfile(self, outputfile):
            _pyEMsoft.f90wrap_refinemartensitetype__set__outputfile(self._handle, \
                outputfile)
        
        @property
        def tmpfile(self):
            """
            Element tmpfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1886
            
            """
            return _pyEMsoft.f90wrap_refinemartensitetype__get__tmpfile(self._handle)
        
        @tmpfile.setter
        def tmpfile(self, tmpfile):
            _pyEMsoft.f90wrap_refinemartensitetype__set__tmpfile(self._handle, tmpfile)
        
        def __str__(self):
            ret = ['<refinemartensitetype>{\n']
            ret.append('    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    nummartensite : ')
            ret.append(repr(self.nummartensite))
            ret.append(',\n    step : ')
            ret.append(repr(self.step))
            ret.append(',\n    martensitempprefix : ')
            ret.append(repr(self.martensitempprefix))
            ret.append(',\n    martensitemppostfix : ')
            ret.append(repr(self.martensitemppostfix))
            ret.append(',\n    ferritedotproductfile : ')
            ret.append(repr(self.ferritedotproductfile))
            ret.append(',\n    outputfile : ')
            ret.append(repr(self.outputfile))
            ret.append(',\n    tmpfile : ')
            ret.append(repr(self.tmpfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.Fitalphavarianttype")
    class Fitalphavarianttype(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=fitalphavarianttype)
        
        
        Defined at NameListTypedefs.f90 lines 1888-1894
        
        """
        def __init__(self, handle=None):
            """
            self = Fitalphavarianttype()
            
            
            Defined at NameListTypedefs.f90 lines 1888-1894
            
            
            Returns
            -------
            this : Fitalphavarianttype
            	Object to be constructed
            
            
            Automatically generated constructor for fitalphavarianttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_fitalphavarianttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Fitalphavarianttype
            
            
            Defined at NameListTypedefs.f90 lines 1888-1894
            
            Parameters
            ----------
            this : Fitalphavarianttype
            	Object to be destructed
            
            
            Automatically generated destructor for fitalphavarianttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_fitalphavarianttype_finalise(this=self._handle)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1889
            
            """
            return _pyEMsoft.f90wrap_fitalphavarianttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_fitalphavarianttype__set__nthreads(self._handle, nthreads)
        
        @property
        def betadotproductfile(self):
            """
            Element betadotproductfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1890
            
            """
            return \
                _pyEMsoft.f90wrap_fitalphavarianttype__get__betadotproductfile(self._handle)
        
        @betadotproductfile.setter
        def betadotproductfile(self, betadotproductfile):
            _pyEMsoft.f90wrap_fitalphavarianttype__set__betadotproductfile(self._handle, \
                betadotproductfile)
        
        @property
        def alphadotproductfile(self):
            """
            Element alphadotproductfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1891
            
            """
            return \
                _pyEMsoft.f90wrap_fitalphavarianttype__get__alphadotproductfile(self._handle)
        
        @alphadotproductfile.setter
        def alphadotproductfile(self, alphadotproductfile):
            _pyEMsoft.f90wrap_fitalphavarianttype__set__alphadotproductfile(self._handle, \
                alphadotproductfile)
        
        @property
        def outputfile(self):
            """
            Element outputfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1892
            
            """
            return _pyEMsoft.f90wrap_fitalphavarianttype__get__outputfile(self._handle)
        
        @outputfile.setter
        def outputfile(self, outputfile):
            _pyEMsoft.f90wrap_fitalphavarianttype__set__outputfile(self._handle, outputfile)
        
        @property
        def variantquaternionfile(self):
            """
            Element variantquaternionfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1893
            
            """
            return \
                _pyEMsoft.f90wrap_fitalphavarianttype__get__variantquaternionfile(self._handle)
        
        @variantquaternionfile.setter
        def variantquaternionfile(self, variantquaternionfile):
            _pyEMsoft.f90wrap_fitalphavarianttype__set__variantquaternionfile(self._handle, \
                variantquaternionfile)
        
        @property
        def step(self):
            """
            Element step ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1894
            
            """
            return _pyEMsoft.f90wrap_fitalphavarianttype__get__step(self._handle)
        
        @step.setter
        def step(self, step):
            _pyEMsoft.f90wrap_fitalphavarianttype__set__step(self._handle, step)
        
        def __str__(self):
            ret = ['<fitalphavarianttype>{\n']
            ret.append('    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    betadotproductfile : ')
            ret.append(repr(self.betadotproductfile))
            ret.append(',\n    alphadotproductfile : ')
            ret.append(repr(self.alphadotproductfile))
            ret.append(',\n    outputfile : ')
            ret.append(repr(self.outputfile))
            ret.append(',\n    variantquaternionfile : ')
            ret.append(repr(self.variantquaternionfile))
            ret.append(',\n    step : ')
            ret.append(repr(self.step))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.PFInversionNameListType")
    class PFInversionNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=pfinversionnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1896-1905
        
        """
        def __init__(self, handle=None):
            """
            self = Pfinversionnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1896-1905
            
            
            Returns
            -------
            this : Pfinversionnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for pfinversionnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_pfinversionnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Pfinversionnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1896-1905
            
            Parameters
            ----------
            this : Pfinversionnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for pfinversionnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_pfinversionnamelisttype_finalise(this=self._handle)
        
        @property
        def nlam(self):
            """
            Element nlam ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1897
            
            """
            return _pyEMsoft.f90wrap_pfinversionnamelisttype__get__nlam(self._handle)
        
        @nlam.setter
        def nlam(self, nlam):
            _pyEMsoft.f90wrap_pfinversionnamelisttype__set__nlam(self._handle, nlam)
        
        @property
        def ncub(self):
            """
            Element ncub ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1898
            
            """
            return _pyEMsoft.f90wrap_pfinversionnamelisttype__get__ncub(self._handle)
        
        @ncub.setter
        def ncub(self, ncub):
            _pyEMsoft.f90wrap_pfinversionnamelisttype__set__ncub(self._handle, ncub)
        
        @property
        def nnz(self):
            """
            Element nnz ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1899
            
            """
            return _pyEMsoft.f90wrap_pfinversionnamelisttype__get__nnz(self._handle)
        
        @nnz.setter
        def nnz(self, nnz):
            _pyEMsoft.f90wrap_pfinversionnamelisttype__set__nnz(self._handle, nnz)
        
        @property
        def nfiles(self):
            """
            Element nfiles ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1900
            
            """
            return _pyEMsoft.f90wrap_pfinversionnamelisttype__get__nfiles(self._handle)
        
        @nfiles.setter
        def nfiles(self, nfiles):
            _pyEMsoft.f90wrap_pfinversionnamelisttype__set__nfiles(self._handle, nfiles)
        
        @property
        def damp(self):
            """
            Element damp ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1901
            
            """
            return _pyEMsoft.f90wrap_pfinversionnamelisttype__get__damp(self._handle)
        
        @damp.setter
        def damp(self, damp):
            _pyEMsoft.f90wrap_pfinversionnamelisttype__set__damp(self._handle, damp)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1902
            
            """
            return _pyEMsoft.f90wrap_pfinversionnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_pfinversionnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def flist(self):
            """
            Element flist ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1903
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_pfinversionnamelisttype__array__flist(self._handle)
            if array_handle in self._arrays:
                flist = self._arrays[array_handle]
            else:
                flist = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_pfinversionnamelisttype__array__flist)
                self._arrays[array_handle] = flist
            return flist
        
        @flist.setter
        def flist(self, flist):
            self.flist[...] = flist
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1904
            
            """
            return _pyEMsoft.f90wrap_pfinversionnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_pfinversionnamelisttype__set__datafile(self._handle, datafile)
        
        @property
        def mrcfile(self):
            """
            Element mrcfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1905
            
            """
            return _pyEMsoft.f90wrap_pfinversionnamelisttype__get__mrcfile(self._handle)
        
        @mrcfile.setter
        def mrcfile(self, mrcfile):
            _pyEMsoft.f90wrap_pfinversionnamelisttype__set__mrcfile(self._handle, mrcfile)
        
        def __str__(self):
            ret = ['<pfinversionnamelisttype>{\n']
            ret.append('    nlam : ')
            ret.append(repr(self.nlam))
            ret.append(',\n    ncub : ')
            ret.append(repr(self.ncub))
            ret.append(',\n    nnz : ')
            ret.append(repr(self.nnz))
            ret.append(',\n    nfiles : ')
            ret.append(repr(self.nfiles))
            ret.append(',\n    damp : ')
            ret.append(repr(self.damp))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    flist : ')
            ret.append(repr(self.flist))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    mrcfile : ')
            ret.append(repr(self.mrcfile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EMgammaOpenCLNameListType")
    class EMgammaOpenCLNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=emgammaopenclnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1908-1921
        
        """
        def __init__(self, handle=None):
            """
            self = Emgammaopenclnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1908-1921
            
            
            Returns
            -------
            this : Emgammaopenclnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for emgammaopenclnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_emgammaopenclnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Emgammaopenclnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1908-1921
            
            Parameters
            ----------
            this : Emgammaopenclnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for emgammaopenclnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_emgammaopenclnamelisttype_finalise(this=self._handle)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1909
            
            """
            return _pyEMsoft.f90wrap_emgammaopenclnamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_emgammaopenclnamelisttype__set__npix(self._handle, npix)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1910
            
            """
            return _pyEMsoft.f90wrap_emgammaopenclnamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_emgammaopenclnamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1911
            
            """
            return _pyEMsoft.f90wrap_emgammaopenclnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_emgammaopenclnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def thick(self):
            """
            Element thick ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1912
            
            """
            return _pyEMsoft.f90wrap_emgammaopenclnamelisttype__get__thick(self._handle)
        
        @thick.setter
        def thick(self, thick):
            _pyEMsoft.f90wrap_emgammaopenclnamelisttype__set__thick(self._handle, thick)
        
        @property
        def eu(self):
            """
            Element eu ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1913
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emgammaopenclnamelisttype__array__eu(self._handle)
            if array_handle in self._arrays:
                eu = self._arrays[array_handle]
            else:
                eu = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emgammaopenclnamelisttype__array__eu)
                self._arrays[array_handle] = eu
            return eu
        
        @eu.setter
        def eu(self, eu):
            self.eu[...] = eu
        
        @property
        def platid(self):
            """
            Element platid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1914
            
            """
            return _pyEMsoft.f90wrap_emgammaopenclnamelisttype__get__platid(self._handle)
        
        @platid.setter
        def platid(self, platid):
            _pyEMsoft.f90wrap_emgammaopenclnamelisttype__set__platid(self._handle, platid)
        
        @property
        def devid(self):
            """
            Element devid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1915
            
            """
            return _pyEMsoft.f90wrap_emgammaopenclnamelisttype__get__devid(self._handle)
        
        @devid.setter
        def devid(self, devid):
            _pyEMsoft.f90wrap_emgammaopenclnamelisttype__set__devid(self._handle, devid)
        
        @property
        def gammaname(self):
            """
            Element gammaname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1916
            
            """
            return _pyEMsoft.f90wrap_emgammaopenclnamelisttype__get__gammaname(self._handle)
        
        @gammaname.setter
        def gammaname(self, gammaname):
            _pyEMsoft.f90wrap_emgammaopenclnamelisttype__set__gammaname(self._handle, \
                gammaname)
        
        @property
        def gammapname(self):
            """
            Element gammapname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1917
            
            """
            return \
                _pyEMsoft.f90wrap_emgammaopenclnamelisttype__get__gammapname(self._handle)
        
        @gammapname.setter
        def gammapname(self, gammapname):
            _pyEMsoft.f90wrap_emgammaopenclnamelisttype__set__gammapname(self._handle, \
                gammapname)
        
        @property
        def microfile(self):
            """
            Element microfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1918
            
            """
            return _pyEMsoft.f90wrap_emgammaopenclnamelisttype__get__microfile(self._handle)
        
        @microfile.setter
        def microfile(self, microfile):
            _pyEMsoft.f90wrap_emgammaopenclnamelisttype__set__microfile(self._handle, \
                microfile)
        
        @property
        def variantfile(self):
            """
            Element variantfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1919
            
            """
            return \
                _pyEMsoft.f90wrap_emgammaopenclnamelisttype__get__variantfile(self._handle)
        
        @variantfile.setter
        def variantfile(self, variantfile):
            _pyEMsoft.f90wrap_emgammaopenclnamelisttype__set__variantfile(self._handle, \
                variantfile)
        
        @property
        def defectfile(self):
            """
            Element defectfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1920
            
            """
            return \
                _pyEMsoft.f90wrap_emgammaopenclnamelisttype__get__defectfile(self._handle)
        
        @defectfile.setter
        def defectfile(self, defectfile):
            _pyEMsoft.f90wrap_emgammaopenclnamelisttype__set__defectfile(self._handle, \
                defectfile)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1921
            
            """
            return _pyEMsoft.f90wrap_emgammaopenclnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_emgammaopenclnamelisttype__set__datafile(self._handle, \
                datafile)
        
        def __str__(self):
            ret = ['<emgammaopenclnamelisttype>{\n']
            ret.append('    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    thick : ')
            ret.append(repr(self.thick))
            ret.append(',\n    eu : ')
            ret.append(repr(self.eu))
            ret.append(',\n    platid : ')
            ret.append(repr(self.platid))
            ret.append(',\n    devid : ')
            ret.append(repr(self.devid))
            ret.append(',\n    gammaname : ')
            ret.append(repr(self.gammaname))
            ret.append(',\n    gammapname : ')
            ret.append(repr(self.gammapname))
            ret.append(',\n    microfile : ')
            ret.append(repr(self.microfile))
            ret.append(',\n    variantfile : ')
            ret.append(repr(self.variantfile))
            ret.append(',\n    defectfile : ')
            ret.append(repr(self.defectfile))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EMTwoPhaseNameListType")
    class EMTwoPhaseNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=emtwophasenamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1923-1931
        
        """
        def __init__(self, handle=None):
            """
            self = Emtwophasenamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1923-1931
            
            
            Returns
            -------
            this : Emtwophasenamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for emtwophasenamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_emtwophasenamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Emtwophasenamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1923-1931
            
            Parameters
            ----------
            this : Emtwophasenamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for emtwophasenamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_emtwophasenamelisttype_finalise(this=self._handle)
        
        @property
        def xtalname_f(self):
            """
            Element xtalname_f ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1924
            
            """
            return _pyEMsoft.f90wrap_emtwophasenamelisttype__get__xtalname_f(self._handle)
        
        @xtalname_f.setter
        def xtalname_f(self, xtalname_f):
            _pyEMsoft.f90wrap_emtwophasenamelisttype__set__xtalname_f(self._handle, \
                xtalname_f)
        
        @property
        def xtalname_s(self):
            """
            Element xtalname_s ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1925
            
            """
            return _pyEMsoft.f90wrap_emtwophasenamelisttype__get__xtalname_s(self._handle)
        
        @xtalname_s.setter
        def xtalname_s(self, xtalname_s):
            _pyEMsoft.f90wrap_emtwophasenamelisttype__set__xtalname_s(self._handle, \
                xtalname_s)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1926
            
            """
            return _pyEMsoft.f90wrap_emtwophasenamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_emtwophasenamelisttype__set__datafile(self._handle, datafile)
        
        @property
        def zf(self):
            """
            Element zf ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1927
            
            """
            return _pyEMsoft.f90wrap_emtwophasenamelisttype__get__zf(self._handle)
        
        @zf.setter
        def zf(self, zf):
            _pyEMsoft.f90wrap_emtwophasenamelisttype__set__zf(self._handle, zf)
        
        @property
        def zfoil(self):
            """
            Element zfoil ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1928
            
            """
            return _pyEMsoft.f90wrap_emtwophasenamelisttype__get__zfoil(self._handle)
        
        @zfoil.setter
        def zfoil(self, zfoil):
            _pyEMsoft.f90wrap_emtwophasenamelisttype__set__zfoil(self._handle, zfoil)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1929
            
            """
            return _pyEMsoft.f90wrap_emtwophasenamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_emtwophasenamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1930
            
            """
            return _pyEMsoft.f90wrap_emtwophasenamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_emtwophasenamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1931
            
            """
            return _pyEMsoft.f90wrap_emtwophasenamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_emtwophasenamelisttype__set__npix(self._handle, npix)
        
        def __str__(self):
            ret = ['<emtwophasenamelisttype>{\n']
            ret.append('    xtalname_f : ')
            ret.append(repr(self.xtalname_f))
            ret.append(',\n    xtalname_s : ')
            ret.append(repr(self.xtalname_s))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    zf : ')
            ret.append(repr(self.zf))
            ret.append(',\n    zfoil : ')
            ret.append(repr(self.zfoil))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.MDElectronPropNameListType")
    class MDElectronPropNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=mdelectronpropnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1933-1948
        
        """
        def __init__(self, handle=None):
            """
            self = Mdelectronpropnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1933-1948
            
            
            Returns
            -------
            this : Mdelectronpropnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for mdelectronpropnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_mdelectronpropnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Mdelectronpropnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1933-1948
            
            Parameters
            ----------
            this : Mdelectronpropnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for mdelectronpropnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_mdelectronpropnamelisttype_finalise(this=self._handle)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1934
            
            """
            return _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__nthreads(self._handle, \
                nthreads)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1935
            
            """
            return _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__npix(self._handle, npix)
        
        @property
        def thetac(self):
            """
            Element thetac ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1936
            
            """
            return _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__thetac(self._handle)
        
        @thetac.setter
        def thetac(self, thetac):
            _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__thetac(self._handle, thetac)
        
        @property
        def maskpattern(self):
            """
            Element maskpattern ftype=character(1) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1937
            
            """
            return \
                _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__maskpattern(self._handle)
        
        @maskpattern.setter
        def maskpattern(self, maskpattern):
            _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__maskpattern(self._handle, \
                maskpattern)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1938
            
            """
            return _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__xtalname(self._handle, \
                xtalname)
        
        @property
        def energyfile(self):
            """
            Element energyfile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1939
            
            """
            return \
                _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__energyfile(self._handle)
        
        @energyfile.setter
        def energyfile(self, energyfile):
            _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__energyfile(self._handle, \
                energyfile)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1940
            
            """
            return _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__datafile(self._handle, \
                datafile)
        
        @property
        def eulerconvention(self):
            """
            Element eulerconvention ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1941
            
            """
            return \
                _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__eulerconvention(self._handle)
        
        @eulerconvention.setter
        def eulerconvention(self, eulerconvention):
            \
                _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__eulerconvention(self._handle, \
                eulerconvention)
        
        @property
        def gammavalue(self):
            """
            Element gammavalue ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1942
            
            """
            return \
                _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__gammavalue(self._handle)
        
        @gammavalue.setter
        def gammavalue(self, gammavalue):
            _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__gammavalue(self._handle, \
                gammavalue)
        
        @property
        def sampletilt(self):
            """
            Element sampletilt ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1943
            
            """
            return \
                _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__sampletilt(self._handle)
        
        @sampletilt.setter
        def sampletilt(self, sampletilt):
            _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__sampletilt(self._handle, \
                sampletilt)
        
        @property
        def workingdistance(self):
            """
            Element workingdistance ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1944
            
            """
            return \
                _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__workingdistance(self._handle)
        
        @workingdistance.setter
        def workingdistance(self, workingdistance):
            \
                _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__workingdistance(self._handle, \
                workingdistance)
        
        @property
        def rin(self):
            """
            Element rin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1945
            
            """
            return _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__rin(self._handle)
        
        @rin.setter
        def rin(self, rin):
            _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__rin(self._handle, rin)
        
        @property
        def rout(self):
            """
            Element rout ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1946
            
            """
            return _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__rout(self._handle)
        
        @rout.setter
        def rout(self, rout):
            _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__rout(self._handle, rout)
        
        @property
        def phi1(self):
            """
            Element phi1 ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1947
            
            """
            return _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__phi1(self._handle)
        
        @phi1.setter
        def phi1(self, phi1):
            _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__phi1(self._handle, phi1)
        
        @property
        def phi(self):
            """
            Element phi ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1947
            
            """
            return _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__phi(self._handle)
        
        @phi.setter
        def phi(self, phi):
            _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__phi(self._handle, phi)
        
        @property
        def phi2(self):
            """
            Element phi2 ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1947
            
            """
            return _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__phi2(self._handle)
        
        @phi2.setter
        def phi2(self, phi2):
            _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__phi2(self._handle, phi2)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1948
            
            """
            return _pyEMsoft.f90wrap_mdelectronpropnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_mdelectronpropnamelisttype__set__dmin(self._handle, dmin)
        
        def __str__(self):
            ret = ['<mdelectronpropnamelisttype>{\n']
            ret.append('    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append(',\n    thetac : ')
            ret.append(repr(self.thetac))
            ret.append(',\n    maskpattern : ')
            ret.append(repr(self.maskpattern))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    energyfile : ')
            ret.append(repr(self.energyfile))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    eulerconvention : ')
            ret.append(repr(self.eulerconvention))
            ret.append(',\n    gammavalue : ')
            ret.append(repr(self.gammavalue))
            ret.append(',\n    sampletilt : ')
            ret.append(repr(self.sampletilt))
            ret.append(',\n    workingdistance : ')
            ret.append(repr(self.workingdistance))
            ret.append(',\n    rin : ')
            ret.append(repr(self.rin))
            ret.append(',\n    rout : ')
            ret.append(repr(self.rout))
            ret.append(',\n    phi1 : ')
            ret.append(repr(self.phi1))
            ret.append(',\n    phi : ')
            ret.append(repr(self.phi))
            ret.append(',\n    phi2 : ')
            ret.append(repr(self.phi2))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EMgammaSTEMNameListType")
    class EMgammaSTEMNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=emgammastemnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1951-1961
        
        """
        def __init__(self, handle=None):
            """
            self = Emgammastemnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1951-1961
            
            
            Returns
            -------
            this : Emgammastemnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for emgammastemnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_emgammastemnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Emgammastemnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1951-1961
            
            Parameters
            ----------
            this : Emgammastemnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for emgammastemnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_emgammastemnamelisttype_finalise(this=self._handle)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1952
            
            """
            return _pyEMsoft.f90wrap_emgammastemnamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_emgammastemnamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1953
            
            """
            return _pyEMsoft.f90wrap_emgammastemnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_emgammastemnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def eu(self):
            """
            Element eu ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1954
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emgammastemnamelisttype__array__eu(self._handle)
            if array_handle in self._arrays:
                eu = self._arrays[array_handle]
            else:
                eu = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emgammastemnamelisttype__array__eu)
                self._arrays[array_handle] = eu
            return eu
        
        @eu.setter
        def eu(self, eu):
            self.eu[...] = eu
        
        @property
        def convergence(self):
            """
            Element convergence ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1955
            
            """
            return _pyEMsoft.f90wrap_emgammastemnamelisttype__get__convergence(self._handle)
        
        @convergence.setter
        def convergence(self, convergence):
            _pyEMsoft.f90wrap_emgammastemnamelisttype__set__convergence(self._handle, \
                convergence)
        
        @property
        def platid(self):
            """
            Element platid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1956
            
            """
            return _pyEMsoft.f90wrap_emgammastemnamelisttype__get__platid(self._handle)
        
        @platid.setter
        def platid(self, platid):
            _pyEMsoft.f90wrap_emgammastemnamelisttype__set__platid(self._handle, platid)
        
        @property
        def devid(self):
            """
            Element devid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1957
            
            """
            return _pyEMsoft.f90wrap_emgammastemnamelisttype__get__devid(self._handle)
        
        @devid.setter
        def devid(self, devid):
            _pyEMsoft.f90wrap_emgammastemnamelisttype__set__devid(self._handle, devid)
        
        @property
        def gammaname(self):
            """
            Element gammaname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1958
            
            """
            return _pyEMsoft.f90wrap_emgammastemnamelisttype__get__gammaname(self._handle)
        
        @gammaname.setter
        def gammaname(self, gammaname):
            _pyEMsoft.f90wrap_emgammastemnamelisttype__set__gammaname(self._handle, \
                gammaname)
        
        @property
        def gammapname(self):
            """
            Element gammapname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1959
            
            """
            return _pyEMsoft.f90wrap_emgammastemnamelisttype__get__gammapname(self._handle)
        
        @gammapname.setter
        def gammapname(self, gammapname):
            _pyEMsoft.f90wrap_emgammastemnamelisttype__set__gammapname(self._handle, \
                gammapname)
        
        @property
        def microstructurefile(self):
            """
            Element microstructurefile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1960
            
            """
            return \
                _pyEMsoft.f90wrap_emgammastemnamelisttype__get__microstructurefile(self._handle)
        
        @microstructurefile.setter
        def microstructurefile(self, microstructurefile):
            \
                _pyEMsoft.f90wrap_emgammastemnamelisttype__set__microstructurefile(self._handle, \
                microstructurefile)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1961
            
            """
            return _pyEMsoft.f90wrap_emgammastemnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_emgammastemnamelisttype__set__datafile(self._handle, datafile)
        
        def __str__(self):
            ret = ['<emgammastemnamelisttype>{\n']
            ret.append('    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    eu : ')
            ret.append(repr(self.eu))
            ret.append(',\n    convergence : ')
            ret.append(repr(self.convergence))
            ret.append(',\n    platid : ')
            ret.append(repr(self.platid))
            ret.append(',\n    devid : ')
            ret.append(repr(self.devid))
            ret.append(',\n    gammaname : ')
            ret.append(repr(self.gammaname))
            ret.append(',\n    gammapname : ')
            ret.append(repr(self.gammapname))
            ret.append(',\n    microstructurefile : ')
            ret.append(repr(self.microstructurefile))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EMTGBSTEMNameListType")
    class EMTGBSTEMNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=emtgbstemnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1964-1974
        
        """
        def __init__(self, handle=None):
            """
            self = Emtgbstemnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1964-1974
            
            
            Returns
            -------
            this : Emtgbstemnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for emtgbstemnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_emtgbstemnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Emtgbstemnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1964-1974
            
            Parameters
            ----------
            this : Emtgbstemnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for emtgbstemnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_emtgbstemnamelisttype_finalise(this=self._handle)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1965
            
            """
            return _pyEMsoft.f90wrap_emtgbstemnamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_emtgbstemnamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1966
            
            """
            return _pyEMsoft.f90wrap_emtgbstemnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_emtgbstemnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def eu(self):
            """
            Element eu ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1967
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emtgbstemnamelisttype__array__eu(self._handle)
            if array_handle in self._arrays:
                eu = self._arrays[array_handle]
            else:
                eu = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emtgbstemnamelisttype__array__eu)
                self._arrays[array_handle] = eu
            return eu
        
        @eu.setter
        def eu(self, eu):
            self.eu[...] = eu
        
        @property
        def convergence(self):
            """
            Element convergence ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1968
            
            """
            return _pyEMsoft.f90wrap_emtgbstemnamelisttype__get__convergence(self._handle)
        
        @convergence.setter
        def convergence(self, convergence):
            _pyEMsoft.f90wrap_emtgbstemnamelisttype__set__convergence(self._handle, \
                convergence)
        
        @property
        def platid(self):
            """
            Element platid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1969
            
            """
            return _pyEMsoft.f90wrap_emtgbstemnamelisttype__get__platid(self._handle)
        
        @platid.setter
        def platid(self, platid):
            _pyEMsoft.f90wrap_emtgbstemnamelisttype__set__platid(self._handle, platid)
        
        @property
        def usenumd(self):
            """
            Element usenumd ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1970
            
            """
            return _pyEMsoft.f90wrap_emtgbstemnamelisttype__get__usenumd(self._handle)
        
        @usenumd.setter
        def usenumd(self, usenumd):
            _pyEMsoft.f90wrap_emtgbstemnamelisttype__set__usenumd(self._handle, usenumd)
        
        @property
        def selnumd(self):
            """
            Element selnumd ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1971
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emtgbstemnamelisttype__array__selnumd(self._handle)
            if array_handle in self._arrays:
                selnumd = self._arrays[array_handle]
            else:
                selnumd = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emtgbstemnamelisttype__array__selnumd)
                self._arrays[array_handle] = selnumd
            return selnumd
        
        @selnumd.setter
        def selnumd(self, selnumd):
            self.selnumd[...] = selnumd
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1972
            
            """
            return _pyEMsoft.f90wrap_emtgbstemnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_emtgbstemnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def microstructurefile(self):
            """
            Element microstructurefile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1973
            
            """
            return \
                _pyEMsoft.f90wrap_emtgbstemnamelisttype__get__microstructurefile(self._handle)
        
        @microstructurefile.setter
        def microstructurefile(self, microstructurefile):
            _pyEMsoft.f90wrap_emtgbstemnamelisttype__set__microstructurefile(self._handle, \
                microstructurefile)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1974
            
            """
            return _pyEMsoft.f90wrap_emtgbstemnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_emtgbstemnamelisttype__set__datafile(self._handle, datafile)
        
        def __str__(self):
            ret = ['<emtgbstemnamelisttype>{\n']
            ret.append('    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    eu : ')
            ret.append(repr(self.eu))
            ret.append(',\n    convergence : ')
            ret.append(repr(self.convergence))
            ret.append(',\n    platid : ')
            ret.append(repr(self.platid))
            ret.append(',\n    usenumd : ')
            ret.append(repr(self.usenumd))
            ret.append(',\n    selnumd : ')
            ret.append(repr(self.selnumd))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    microstructurefile : ')
            ret.append(repr(self.microstructurefile))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EMCBEDQCNameListType")
    class EMCBEDQCNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=emcbedqcnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1976-1985
        
        """
        def __init__(self, handle=None):
            """
            self = Emcbedqcnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1976-1985
            
            
            Returns
            -------
            this : Emcbedqcnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for emcbedqcnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_emcbedqcnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Emcbedqcnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1976-1985
            
            Parameters
            ----------
            this : Emcbedqcnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for emcbedqcnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_emcbedqcnamelisttype_finalise(this=self._handle)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1977
            
            """
            return _pyEMsoft.f90wrap_emcbedqcnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_emcbedqcnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1978
            
            """
            return _pyEMsoft.f90wrap_emcbedqcnamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_emcbedqcnamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def convergence(self):
            """
            Element convergence ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1979
            
            """
            return _pyEMsoft.f90wrap_emcbedqcnamelisttype__get__convergence(self._handle)
        
        @convergence.setter
        def convergence(self, convergence):
            _pyEMsoft.f90wrap_emcbedqcnamelisttype__set__convergence(self._handle, \
                convergence)
        
        @property
        def eu(self):
            """
            Element eu ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1980
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emcbedqcnamelisttype__array__eu(self._handle)
            if array_handle in self._arrays:
                eu = self._arrays[array_handle]
            else:
                eu = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emcbedqcnamelisttype__array__eu)
                self._arrays[array_handle] = eu
            return eu
        
        @eu.setter
        def eu(self, eu):
            self.eu[...] = eu
        
        @property
        def thickness(self):
            """
            Element thickness ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1981
            
            """
            return _pyEMsoft.f90wrap_emcbedqcnamelisttype__get__thickness(self._handle)
        
        @thickness.setter
        def thickness(self, thickness):
            _pyEMsoft.f90wrap_emcbedqcnamelisttype__set__thickness(self._handle, thickness)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1982
            
            """
            return _pyEMsoft.f90wrap_emcbedqcnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_emcbedqcnamelisttype__set__datafile(self._handle, datafile)
        
        @property
        def qxtalname(self):
            """
            Element qxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1983
            
            """
            return _pyEMsoft.f90wrap_emcbedqcnamelisttype__get__qxtalname(self._handle)
        
        @qxtalname.setter
        def qxtalname(self, qxtalname):
            _pyEMsoft.f90wrap_emcbedqcnamelisttype__set__qxtalname(self._handle, qxtalname)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1984
            
            """
            return _pyEMsoft.f90wrap_emcbedqcnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_emcbedqcnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1985
            
            """
            return _pyEMsoft.f90wrap_emcbedqcnamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_emcbedqcnamelisttype__set__npix(self._handle, npix)
        
        def __str__(self):
            ret = ['<emcbedqcnamelisttype>{\n']
            ret.append('    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    convergence : ')
            ret.append(repr(self.convergence))
            ret.append(',\n    eu : ')
            ret.append(repr(self.eu))
            ret.append(',\n    thickness : ')
            ret.append(repr(self.thickness))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    qxtalname : ')
            ret.append(repr(self.qxtalname))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EMCBED2DQCNameListType")
    class EMCBED2DQCNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=emcbed2dqcnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 1987-1997
        
        """
        def __init__(self, handle=None):
            """
            self = Emcbed2Dqcnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 1987-1997
            
            
            Returns
            -------
            this : Emcbed2Dqcnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for emcbed2dqcnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_emcbed2dqcnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Emcbed2Dqcnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 1987-1997
            
            Parameters
            ----------
            this : Emcbed2Dqcnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for emcbed2dqcnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_emcbed2dqcnamelisttype_finalise(this=self._handle)
        
        @property
        def dmin_qc(self):
            """
            Element dmin_qc ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1988
            
            """
            return _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__get__dmin_qc(self._handle)
        
        @dmin_qc.setter
        def dmin_qc(self, dmin_qc):
            _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__set__dmin_qc(self._handle, dmin_qc)
        
        @property
        def dmin_p(self):
            """
            Element dmin_p ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1989
            
            """
            return _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__get__dmin_p(self._handle)
        
        @dmin_p.setter
        def dmin_p(self, dmin_p):
            _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__set__dmin_p(self._handle, dmin_p)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1990
            
            """
            return _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def convergence(self):
            """
            Element convergence ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1991
            
            """
            return _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__get__convergence(self._handle)
        
        @convergence.setter
        def convergence(self, convergence):
            _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__set__convergence(self._handle, \
                convergence)
        
        @property
        def eu(self):
            """
            Element eu ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1992
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__array__eu(self._handle)
            if array_handle in self._arrays:
                eu = self._arrays[array_handle]
            else:
                eu = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__array__eu)
                self._arrays[array_handle] = eu
            return eu
        
        @eu.setter
        def eu(self, eu):
            self.eu[...] = eu
        
        @property
        def thickness(self):
            """
            Element thickness ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 1993
            
            """
            return _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__get__thickness(self._handle)
        
        @thickness.setter
        def thickness(self, thickness):
            _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__set__thickness(self._handle, \
                thickness)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1994
            
            """
            return _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__set__datafile(self._handle, datafile)
        
        @property
        def qxtalname(self):
            """
            Element qxtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 1995
            
            """
            return _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__get__qxtalname(self._handle)
        
        @qxtalname.setter
        def qxtalname(self, qxtalname):
            _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__set__qxtalname(self._handle, \
                qxtalname)
        
        @property
        def nthreads(self):
            """
            Element nthreads ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1996
            
            """
            return _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__get__nthreads(self._handle)
        
        @nthreads.setter
        def nthreads(self, nthreads):
            _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__set__nthreads(self._handle, nthreads)
        
        @property
        def npix(self):
            """
            Element npix ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 1997
            
            """
            return _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__get__npix(self._handle)
        
        @npix.setter
        def npix(self, npix):
            _pyEMsoft.f90wrap_emcbed2dqcnamelisttype__set__npix(self._handle, npix)
        
        def __str__(self):
            ret = ['<emcbed2dqcnamelisttype>{\n']
            ret.append('    dmin_qc : ')
            ret.append(repr(self.dmin_qc))
            ret.append(',\n    dmin_p : ')
            ret.append(repr(self.dmin_p))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    convergence : ')
            ret.append(repr(self.convergence))
            ret.append(',\n    eu : ')
            ret.append(repr(self.eu))
            ret.append(',\n    thickness : ')
            ret.append(repr(self.thickness))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    qxtalname : ')
            ret.append(repr(self.qxtalname))
            ret.append(',\n    nthreads : ')
            ret.append(repr(self.nthreads))
            ret.append(',\n    npix : ')
            ret.append(repr(self.npix))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EMmdSTEMNameListType")
    class EMmdSTEMNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=emmdstemnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 2000-2024
        
        """
        def __init__(self, handle=None):
            """
            self = Emmdstemnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 2000-2024
            
            
            Returns
            -------
            this : Emmdstemnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for emmdstemnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_emmdstemnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Emmdstemnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 2000-2024
            
            Parameters
            ----------
            this : Emmdstemnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for emmdstemnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_emmdstemnamelisttype_finalise(this=self._handle)
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 2001
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def datafile(self):
            """
            Element datafile ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 2002
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__datafile(self._handle)
        
        @datafile.setter
        def datafile(self, datafile):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__datafile(self._handle, datafile)
        
        @property
        def inputfilename(self):
            """
            Element inputfilename ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 2003
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__inputfilename(self._handle)
        
        @inputfilename.setter
        def inputfilename(self, inputfilename):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__inputfilename(self._handle, \
                inputfilename)
        
        @property
        def eu(self):
            """
            Element eu ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2004
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emmdstemnamelisttype__array__eu(self._handle)
            if array_handle in self._arrays:
                eu = self._arrays[array_handle]
            else:
                eu = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emmdstemnamelisttype__array__eu)
                self._arrays[array_handle] = eu
            return eu
        
        @eu.setter
        def eu(self, eu):
            self.eu[...] = eu
        
        @property
        def scalefactor(self):
            """
            Element scalefactor ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2005
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emmdstemnamelisttype__array__scalefactor(self._handle)
            if array_handle in self._arrays:
                scalefactor = self._arrays[array_handle]
            else:
                scalefactor = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emmdstemnamelisttype__array__scalefactor)
                self._arrays[array_handle] = scalefactor
            return scalefactor
        
        @scalefactor.setter
        def scalefactor(self, scalefactor):
            self.scalefactor[...] = scalefactor
        
        @property
        def eulerconvention(self):
            """
            Element eulerconvention ftype=character(3) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 2006
            
            """
            return \
                _pyEMsoft.f90wrap_emmdstemnamelisttype__get__eulerconvention(self._handle)
        
        @eulerconvention.setter
        def eulerconvention(self, eulerconvention):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__eulerconvention(self._handle, \
                eulerconvention)
        
        @property
        def phi1(self):
            """
            Element phi1 ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2007
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__phi1(self._handle)
        
        @phi1.setter
        def phi1(self, phi1):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__phi1(self._handle, phi1)
        
        @property
        def phi(self):
            """
            Element phi ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2007
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__phi(self._handle)
        
        @phi.setter
        def phi(self, phi):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__phi(self._handle, phi)
        
        @property
        def phi2(self):
            """
            Element phi2 ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2007
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__phi2(self._handle)
        
        @phi2.setter
        def phi2(self, phi2):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__phi2(self._handle, phi2)
        
        @property
        def dmin(self):
            """
            Element dmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2008
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__dmin(self._handle)
        
        @dmin.setter
        def dmin(self, dmin):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__dmin(self._handle, dmin)
        
        @property
        def voltage(self):
            """
            Element voltage ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2009
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__voltage(self._handle)
        
        @voltage.setter
        def voltage(self, voltage):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__voltage(self._handle, voltage)
        
        @property
        def convergence(self):
            """
            Element convergence ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2010
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__convergence(self._handle)
        
        @convergence.setter
        def convergence(self, convergence):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__convergence(self._handle, \
                convergence)
        
        @property
        def platid(self):
            """
            Element platid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2011
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__platid(self._handle)
        
        @platid.setter
        def platid(self, platid):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__platid(self._handle, platid)
        
        @property
        def devid(self):
            """
            Element devid ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2012
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__devid(self._handle)
        
        @devid.setter
        def devid(self, devid):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__devid(self._handle, devid)
        
        @property
        def usenumd(self):
            """
            Element usenumd ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2013
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__usenumd(self._handle)
        
        @usenumd.setter
        def usenumd(self, usenumd):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__usenumd(self._handle, usenumd)
        
        @property
        def selnumd(self):
            """
            Element selnumd ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2014
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emmdstemnamelisttype__array__selnumd(self._handle)
            if array_handle in self._arrays:
                selnumd = self._arrays[array_handle]
            else:
                selnumd = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emmdstemnamelisttype__array__selnumd)
                self._arrays[array_handle] = selnumd
            return selnumd
        
        @selnumd.setter
        def selnumd(self, selnumd):
            self.selnumd[...] = selnumd
        
        @property
        def discsize(self):
            """
            Element discsize ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2015
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__discsize(self._handle)
        
        @discsize.setter
        def discsize(self, discsize):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__discsize(self._handle, discsize)
        
        @property
        def stride(self):
            """
            Element stride ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2016
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__stride(self._handle)
        
        @stride.setter
        def stride(self, stride):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__stride(self._handle, stride)
        
        @property
        def maxnumincell(self):
            """
            Element maxnumincell ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2017
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__maxnumincell(self._handle)
        
        @maxnumincell.setter
        def maxnumincell(self, maxnumincell):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__maxnumincell(self._handle, \
                maxnumincell)
        
        @property
        def hypslab(self):
            """
            Element hypslab ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 2018
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__hypslab(self._handle)
        
        @hypslab.setter
        def hypslab(self, hypslab):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__hypslab(self._handle, hypslab)
        
        @property
        def dwflag(self):
            """
            Element dwflag ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 2019
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__dwflag(self._handle)
        
        @dwflag.setter
        def dwflag(self, dwflag):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__dwflag(self._handle, dwflag)
        
        @property
        def thk(self):
            """
            Element thk ftype=real(kind=dbl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2020
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__thk(self._handle)
        
        @thk.setter
        def thk(self, thk):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__thk(self._handle, thk)
        
        @property
        def presorted(self):
            """
            Element presorted ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 2021
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__presorted(self._handle)
        
        @presorted.setter
        def presorted(self, presorted):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__presorted(self._handle, presorted)
        
        @property
        def subslice(self):
            """
            Element subslice ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2022
            
            """
            return _pyEMsoft.f90wrap_emmdstemnamelisttype__get__subslice(self._handle)
        
        @subslice.setter
        def subslice(self, subslice):
            _pyEMsoft.f90wrap_emmdstemnamelisttype__set__subslice(self._handle, subslice)
        
        @property
        def zaindex(self):
            """
            Element zaindex ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2023
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emmdstemnamelisttype__array__zaindex(self._handle)
            if array_handle in self._arrays:
                zaindex = self._arrays[array_handle]
            else:
                zaindex = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emmdstemnamelisttype__array__zaindex)
                self._arrays[array_handle] = zaindex
            return zaindex
        
        @zaindex.setter
        def zaindex(self, zaindex):
            self.zaindex[...] = zaindex
        
        @property
        def lauec(self):
            """
            Element lauec ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2024
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emmdstemnamelisttype__array__lauec(self._handle)
            if array_handle in self._arrays:
                lauec = self._arrays[array_handle]
            else:
                lauec = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emmdstemnamelisttype__array__lauec)
                self._arrays[array_handle] = lauec
            return lauec
        
        @lauec.setter
        def lauec(self, lauec):
            self.lauec[...] = lauec
        
        def __str__(self):
            ret = ['<emmdstemnamelisttype>{\n']
            ret.append('    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    datafile : ')
            ret.append(repr(self.datafile))
            ret.append(',\n    inputfilename : ')
            ret.append(repr(self.inputfilename))
            ret.append(',\n    eu : ')
            ret.append(repr(self.eu))
            ret.append(',\n    scalefactor : ')
            ret.append(repr(self.scalefactor))
            ret.append(',\n    eulerconvention : ')
            ret.append(repr(self.eulerconvention))
            ret.append(',\n    phi1 : ')
            ret.append(repr(self.phi1))
            ret.append(',\n    phi : ')
            ret.append(repr(self.phi))
            ret.append(',\n    phi2 : ')
            ret.append(repr(self.phi2))
            ret.append(',\n    dmin : ')
            ret.append(repr(self.dmin))
            ret.append(',\n    voltage : ')
            ret.append(repr(self.voltage))
            ret.append(',\n    convergence : ')
            ret.append(repr(self.convergence))
            ret.append(',\n    platid : ')
            ret.append(repr(self.platid))
            ret.append(',\n    devid : ')
            ret.append(repr(self.devid))
            ret.append(',\n    usenumd : ')
            ret.append(repr(self.usenumd))
            ret.append(',\n    selnumd : ')
            ret.append(repr(self.selnumd))
            ret.append(',\n    discsize : ')
            ret.append(repr(self.discsize))
            ret.append(',\n    stride : ')
            ret.append(repr(self.stride))
            ret.append(',\n    maxnumincell : ')
            ret.append(repr(self.maxnumincell))
            ret.append(',\n    hypslab : ')
            ret.append(repr(self.hypslab))
            ret.append(',\n    dwflag : ')
            ret.append(repr(self.dwflag))
            ret.append(',\n    thk : ')
            ret.append(repr(self.thk))
            ret.append(',\n    presorted : ')
            ret.append(repr(self.presorted))
            ret.append(',\n    subslice : ')
            ret.append(repr(self.subslice))
            ret.append(',\n    zaindex : ')
            ret.append(repr(self.zaindex))
            ret.append(',\n    lauec : ')
            ret.append(repr(self.lauec))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EMhh4NameListType")
    class EMhh4NameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=emhh4namelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 2026-2057
        
        """
        def __init__(self, handle=None):
            """
            self = Emhh4Namelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 2026-2057
            
            
            Returns
            -------
            this : Emhh4Namelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for emhh4namelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_emhh4namelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Emhh4Namelisttype
            
            
            Defined at NameListTypedefs.f90 lines 2026-2057
            
            Parameters
            ----------
            this : Emhh4Namelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for emhh4namelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_emhh4namelisttype_finalise(this=self._handle)
        
        @property
        def irow(self):
            """
            Element irow ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2027
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__irow(self._handle)
        
        @irow.setter
        def irow(self, irow):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__irow(self._handle, irow)
        
        @property
        def icol(self):
            """
            Element icol ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2028
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__icol(self._handle)
        
        @icol.setter
        def icol(self, icol):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__icol(self._handle, icol)
        
        @property
        def wnum(self):
            """
            Element wnum ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2029
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__wnum(self._handle)
        
        @wnum.setter
        def wnum(self, wnum):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__wnum(self._handle, wnum)
        
        @property
        def ltest(self):
            """
            Element ltest ftype=integer(kind=sgl) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2030
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__ltest(self._handle)
        
        @ltest.setter
        def ltest(self, ltest):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__ltest(self._handle, ltest)
        
        @property
        def lb(self):
            """
            Element lb ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2031
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__lb(self._handle)
            if array_handle in self._arrays:
                lb = self._arrays[array_handle]
            else:
                lb = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__lb)
                self._arrays[array_handle] = lb
            return lb
        
        @lb.setter
        def lb(self, lb):
            self.lb[...] = lb
        
        @property
        def ld(self):
            """
            Element ld ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2031
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__ld(self._handle)
        
        @ld.setter
        def ld(self, ld):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__ld(self._handle, ld)
        
        @property
        def lb2(self):
            """
            Element lb2 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2032
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__lb2(self._handle)
            if array_handle in self._arrays:
                lb2 = self._arrays[array_handle]
            else:
                lb2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__lb2)
                self._arrays[array_handle] = lb2
            return lb2
        
        @lb2.setter
        def lb2(self, lb2):
            self.lb2[...] = lb2
        
        @property
        def ld2(self):
            """
            Element ld2 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2032
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__ld2(self._handle)
        
        @ld2.setter
        def ld2(self, ld2):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__ld2(self._handle, ld2)
        
        @property
        def lb3(self):
            """
            Element lb3 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2033
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__lb3(self._handle)
            if array_handle in self._arrays:
                lb3 = self._arrays[array_handle]
            else:
                lb3 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__lb3)
                self._arrays[array_handle] = lb3
            return lb3
        
        @lb3.setter
        def lb3(self, lb3):
            self.lb3[...] = lb3
        
        @property
        def ld3(self):
            """
            Element ld3 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2033
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__ld3(self._handle)
        
        @ld3.setter
        def ld3(self, ld3):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__ld3(self._handle, ld3)
        
        @property
        def lb4(self):
            """
            Element lb4 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2034
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__lb4(self._handle)
            if array_handle in self._arrays:
                lb4 = self._arrays[array_handle]
            else:
                lb4 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__lb4)
                self._arrays[array_handle] = lb4
            return lb4
        
        @lb4.setter
        def lb4(self, lb4):
            self.lb4[...] = lb4
        
        @property
        def ld4(self):
            """
            Element ld4 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2034
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__ld4(self._handle)
        
        @ld4.setter
        def ld4(self, ld4):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__ld4(self._handle, ld4)
        
        @property
        def lu(self):
            """
            Element lu ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2035
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__lu(self._handle)
            if array_handle in self._arrays:
                lu = self._arrays[array_handle]
            else:
                lu = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__lu)
                self._arrays[array_handle] = lu
            return lu
        
        @lu.setter
        def lu(self, lu):
            self.lu[...] = lu
        
        @property
        def lg(self):
            """
            Element lg ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2036
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__lg(self._handle)
            if array_handle in self._arrays:
                lg = self._arrays[array_handle]
            else:
                lg = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__lg)
                self._arrays[array_handle] = lg
            return lg
        
        @lg.setter
        def lg(self, lg):
            self.lg[...] = lg
        
        @property
        def lbm(self):
            """
            Element lbm ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2037
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__lbm(self._handle)
            if array_handle in self._arrays:
                lbm = self._arrays[array_handle]
            else:
                lbm = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__lbm)
                self._arrays[array_handle] = lbm
            return lbm
        
        @lbm.setter
        def lbm(self, lbm):
            self.lbm[...] = lbm
        
        @property
        def lfn(self):
            """
            Element lfn ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2038
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__lfn(self._handle)
            if array_handle in self._arrays:
                lfn = self._arrays[array_handle]
            else:
                lfn = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__lfn)
                self._arrays[array_handle] = lfn
            return lfn
        
        @lfn.setter
        def lfn(self, lfn):
            self.lfn[...] = lfn
        
        @property
        def lfp1(self):
            """
            Element lfp1 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2039
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__lfp1(self._handle)
            if array_handle in self._arrays:
                lfp1 = self._arrays[array_handle]
            else:
                lfp1 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__lfp1)
                self._arrays[array_handle] = lfp1
            return lfp1
        
        @lfp1.setter
        def lfp1(self, lfp1):
            self.lfp1[...] = lfp1
        
        @property
        def lfp(self):
            """
            Element lfp ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2039
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__lfp(self._handle)
            if array_handle in self._arrays:
                lfp = self._arrays[array_handle]
            else:
                lfp = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__lfp)
                self._arrays[array_handle] = lfp
            return lfp
        
        @lfp.setter
        def lfp(self, lfp):
            self.lfp[...] = lfp
        
        @property
        def lfp3(self):
            """
            Element lfp3 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2039
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__lfp3(self._handle)
            if array_handle in self._arrays:
                lfp3 = self._arrays[array_handle]
            else:
                lfp3 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__lfp3)
                self._arrays[array_handle] = lfp3
            return lfp3
        
        @lfp3.setter
        def lfp3(self, lfp3):
            self.lfp3[...] = lfp3
        
        @property
        def ls1(self):
            """
            Element ls1 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2040
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__ls1(self._handle)
            if array_handle in self._arrays:
                ls1 = self._arrays[array_handle]
            else:
                ls1 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__ls1)
                self._arrays[array_handle] = ls1
            return ls1
        
        @ls1.setter
        def ls1(self, ls1):
            self.ls1[...] = ls1
        
        @property
        def lq1(self):
            """
            Element lq1 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2040
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__lq1(self._handle)
        
        @lq1.setter
        def lq1(self, lq1):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__lq1(self._handle, lq1)
        
        @property
        def ls2(self):
            """
            Element ls2 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2041
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__ls2(self._handle)
            if array_handle in self._arrays:
                ls2 = self._arrays[array_handle]
            else:
                ls2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__ls2)
                self._arrays[array_handle] = ls2
            return ls2
        
        @ls2.setter
        def ls2(self, ls2):
            self.ls2[...] = ls2
        
        @property
        def lq2(self):
            """
            Element lq2 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2041
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__lq2(self._handle)
        
        @lq2.setter
        def lq2(self, lq2):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__lq2(self._handle, lq2)
        
        @property
        def ls3(self):
            """
            Element ls3 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2042
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__ls3(self._handle)
            if array_handle in self._arrays:
                ls3 = self._arrays[array_handle]
            else:
                ls3 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__ls3)
                self._arrays[array_handle] = ls3
            return ls3
        
        @ls3.setter
        def ls3(self, ls3):
            self.ls3[...] = ls3
        
        @property
        def lq3(self):
            """
            Element lq3 ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2042
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__lq3(self._handle)
        
        @lq3.setter
        def lq3(self, lq3):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__lq3(self._handle, lq3)
        
        @property
        def kv(self):
            """
            Element kv ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2043
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__kv(self._handle)
        
        @kv.setter
        def kv(self, kv):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__kv(self._handle, kv)
        
        @property
        def thick(self):
            """
            Element thick ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2044
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__thick(self._handle)
        
        @thick.setter
        def thick(self, thick):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__thick(self._handle, thick)
        
        @property
        def start(self):
            """
            Element start ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2044
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__start(self._handle)
        
        @start.setter
        def start(self, start):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__start(self._handle, start)
        
        @property
        def finish(self):
            """
            Element finish ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2044
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__finish(self._handle)
        
        @finish.setter
        def finish(self, finish):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__finish(self._handle, finish)
        
        @property
        def wmin(self):
            """
            Element wmin ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2045
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__wmin(self._handle)
        
        @wmin.setter
        def wmin(self, wmin):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__wmin(self._handle, wmin)
        
        @property
        def wmax(self):
            """
            Element wmax ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2045
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__wmax(self._handle)
        
        @wmax.setter
        def wmax(self, wmax):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__wmax(self._handle, wmax)
        
        @property
        def sep(self):
            """
            Element sep ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2046
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__sep(self._handle)
        
        @sep.setter
        def sep(self, sep):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__sep(self._handle, sep)
        
        @property
        def sep2(self):
            """
            Element sep2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2046
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__sep2(self._handle)
        
        @sep2.setter
        def sep2(self, sep2):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__sep2(self._handle, sep2)
        
        @property
        def fap1(self):
            """
            Element fap1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2047
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__fap1(self._handle)
        
        @fap1.setter
        def fap1(self, fap1):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__fap1(self._handle, fap1)
        
        @property
        def fap3(self):
            """
            Element fap3 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2047
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__fap3(self._handle)
        
        @fap3.setter
        def fap3(self, fap3):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__fap3(self._handle, fap3)
        
        @property
        def d1row1(self):
            """
            Element d1row1 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2048
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__d1row1(self._handle)
            if array_handle in self._arrays:
                d1row1 = self._arrays[array_handle]
            else:
                d1row1 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__d1row1)
                self._arrays[array_handle] = d1row1
            return d1row1
        
        @d1row1.setter
        def d1row1(self, d1row1):
            self.d1row1[...] = d1row1
        
        @property
        def d1row2(self):
            """
            Element d1row2 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2049
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__d1row2(self._handle)
            if array_handle in self._arrays:
                d1row2 = self._arrays[array_handle]
            else:
                d1row2 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__d1row2)
                self._arrays[array_handle] = d1row2
            return d1row2
        
        @d1row2.setter
        def d1row2(self, d1row2):
            self.d1row2[...] = d1row2
        
        @property
        def d1row3(self):
            """
            Element d1row3 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2050
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__d1row3(self._handle)
            if array_handle in self._arrays:
                d1row3 = self._arrays[array_handle]
            else:
                d1row3 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__d1row3)
                self._arrays[array_handle] = d1row3
            return d1row3
        
        @d1row3.setter
        def d1row3(self, d1row3):
            self.d1row3[...] = d1row3
        
        @property
        def d1row4(self):
            """
            Element d1row4 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2051
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__d1row4(self._handle)
            if array_handle in self._arrays:
                d1row4 = self._arrays[array_handle]
            else:
                d1row4 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__d1row4)
                self._arrays[array_handle] = d1row4
            return d1row4
        
        @d1row4.setter
        def d1row4(self, d1row4):
            self.d1row4[...] = d1row4
        
        @property
        def d1row5(self):
            """
            Element d1row5 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2052
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__d1row5(self._handle)
            if array_handle in self._arrays:
                d1row5 = self._arrays[array_handle]
            else:
                d1row5 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__d1row5)
                self._arrays[array_handle] = d1row5
            return d1row5
        
        @d1row5.setter
        def d1row5(self, d1row5):
            self.d1row5[...] = d1row5
        
        @property
        def d1row6(self):
            """
            Element d1row6 ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2053
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emhh4namelisttype__array__d1row6(self._handle)
            if array_handle in self._arrays:
                d1row6 = self._arrays[array_handle]
            else:
                d1row6 = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emhh4namelisttype__array__d1row6)
                self._arrays[array_handle] = d1row6
            return d1row6
        
        @d1row6.setter
        def d1row6(self, d1row6):
            self.d1row6[...] = d1row6
        
        @property
        def xtalname(self):
            """
            Element xtalname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 2054
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__xtalname(self._handle)
        
        @xtalname.setter
        def xtalname(self, xtalname):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__xtalname(self._handle, xtalname)
        
        @property
        def outname(self):
            """
            Element outname ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 2055
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__outname(self._handle)
        
        @outname.setter
        def outname(self, outname):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__outname(self._handle, outname)
        
        @property
        def imageprefix(self):
            """
            Element imageprefix ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 2056
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__imageprefix(self._handle)
        
        @imageprefix.setter
        def imageprefix(self, imageprefix):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__imageprefix(self._handle, imageprefix)
        
        @property
        def imagetype(self):
            """
            Element imagetype ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 2057
            
            """
            return _pyEMsoft.f90wrap_emhh4namelisttype__get__imagetype(self._handle)
        
        @imagetype.setter
        def imagetype(self, imagetype):
            _pyEMsoft.f90wrap_emhh4namelisttype__set__imagetype(self._handle, imagetype)
        
        def __str__(self):
            ret = ['<emhh4namelisttype>{\n']
            ret.append('    irow : ')
            ret.append(repr(self.irow))
            ret.append(',\n    icol : ')
            ret.append(repr(self.icol))
            ret.append(',\n    wnum : ')
            ret.append(repr(self.wnum))
            ret.append(',\n    ltest : ')
            ret.append(repr(self.ltest))
            ret.append(',\n    lb : ')
            ret.append(repr(self.lb))
            ret.append(',\n    ld : ')
            ret.append(repr(self.ld))
            ret.append(',\n    lb2 : ')
            ret.append(repr(self.lb2))
            ret.append(',\n    ld2 : ')
            ret.append(repr(self.ld2))
            ret.append(',\n    lb3 : ')
            ret.append(repr(self.lb3))
            ret.append(',\n    ld3 : ')
            ret.append(repr(self.ld3))
            ret.append(',\n    lb4 : ')
            ret.append(repr(self.lb4))
            ret.append(',\n    ld4 : ')
            ret.append(repr(self.ld4))
            ret.append(',\n    lu : ')
            ret.append(repr(self.lu))
            ret.append(',\n    lg : ')
            ret.append(repr(self.lg))
            ret.append(',\n    lbm : ')
            ret.append(repr(self.lbm))
            ret.append(',\n    lfn : ')
            ret.append(repr(self.lfn))
            ret.append(',\n    lfp1 : ')
            ret.append(repr(self.lfp1))
            ret.append(',\n    lfp : ')
            ret.append(repr(self.lfp))
            ret.append(',\n    lfp3 : ')
            ret.append(repr(self.lfp3))
            ret.append(',\n    ls1 : ')
            ret.append(repr(self.ls1))
            ret.append(',\n    lq1 : ')
            ret.append(repr(self.lq1))
            ret.append(',\n    ls2 : ')
            ret.append(repr(self.ls2))
            ret.append(',\n    lq2 : ')
            ret.append(repr(self.lq2))
            ret.append(',\n    ls3 : ')
            ret.append(repr(self.ls3))
            ret.append(',\n    lq3 : ')
            ret.append(repr(self.lq3))
            ret.append(',\n    kv : ')
            ret.append(repr(self.kv))
            ret.append(',\n    thick : ')
            ret.append(repr(self.thick))
            ret.append(',\n    start : ')
            ret.append(repr(self.start))
            ret.append(',\n    finish : ')
            ret.append(repr(self.finish))
            ret.append(',\n    wmin : ')
            ret.append(repr(self.wmin))
            ret.append(',\n    wmax : ')
            ret.append(repr(self.wmax))
            ret.append(',\n    sep : ')
            ret.append(repr(self.sep))
            ret.append(',\n    sep2 : ')
            ret.append(repr(self.sep2))
            ret.append(',\n    fap1 : ')
            ret.append(repr(self.fap1))
            ret.append(',\n    fap3 : ')
            ret.append(repr(self.fap3))
            ret.append(',\n    d1row1 : ')
            ret.append(repr(self.d1row1))
            ret.append(',\n    d1row2 : ')
            ret.append(repr(self.d1row2))
            ret.append(',\n    d1row3 : ')
            ret.append(repr(self.d1row3))
            ret.append(',\n    d1row4 : ')
            ret.append(repr(self.d1row4))
            ret.append(',\n    d1row5 : ')
            ret.append(repr(self.d1row5))
            ret.append(',\n    d1row6 : ')
            ret.append(repr(self.d1row6))
            ret.append(',\n    xtalname : ')
            ret.append(repr(self.xtalname))
            ret.append(',\n    outname : ')
            ret.append(repr(self.outname))
            ret.append(',\n    imageprefix : ')
            ret.append(repr(self.imageprefix))
            ret.append(',\n    imagetype : ')
            ret.append(repr(self.imagetype))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EMIntegrateSTEMNameListType")
    class EMIntegrateSTEMNameListType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=emintegratestemnamelisttype)
        
        
        Defined at NameListTypedefs.f90 lines 2060-2068
        
        """
        def __init__(self, handle=None):
            """
            self = Emintegratestemnamelisttype()
            
            
            Defined at NameListTypedefs.f90 lines 2060-2068
            
            
            Returns
            -------
            this : Emintegratestemnamelisttype
            	Object to be constructed
            
            
            Automatically generated constructor for emintegratestemnamelisttype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_emintegratestemnamelisttype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Emintegratestemnamelisttype
            
            
            Defined at NameListTypedefs.f90 lines 2060-2068
            
            Parameters
            ----------
            this : Emintegratestemnamelisttype
            	Object to be destructed
            
            
            Automatically generated destructor for emintegratestemnamelisttype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_emintegratestemnamelisttype_finalise(this=self._handle)
        
        @property
        def inputfilename(self):
            """
            Element inputfilename ftype=character(fnlen) pytype=str
            
            
            Defined at NameListTypedefs.f90 line 2061
            
            """
            return \
                _pyEMsoft.f90wrap_emintegratestemnamelisttype__get__inputfilename(self._handle)
        
        @inputfilename.setter
        def inputfilename(self, inputfilename):
            _pyEMsoft.f90wrap_emintegratestemnamelisttype__set__inputfilename(self._handle, \
                inputfilename)
        
        @property
        def mode(self):
            """
            Element mode ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2062
            
            """
            return _pyEMsoft.f90wrap_emintegratestemnamelisttype__get__mode(self._handle)
        
        @mode.setter
        def mode(self, mode):
            _pyEMsoft.f90wrap_emintegratestemnamelisttype__set__mode(self._handle, mode)
        
        @property
        def ref(self):
            """
            Element ref ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2063
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_emintegratestemnamelisttype__array__ref(self._handle)
            if array_handle in self._arrays:
                ref = self._arrays[array_handle]
            else:
                ref = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_emintegratestemnamelisttype__array__ref)
                self._arrays[array_handle] = ref
            return ref
        
        @ref.setter
        def ref(self, ref):
            self.ref[...] = ref
        
        @property
        def camlen(self):
            """
            Element camlen ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2064
            
            """
            return _pyEMsoft.f90wrap_emintegratestemnamelisttype__get__camlen(self._handle)
        
        @camlen.setter
        def camlen(self, camlen):
            _pyEMsoft.f90wrap_emintegratestemnamelisttype__set__camlen(self._handle, camlen)
        
        @property
        def pixsize(self):
            """
            Element pixsize ftype=integer(kind=irg) pytype=int
            
            
            Defined at NameListTypedefs.f90 line 2065
            
            """
            return _pyEMsoft.f90wrap_emintegratestemnamelisttype__get__pixsize(self._handle)
        
        @pixsize.setter
        def pixsize(self, pixsize):
            _pyEMsoft.f90wrap_emintegratestemnamelisttype__set__pixsize(self._handle, \
                pixsize)
        
        @property
        def id(self):
            """
            Element id ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2066
            
            """
            return _pyEMsoft.f90wrap_emintegratestemnamelisttype__get__id(self._handle)
        
        @id.setter
        def id(self, id):
            _pyEMsoft.f90wrap_emintegratestemnamelisttype__set__id(self._handle, id)
        
        @property
        def od(self):
            """
            Element od ftype=real(kind=sgl) pytype=float
            
            
            Defined at NameListTypedefs.f90 line 2067
            
            """
            return _pyEMsoft.f90wrap_emintegratestemnamelisttype__get__od(self._handle)
        
        @od.setter
        def od(self, od):
            _pyEMsoft.f90wrap_emintegratestemnamelisttype__set__od(self._handle, od)
        
        @property
        def cbed(self):
            """
            Element cbed ftype=logical pytype=bool
            
            
            Defined at NameListTypedefs.f90 line 2068
            
            """
            return _pyEMsoft.f90wrap_emintegratestemnamelisttype__get__cbed(self._handle)
        
        @cbed.setter
        def cbed(self, cbed):
            _pyEMsoft.f90wrap_emintegratestemnamelisttype__set__cbed(self._handle, cbed)
        
        def __str__(self):
            ret = ['<emintegratestemnamelisttype>{\n']
            ret.append('    inputfilename : ')
            ret.append(repr(self.inputfilename))
            ret.append(',\n    mode : ')
            ret.append(repr(self.mode))
            ret.append(',\n    ref : ')
            ret.append(repr(self.ref))
            ret.append(',\n    camlen : ')
            ret.append(repr(self.camlen))
            ret.append(',\n    pixsize : ')
            ret.append(repr(self.pixsize))
            ret.append(',\n    id : ')
            ret.append(repr(self.id))
            ret.append(',\n    od : ')
            ret.append(repr(self.od))
            ret.append(',\n    cbed : ')
            ret.append(repr(self.cbed))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    _dt_array_initialisers = []
    

namelisttypedefs = Namelisttypedefs()

class Namelisthandlers(f90wrap.runtime.FortranModule):
    """
    Module namelisthandlers
    
    
    Defined at NameListHandlers.f90 lines 42-9091
    
    """
    @staticmethod
    def getgrainviznamelist(nmlfile, gvnl, initonly=None):
        """
        getgrainviznamelist(nmlfile, gvnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 60-109
        
        Parameters
        ----------
        nmlfile : str
        gvnl : Grainviznamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getgrainviznamelist(nmlfile=nmlfile, gvnl=gvnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getchangesettingnamelist(nmlfile, csnl, initonly=None):
        """
        getchangesettingnamelist(nmlfile, csnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 125-162
        
        Parameters
        ----------
        nmlfile : str
        csnl : Changesettingnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getchangesettingnamelist(nmlfile=nmlfile, csnl=csnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getctfnamelist(nmlfile, csnl, initonly=None):
        """
        getctfnamelist(nmlfile, csnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 178-221
        
        Parameters
        ----------
        nmlfile : str
        csnl : Ctfnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getctfnamelist(nmlfile=nmlfile, csnl=csnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getangnamelist(nmlfile, csnl, initonly=None):
        """
        getangnamelist(nmlfile, csnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 237-280
        
        Parameters
        ----------
        nmlfile : str
        csnl : Angnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getangnamelist(nmlfile=nmlfile, csnl=csnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def geteulersnamelist(nmlfile, csnl, initonly=None):
        """
        geteulersnamelist(nmlfile, csnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 296-342
        
        Parameters
        ----------
        nmlfile : str
        csnl : Eulersnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_geteulersnamelist(nmlfile=nmlfile, csnl=csnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getgbonamelist(nmlfile, gbonl, initonly=None):
        """
        getgbonamelist(nmlfile, gbonl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 358-404
        
        Parameters
        ----------
        nmlfile : str
        gbonl : Gbonamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getgbonamelist(nmlfile=nmlfile, gbonl=gbonl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getgbodmnamelist(nmlfile, gbonl, initonly=None):
        """
        getgbodmnamelist(nmlfile, gbonl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 420-466
        
        Parameters
        ----------
        nmlfile : str
        gbonl : Gbodmnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getgbodmnamelist(nmlfile=nmlfile, gbonl=gbonl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getoslerpnamelist(nmlfile, onl, initonly=None):
        """
        getoslerpnamelist(nmlfile, onl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 482-549
        
        Parameters
        ----------
        nmlfile : str
        onl : Oslerpnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getoslerpnamelist(nmlfile=nmlfile, onl=onl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getlorentznamelist(nmlfile, enl, initonly=None):
        """
        getlorentznamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 565-669
        
        Parameters
        ----------
        nmlfile : str
        enl : Lorentznamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getlorentznamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getmultiphasenamelist(nmlfile, enl, initonly=None):
        """
        getmultiphasenamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 685-731
        
        Parameters
        ----------
        nmlfile : str
        enl : Multiphasenamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getmultiphasenamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getkosselnamelist(nmlfile, knl, initonly=None):
        """
        getkosselnamelist(nmlfile, knl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 747-817
        
        Parameters
        ----------
        nmlfile : str
        knl : Kosselnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getkosselnamelist(nmlfile=nmlfile, knl=knl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getkosselmasternamelist(nmlfile, knl, initonly=None):
        """
        getkosselmasternamelist(nmlfile, knl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 832-893
        
        Parameters
        ----------
        nmlfile : str
        knl : Kosselmasternamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getkosselmasternamelist(nmlfile=nmlfile, knl=knl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getcplmmasternamelist(nmlfile, omnl, initonly=None):
        """
        getcplmmasternamelist(nmlfile, omnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 908-971
        
        Parameters
        ----------
        nmlfile : str
        omnl : Cplmmasternamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getcplmmasternamelist(nmlfile=nmlfile, omnl=omnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getlauemasternamelist(nmlfile, lmnl, initonly=None):
        """
        getlauemasternamelist(nmlfile, lmnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 986-1074
        
        Parameters
        ----------
        nmlfile : str
        lmnl : Lauemasternamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getlauemasternamelist(nmlfile=nmlfile, lmnl=lmnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getlauenamelist(nmlfile, lnl, initonly=None):
        """
        getlauenamelist(nmlfile, lnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 1090-1169
        
        Parameters
        ----------
        nmlfile : str
        lnl : Lauenamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getlauenamelist(nmlfile=nmlfile, lnl=lnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getlaueslitnamelist(nmlfile, lnl, initonly=None):
        """
        getlaueslitnamelist(nmlfile, lnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 1185-1312
        
        Parameters
        ----------
        nmlfile : str
        lnl : Laueslitnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getlaueslitnamelist(nmlfile=nmlfile, lnl=lnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getcplmnamelist(nmlfile, omnl, initonly=None):
        """
        getcplmnamelist(nmlfile, omnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 1327-1377
        
        Parameters
        ----------
        nmlfile : str
        omnl : Cplmnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getcplmnamelist(nmlfile=nmlfile, omnl=omnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getmcnamelist(nmlfile, mcnl, initonly=None):
        """
        getmcnamelist(nmlfile, mcnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 1392-1464
        
        Parameters
        ----------
        nmlfile : str
        mcnl : Mcnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getmcnamelist(nmlfile=nmlfile, mcnl=mcnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getmclipssnamelist(nmlfile, mcnl, initonly=None):
        """
        getmclipssnamelist(nmlfile, mcnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 1479-1567
        
        Parameters
        ----------
        nmlfile : str
        mcnl : Mclipssnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getmclipssnamelist(nmlfile=nmlfile, mcnl=mcnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getconvertorientationsnamelist(nmlfile, enl, initonly=None):
        """
        getconvertorientationsnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 1582-1657
        
        Parameters
        ----------
        nmlfile : str
        enl : Convertorientationsnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getconvertorientationsnamelist(nmlfile=nmlfile, \
            enl=enl._handle, initonly=initonly)
    
    @staticmethod
    def getorientationviznamelist(nmlfile, enl, initonly=None):
        """
        getorientationviznamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 1673-1784
        
        Parameters
        ----------
        nmlfile : str
        enl : Orientationviznamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getorientationviznamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getmcclnamelist(nmlfile, mcnl, initonly=None, writetofile=None):
        """
        getmcclnamelist(nmlfile, mcnl[, initonly, writetofile])
        
        
        Defined at NameListHandlers.f90 lines 1801-1945
        
        Parameters
        ----------
        nmlfile : str
        mcnl : Mcclnamelisttype
        initonly : bool
        writetofile : str
        
        """
        _pyEMsoft.f90wrap_getmcclnamelist(nmlfile=nmlfile, mcnl=mcnl._handle, \
            initonly=initonly, writetofile=writetofile)
    
    @staticmethod
    def getmcclmultilayernamelist(nmlfile, mcnl, initonly=None):
        """
        getmcclmultilayernamelist(nmlfile, mcnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 1960-2045
        
        Parameters
        ----------
        nmlfile : str
        mcnl : Mcclmultilayernamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getmcclmultilayernamelist(nmlfile=nmlfile, mcnl=mcnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getdisorientationsnamelist(nmlfile, emnl, initonly=None):
        """
        getdisorientationsnamelist(nmlfile, emnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 2060-2100
        
        Parameters
        ----------
        nmlfile : str
        emnl : Disorientationsnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getdisorientationsnamelist(nmlfile=nmlfile, emnl=emnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getaverageorientationnamelist(nmlfile, emnl, initonly=None):
        """
        getaverageorientationnamelist(nmlfile, emnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 2115-2168
        
        Parameters
        ----------
        nmlfile : str
        emnl : Averageorientationnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getaverageorientationnamelist(nmlfile=nmlfile, \
            emnl=emnl._handle, initonly=initonly)
    
    @staticmethod
    def getorientationsimilaritynamelist(nmlfile, emnl, initonly=None):
        """
        getorientationsimilaritynamelist(nmlfile, emnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 2183-2220
        
        Parameters
        ----------
        nmlfile : str
        emnl : Orientationsimilaritynamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getorientationsimilaritynamelist(nmlfile=nmlfile, \
            emnl=emnl._handle, initonly=initonly)
    
    @staticmethod
    def getkamnamelist(nmlfile, emnl, initonly=None):
        """
        getkamnamelist(nmlfile, emnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 2235-2275
        
        Parameters
        ----------
        nmlfile : str
        emnl : Kamnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getkamnamelist(nmlfile=nmlfile, emnl=emnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getdvsdnamelist(nmlfile, emnl, initonly=None):
        """
        getdvsdnamelist(nmlfile, emnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 2290-2345
        
        Parameters
        ----------
        nmlfile : str
        emnl : Dvsdnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getdvsdnamelist(nmlfile=nmlfile, emnl=emnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getebsdmasternamelist(nmlfile, emnl, initonly=None):
        """
        getebsdmasternamelist(nmlfile, emnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 2362-2431
        
        Parameters
        ----------
        nmlfile : str
        emnl : Ebsdmasternamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getebsdmasternamelist(nmlfile=nmlfile, emnl=emnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def geteecmasternamelist(nmlfile, emnl, initonly=None):
        """
        geteecmasternamelist(nmlfile, emnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 2446-2504
        
        Parameters
        ----------
        nmlfile : str
        emnl : Eecmasternamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_geteecmasternamelist(nmlfile=nmlfile, emnl=emnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getebsdmastershtnamelist(nmlfile, emnl, initonly=None):
        """
        getebsdmastershtnamelist(nmlfile, emnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 2520-2593
        
        Parameters
        ----------
        nmlfile : str
        emnl : Ebsdmastershtnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getebsdmastershtnamelist(nmlfile=nmlfile, emnl=emnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getebsdsinglemasternamelist(nmlfile, emnl, initonly=None):
        """
        getebsdsinglemasternamelist(nmlfile, emnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 2608-2663
        
        Parameters
        ----------
        nmlfile : str
        emnl : Ebsdsinglemasternamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getebsdsinglemasternamelist(nmlfile=nmlfile, \
            emnl=emnl._handle, initonly=initonly)
    
    @staticmethod
    def getlocalosmmasternamelist(nmlfile, emnl, initonly=None):
        """
        getlocalosmmasternamelist(nmlfile, emnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 2678-2721
        
        Parameters
        ----------
        nmlfile : str
        emnl : Localosmnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getlocalosmmasternamelist(nmlfile=nmlfile, emnl=emnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def gettkdmasternamelist(nmlfile, emnl, initonly=None):
        """
        gettkdmasternamelist(nmlfile, emnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 2737-2790
        
        Parameters
        ----------
        nmlfile : str
        emnl : Tkdmasternamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_gettkdmasternamelist(nmlfile=nmlfile, emnl=emnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getebsdmasteropenclnamelist(nmlfile, emnl, initonly=None):
        """
        getebsdmasteropenclnamelist(nmlfile, emnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 2805-2863
        
        Parameters
        ----------
        nmlfile : str
        emnl : Ebsdmasteropenclnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getebsdmasteropenclnamelist(nmlfile=nmlfile, \
            emnl=emnl._handle, initonly=initonly)
    
    @staticmethod
    def getebsdclusternamelist(nmlfile, emnl, initonly=None):
        """
        getebsdclusternamelist(nmlfile, emnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 2878-2927
        
        Parameters
        ----------
        nmlfile : str
        emnl : Ebsdclusternamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getebsdclusternamelist(nmlfile=nmlfile, emnl=emnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getecpqcmasternamelist(nmlfile, ecpnl, initonly=None):
        """
        getecpqcmasternamelist(nmlfile, ecpnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 2945-2991
        
        Parameters
        ----------
        nmlfile : str
        ecpnl : Ecpqcmasternamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getecpqcmasternamelist(nmlfile=nmlfile, ecpnl=ecpnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getctemqcnamelist(nmlfile, ctemqcnl, initonly=None):
        """
        getctemqcnamelist(nmlfile, ctemqcnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 3009-3070
        
        Parameters
        ----------
        nmlfile : str
        ctemqcnl : Ctemqcnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getctemqcnamelist(nmlfile=nmlfile, ctemqcnl=ctemqcnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getecpmasternamelist(nmlfile, ecpnl, initonly=None):
        """
        getecpmasternamelist(nmlfile, ecpnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 3087-3146
        
        Parameters
        ----------
        nmlfile : str
        ecpnl : Ecpmasternamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getecpmasternamelist(nmlfile=nmlfile, ecpnl=ecpnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getreflectornamelist(nmlfile, rnl, initonly=None):
        """
        getreflectornamelist(nmlfile, rnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 3161-3213
        
        Parameters
        ----------
        nmlfile : str
        rnl : Reflectornamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getreflectornamelist(nmlfile=nmlfile, rnl=rnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getkinematicalnamelist(nmlfile, knl, initonly=None):
        """
        getkinematicalnamelist(nmlfile, knl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 3228-3274
        
        Parameters
        ----------
        nmlfile : str
        knl : Kinematicalnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getkinematicalnamelist(nmlfile=nmlfile, knl=knl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getebsdnamelist(nmlfile, enl, initonly=None):
        """
        getebsdnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 3290-3458
        
        Parameters
        ----------
        nmlfile : str
        enl : Ebsdnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getebsdnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getbsenamelist(nmlfile, enl, initonly=None):
        """
        getbsenamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 3473-3567
        
        Parameters
        ----------
        nmlfile : str
        enl : Bsenamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getbsenamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getebsddefectnamelist(nmlfile, enl, initonly=None):
        """
        getebsddefectnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 3582-3676
        
        Parameters
        ----------
        nmlfile : str
        enl : Ebsddefectnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getebsddefectnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getebsddenamelist(nmlfile, enl, de, p, initonly=None):
        """
        getebsddenamelist(nmlfile, enl, de, p[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 3691-3936
        
        Parameters
        ----------
        nmlfile : str
        enl : Ebsdnamelisttype
        de : Ebsddenamelisttype
        p : Ebsddipreviewnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getebsddenamelist(nmlfile=nmlfile, enl=enl._handle, \
            de=de._handle, p=p._handle, initonly=initonly)
    
    @staticmethod
    def gettkdnamelist(nmlfile, enl, initonly=None):
        """
        gettkdnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 3951-4077
        
        Parameters
        ----------
        nmlfile : str
        enl : Tkdnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_gettkdnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getebsdoverlapnamelist(nmlfile, enl, initonly=None):
        """
        getebsdoverlapnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 4093-4204
        
        Parameters
        ----------
        nmlfile : str
        enl : Ebsdoverlapnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getebsdoverlapnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def gettkdoverlapnamelist(nmlfile, enl, initonly=None):
        """
        gettkdoverlapnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 4219-4289
        
        Parameters
        ----------
        nmlfile : str
        enl : Tkdoverlapnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_gettkdoverlapnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def gettkdspotsnamelist(nmlfile, enl, initonly=None):
        """
        gettkdspotsnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 4304-4390
        
        Parameters
        ----------
        nmlfile : str
        enl : Tkdspotsnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_gettkdspotsnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getecpzanamelist(nmlfile, ecpnl, initonly=None):
        """
        getecpzanamelist(nmlfile, ecpnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 4405-4458
        
        Parameters
        ----------
        nmlfile : str
        ecpnl : Ecpzanamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getecpzanamelist(nmlfile=nmlfile, ecpnl=ecpnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getecpnamelist(nmlfile, ecpnl, initonly=None):
        """
        getecpnamelist(nmlfile, ecpnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 4475-4589
        
        Parameters
        ----------
        nmlfile : str
        ecpnl : Ecpnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getecpnamelist(nmlfile=nmlfile, ecpnl=ecpnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getlacbednamelist(nmlfile, lacbednl, initonly=None):
        """
        getlacbednamelist(nmlfile, lacbednl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 4604-4671
        
        Parameters
        ----------
        nmlfile : str
        lacbednl : Lacbednamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getlacbednamelist(nmlfile=nmlfile, lacbednl=lacbednl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getcbednamelist(nmlfile, cbednl, initonly=None):
        """
        getcbednamelist(nmlfile, cbednl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 4686-4753
        
        Parameters
        ----------
        nmlfile : str
        cbednl : Cbednamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getcbednamelist(nmlfile=nmlfile, cbednl=cbednl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getecppatternnamelist(nmlfile, ecpnl, initonly=None):
        """
        getecppatternnamelist(nmlfile, ecpnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 4768-4811
        
        Parameters
        ----------
        nmlfile : str
        ecpnl : Ecppatternnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getecppatternnamelist(nmlfile=nmlfile, ecpnl=ecpnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getpedkinnamelist(nmlfile, pednl, initonly=None):
        """
        getpedkinnamelist(nmlfile, pednl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 4826-4888
        
        Parameters
        ----------
        nmlfile : str
        pednl : Pedkinnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getpedkinnamelist(nmlfile=nmlfile, pednl=pednl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getpedzanamelist(nmlfile, pednl, initonly=None):
        """
        getpedzanamelist(nmlfile, pednl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 4903-4977
        
        Parameters
        ----------
        nmlfile : str
        pednl : Pedzanamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getpedzanamelist(nmlfile=nmlfile, pednl=pednl._handle, \
            initonly=initonly)
    
    @staticmethod
    def geteccinamelist(nmlfile, eccinl, initonly=None):
        """
        geteccinamelist(nmlfile, eccinl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 4993-5098
        
        Parameters
        ----------
        nmlfile : str
        eccinl : Eccinamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_geteccinamelist(nmlfile=nmlfile, eccinl=eccinl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getrfznamelist(nmlfile, rfznl, initonly=None):
        """
        getrfznamelist(nmlfile, rfznl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 5117-5187
        
        Parameters
        ----------
        nmlfile : str
        rfznl : Rfznamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getrfznamelist(nmlfile=nmlfile, rfznl=rfznl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getdictindxopenclnamelist(nmlfile, dictindxnl, initonly=None):
        """
        getdictindxopenclnamelist(nmlfile, dictindxnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 5202-5283
        
        Parameters
        ----------
        nmlfile : str
        dictindxnl : Dictindxopencllisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getdictindxopenclnamelist(nmlfile=nmlfile, \
            dictindxnl=dictindxnl._handle, initonly=initonly)
    
    @staticmethod
    def getpedindxnamelist(nmlfile, pednl, initonly=None):
        """
        getpedindxnamelist(nmlfile, pednl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 5298-5403
        
        Parameters
        ----------
        nmlfile : str
        pednl : Pedkinindxlisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getpedindxnamelist(nmlfile=nmlfile, pednl=pednl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getebsddipreviewnamelist(nmlfile, enl, initonly=None):
        """
        getebsddipreviewnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 5418-5503
        
        Parameters
        ----------
        nmlfile : str
        enl : Ebsddipreviewnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getebsddipreviewnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getebsdindexingnamelist(nmlfile, enl, initonly=None):
        """
        getebsdindexingnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 5520-5756
        
        Parameters
        ----------
        nmlfile : str
        enl : Ebsdindexingnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getebsdindexingnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getadpnamelist(nmlfile, adpnl, initonly=None):
        """
        getadpnamelist(nmlfile, adpnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 5949-6041
        
        Parameters
        ----------
        nmlfile : str
        adpnl : Adpnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getadpnamelist(nmlfile=nmlfile, adpnl=adpnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getosmnamelist(nmlfile, osmnl, initonly=None):
        """
        getosmnamelist(nmlfile, osmnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 6056-6093
        
        Parameters
        ----------
        nmlfile : str
        osmnl : Osmnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getosmnamelist(nmlfile=nmlfile, osmnl=osmnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getdpmergenamelist(nmlfile, dpmnl, initonly=None):
        """
        getdpmergenamelist(nmlfile, dpmnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 6108-6157
        
        Parameters
        ----------
        nmlfile : str
        dpmnl : Dpmergenamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getdpmergenamelist(nmlfile=nmlfile, dpmnl=dpmnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def gettkdindexingnamelist(nmlfile, enl, initonly=None):
        """
        gettkdindexingnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 6172-6373
        
        Parameters
        ----------
        nmlfile : str
        enl : Tkdindexingnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_gettkdindexingnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getzadefectnamelist(nmlfile, zadefect, initonly=None):
        """
        getzadefectnamelist(nmlfile, zadefect[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 6388-6497
        
        Parameters
        ----------
        nmlfile : str
        zadefect : Zadefectnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getzadefectnamelist(nmlfile=nmlfile, \
            zadefect=zadefect._handle, initonly=initonly)
    
    @staticmethod
    def getecpindexingnamelist(nmlfile, enl, initonly=None):
        """
        getecpindexingnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 6513-6611
        
        Parameters
        ----------
        nmlfile : str
        enl : Ecpindexingnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getecpindexingnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getemdpfit4namelist(nmlfile, enl, initonly=None):
        """
        getemdpfit4namelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 6626-6827
        
        Parameters
        ----------
        nmlfile : str
        enl : Emdpfit4Listtype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getemdpfit4namelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getemdpfitnamelist(nmlfile, enl, initonly=None):
        """
        getemdpfitnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 6842-6989
        
        Parameters
        ----------
        nmlfile : str
        enl : Emdpfitlisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getemdpfitnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getecpsinglenamelist(nmlfile, enl, initonly=None):
        """
        getecpsinglenamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 7004-7073
        
        Parameters
        ----------
        nmlfile : str
        enl : Ecpsinglenamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getecpsinglenamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getstemdcinamelist(nmlfile, dcinl, initonly=None):
        """
        getstemdcinamelist(nmlfile, dcinl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 7087-7167
        
        Parameters
        ----------
        nmlfile : str
        dcinl : Stemdcinamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getstemdcinamelist(nmlfile=nmlfile, dcinl=dcinl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getstemgeometrynamelist(nmlfile, dcinl, initonly=None):
        """
        getstemgeometrynamelist(nmlfile, dcinl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 7181-7236
        
        Parameters
        ----------
        nmlfile : str
        dcinl : Stemgeometrynamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getstemgeometrynamelist(nmlfile=nmlfile, dcinl=dcinl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getrefineorientationnamelist(nmlfile, enl, initonly=None):
        """
        getrefineorientationnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 7251-7328
        
        Parameters
        ----------
        nmlfile : str
        enl : Refineorientationtype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getrefineorientationnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getfitalphavariantsnamelist(nmlfile, enl, initonly=None):
        """
        getfitalphavariantsnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 7343-7393
        
        Parameters
        ----------
        nmlfile : str
        enl : Fitalphavarianttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getfitalphavariantsnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getfitorientationpsnamelist(nmlfile, enl, initonly=None):
        """
        getfitorientationpsnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 7408-7458
        
        Parameters
        ----------
        nmlfile : str
        enl : Fitorientationpstype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getfitorientationpsnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getrefinemartensitenamelist(nmlfile, enl, initonly=None):
        """
        getrefinemartensitenamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 7473-7527
        
        Parameters
        ----------
        nmlfile : str
        enl : Refinemartensitetype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getrefinemartensitenamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getmcclspherenamelist(nmlfile, mcnl, initonly=None):
        """
        getmcclspherenamelist(nmlfile, mcnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 7542-7639
        
        Parameters
        ----------
        nmlfile : str
        mcnl : Mcclnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getmcclspherenamelist(nmlfile=nmlfile, mcnl=mcnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getmcclfoilnamelist(nmlfile, mcnl, initonly=None):
        """
        getmcclfoilnamelist(nmlfile, mcnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 7654-7738
        
        Parameters
        ----------
        nmlfile : str
        mcnl : Mcclnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getmcclfoilnamelist(nmlfile=nmlfile, mcnl=mcnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getebsdfullnamelist(nmlfile, enl, initonly=None):
        """
        getebsdfullnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 7753-7887
        
        Parameters
        ----------
        nmlfile : str
        enl : Ebsdfullnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getebsdfullnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getsrdefectnamelist(nmlfile, srdnl, initonly=None):
        """
        getsrdefectnamelist(nmlfile, srdnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 7901-8010
        
        Parameters
        ----------
        nmlfile : str
        srdnl : Srdefectnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getsrdefectnamelist(nmlfile=nmlfile, srdnl=srdnl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getpfinversionnamelist(nmlfile, epf, initonly=None):
        """
        getpfinversionnamelist(nmlfile, epf[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 8025-8075
        
        Parameters
        ----------
        nmlfile : str
        epf : Pfinversionnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getpfinversionnamelist(nmlfile=nmlfile, epf=epf._handle, \
            initonly=initonly)
    
    @staticmethod
    def getemgammanamelist(nmlfile, epf, initonly=None):
        """
        getemgammanamelist(nmlfile, epf[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 8090-8158
        
        Parameters
        ----------
        nmlfile : str
        epf : Emgammanamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getemgammanamelist(nmlfile=nmlfile, epf=epf._handle, \
            initonly=initonly)
    
    @staticmethod
    def getemgammaopenclnamelist(nmlfile, epf, initonly=None):
        """
        getemgammaopenclnamelist(nmlfile, epf[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 8173-8236
        
        Parameters
        ----------
        nmlfile : str
        epf : Emgammaopenclnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getemgammaopenclnamelist(nmlfile=nmlfile, epf=epf._handle, \
            initonly=initonly)
    
    @staticmethod
    def getemtwophasenamelist(nmlfile, enl, initonly=None):
        """
        getemtwophasenamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 8251-8301
        
        Parameters
        ----------
        nmlfile : str
        enl : Emtwophasenamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getemtwophasenamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getmdelectronpropnamelist(nmlfile, enl, initonly=None):
        """
        getmdelectronpropnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 8316-8385
        
        Parameters
        ----------
        nmlfile : str
        enl : Mdelectronpropnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getmdelectronpropnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getemgammastemnamelist(nmlfile, epf, initonly=None):
        """
        getemgammastemnamelist(nmlfile, epf[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 8400-8457
        
        Parameters
        ----------
        nmlfile : str
        epf : Emgammastemnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getemgammastemnamelist(nmlfile=nmlfile, epf=epf._handle, \
            initonly=initonly)
    
    @staticmethod
    def getemtgbstemnamelist(nmlfile, epf, initonly=None):
        """
        getemtgbstemnamelist(nmlfile, epf[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 8472-8526
        
        Parameters
        ----------
        nmlfile : str
        epf : Emtgbstemnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getemtgbstemnamelist(nmlfile=nmlfile, epf=epf._handle, \
            initonly=initonly)
    
    @staticmethod
    def getemcbedqcnamelist(nmlfile, enl, initonly=None):
        """
        getemcbedqcnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 8541-8588
        
        Parameters
        ----------
        nmlfile : str
        enl : Emcbedqcnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getemcbedqcnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getemcbed2dqcnamelist(nmlfile, enl, initonly=None):
        """
        getemcbed2dqcnamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 8603-8652
        
        Parameters
        ----------
        nmlfile : str
        enl : Emcbed2Dqcnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getemcbed2dqcnamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getebsdqcmasternamelist(nmlfile, enl, initonly=None):
        """
        getebsdqcmasternamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 8667-8705
        
        Parameters
        ----------
        nmlfile : str
        enl : Ebsdqcmasternamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getebsdqcmasternamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getebsd2dqcmasternamelist(nmlfile, enl, initonly=None):
        """
        getebsd2dqcmasternamelist(nmlfile, enl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 8720-8769
        
        Parameters
        ----------
        nmlfile : str
        enl : Ebsd2Dqcmasternamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getebsd2dqcmasternamelist(nmlfile=nmlfile, enl=enl._handle, \
            initonly=initonly)
    
    @staticmethod
    def getemmdstemnamelist(nmlfile, msnml, initonly=None):
        """
        getemmdstemnamelist(nmlfile, msnml[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 8781-8867
        
        Parameters
        ----------
        nmlfile : str
        msnml : Emmdstemnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getemmdstemnamelist(nmlfile=nmlfile, msnml=msnml._handle, \
            initonly=initonly)
    
    @staticmethod
    def getemintegratestemnamelist(nmlfile, isnml, initonly=None):
        """
        getemintegratestemnamelist(nmlfile, isnml[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 8879-8926
        
        Parameters
        ----------
        nmlfile : str
        isnml : Emintegratestemnamelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getemintegratestemnamelist(nmlfile=nmlfile, \
            isnml=isnml._handle, initonly=initonly)
    
    @staticmethod
    def getemhh4namelist(nmlfile, hhnl, initonly=None):
        """
        getemhh4namelist(nmlfile, hhnl[, initonly])
        
        
        Defined at NameListHandlers.f90 lines 8942-9091
        
        Parameters
        ----------
        nmlfile : str
        hhnl : Emhh4Namelisttype
        initonly : bool
        
        """
        _pyEMsoft.f90wrap_getemhh4namelist(nmlfile=nmlfile, hhnl=hhnl._handle, \
            initonly=initonly)
    
    _dt_array_initialisers = []
    

namelisthandlers = Namelisthandlers()

class Timing(f90wrap.runtime.FortranModule):
    """
    Module timing
    
    
    Defined at timing.f90 lines 42-302
    
    """
    @staticmethod
    def time_tick():
        """
        t = time_tick()
        
        
        Defined at timing.f90 lines 58-62
        
        
        Returns
        -------
        t : int
        
        """
        t = _pyEMsoft.f90wrap_time_tick()
        return t
    
    @staticmethod
    def time_tock(t):
        """
        tock = time_tock(t)
        
        
        Defined at timing.f90 lines 74-81
        
        Parameters
        ----------
        t : int
        
        Returns
        -------
        tock : float
        
        """
        tock = _pyEMsoft.f90wrap_time_tock(t=t)
        return tock
    
    @staticmethod
    def time_reset(self):
        """
        time_reset(self)
        
        
        Defined at timing.f90 lines 95-107
        
        Parameters
        ----------
        tt : Timetype
        
        """
        _pyEMsoft.f90wrap_time_reset(tt=self._handle)
    
    @staticmethod
    def time_report(self, interval):
        """
        time_report(self, interval)
        
        
        Defined at timing.f90 lines 124-132
        
        Parameters
        ----------
        tt : Timetype
        interval : float
        
        """
        _pyEMsoft.f90wrap_time_report(tt=self._handle, interval=interval)
    
    @staticmethod
    def time_start(self):
        """
        time_start(self)
        
        
        Defined at timing.f90 lines 146-153
        
        Parameters
        ----------
        tt : Timetype
        
        """
        _pyEMsoft.f90wrap_time_start(tt=self._handle)
    
    @staticmethod
    def time_estimate(self, numk):
        """
        time_estimate(self, numk)
        
        
        Defined at timing.f90 lines 170-186
        
        Parameters
        ----------
        tt : Timetype
        numk : int
        
        """
        _pyEMsoft.f90wrap_time_estimate(tt=self._handle, numk=numk)
    
    @staticmethod
    def time_remaining(self, ik, numk):
        """
        time_remaining(self, ik, numk)
        
        
        Defined at timing.f90 lines 204-233
        
        Parameters
        ----------
        tt : Timetype
        ik : int
        numk : int
        
        """
        _pyEMsoft.f90wrap_time_remaining(tt=self._handle, ik=ik, numk=numk)
    
    @staticmethod
    def printtime(tm):
        """
        printtime(tm)
        
        
        Defined at timing.f90 lines 249-273
        
        Parameters
        ----------
        tm : float
        
        """
        _pyEMsoft.f90wrap_printtime(tm=tm)
    
    @staticmethod
    def time_stop(self, numk):
        """
        time_stop(self, numk)
        
        
        Defined at timing.f90 lines 290-302
        
        Parameters
        ----------
        tt : Timetype
        numk : int
        
        """
        _pyEMsoft.f90wrap_time_stop(tt=self._handle, numk=numk)
    
    _dt_array_initialisers = []
    

timing = Timing()

class Commonmod(f90wrap.runtime.FortranModule):
    """
    Module commonmod
    
    
    Defined at commonmod.f90 lines 1-539
    
    """
    @staticmethod
    def ebsdgetaverageorientations(ipar, eulers, tmi, dplist, aveuler, \
        disorient=None):
        """
        ebsdgetaverageorientations(ipar, eulers, tmi, dplist, aveuler[, disorient])
        
        
        Defined at commonmod.f90 lines 155-271
        
        Parameters
        ----------
        ipar : int array
        eulers : float array
        tmi : int array
        dplist : float array
        aveuler : float array
        disorient : float array
        
        ===================================
         set up the symmetry quaternions for this rotational symmetry
         allocate the dict structure
        """
        _pyEMsoft.f90wrap_ebsdgetaverageorientations(ipar=ipar, eulers=eulers, tmi=tmi, \
            dplist=dplist, aveuler=aveuler, disorient=disorient)
    
    @staticmethod
    def ebsdgetorientationsimilaritymap(idims, tmi, nm, ipf_wd, ipf_ht, osm):
        """
        ebsdgetorientationsimilaritymap(idims, tmi, nm, ipf_wd, ipf_ht, osm)
        
        
        Defined at commonmod.f90 lines 290-371
        
        Parameters
        ----------
        idims : int array
        tmi : int array
        nm : int
        ipf_wd : int
        ipf_ht : int
        osm : float array
        
        """
        _pyEMsoft.f90wrap_ebsdgetorientationsimilaritymap(idims=idims, tmi=tmi, nm=nm, \
            ipf_wd=ipf_wd, ipf_ht=ipf_ht, osm=osm)
    
    @staticmethod
    def ebsdgetindexingsuccessmap(ipar, tmi, ea, ebsdnl, ism):
        """
        ebsdgetindexingsuccessmap(ipar, tmi, ea, ebsdnl, ism)
        
        
        Defined at commonmod.f90 lines 389-443
        
        Parameters
        ----------
        ipar : int array
        tmi : int array
        ea : float array
        ebsdnl : Ebsdindexingnamelisttype
        ism : float array
        
        """
        _pyEMsoft.f90wrap_ebsdgetindexingsuccessmap(ipar=ipar, tmi=tmi, ea=ea, \
            ebsdnl=ebsdnl._handle, ism=ism)
    
    @staticmethod
    def ebsdgetkammap(numeu, eulers, ipf_wd, ipf_ht, dict, kam):
        """
        ebsdgetkammap(numeu, eulers, ipf_wd, ipf_ht, dict, kam)
        
        
        Defined at commonmod.f90 lines 463-539
        
        Parameters
        ----------
        numeu : int
        eulers : float array
        ipf_wd : int
        ipf_ht : int
        dict : Dicttype
        kam : float array
        
        """
        _pyEMsoft.f90wrap_ebsdgetkammap(numeu=numeu, eulers=eulers, ipf_wd=ipf_wd, \
            ipf_ht=ipf_ht, dict=dict._handle, kam=kam)
    
    _dt_array_initialisers = []
    

commonmod = Commonmod()

class Hdfsupport(f90wrap.runtime.FortranModule):
    """
    Module hdfsupport
    
    
    Defined at HDFsupport.f90 lines 66-5773
    
    """
    @f90wrap.runtime.register_class("pyEMsoft.HDFobjectStackType")
    class HDFobjectStackType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=hdfobjectstacktype)
        
        
        Defined at HDFsupport.f90 lines 97-101
        
        """
        def __init__(self, handle=None):
            """
            self = Hdfobjectstacktype()
            
            
            Defined at HDFsupport.f90 lines 97-101
            
            
            Returns
            -------
            this : Hdfobjectstacktype
            	Object to be constructed
            
            
            Automatically generated constructor for hdfobjectstacktype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_hdfobjectstacktype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Hdfobjectstacktype
            
            
            Defined at HDFsupport.f90 lines 97-101
            
            Parameters
            ----------
            this : Hdfobjectstacktype
            	Object to be destructed
            
            
            Automatically generated destructor for hdfobjectstacktype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_hdfobjectstacktype_finalise(this=self._handle)
        
        @property
        def objecttype(self):
            """
            Element objecttype ftype=character(len=1) pytype=str
            
            
            Defined at HDFsupport.f90 line 98
            
            """
            return _pyEMsoft.f90wrap_hdfobjectstacktype__get__objecttype(self._handle)
        
        @objecttype.setter
        def objecttype(self, objecttype):
            _pyEMsoft.f90wrap_hdfobjectstacktype__set__objecttype(self._handle, objecttype)
        
        @property
        def objectname(self):
            """
            Element objectname ftype=character(fnlen) pytype=str
            
            
            Defined at HDFsupport.f90 line 99
            
            """
            return _pyEMsoft.f90wrap_hdfobjectstacktype__get__objectname(self._handle)
        
        @objectname.setter
        def objectname(self, objectname):
            _pyEMsoft.f90wrap_hdfobjectstacktype__set__objectname(self._handle, objectname)
        
        @property
        def objectid(self):
            """
            Element objectid ftype=integer(hid_t) pytype=int
            
            
            Defined at HDFsupport.f90 line 100
            
            """
            return _pyEMsoft.f90wrap_hdfobjectstacktype__get__objectid(self._handle)
        
        @objectid.setter
        def objectid(self, objectid):
            _pyEMsoft.f90wrap_hdfobjectstacktype__set__objectid(self._handle, objectid)
        
        @property
        def next(self):
            """
            Element next ftype=type(hdfobjectstacktype) pytype=Hdfobjectstacktype
            
            
            Defined at HDFsupport.f90 line 101
            
            """
            next_handle = _pyEMsoft.f90wrap_hdfobjectstacktype__get__next(self._handle)
            if tuple(next_handle) in self._objs:
                next = self._objs[tuple(next_handle)]
            else:
                next = hdfsupport.HDFobjectStackType.from_handle(next_handle)
                self._objs[tuple(next_handle)] = next
            return next
        
        @next.setter
        def next(self, next):
            next = next._handle
            _pyEMsoft.f90wrap_hdfobjectstacktype__set__next(self._handle, next)
        
        def __str__(self):
            ret = ['<hdfobjectstacktype>{\n']
            ret.append('    objecttype : ')
            ret.append(repr(self.objecttype))
            ret.append(',\n    objectname : ')
            ret.append(repr(self.objectname))
            ret.append(',\n    objectid : ')
            ret.append(repr(self.objectid))
            ret.append(',\n    next : ')
            ret.append(repr(self.next))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @staticmethod
    def h5open_emsoft(hdferr):
        """
        h5open_emsoft(hdferr)
        
        
        Defined at HDFsupport.f90 lines 118-132
        
        Parameters
        ----------
        hdferr : int
        
        """
        _pyEMsoft.f90wrap_h5open_emsoft(hdferr=hdferr)
    
    @staticmethod
    def h5close_emsoft(hdferr):
        """
        h5close_emsoft(hdferr)
        
        
        Defined at HDFsupport.f90 lines 146-158
        
        Parameters
        ----------
        hdferr : int
        
        """
        _pyEMsoft.f90wrap_h5close_emsoft(hdferr=hdferr)
    
    @staticmethod
    def cstringify(strin):
        """
        cstrout = cstringify(strin)
        
        
        Defined at HDFsupport.f90 lines 173-186
        
        Parameters
        ----------
        strin : str
        
        Returns
        -------
        cstrout : str
        
        """
        cstrout = _pyEMsoft.f90wrap_cstringify(strin=strin)
        return cstrout
    
    @staticmethod
    def fstringify(strin):
        """
        fstrout = fstringify(strin)
        
        
        Defined at HDFsupport.f90 lines 229-240
        
        Parameters
        ----------
        strin : str array
        
        Returns
        -------
        fstrout : str
        
        """
        fstrout = _pyEMsoft.f90wrap_fstringify(strin=strin)
        return fstrout
    
    @staticmethod
    def hdf_writeemheader(self, dstr, tstrb, tstre, prn, dataname=None):
        """
        hdf_writeemheader(self, dstr, tstrb, tstre, prn[, dataname])
        
        
        Defined at HDFsupport.f90 lines 279-429
        
        Parameters
        ----------
        hdf_head : Hdfobjectstacktype
        dstr : str
        tstrb : str
        tstre : str
        prn : str
        dataname : str
        
        """
        _pyEMsoft.f90wrap_hdf_writeemheader(hdf_head=self._handle, dstr=dstr, \
            tstrb=tstrb, tstre=tstre, prn=prn, dataname=dataname)
    
    @staticmethod
    def hdf_pop(self, closeall=None, verbose=None):
        """
        hdf_pop(self[, closeall, verbose])
        
        
        Defined at HDFsupport.f90 lines 506-569
        
        Parameters
        ----------
        hdf_head : Hdfobjectstacktype
        closeall : bool
        verbose : bool
        
        """
        _pyEMsoft.f90wrap_hdf_pop(hdf_head=self._handle, closeall=closeall, \
            verbose=verbose)
    
    @staticmethod
    def hdf_stackdump(self):
        """
        hdf_stackdump(self)
        
        
        Defined at HDFsupport.f90 lines 583-603
        
        Parameters
        ----------
        hdf_head : Hdfobjectstacktype
        
        """
        _pyEMsoft.f90wrap_hdf_stackdump(hdf_head=self._handle)
    
    @staticmethod
    def hdferror_check(offendingroutine, error, fatal=None):
        """
        hdferror_check(offendingroutine, error[, fatal])
        
        
        Defined at HDFsupport.f90 lines 620-636
        
        Parameters
        ----------
        offendingroutine : str
        error : int
        fatal : bool
        
        """
        _pyEMsoft.f90wrap_hdferror_check(offendingroutine=offendingroutine, error=error, \
            fatal=fatal)
    
    @staticmethod
    def hdf_handleerror(error, offendingroutine, nonfatal=None):
        """
        hdf_handleerror(error, offendingroutine[, nonfatal])
        
        
        Defined at HDFsupport.f90 lines 653-667
        
        Parameters
        ----------
        error : int
        offendingroutine : str
        nonfatal : bool
        
        """
        _pyEMsoft.f90wrap_hdf_handleerror(error=error, \
            offendingroutine=offendingroutine, nonfatal=nonfatal)
    
    @staticmethod
    def hdf_createfile(hdfname, hdf_head):
        """
        success = hdf_createfile(hdfname, hdf_head)
        
        
        Defined at HDFsupport.f90 lines 689-709
        
        Parameters
        ----------
        hdfname : str
        hdf_head : Hdfobjectstacktype
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_createfile(hdfname=hdfname, \
            hdf_head=hdf_head._handle)
        return success
    
    @staticmethod
    def hdf_openfile(hdfname, hdf_head, readonly=None):
        """
        success = hdf_openfile(hdfname, hdf_head[, readonly])
        
        
        Defined at HDFsupport.f90 lines 725-750
        
        Parameters
        ----------
        hdfname : str
        hdf_head : Hdfobjectstacktype
        readonly : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_openfile(hdfname=hdfname, \
            hdf_head=hdf_head._handle, readonly=readonly)
        return success
    
    @staticmethod
    def hdf_creategroup(groupname, hdf_head):
        """
        success = hdf_creategroup(groupname, hdf_head)
        
        
        Defined at HDFsupport.f90 lines 765-797
        
        Parameters
        ----------
        groupname : str
        hdf_head : Hdfobjectstacktype
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_creategroup(groupname=groupname, \
            hdf_head=hdf_head._handle)
        return success
    
    @staticmethod
    def hdf_opengroup(groupname, hdf_head):
        """
        success = hdf_opengroup(groupname, hdf_head)
        
        
        Defined at HDFsupport.f90 lines 812-830
        
        Parameters
        ----------
        groupname : str
        hdf_head : Hdfobjectstacktype
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_opengroup(groupname=groupname, \
            hdf_head=hdf_head._handle)
        return success
    
    @staticmethod
    def hdf_opendataset(dataname, hdf_head):
        """
        success = hdf_opendataset(dataname, hdf_head)
        
        
        Defined at HDFsupport.f90 lines 845-863
        
        Parameters
        ----------
        dataname : str
        hdf_head : Hdfobjectstacktype
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_opendataset(dataname=dataname, \
            hdf_head=hdf_head._handle)
        return success
    
    @staticmethod
    def hdf_writedatasettextfile(dataname, filename, hdf_head):
        """
        success = hdf_writedatasettextfile(dataname, filename, hdf_head)
        
        
        Defined at HDFsupport.f90 lines 881-954
        
        Parameters
        ----------
        dataname : str
        filename : str
        hdf_head : Hdfobjectstacktype
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasettextfile(dataname=dataname, \
            filename=filename, hdf_head=hdf_head._handle)
        return success
    
    @staticmethod
    def hdf_extractdatasettextfile(dataname, textfile, hdf_head):
        """
        success = hdf_extractdatasettextfile(dataname, textfile, hdf_head)
        
        
        Defined at HDFsupport.f90 lines 1129-1190
        
        Parameters
        ----------
        dataname : str
        textfile : str
        hdf_head : Hdfobjectstacktype
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_extractdatasettextfile(dataname=dataname, \
            textfile=textfile, hdf_head=hdf_head._handle)
        return success
    
    @staticmethod
    def hdf_writedatasetstringarray(dataname, inputarray, nlines, hdf_head, \
        overwrite=None):
        """
        success = hdf_writedatasetstringarray(dataname, inputarray, nlines, hdf_head[, \
            overwrite])
        
        
        Defined at HDFsupport.f90 lines 1209-1287
        
        Parameters
        ----------
        dataname : str
        inputarray : str array
        nlines : int
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetstringarray(dataname=dataname, \
            inputarray=inputarray, nlines=nlines, hdf_head=hdf_head._handle, \
            overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetchararray1d(dataname, chararray, dims, hdf_head, \
        overwrite=None):
        """
        success = hdf_writedatasetchararray1d(dataname, chararray, dims, hdf_head[, \
            overwrite])
        
        
        Defined at HDFsupport.f90 lines 1305-1352
        
        Parameters
        ----------
        dataname : str
        chararray : str array
        dims : int array
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetchararray1d(dataname=dataname, \
            chararray=chararray, dims=dims, hdf_head=hdf_head._handle, \
            overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetchararray2d(dataname, chararray, dims, hdf_head, \
        overwrite=None):
        """
        success = hdf_writedatasetchararray2d(dataname, chararray, dims, hdf_head[, \
            overwrite])
        
        
        Defined at HDFsupport.f90 lines 1370-1416
        
        Parameters
        ----------
        dataname : str
        chararray : str array
        dims : int array
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetchararray2d(dataname=dataname, \
            chararray=chararray, dims=dims, hdf_head=hdf_head._handle, \
            overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetchararray3d(dataname, chararray, dims, hdf_head, \
        overwrite=None):
        """
        success = hdf_writedatasetchararray3d(dataname, chararray, dims, hdf_head[, \
            overwrite])
        
        
        Defined at HDFsupport.f90 lines 1434-1480
        
        Parameters
        ----------
        dataname : str
        chararray : str array
        dims : int array
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetchararray3d(dataname=dataname, \
            chararray=chararray, dims=dims, hdf_head=hdf_head._handle, \
            overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetchararray4d(dataname, chararray, dims, hdf_head, \
        overwrite=None):
        """
        success = hdf_writedatasetchararray4d(dataname, chararray, dims, hdf_head[, \
            overwrite])
        
        
        Defined at HDFsupport.f90 lines 1498-1544
        
        Parameters
        ----------
        dataname : str
        chararray : str array
        dims : int array
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetchararray4d(dataname=dataname, \
            chararray=chararray, dims=dims, hdf_head=hdf_head._handle, \
            overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetinteger(dataname, intval, hdf_head, overwrite=None):
        """
        success = hdf_writedatasetinteger(dataname, intval, hdf_head[, overwrite])
        
        
        Defined at HDFsupport.f90 lines 1562-1612
        
        Parameters
        ----------
        dataname : str
        intval : int
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetinteger(dataname=dataname, \
            intval=intval, hdf_head=hdf_head._handle, overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetinteger1bytearray1d(dataname, intarr, dim0, hdf_head, \
        overwrite=None):
        """
        success = hdf_writedatasetinteger1bytearray1d(dataname, intarr, dim0, hdf_head[, \
            overwrite])
        
        
        Defined at HDFsupport.f90 lines 1630-1681
        
        Parameters
        ----------
        dataname : str
        intarr : int array
        dim0 : int
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = \
            _pyEMsoft.f90wrap_hdf_writedatasetinteger1bytearray1d(dataname=dataname, \
            intarr=intarr, dim0=dim0, hdf_head=hdf_head._handle, overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetintegerarray1d(dataname, intarr, dim0, hdf_head, \
        overwrite=None):
        """
        success = hdf_writedatasetintegerarray1d(dataname, intarr, dim0, hdf_head[, \
            overwrite])
        
        
        Defined at HDFsupport.f90 lines 1699-1752
        
        Parameters
        ----------
        dataname : str
        intarr : int array
        dim0 : int
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetintegerarray1d(dataname=dataname, \
            intarr=intarr, dim0=dim0, hdf_head=hdf_head._handle, overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetintegerarray2d(dataname, intarr, dim0, dim1, hdf_head, \
        overwrite=None):
        """
        success = hdf_writedatasetintegerarray2d(dataname, intarr, dim0, dim1, \
            hdf_head[, overwrite])
        
        
        Defined at HDFsupport.f90 lines 1770-1824
        
        Parameters
        ----------
        dataname : str
        intarr : int array
        dim0 : int
        dim1 : int
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetintegerarray2d(dataname=dataname, \
            intarr=intarr, dim0=dim0, dim1=dim1, hdf_head=hdf_head._handle, \
            overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetintegerarray3d(dataname, intarr, dim0, dim1, dim2, hdf_head, \
        overwrite=None):
        """
        success = hdf_writedatasetintegerarray3d(dataname, intarr, dim0, dim1, dim2, \
            hdf_head[, overwrite])
        
        
        Defined at HDFsupport.f90 lines 1842-1897
        
        Parameters
        ----------
        dataname : str
        intarr : int array
        dim0 : int
        dim1 : int
        dim2 : int
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetintegerarray3d(dataname=dataname, \
            intarr=intarr, dim0=dim0, dim1=dim1, dim2=dim2, hdf_head=hdf_head._handle, \
            overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetintegerarray4d(dataname, intarr, dim0, dim1, dim2, dim3, \
        hdf_head, overwrite=None):
        """
        success = hdf_writedatasetintegerarray4d(dataname, intarr, dim0, dim1, dim2, \
            dim3, hdf_head[, overwrite])
        
        
        Defined at HDFsupport.f90 lines 1915-1971
        
        Parameters
        ----------
        dataname : str
        intarr : int array
        dim0 : int
        dim1 : int
        dim2 : int
        dim3 : int
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetintegerarray4d(dataname=dataname, \
            intarr=intarr, dim0=dim0, dim1=dim1, dim2=dim2, dim3=dim3, \
            hdf_head=hdf_head._handle, overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetfloat(dataname, fltval, hdf_head, overwrite=None):
        """
        success = hdf_writedatasetfloat(dataname, fltval, hdf_head[, overwrite])
        
        
        Defined at HDFsupport.f90 lines 1989-2040
        
        Parameters
        ----------
        dataname : str
        fltval : float
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetfloat(dataname=dataname, \
            fltval=fltval, hdf_head=hdf_head._handle, overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetdouble(dataname, dblval, hdf_head, overwrite=None):
        """
        success = hdf_writedatasetdouble(dataname, dblval, hdf_head[, overwrite])
        
        
        Defined at HDFsupport.f90 lines 2058-2109
        
        Parameters
        ----------
        dataname : str
        dblval : float
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetdouble(dataname=dataname, \
            dblval=dblval, hdf_head=hdf_head._handle, overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetfloatarray1d(dataname, fltarr, dim0, hdf_head, \
        overwrite=None):
        """
        success = hdf_writedatasetfloatarray1d(dataname, fltarr, dim0, hdf_head[, \
            overwrite])
        
        
        Defined at HDFsupport.f90 lines 2127-2181
        
        Parameters
        ----------
        dataname : str
        fltarr : float array
        dim0 : int
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetfloatarray1d(dataname=dataname, \
            fltarr=fltarr, dim0=dim0, hdf_head=hdf_head._handle, overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetfloatarray2d(dataname, fltarr, dim0, dim1, hdf_head, \
        overwrite=None):
        """
        success = hdf_writedatasetfloatarray2d(dataname, fltarr, dim0, dim1, hdf_head[, \
            overwrite])
        
        
        Defined at HDFsupport.f90 lines 2199-2254
        
        Parameters
        ----------
        dataname : str
        fltarr : float array
        dim0 : int
        dim1 : int
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetfloatarray2d(dataname=dataname, \
            fltarr=fltarr, dim0=dim0, dim1=dim1, hdf_head=hdf_head._handle, \
            overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetfloatarray3d(dataname, fltarr, dim0, dim1, dim2, hdf_head, \
        overwrite=None):
        """
        success = hdf_writedatasetfloatarray3d(dataname, fltarr, dim0, dim1, dim2, \
            hdf_head[, overwrite])
        
        
        Defined at HDFsupport.f90 lines 2272-2328
        
        Parameters
        ----------
        dataname : str
        fltarr : float array
        dim0 : int
        dim1 : int
        dim2 : int
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetfloatarray3d(dataname=dataname, \
            fltarr=fltarr, dim0=dim0, dim1=dim1, dim2=dim2, hdf_head=hdf_head._handle, \
            overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetfloatarray4d(dataname, fltarr, dim0, dim1, dim2, dim3, \
        hdf_head, overwrite=None):
        """
        success = hdf_writedatasetfloatarray4d(dataname, fltarr, dim0, dim1, dim2, dim3, \
            hdf_head[, overwrite])
        
        
        Defined at HDFsupport.f90 lines 2346-2403
        
        Parameters
        ----------
        dataname : str
        fltarr : float array
        dim0 : int
        dim1 : int
        dim2 : int
        dim3 : int
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetfloatarray4d(dataname=dataname, \
            fltarr=fltarr, dim0=dim0, dim1=dim1, dim2=dim2, dim3=dim3, \
            hdf_head=hdf_head._handle, overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetfloatarray6d(dataname, fltarr, dim0, dim1, dim2, dim3, dim4, \
        dim5, hdf_head, overwrite=None):
        """
        success = hdf_writedatasetfloatarray6d(dataname, fltarr, dim0, dim1, dim2, dim3, \
            dim4, dim5, hdf_head[, overwrite])
        
        
        Defined at HDFsupport.f90 lines 2422-2480
        
        Parameters
        ----------
        dataname : str
        fltarr : float array
        dim0 : int
        dim1 : int
        dim2 : int
        dim3 : int
        dim4 : int
        dim5 : int
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetfloatarray6d(dataname=dataname, \
            fltarr=fltarr, dim0=dim0, dim1=dim1, dim2=dim2, dim3=dim3, dim4=dim4, \
            dim5=dim5, hdf_head=hdf_head._handle, overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetdoublearray1d(dataname, dblarr, dim0, hdf_head, \
        overwrite=None):
        """
        success = hdf_writedatasetdoublearray1d(dataname, dblarr, dim0, hdf_head[, \
            overwrite])
        
        
        Defined at HDFsupport.f90 lines 2498-2551
        
        Parameters
        ----------
        dataname : str
        dblarr : float array
        dim0 : int
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetdoublearray1d(dataname=dataname, \
            dblarr=dblarr, dim0=dim0, hdf_head=hdf_head._handle, overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetdoublearray2d(dataname, dblarr, dim0, dim1, hdf_head, \
        overwrite=None):
        """
        success = hdf_writedatasetdoublearray2d(dataname, dblarr, dim0, dim1, hdf_head[, \
            overwrite])
        
        
        Defined at HDFsupport.f90 lines 2569-2623
        
        Parameters
        ----------
        dataname : str
        dblarr : float array
        dim0 : int
        dim1 : int
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetdoublearray2d(dataname=dataname, \
            dblarr=dblarr, dim0=dim0, dim1=dim1, hdf_head=hdf_head._handle, \
            overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetdoublearray3d(dataname, dblarr, dim0, dim1, dim2, hdf_head, \
        overwrite=None):
        """
        success = hdf_writedatasetdoublearray3d(dataname, dblarr, dim0, dim1, dim2, \
            hdf_head[, overwrite])
        
        
        Defined at HDFsupport.f90 lines 2641-2696
        
        Parameters
        ----------
        dataname : str
        dblarr : float array
        dim0 : int
        dim1 : int
        dim2 : int
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetdoublearray3d(dataname=dataname, \
            dblarr=dblarr, dim0=dim0, dim1=dim1, dim2=dim2, hdf_head=hdf_head._handle, \
            overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_writedatasetdoublearray4d(dataname, dblarr, dim0, dim1, dim2, dim3, \
        hdf_head, overwrite=None):
        """
        success = hdf_writedatasetdoublearray4d(dataname, dblarr, dim0, dim1, dim2, \
            dim3, hdf_head[, overwrite])
        
        
        Defined at HDFsupport.f90 lines 2714-2770
        
        Parameters
        ----------
        dataname : str
        dblarr : float array
        dim0 : int
        dim1 : int
        dim2 : int
        dim3 : int
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writedatasetdoublearray4d(dataname=dataname, \
            dblarr=dblarr, dim0=dim0, dim1=dim1, dim2=dim2, dim3=dim3, \
            hdf_head=hdf_head._handle, overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_readdatasetinteger(dataname, hdf_head):
        """
        hdferr, rdata = hdf_readdatasetinteger(dataname, hdf_head)
        
        
        Defined at HDFsupport.f90 lines 3010-3040
        
        Parameters
        ----------
        dataname : str
        hdf_head : Hdfobjectstacktype
        
        Returns
        -------
        hdferr : int
        rdata : int
        
        """
        hdferr, rdata = _pyEMsoft.f90wrap_hdf_readdatasetinteger(dataname=dataname, \
            hdf_head=hdf_head._handle)
        return hdferr, rdata
    
    @staticmethod
    def hdf_readdatasetfloat(dataname, hdf_head):
        """
        hdferr, rdata = hdf_readdatasetfloat(dataname, hdf_head)
        
        
        Defined at HDFsupport.f90 lines 3274-3304
        
        Parameters
        ----------
        dataname : str
        hdf_head : Hdfobjectstacktype
        
        Returns
        -------
        hdferr : int
        rdata : float
        
        """
        hdferr, rdata = _pyEMsoft.f90wrap_hdf_readdatasetfloat(dataname=dataname, \
            hdf_head=hdf_head._handle)
        return hdferr, rdata
    
    @staticmethod
    def hdf_readdatasetdouble(dataname, hdf_head):
        """
        hdferr, rdata = hdf_readdatasetdouble(dataname, hdf_head)
        
        
        Defined at HDFsupport.f90 lines 3541-3571
        
        Parameters
        ----------
        dataname : str
        hdf_head : Hdfobjectstacktype
        
        Returns
        -------
        hdferr : int
        rdata : float
        
        """
        hdferr, rdata = _pyEMsoft.f90wrap_hdf_readdatasetdouble(dataname=dataname, \
            hdf_head=hdf_head._handle)
        return hdferr, rdata
    
    @staticmethod
    def hdf_writehyperslabchararray2d(dataname, wdata, hdims, offset, dims, \
        hdf_head, insert=None):
        """
        success = hdf_writehyperslabchararray2d(dataname, wdata, hdims, offset, dims, \
            hdf_head[, insert])
        
        
        Defined at HDFsupport.f90 lines 3822-3857
        
        Parameters
        ----------
        dataname : str
        wdata : str array
        hdims : int array
        offset : int array
        dims : int array
        hdf_head : Hdfobjectstacktype
        insert : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writehyperslabchararray2d(dataname=dataname, \
            wdata=wdata, hdims=hdims, offset=offset, dims=dims, \
            hdf_head=hdf_head._handle, insert=insert)
        return success
    
    @staticmethod
    def hdf_writehyperslabchararray3d(dataname, wdata, hdims, offset, dims, \
        hdf_head, insert=None):
        """
        success = hdf_writehyperslabchararray3d(dataname, wdata, hdims, offset, dims, \
            hdf_head[, insert])
        
        
        Defined at HDFsupport.f90 lines 3881-3914
        
        Parameters
        ----------
        dataname : str
        wdata : str array
        hdims : int array
        offset : int array
        dims : int array
        hdf_head : Hdfobjectstacktype
        insert : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writehyperslabchararray3d(dataname=dataname, \
            wdata=wdata, hdims=hdims, offset=offset, dims=dims, \
            hdf_head=hdf_head._handle, insert=insert)
        return success
    
    @staticmethod
    def hdf_writehyperslabchararray4d(dataname, wdata, hdims, offset, dims, \
        hdf_head, insert=None):
        """
        success = hdf_writehyperslabchararray4d(dataname, wdata, hdims, offset, dims, \
            hdf_head[, insert])
        
        
        Defined at HDFsupport.f90 lines 3938-3971
        
        Parameters
        ----------
        dataname : str
        wdata : str array
        hdims : int array
        offset : int array
        dims : int array
        hdf_head : Hdfobjectstacktype
        insert : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writehyperslabchararray4d(dataname=dataname, \
            wdata=wdata, hdims=hdims, offset=offset, dims=dims, \
            hdf_head=hdf_head._handle, insert=insert)
        return success
    
    @staticmethod
    def hdf_writehyperslabintegerarray2d(dataname, wdata, hdims, offset, dims, \
        hdf_head, insert=None):
        """
        success = hdf_writehyperslabintegerarray2d(dataname, wdata, hdims, offset, dims, \
            hdf_head[, insert])
        
        
        Defined at HDFsupport.f90 lines 3995-4027
        
        Parameters
        ----------
        dataname : str
        wdata : int array
        hdims : int array
        offset : int array
        dims : int array
        hdf_head : Hdfobjectstacktype
        insert : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writehyperslabintegerarray2d(dataname=dataname, \
            wdata=wdata, hdims=hdims, offset=offset, dims=dims, \
            hdf_head=hdf_head._handle, insert=insert)
        return success
    
    @staticmethod
    def hdf_writehyperslabintegerarray3d(dataname, wdata, hdims, offset, dims, \
        hdf_head, insert=None):
        """
        success = hdf_writehyperslabintegerarray3d(dataname, wdata, hdims, offset, dims, \
            hdf_head[, insert])
        
        
        Defined at HDFsupport.f90 lines 4051-4083
        
        Parameters
        ----------
        dataname : str
        wdata : int array
        hdims : int array
        offset : int array
        dims : int array
        hdf_head : Hdfobjectstacktype
        insert : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writehyperslabintegerarray3d(dataname=dataname, \
            wdata=wdata, hdims=hdims, offset=offset, dims=dims, \
            hdf_head=hdf_head._handle, insert=insert)
        return success
    
    @staticmethod
    def hdf_writehyperslabintegerarray4d(dataname, wdata, hdims, offset, dims, \
        hdf_head, insert=None):
        """
        success = hdf_writehyperslabintegerarray4d(dataname, wdata, hdims, offset, dims, \
            hdf_head[, insert])
        
        
        Defined at HDFsupport.f90 lines 4107-4139
        
        Parameters
        ----------
        dataname : str
        wdata : int array
        hdims : int array
        offset : int array
        dims : int array
        hdf_head : Hdfobjectstacktype
        insert : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writehyperslabintegerarray4d(dataname=dataname, \
            wdata=wdata, hdims=hdims, offset=offset, dims=dims, \
            hdf_head=hdf_head._handle, insert=insert)
        return success
    
    @staticmethod
    def hdf_writehyperslabfloatarray2d(dataname, wdata, hdims, offset, dims, \
        hdf_head, insert=None):
        """
        success = hdf_writehyperslabfloatarray2d(dataname, wdata, hdims, offset, dims, \
            hdf_head[, insert])
        
        
        Defined at HDFsupport.f90 lines 4163-4196
        
        Parameters
        ----------
        dataname : str
        wdata : float array
        hdims : int array
        offset : int array
        dims : int array
        hdf_head : Hdfobjectstacktype
        insert : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writehyperslabfloatarray2d(dataname=dataname, \
            wdata=wdata, hdims=hdims, offset=offset, dims=dims, \
            hdf_head=hdf_head._handle, insert=insert)
        return success
    
    @staticmethod
    def hdf_writehyperslabfloatarray3d(dataname, wdata, hdims, offset, dims, \
        hdf_head, insert=None):
        """
        success = hdf_writehyperslabfloatarray3d(dataname, wdata, hdims, offset, dims, \
            hdf_head[, insert])
        
        
        Defined at HDFsupport.f90 lines 4220-4253
        
        Parameters
        ----------
        dataname : str
        wdata : float array
        hdims : int array
        offset : int array
        dims : int array
        hdf_head : Hdfobjectstacktype
        insert : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writehyperslabfloatarray3d(dataname=dataname, \
            wdata=wdata, hdims=hdims, offset=offset, dims=dims, \
            hdf_head=hdf_head._handle, insert=insert)
        return success
    
    @staticmethod
    def hdf_writehyperslabfloatarray4d(dataname, wdata, hdims, offset, dims, \
        hdf_head, insert=None):
        """
        success = hdf_writehyperslabfloatarray4d(dataname, wdata, hdims, offset, dims, \
            hdf_head[, insert])
        
        
        Defined at HDFsupport.f90 lines 4277-4310
        
        Parameters
        ----------
        dataname : str
        wdata : float array
        hdims : int array
        offset : int array
        dims : int array
        hdf_head : Hdfobjectstacktype
        insert : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writehyperslabfloatarray4d(dataname=dataname, \
            wdata=wdata, hdims=hdims, offset=offset, dims=dims, \
            hdf_head=hdf_head._handle, insert=insert)
        return success
    
    @staticmethod
    def hdf_writehyperslabdoublearray2d(dataname, wdata, hdims, offset, dims, \
        hdf_head, insert=None):
        """
        success = hdf_writehyperslabdoublearray2d(dataname, wdata, hdims, offset, dims, \
            hdf_head[, insert])
        
        
        Defined at HDFsupport.f90 lines 4334-4367
        
        Parameters
        ----------
        dataname : str
        wdata : float array
        hdims : int array
        offset : int array
        dims : int array
        hdf_head : Hdfobjectstacktype
        insert : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writehyperslabdoublearray2d(dataname=dataname, \
            wdata=wdata, hdims=hdims, offset=offset, dims=dims, \
            hdf_head=hdf_head._handle, insert=insert)
        return success
    
    @staticmethod
    def hdf_writehyperslabdoublearray3d(dataname, wdata, hdims, offset, dims, \
        hdf_head, insert=None):
        """
        success = hdf_writehyperslabdoublearray3d(dataname, wdata, hdims, offset, dims, \
            hdf_head[, insert])
        
        
        Defined at HDFsupport.f90 lines 4391-4424
        
        Parameters
        ----------
        dataname : str
        wdata : float array
        hdims : int array
        offset : int array
        dims : int array
        hdf_head : Hdfobjectstacktype
        insert : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writehyperslabdoublearray3d(dataname=dataname, \
            wdata=wdata, hdims=hdims, offset=offset, dims=dims, \
            hdf_head=hdf_head._handle, insert=insert)
        return success
    
    @staticmethod
    def hdf_writehyperslabdoublearray4d(dataname, wdata, hdims, offset, dims, \
        hdf_head, insert=None):
        """
        success = hdf_writehyperslabdoublearray4d(dataname, wdata, hdims, offset, dims, \
            hdf_head[, insert])
        
        
        Defined at HDFsupport.f90 lines 4448-4481
        
        Parameters
        ----------
        dataname : str
        wdata : float array
        hdims : int array
        offset : int array
        dims : int array
        hdf_head : Hdfobjectstacktype
        insert : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_writehyperslabdoublearray4d(dataname=dataname, \
            wdata=wdata, hdims=hdims, offset=offset, dims=dims, \
            hdf_head=hdf_head._handle, insert=insert)
        return success
    
    @staticmethod
    def crystaldata(self, verbose=None, existinghdfhead=None):
        """
        crystaldata(self[, verbose, existinghdfhead])
        
        
        Defined at HDFsupport.f90 lines 5094-5134
        
        Parameters
        ----------
        cell : Unitcell
        verbose : bool
        existinghdfhead : Hdfobjectstacktype
        
        """
        _pyEMsoft.f90wrap_crystaldata(cell=self._handle, verbose=verbose, \
            existinghdfhead=None if existinghdfhead is None else \
            existinghdfhead._handle)
    
    @staticmethod
    def savedatahdf(self, existinghdfhead=None):
        """
        savedatahdf(self[, existinghdfhead])
        
        
        Defined at HDFsupport.f90 lines 5157-5253
        
        Parameters
        ----------
        cell : Unitcell
        existinghdfhead : Hdfobjectstacktype
        
        """
        _pyEMsoft.f90wrap_savedatahdf(cell=self._handle, existinghdfhead=None if \
            existinghdfhead is None else existinghdfhead._handle)
    
    @staticmethod
    def readdatahdf(self, existinghdfhead=None):
        """
        readdatahdf(self[, existinghdfhead])
        
        
        Defined at HDFsupport.f90 lines 5276-5383
        
        Parameters
        ----------
        cell : Unitcell
        existinghdfhead : Hdfobjectstacktype
        
        """
        _pyEMsoft.f90wrap_readdatahdf(cell=self._handle, existinghdfhead=None if \
            existinghdfhead is None else existinghdfhead._handle)
    
    @staticmethod
    def checkfixedlengthflag(dataset, hdf_head):
        """
        itis = checkfixedlengthflag(dataset, hdf_head)
        
        
        Defined at HDFsupport.f90 lines 5397-5419
        
        Parameters
        ----------
        dataset : str
        hdf_head : Hdfobjectstacktype
        
        Returns
        -------
        itis : bool
        
        """
        itis = _pyEMsoft.f90wrap_checkfixedlengthflag(dataset=dataset, \
            hdf_head=hdf_head._handle)
        return itis
    
    @staticmethod
    def resetfixedlengthflag():
        """
        resetfixedlengthflag()
        
        
        Defined at HDFsupport.f90 lines 5431-5433
        
        
        """
        _pyEMsoft.f90wrap_resetfixedlengthflag()
    
    @staticmethod
    def h5_write_pseudo_bse_image(fname, dsetnm, wdata):
        """
        hdferr = h5_write_pseudo_bse_image(fname, dsetnm, wdata)
        
        
        Defined at HDFsupport.f90 lines 5447-5485
        
        Parameters
        ----------
        fname : str
        dsetnm : str
        wdata : float array
        
        Returns
        -------
        hdferr : int
        
        """
        hdferr = _pyEMsoft.f90wrap_h5_write_pseudo_bse_image(fname=fname, dsetnm=dsetnm, \
            wdata=wdata)
        return hdferr
    
    @staticmethod
    def h5_tsl_read_ebsd_pattern(fname, dsetnm, rdata, offset, szx, szy):
        """
        hdferr = h5_tsl_read_ebsd_pattern(fname, dsetnm, rdata, offset, szx, szy)
        
        
        Defined at HDFsupport.f90 lines 5504-5550
        
        Parameters
        ----------
        fname : str
        dsetnm : str
        rdata : int array
        offset : int
        szx : int
        szy : int
        
        Returns
        -------
        hdferr : int
        
        """
        hdferr = _pyEMsoft.f90wrap_h5_tsl_read_ebsd_pattern(fname=fname, dsetnm=dsetnm, \
            rdata=rdata, offset=offset, szx=szx, szy=szy)
        return hdferr
    
    @staticmethod
    def h5_read_integer_dataset(fname, dsetnm):
        """
        hdferr, rdata = h5_read_integer_dataset(fname, dsetnm)
        
        
        Defined at HDFsupport.f90 lines 5565-5593
        
        Parameters
        ----------
        fname : str
        dsetnm : str
        
        Returns
        -------
        hdferr : int
        rdata : int
        
        """
        hdferr, rdata = _pyEMsoft.f90wrap_h5_read_integer_dataset(fname=fname, \
            dsetnm=dsetnm)
        return hdferr, rdata
    
    @staticmethod
    def hdf_addstringattributetogroup(dataname, stratt, hdf_head, overwrite=None):
        """
        success = hdf_addstringattributetogroup(dataname, stratt, hdf_head[, overwrite])
        
        
        Defined at HDFsupport.f90 lines 5611-5670
        
        Parameters
        ----------
        dataname : str
        stratt : str
        hdf_head : Hdfobjectstacktype
        overwrite : bool
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_addstringattributetogroup(dataname=dataname, \
            stratt=stratt, hdf_head=hdf_head._handle, overwrite=overwrite)
        return success
    
    @staticmethod
    def hdf_getstringattributefromgroup(dataname, stratt, slen_bn, hdf_head):
        """
        success = hdf_getstringattributefromgroup(dataname, stratt, slen_bn, hdf_head)
        
        
        Defined at HDFsupport.f90 lines 5688-5743
        
        Parameters
        ----------
        dataname : str
        stratt : str
        slen_bn : int
        hdf_head : Hdfobjectstacktype
        
        Returns
        -------
        success : int
        
        """
        success = _pyEMsoft.f90wrap_hdf_getstringattributefromgroup(dataname=dataname, \
            stratt=stratt, slen_bn=slen_bn, hdf_head=hdf_head._handle)
        return success
    
    @staticmethod
    def hdf_read2dimage(dataset, image, numx, numy, hdf_head):
        """
        hdf_read2dimage(dataset, image, numx, numy, hdf_head)
        
        
        Defined at HDFsupport.f90 lines 5755-5773
        
        Parameters
        ----------
        dataset : str
        image : int array
        numx : int
        numy : int
        hdf_head : Hdfobjectstacktype
        
        """
        _pyEMsoft.f90wrap_hdf_read2dimage(dataset=dataset, image=image, numx=numx, \
            numy=numy, hdf_head=hdf_head._handle)
    
    _dt_array_initialisers = []
    

hdfsupport = Hdfsupport()

class Utilities(f90wrap.runtime.FortranModule):
    """
    Module utilities
    
    
    Defined at utilities.f90 lines 40-117
    
    """
    @staticmethod
    def getxtaldata(xtalname, cellparams, tslsymmetry=None):
        """
        sgnum = getxtaldata(xtalname, cellparams[, tslsymmetry])
        
        
        Defined at utilities.f90 lines 60-117
        
        Parameters
        ----------
        xtalname : str
        cellparams : float array
        tslsymmetry : str
        
        Returns
        -------
        sgnum : int
        
        ==========================
        """
        sgnum = _pyEMsoft.f90wrap_getxtaldata(xtalname=xtalname, cellparams=cellparams, \
            tslsymmetry=tslsymmetry)
        return sgnum
    
    _dt_array_initialisers = []
    

utilities = Utilities()

class Ebsdmod(f90wrap.runtime.FortranModule):
    """
    Module ebsdmod
    
    
    Defined at EBSDmod.f90 lines 44-1430
    
    """
    @f90wrap.runtime.register_class("pyEMsoft.EBSDAngleType")
    class EBSDAngleType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdangletype)
        
        
        Defined at EBSDmod.f90 lines 49-50
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdangletype()
            
            
            Defined at EBSDmod.f90 lines 49-50
            
            
            Returns
            -------
            this : Ebsdangletype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdangletype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdangletype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdangletype
            
            
            Defined at EBSDmod.f90 lines 49-50
            
            Parameters
            ----------
            this : Ebsdangletype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdangletype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdangletype_finalise(this=self._handle)
        
        @property
        def quatang(self):
            """
            Element quatang ftype=real(kind=sgl) pytype=float
            
            
            Defined at EBSDmod.f90 line 50
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdangletype__array__quatang(self._handle)
            if array_handle in self._arrays:
                quatang = self._arrays[array_handle]
            else:
                quatang = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdangletype__array__quatang)
                self._arrays[array_handle] = quatang
            return quatang
        
        @quatang.setter
        def quatang(self, quatang):
            self.quatang[...] = quatang
        
        def __str__(self):
            ret = ['<ebsdangletype>{\n']
            ret.append('    quatang : ')
            ret.append(repr(self.quatang))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDAnglePCDefType")
    class EBSDAnglePCDefType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdanglepcdeftype)
        
        
        Defined at EBSDmod.f90 lines 52-58
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdanglepcdeftype()
            
            
            Defined at EBSDmod.f90 lines 52-58
            
            
            Returns
            -------
            this : Ebsdanglepcdeftype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdanglepcdeftype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdanglepcdeftype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdanglepcdeftype
            
            
            Defined at EBSDmod.f90 lines 52-58
            
            Parameters
            ----------
            this : Ebsdanglepcdeftype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdanglepcdeftype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdanglepcdeftype_finalise(this=self._handle)
        
        @property
        def quatang(self):
            """
            Element quatang ftype=real(kind=sgl) pytype=float
            
            
            Defined at EBSDmod.f90 line 53
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdanglepcdeftype__array__quatang(self._handle)
            if array_handle in self._arrays:
                quatang = self._arrays[array_handle]
            else:
                quatang = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdanglepcdeftype__array__quatang)
                self._arrays[array_handle] = quatang
            return quatang
        
        @quatang.setter
        def quatang(self, quatang):
            self.quatang[...] = quatang
        
        @property
        def quatangfield(self):
            """
            Element quatangfield ftype=real(kind=sgl) pytype=float
            
            
            Defined at EBSDmod.f90 line 54
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdanglepcdeftype__array__quatangfield(self._handle)
            if array_handle in self._arrays:
                quatangfield = self._arrays[array_handle]
            else:
                quatangfield = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdanglepcdeftype__array__quatangfield)
                self._arrays[array_handle] = quatangfield
            return quatangfield
        
        @quatangfield.setter
        def quatangfield(self, quatangfield):
            self.quatangfield[...] = quatangfield
        
        @property
        def pcs(self):
            """
            Element pcs ftype=real(kind=sgl) pytype=float
            
            
            Defined at EBSDmod.f90 line 55
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdanglepcdeftype__array__pcs(self._handle)
            if array_handle in self._arrays:
                pcs = self._arrays[array_handle]
            else:
                pcs = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdanglepcdeftype__array__pcs)
                self._arrays[array_handle] = pcs
            return pcs
        
        @pcs.setter
        def pcs(self, pcs):
            self.pcs[...] = pcs
        
        @property
        def deftensors(self):
            """
            Element deftensors ftype=real(kind=sgl) pytype=float
            
            
            Defined at EBSDmod.f90 line 56
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdanglepcdeftype__array__deftensors(self._handle)
            if array_handle in self._arrays:
                deftensors = self._arrays[array_handle]
            else:
                deftensors = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdanglepcdeftype__array__deftensors)
                self._arrays[array_handle] = deftensors
            return deftensors
        
        @deftensors.setter
        def deftensors(self, deftensors):
            self.deftensors[...] = deftensors
        
        @property
        def pcfield(self):
            """
            Element pcfield ftype=real(kind=dbl) pytype=float
            
            
            Defined at EBSDmod.f90 line 57
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdanglepcdeftype__array__pcfield(self._handle)
            if array_handle in self._arrays:
                pcfield = self._arrays[array_handle]
            else:
                pcfield = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdanglepcdeftype__array__pcfield)
                self._arrays[array_handle] = pcfield
            return pcfield
        
        @pcfield.setter
        def pcfield(self, pcfield):
            self.pcfield[...] = pcfield
        
        @property
        def deftensorfield(self):
            """
            Element deftensorfield ftype=real(kind=dbl) pytype=float
            
            
            Defined at EBSDmod.f90 line 58
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdanglepcdeftype__array__deftensorfield(self._handle)
            if array_handle in self._arrays:
                deftensorfield = self._arrays[array_handle]
            else:
                deftensorfield = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdanglepcdeftype__array__deftensorfield)
                self._arrays[array_handle] = deftensorfield
            return deftensorfield
        
        @deftensorfield.setter
        def deftensorfield(self, deftensorfield):
            self.deftensorfield[...] = deftensorfield
        
        def __str__(self):
            ret = ['<ebsdanglepcdeftype>{\n']
            ret.append('    quatang : ')
            ret.append(repr(self.quatang))
            ret.append(',\n    quatangfield : ')
            ret.append(repr(self.quatangfield))
            ret.append(',\n    pcs : ')
            ret.append(repr(self.pcs))
            ret.append(',\n    deftensors : ')
            ret.append(repr(self.deftensors))
            ret.append(',\n    pcfield : ')
            ret.append(repr(self.pcfield))
            ret.append(',\n    deftensorfield : ')
            ret.append(repr(self.deftensorfield))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDLargeAccumType")
    class EBSDLargeAccumType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdlargeaccumtype)
        
        
        Defined at EBSDmod.f90 lines 60-62
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdlargeaccumtype()
            
            
            Defined at EBSDmod.f90 lines 60-62
            
            
            Returns
            -------
            this : Ebsdlargeaccumtype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdlargeaccumtype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdlargeaccumtype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdlargeaccumtype
            
            
            Defined at EBSDmod.f90 lines 60-62
            
            Parameters
            ----------
            this : Ebsdlargeaccumtype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdlargeaccumtype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdlargeaccumtype_finalise(this=self._handle)
        
        @property
        def accum_e(self):
            """
            Element accum_e ftype=integer(kind=irg) pytype=int
            
            
            Defined at EBSDmod.f90 line 61
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdlargeaccumtype__array__accum_e(self._handle)
            if array_handle in self._arrays:
                accum_e = self._arrays[array_handle]
            else:
                accum_e = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdlargeaccumtype__array__accum_e)
                self._arrays[array_handle] = accum_e
            return accum_e
        
        @accum_e.setter
        def accum_e(self, accum_e):
            self.accum_e[...] = accum_e
        
        @property
        def accum_z(self):
            """
            Element accum_z ftype=integer(kind=irg) pytype=int
            
            
            Defined at EBSDmod.f90 line 61
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdlargeaccumtype__array__accum_z(self._handle)
            if array_handle in self._arrays:
                accum_z = self._arrays[array_handle]
            else:
                accum_z = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdlargeaccumtype__array__accum_z)
                self._arrays[array_handle] = accum_z
            return accum_z
        
        @accum_z.setter
        def accum_z(self, accum_z):
            self.accum_z[...] = accum_z
        
        @property
        def accum_e_detector(self):
            """
            Element accum_e_detector ftype=real(kind=sgl) pytype=float
            
            
            Defined at EBSDmod.f90 line 62
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdlargeaccumtype__array__accum_e_detector(self._handle)
            if array_handle in self._arrays:
                accum_e_detector = self._arrays[array_handle]
            else:
                accum_e_detector = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdlargeaccumtype__array__accum_e_detector)
                self._arrays[array_handle] = accum_e_detector
            return accum_e_detector
        
        @accum_e_detector.setter
        def accum_e_detector(self, accum_e_detector):
            self.accum_e_detector[...] = accum_e_detector
        
        def __str__(self):
            ret = ['<ebsdlargeaccumtype>{\n']
            ret.append('    accum_e : ')
            ret.append(repr(self.accum_e))
            ret.append(',\n    accum_z : ')
            ret.append(repr(self.accum_z))
            ret.append(',\n    accum_e_detector : ')
            ret.append(repr(self.accum_e_detector))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDMasterType")
    class EBSDMasterType(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdmastertype)
        
        
        Defined at EBSDmod.f90 lines 64-66
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdmastertype()
            
            
            Defined at EBSDmod.f90 lines 64-66
            
            
            Returns
            -------
            this : Ebsdmastertype
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdmastertype
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdmastertype_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdmastertype
            
            
            Defined at EBSDmod.f90 lines 64-66
            
            Parameters
            ----------
            this : Ebsdmastertype
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdmastertype
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdmastertype_finalise(this=self._handle)
        
        @property
        def mlpnh(self):
            """
            Element mlpnh ftype=real(kind=sgl) pytype=float
            
            
            Defined at EBSDmod.f90 line 65
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmastertype__array__mlpnh(self._handle)
            if array_handle in self._arrays:
                mlpnh = self._arrays[array_handle]
            else:
                mlpnh = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmastertype__array__mlpnh)
                self._arrays[array_handle] = mlpnh
            return mlpnh
        
        @mlpnh.setter
        def mlpnh(self, mlpnh):
            self.mlpnh[...] = mlpnh
        
        @property
        def mlpsh(self):
            """
            Element mlpsh ftype=real(kind=sgl) pytype=float
            
            
            Defined at EBSDmod.f90 line 65
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmastertype__array__mlpsh(self._handle)
            if array_handle in self._arrays:
                mlpsh = self._arrays[array_handle]
            else:
                mlpsh = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmastertype__array__mlpsh)
                self._arrays[array_handle] = mlpsh
            return mlpsh
        
        @mlpsh.setter
        def mlpsh(self, mlpsh):
            self.mlpsh[...] = mlpsh
        
        @property
        def rgx(self):
            """
            Element rgx ftype=real(kind=sgl) pytype=float
            
            
            Defined at EBSDmod.f90 line 66
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmastertype__array__rgx(self._handle)
            if array_handle in self._arrays:
                rgx = self._arrays[array_handle]
            else:
                rgx = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmastertype__array__rgx)
                self._arrays[array_handle] = rgx
            return rgx
        
        @rgx.setter
        def rgx(self, rgx):
            self.rgx[...] = rgx
        
        @property
        def rgy(self):
            """
            Element rgy ftype=real(kind=sgl) pytype=float
            
            
            Defined at EBSDmod.f90 line 66
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmastertype__array__rgy(self._handle)
            if array_handle in self._arrays:
                rgy = self._arrays[array_handle]
            else:
                rgy = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmastertype__array__rgy)
                self._arrays[array_handle] = rgy
            return rgy
        
        @rgy.setter
        def rgy(self, rgy):
            self.rgy[...] = rgy
        
        @property
        def rgz(self):
            """
            Element rgz ftype=real(kind=sgl) pytype=float
            
            
            Defined at EBSDmod.f90 line 66
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdmastertype__array__rgz(self._handle)
            if array_handle in self._arrays:
                rgz = self._arrays[array_handle]
            else:
                rgz = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdmastertype__array__rgz)
                self._arrays[array_handle] = rgz
            return rgz
        
        @rgz.setter
        def rgz(self, rgz):
            self.rgz[...] = rgz
        
        def __str__(self):
            ret = ['<ebsdmastertype>{\n']
            ret.append('    mlpnh : ')
            ret.append(repr(self.mlpnh))
            ret.append(',\n    mlpsh : ')
            ret.append(repr(self.mlpsh))
            ret.append(',\n    rgx : ')
            ret.append(repr(self.rgx))
            ret.append(',\n    rgy : ')
            ret.append(repr(self.rgy))
            ret.append(',\n    rgz : ')
            ret.append(repr(self.rgz))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @f90wrap.runtime.register_class("pyEMsoft.EBSDSEMArray")
    class EBSDSEMArray(f90wrap.runtime.FortranDerivedType):
        """
        Type(name=ebsdsemarray)
        
        
        Defined at EBSDmod.f90 lines 68-70
        
        """
        def __init__(self, handle=None):
            """
            self = Ebsdsemarray()
            
            
            Defined at EBSDmod.f90 lines 68-70
            
            
            Returns
            -------
            this : Ebsdsemarray
            	Object to be constructed
            
            
            Automatically generated constructor for ebsdsemarray
            """
            f90wrap.runtime.FortranDerivedType.__init__(self)
            result = _pyEMsoft.f90wrap_ebsdsemarray_initialise()
            self._handle = result[0] if isinstance(result, tuple) else result
        
        def __del__(self):
            """
            Destructor for class Ebsdsemarray
            
            
            Defined at EBSDmod.f90 lines 68-70
            
            Parameters
            ----------
            this : Ebsdsemarray
            	Object to be destructed
            
            
            Automatically generated destructor for ebsdsemarray
            """
            if self._alloc:
                _pyEMsoft.f90wrap_ebsdsemarray_finalise(this=self._handle)
        
        @property
        def sem_x(self):
            """
            Element sem_x ftype=integer(kind=irg) pytype=int
            
            
            Defined at EBSDmod.f90 line 69
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdsemarray__array__sem_x(self._handle)
            if array_handle in self._arrays:
                sem_x = self._arrays[array_handle]
            else:
                sem_x = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdsemarray__array__sem_x)
                self._arrays[array_handle] = sem_x
            return sem_x
        
        @sem_x.setter
        def sem_x(self, sem_x):
            self.sem_x[...] = sem_x
        
        @property
        def sem_y(self):
            """
            Element sem_y ftype=integer(kind=irg) pytype=int
            
            
            Defined at EBSDmod.f90 line 70
            
            """
            array_ndim, array_type, array_shape, array_handle = \
                _pyEMsoft.f90wrap_ebsdsemarray__array__sem_y(self._handle)
            if array_handle in self._arrays:
                sem_y = self._arrays[array_handle]
            else:
                sem_y = f90wrap.runtime.get_array(f90wrap.runtime.sizeof_fortran_t,
                                        self._handle,
                                        _pyEMsoft.f90wrap_ebsdsemarray__array__sem_y)
                self._arrays[array_handle] = sem_y
            return sem_y
        
        @sem_y.setter
        def sem_y(self, sem_y):
            self.sem_y[...] = sem_y
        
        def __str__(self):
            ret = ['<ebsdsemarray>{\n']
            ret.append('    sem_x : ')
            ret.append(repr(self.sem_x))
            ret.append(',\n    sem_y : ')
            ret.append(repr(self.sem_y))
            ret.append('}')
            return ''.join(ret)
        
        _dt_array_initialisers = []
        
    
    @staticmethod
    def ebsdreadangles(self, angles, verbose=None):
        """
        numangles = ebsdreadangles(self, angles[, verbose])
        
        
        Defined at EBSDmod.f90 lines 90-164
        
        Parameters
        ----------
        enl : Ebsdnamelisttype
        angles : Ebsdangletype
        verbose : bool
        
        Returns
        -------
        numangles : int
        
        ====================================
         get the angular information, either in Euler angles or in quaternions, from a \
             text file
        ====================================
         open the angle file
        """
        numangles = _pyEMsoft.f90wrap_ebsdreadangles(enl=self._handle, \
            angles=angles._handle, verbose=verbose)
        return numangles
    
    @staticmethod
    def ebsdfullreadangles(self, angles, verbose=None):
        """
        numangles = ebsdfullreadangles(self, angles[, verbose])
        
        
        Defined at EBSDmod.f90 lines 179-244
        
        Parameters
        ----------
        enl : Ebsdfullnamelisttype
        angles : Ebsdangletype
        verbose : bool
        
        Returns
        -------
        numangles : int
        
        ====================================
         get the angular information, either in Euler angles or in quaternions, from a \
             text file
        ====================================
         open the angle file
        """
        numangles = _pyEMsoft.f90wrap_ebsdfullreadangles(enl=self._handle, \
            angles=angles._handle, verbose=verbose)
        return numangles
    
    @staticmethod
    def ebsdreadorpcdef(self, orpcdef, verbose=None):
        """
        numangles = ebsdreadorpcdef(self, orpcdef[, verbose])
        
        
        Defined at EBSDmod.f90 lines 259-322
        
        Parameters
        ----------
        enl : Ebsdnamelisttype
        orpcdef : Ebsdanglepcdeftype
        verbose : bool
        
        Returns
        -------
        numangles : int
        
        ====================================
         get the angular information, either in Euler angles or in quaternions, from a \
             text file
        ====================================
         open the angle file
        """
        numangles = _pyEMsoft.f90wrap_ebsdreadorpcdef(enl=self._handle, \
            orpcdef=orpcdef._handle, verbose=verbose)
        return numangles
    
    @staticmethod
    def readebsdmontecarlofile(mcfile, mcnl, ebsdmcdata, getaccume=None, \
        getaccumz=None, getaccumsp=None, getaccumxyz=None, verbose=None):
        """
        hdferr = readebsdmontecarlofile(mcfile, mcnl, ebsdmcdata[, getaccume, getaccumz, \
            getaccumsp, getaccumxyz, verbose])
        
        
        Defined at EBSDmod.f90 lines 340-579
        
        Parameters
        ----------
        mcfile : str
        mcnl : Mcclnamelisttype
        ebsdmcdata : Ebsdmcdatatype
        getaccume : bool
        getaccumz : bool
        getaccumsp : bool
        getaccumxyz : bool
        verbose : bool
        
        Returns
        -------
        hdferr : int
        
        ====================================
         make sure this is a Monte Carlo file
        ====================================
        """
        hdferr = _pyEMsoft.f90wrap_readebsdmontecarlofile(mcfile=mcfile, \
            mcnl=mcnl._handle, ebsdmcdata=ebsdmcdata._handle, getaccume=getaccume, \
            getaccumz=getaccumz, getaccumsp=getaccumsp, getaccumxyz=getaccumxyz, \
            verbose=verbose)
        return hdferr
    
    @staticmethod
    def readebsdmasterpatternfile(mpfile, mpnl, ebsdmpdata, getkevs=None, \
        getmlpnh=None, getmlpsh=None, getmasterspnh=None, getmasterspsh=None, \
        keep4=None, defectmp=None, verbose=None):
        """
        hdferr = readebsdmasterpatternfile(mpfile, mpnl, ebsdmpdata[, getkevs, getmlpnh, \
            getmlpsh, getmasterspnh, getmasterspsh, keep4, defectmp, verbose])
        
        
        Defined at EBSDmod.f90 lines 598-880
        
        Parameters
        ----------
        mpfile : str
        mpnl : Ebsdmasternamelisttype
        ebsdmpdata : Ebsdmpdatatype
        getkevs : bool
        getmlpnh : bool
        getmlpsh : bool
        getmasterspnh : bool
        getmasterspsh : bool
        keep4 : bool
        defectmp : bool
        verbose : bool
        
        Returns
        -------
        hdferr : int
        
        ====================================
         make sure this is a Master Pattern file
        ====================================
        """
        hdferr = _pyEMsoft.f90wrap_readebsdmasterpatternfile(mpfile=mpfile, \
            mpnl=mpnl._handle, ebsdmpdata=ebsdmpdata._handle, getkevs=getkevs, \
            getmlpnh=getmlpnh, getmlpsh=getmlpsh, getmasterspnh=getmasterspnh, \
            getmasterspsh=getmasterspsh, keep4=keep4, defectmp=defectmp, \
            verbose=verbose)
        return hdferr
    
    @staticmethod
    def calcebsdpatternsinglefull(ipar, qu, accum, mlpnh, mlpsh, rgx, rgy, rgz, \
        binned, emin, emax, mask, prefactor, fmatrix=None, removebackground=None, \
        applynoise=None):
        """
        calcebsdpatternsinglefull(ipar, qu, accum, mlpnh, mlpsh, rgx, rgy, rgz, binned, \
            emin, emax, mask, prefactor[, fmatrix, removebackground, applynoise])
        
        
        Defined at EBSDmod.f90 lines 899-1015
        
        Parameters
        ----------
        ipar : int array
        qu : float array
        accum : float array
        mlpnh : float array
        mlpsh : float array
        rgx : float array
        rgy : float array
        rgz : float array
        binned : float array
        emin : int
        emax : int
        mask : float array
        prefactor : float
        fmatrix : float array
        removebackground : str
        applynoise : int
        
        """
        _pyEMsoft.f90wrap_calcebsdpatternsinglefull(ipar=ipar, qu=qu, accum=accum, \
            mlpnh=mlpnh, mlpsh=mlpsh, rgx=rgx, rgy=rgy, rgz=rgz, binned=binned, \
            emin=emin, emax=emax, mask=mask, prefactor=prefactor, fmatrix=fmatrix, \
            removebackground=removebackground, applynoise=applynoise)
    
    @staticmethod
    def calcebsdpatternsinglefullfast(ipar, qu, accum, mlpnh, mlpsh, rgx, rgy, rgz, \
        binned, emin, emax, prefactor):
        """
        calcebsdpatternsinglefullfast(ipar, qu, accum, mlpnh, mlpsh, rgx, rgy, rgz, \
            binned, emin, emax, prefactor)
        
        
        Defined at EBSDmod.f90 lines 1182-1242
        
        Parameters
        ----------
        ipar : int array
        qu : float array
        accum : float array
        mlpnh : float array
        mlpsh : float array
        rgx : float array
        rgy : float array
        rgz : float array
        binned : float array
        emin : int
        emax : int
        prefactor : float
        
        """
        _pyEMsoft.f90wrap_calcebsdpatternsinglefullfast(ipar=ipar, qu=qu, accum=accum, \
            mlpnh=mlpnh, mlpsh=mlpsh, rgx=rgx, rgy=rgy, rgz=rgz, binned=binned, \
            emin=emin, emax=emax, prefactor=prefactor)
    
    @staticmethod
    def ebsdcopymcdata(inputfile, outputfile, h5):
        """
        ebsdcopymcdata(inputfile, outputfile, h5)
        
        
        Defined at EBSDmod.f90 lines 1257-1332
        
        Parameters
        ----------
        inputfile : str
        outputfile : str
        h5 : str
        
        """
        _pyEMsoft.f90wrap_ebsdcopymcdata(inputfile=inputfile, outputfile=outputfile, \
            h5=h5)
    
    @staticmethod
    def ebsdcopympdata(inputfile, outputfile, h5, skipcrystaldata=None):
        """
        ebsdcopympdata(inputfile, outputfile, h5[, skipcrystaldata])
        
        
        Defined at EBSDmod.f90 lines 1348-1430
        
        Parameters
        ----------
        inputfile : str
        outputfile : str
        h5 : str
        skipcrystaldata : bool
        
        """
        _pyEMsoft.f90wrap_ebsdcopympdata(inputfile=inputfile, outputfile=outputfile, \
            h5=h5, skipcrystaldata=skipcrystaldata)
    
    @staticmethod
    def _calcebsdpatterndefect_zint(ipar, qu, mlpnh, mlpsh, rgx, rgy, rgz, binned, \
        prefactor, fmatrix):
        """
        _calcebsdpatterndefect_zint(ipar, qu, mlpnh, mlpsh, rgx, rgy, rgz, binned, \
            prefactor, fmatrix)
        
        
        Defined at EBSDmod.f90 lines 1029-1090
        
        Parameters
        ----------
        ipar : int array
        qu : float array
        mlpnh : float array
        mlpsh : float array
        rgx : float array
        rgy : float array
        rgz : float array
        binned : float array
        prefactor : float
        fmatrix : float array
        
        """
        _pyEMsoft.f90wrap_calcebsdpatterndefect_zint(ipar=ipar, qu=qu, mlpnh=mlpnh, \
            mlpsh=mlpsh, rgx=rgx, rgy=rgy, rgz=rgz, binned=binned, prefactor=prefactor, \
            fmatrix=fmatrix)
    
    @staticmethod
    def _calcebsdpatterndefect_noint(ipar, qu, mlpnh, mlpsh, rgx, rgy, rgz, binned, \
        prefactor, fmatrix):
        """
        _calcebsdpatterndefect_noint(ipar, qu, mlpnh, mlpsh, rgx, rgy, rgz, binned, \
            prefactor, fmatrix)
        
        
        Defined at EBSDmod.f90 lines 1104-1166
        
        Parameters
        ----------
        ipar : int array
        qu : float array
        mlpnh : float array
        mlpsh : float array
        rgx : float array
        rgy : float array
        rgz : float array
        binned : float array
        prefactor : float
        fmatrix : float array
        
        """
        _pyEMsoft.f90wrap_calcebsdpatterndefect_noint(ipar=ipar, qu=qu, mlpnh=mlpnh, \
            mlpsh=mlpsh, rgx=rgx, rgy=rgy, rgz=rgz, binned=binned, prefactor=prefactor, \
            fmatrix=fmatrix)
    
    @staticmethod
    def calcebsdpatterndefect(*args, **kwargs):
        """
        calcebsdpatterndefect(*args, **kwargs)
        
        
        Defined at EBSDmod.f90 lines 72-74
        
        Overloaded interface containing the following procedures:
          _calcebsdpatterndefect_zint
          _calcebsdpatterndefect_noint
        
        """
        for proc in [Ebsdmod._calcebsdpatterndefect_zint, \
            Ebsdmod._calcebsdpatterndefect_noint]:
            try:
                return proc(*args, **kwargs)
            except ValueError:
                continue
    
    _dt_array_initialisers = []
    

ebsdmod = Ebsdmod()

class Patternmod(f90wrap.runtime.FortranModule):
    """
    Module patternmod
    
    
    Defined at patternmod.f90 lines 57-2020
    
    """
    @staticmethod
    def invert_ordering_arrays(npat):
        """
        invert_ordering_arrays(npat)
        
        
        Defined at patternmod.f90 lines 142-164
        
        Parameters
        ----------
        npat : int
        
        """
        _pyEMsoft.f90wrap_invert_ordering_arrays(npat=npat)
    
    @staticmethod
    def openexppatternfile(filename, npat, l, inputtype, recsize, funit, hdfstrings, \
        verbose=None):
        """
        istat = openexppatternfile(filename, npat, l, inputtype, recsize, funit, \
            hdfstrings[, verbose])
        
        
        Defined at patternmod.f90 lines 193-337
        
        Parameters
        ----------
        filename : str
        npat : int
        l : int
        inputtype : str
        recsize : int
        funit : int
        hdfstrings : str array
        verbose : bool
        
        Returns
        -------
        istat : int
        
        """
        istat = _pyEMsoft.f90wrap_openexppatternfile(filename=filename, npat=npat, l=l, \
            inputtype=inputtype, recsize=recsize, funit=funit, hdfstrings=hdfstrings, \
            verbose=verbose)
        return istat
    
    @staticmethod
    def getexppatternrow(iii, wd, patsz, l, dims3, offset3, funit, inputtype, \
        hdfstrings, exppatarray, roi=None, flipy=None):
        """
        getexppatternrow(iii, wd, patsz, l, dims3, offset3, funit, inputtype, \
            hdfstrings, exppatarray[, roi, flipy])
        
        
        Defined at patternmod.f90 lines 369-623
        
        Parameters
        ----------
        iii : int
        wd : int
        patsz : int
        l : int
        dims3 : int array
        offset3 : int array
        funit : int
        inputtype : str
        hdfstrings : str array
        exppatarray : float array
        roi : int array
        flipy : bool
        
        """
        _pyEMsoft.f90wrap_getexppatternrow(iii=iii, wd=wd, patsz=patsz, l=l, \
            dims3=dims3, offset3=offset3, funit=funit, inputtype=inputtype, \
            hdfstrings=hdfstrings, exppatarray=exppatarray, roi=roi, flipy=flipy)
    
    @staticmethod
    def getsingleexppattern(iii, wd, patsz, l, dims3, offset3, funit, inputtype, \
        hdfstrings, exppat):
        """
        getsingleexppattern(iii, wd, patsz, l, dims3, offset3, funit, inputtype, \
            hdfstrings, exppat)
        
        
        Defined at patternmod.f90 lines 648-861
        
        Parameters
        ----------
        iii : int
        wd : int
        patsz : int
        l : int
        dims3 : int array
        offset3 : int array
        funit : int
        inputtype : str
        hdfstrings : str array
        exppat : float array
        
        """
        _pyEMsoft.f90wrap_getsingleexppattern(iii=iii, wd=wd, patsz=patsz, l=l, \
            dims3=dims3, offset3=offset3, funit=funit, inputtype=inputtype, \
            hdfstrings=hdfstrings, exppat=exppat)
    
    @staticmethod
    def getmetadata(self, sem, patterndata, angles, numangles, filename, inputtype, \
        funit, hdfstrings, istat, verbose=None):
        """
        getmetadata(self, sem, patterndata, angles, numangles, filename, inputtype, \
            funit, hdfstrings, istat[, verbose])
        
        
        Defined at patternmod.f90 lines 883-1242
        
        Parameters
        ----------
        enl : Ebsdnamelisttype
        sem : Ebsdsemarray
        patterndata : Ebsddipreviewnamelisttype
        angles : Ebsdangletype
        numangles : int
        filename : str
        inputtype : str
        funit : int
        hdfstrings : str array
        istat : int
        verbose : bool
        
        """
        _pyEMsoft.f90wrap_getmetadata(enl=self._handle, sem=sem._handle, \
            patterndata=patterndata._handle, angles=angles._handle, numangles=numangles, \
            filename=filename, inputtype=inputtype, funit=funit, hdfstrings=hdfstrings, \
            istat=istat, verbose=verbose)
    
    @staticmethod
    def closeexppatternfile(inputtype, funit):
        """
        closeexppatternfile(inputtype, funit)
        
        
        Defined at patternmod.f90 lines 1257-1284
        
        Parameters
        ----------
        inputtype : str
        funit : int
        
        """
        _pyEMsoft.f90wrap_closeexppatternfile(inputtype=inputtype, funit=funit)
    
    @staticmethod
    def patternmod_errormessage(istat):
        """
        patternmod_errormessage(istat)
        
        
        Defined at patternmod.f90 lines 1298-1310
        
        Parameters
        ----------
        istat : int
        
        """
        _pyEMsoft.f90wrap_patternmod_errormessage(istat=istat)
    
    @staticmethod
    def preprocesspatterns(nthreads, inram, ebsdnl, binx, biny, masklin, \
        correctsize, totnumexpt, epatterns=None, exptiq=None):
        """
        preprocesspatterns(nthreads, inram, ebsdnl, binx, biny, masklin, correctsize, \
            totnumexpt[, epatterns, exptiq])
        
        
        Defined at patternmod.f90 lines 1347-1709
        
        Parameters
        ----------
        nthreads : int
        inram : bool
        ebsdnl : Ebsdindexingnamelisttype
        binx : int
        biny : int
        masklin : float array
        correctsize : int
        totnumexpt : int
        epatterns : float array
        exptiq : float array
        
        \
            ===================================================================================
         define a bunch of mostly integer parameters
         for the input patterns we have the following parameters (P for experimental \
             Pattern)
        """
        _pyEMsoft.f90wrap_preprocesspatterns(nthreads=nthreads, inram=inram, \
            ebsdnl=ebsdnl._handle, binx=binx, biny=biny, masklin=masklin, \
            correctsize=correctsize, totnumexpt=totnumexpt, epatterns=epatterns, \
            exptiq=exptiq)
    
    @staticmethod
    def preprocesstkdpatterns(nthreads, inram, tkdnl, binx, biny, masklin, \
        correctsize, totnumexpt, epatterns=None, exptiq=None):
        """
        preprocesstkdpatterns(nthreads, inram, tkdnl, binx, biny, masklin, correctsize, \
            totnumexpt[, epatterns, exptiq])
        
        
        Defined at patternmod.f90 lines 1737-1974
        
        Parameters
        ----------
        nthreads : int
        inram : bool
        tkdnl : Tkdindexingnamelisttype
        binx : int
        biny : int
        masklin : float array
        correctsize : int
        totnumexpt : int
        epatterns : float array
        exptiq : float array
        
        \
            ===================================================================================
         define a bunch of mostly integer parameters
        """
        _pyEMsoft.f90wrap_preprocesstkdpatterns(nthreads=nthreads, inram=inram, \
            tkdnl=tkdnl._handle, binx=binx, biny=biny, masklin=masklin, \
            correctsize=correctsize, totnumexpt=totnumexpt, epatterns=epatterns, \
            exptiq=exptiq)
    
    @staticmethod
    def getemsoftpccoordinates(pctr, vendor, delta, nx, ny):
        """
        emsoftpc = getemsoftpccoordinates(pctr, vendor, delta, nx, ny)
        
        
        Defined at patternmod.f90 lines 1992-2020
        
        Parameters
        ----------
        pctr : float array
        vendor : str
        delta : float
        nx : int
        ny : int
        
        Returns
        -------
        emsoftpc : float array
        
        """
        emsoftpc = _pyEMsoft.f90wrap_getemsoftpccoordinates(pctr=pctr, vendor=vendor, \
            delta=delta, nx=nx, ny=ny)
        return emsoftpc
    
    _dt_array_initialisers = []
    

patternmod = Patternmod()

class Clsupport(f90wrap.runtime.FortranModule):
    """
    Module clsupport
    
    
    Defined at CLsupport.f90 lines 28-745
    
    """
    @staticmethod
    def clquery_platform_info(platform_id):
        """
        clquery_platform_info(platform_id)
        
        
        Defined at CLsupport.f90 lines 75-270
        
        Parameters
        ----------
        platform_id : int
        
        """
        _pyEMsoft.f90wrap_clquery_platform_info(platform_id=platform_id)
    
    @staticmethod
    def clread_source_file(sourcefile):
        """
        csource, slength = clread_source_file(sourcefile)
        
        
        Defined at CLsupport.f90 lines 287-364
        
        Parameters
        ----------
        sourcefile : str
        
        Returns
        -------
        csource : str
        slength : int
        
        """
        csource, slength = _pyEMsoft.f90wrap_clread_source_file(sourcefile=sourcefile)
        return csource, slength
    
    @staticmethod
    def clread_source_file_wrapper(sourcefile):
        """
        csource, slength = clread_source_file_wrapper(sourcefile)
        
        
        Defined at CLsupport.f90 lines 381-418
        
        Parameters
        ----------
        sourcefile : str
        
        Returns
        -------
        csource : str
        slength : int
        
        """
        csource, slength = \
            _pyEMsoft.f90wrap_clread_source_file_wrapper(sourcefile=sourcefile)
        return csource, slength
    
    @staticmethod
    def clerror_check(routine, ierr, nonfatal=None):
        """
        clerror_check(routine, ierr[, nonfatal])
        
        
        Defined at CLsupport.f90 lines 604-745
        
        Parameters
        ----------
        routine : str
        ierr : int
        nonfatal : bool
        
        """
        _pyEMsoft.f90wrap_clerror_check(routine=routine, ierr=ierr, nonfatal=nonfatal)
    
    _dt_array_initialisers = []
    

clsupport = Clsupport()

